Implementation smell,Namespace,Class,File,Method,Description
Long Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CreateProFileContent,The method has 193 lines of code.
Long Method,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The method has 198 lines of code.
Long Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ToggleProjectKind,The method has 140 lines of code.
Long Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,WriteProjectBasicConfigurations,The method has 133 lines of code.
Long Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The method has 246 lines of code.
Long Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileInSubfilter,The method has 106 lines of code.
Complex Method,Digia.Qt4ProjectLib,CxxStreamReader,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CxxStreamReader.cs,ProcessString,Cyclomatic complexity of the method is 25
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CreateProFileContent,Cyclomatic complexity of the method is 16
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CreatePriFileContent,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,AddLibraries,Cyclomatic complexity of the method is 11
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,Cyclomatic complexity of the method is 11
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,Cyclomatic complexity of the method is 10
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFileOption,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,GetFilesInPriFile,Cyclomatic complexity of the method is 11
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,ParseTag,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,Cyclomatic complexity of the method is 16
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,FindQtDirWithTools,Cyclomatic complexity of the method is 17
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,SetDebuggingEnvironment,Cyclomatic complexity of the method is 10
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ReplaceCaseInsensitive,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ToggleProjectKind,Cyclomatic complexity of the method is 31
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetQtDirFromQMakeProject,Cyclomatic complexity of the method is 20
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CleanupQMakeDependencies,Cyclomatic complexity of the method is 9
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CreateProjectTemplateFile,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CxxFileContainsNotCommented,Cyclomatic complexity of the method is 9
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CollapseFilter,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetProjectFiles,Cyclomatic complexity of the method is 23
Complex Method,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,TranslateMachineType,Cyclomatic complexity of the method is 18
Complex Method,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProject,Cyclomatic complexity of the method is 14
Complex Method,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,FindQtDirFromExtension,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,NewCmdLine,Cyclomatic complexity of the method is 12
Complex Method,Digia.Qt4ProjectLib,QMakeConf,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeConf.cs,ParseLine,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,QMake,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,RunQMake,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QrcParser,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QrcParser.cs,parse,Cyclomatic complexity of the method is 16
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddModule,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveModule,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateModules,Cyclomatic complexity of the method is 16
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,HasModule,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,WriteProjectBasicConfigurations,Cyclomatic complexity of the method is 24
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,Cyclomatic complexity of the method is 59
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateRccStep,Cyclomatic complexity of the method is 9
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,Cyclomatic complexity of the method is 22
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileInSubfilter,Cyclomatic complexity of the method is 23
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileToProject,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,EnableSection,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateCompilerIncludePaths,Cyclomatic complexity of the method is 15
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateUicSteps,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetGeneratedMocFile,Cyclomatic complexity of the method is 12
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,Cyclomatic complexity of the method is 15
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,Cyclomatic complexity of the method is 14
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,ChangeQtVersion,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveGeneratedFiles,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,SetTargetMachine,Cyclomatic complexity of the method is 8
Complex Method,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,HasInvalidVersions,Cyclomatic complexity of the method is 16
Complex Method,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,GetDefaultVersion,Cyclomatic complexity of the method is 9
Complex Method,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,GetDefaultX86Version,Cyclomatic complexity of the method is 10
Complex Method,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,GetDefaultX64Version,Cyclomatic complexity of the method is 10
Complex Method,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,MergeVersions,Cyclomatic complexity of the method is 13
Complex Method,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,Cyclomatic complexity of the method is 17
Complex Method,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,cleanUpCache,Cyclomatic complexity of the method is 8
Long Parameter List,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The method has 6 parameters.
Long Parameter List,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The method has 6 parameters.
Long Parameter List,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,NewCmdLine,The method has 7 parameters.
Long Parameter List,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileInSubfilter,The method has 5 parameters.
Long Parameter List,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,CreatePlatform,The method has 5 parameters.
Long Identifier,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The length of the parameter hasDifferentMocFilePerPlatform is 30.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetUsePrecompiledHeader,The length of the statement  "		object obj = compilerType.InvokeMember ("UsePrecompiledHeader"' System.Reflection.BindingFlags.GetProperty' null' compilerObj' null); " is 133.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetDebugInformationFormat,The length of the statement  "		compilerType.InvokeMember ("DebugInformationFormat"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 130.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetRuntimeLibrary,The length of the statement  "		compilerType.InvokeMember ("RuntimeLibrary"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 122.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetOptimization,The length of the statement  "		compilerType.InvokeMember ("Optimization"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 120.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetTreatWChar_tAsBuiltInType,The length of the statement  "		compilerType.InvokeMember ("TreatWChar_tAsBuiltInType"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 133.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetWarningLevel,The length of the statement  "		compilerType.InvokeMember ("WarningLevel"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 120.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetBufferSecurityCheck,The length of the statement  "		compilerType.InvokeMember ("BufferSecurityCheck"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 127.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetPrecompiledHeaderFile,The length of the statement  "		compilerType.InvokeMember ("PrecompiledHeaderFile"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 129.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetPrecompiledHeaderThrough,The length of the statement  "		compilerType.InvokeMember ("PrecompiledHeaderThrough"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 132.
Long Statement,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,SetUsePrecompiledHeader,The length of the statement  "		compilerType.InvokeMember ("UsePrecompiledHeader"' System.Reflection.BindingFlags.SetProperty' null' compilerObj' new object[] { " is 128.
Long Statement,Digia.Qt4ProjectLib,DeploymentToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\DeploymentToolWrapper.cs,Clear,The length of the statement  "	deploymentToolType.InvokeMember ("AdditionalFiles"' System.Reflection.BindingFlags.SetProperty' null' deploymentToolObj' new object[] { " is 135.
Long Statement,Digia.Qt4ProjectLib,DeploymentToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\DeploymentToolWrapper.cs,GetAdditionalFiles,The length of the statement  "		obj = deploymentToolType.InvokeMember ("AdditionalFiles"' System.Reflection.BindingFlags.GetProperty' null' deploymentToolObj' null); " is 133.
Long Statement,Digia.Qt4ProjectLib,DeploymentToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\DeploymentToolWrapper.cs,SetAdditionalFiles,The length of the statement  "	deploymentToolType.InvokeMember ("AdditionalFiles"' System.Reflection.BindingFlags.SetProperty' null' deploymentToolObj' new object[] { " is 135.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,AddIncludePaths,The length of the statement  "		if (!d.ToLower ().StartsWith ("$(qtdir)\\include") && !d.ToLower ().StartsWith (qtDir + "\\include") && !d.ToLower ().EndsWith ("win32-msvc2005")) { " is 148.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,AddLibraries,The length of the statement  "			if (d.Length > 0 && !d.StartsWith ("$(qtdir)\\lib") && !d.StartsWith (qtDir + "\\lib") && !d.StartsWith ("qt") && !d.StartsWith (".\\qt") && d != ".") " is 150.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,The length of the statement  "		if (MessageBox.Show (SR.GetString ("ExportProject_SolutionProFileBuildIn"' slnDir.FullName)' SR.GetString ("ExportSolution")' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 196.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,The length of the statement  "			if (MessageBox.Show (SR.GetString ("ExportProject_ExistsOverwriteQuestion"' slnFileName)' SR.GetString ("ExportSolution")' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) " is 192.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The length of the statement  "		if (MessageBox.Show (SR.GetString ("ExportProject_ExistsOverwriteQuestion"' proFile)' SR.GetString ("ExportSolution")' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) " is 188.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,GetFilesInPriFile,The length of the statement  "		Messages.DisplayErrorMessage (SR.GetString ("ExportProject_ErrorParsingPriFile"' e.Message)' SR.GetString ("ExportProject_CheckFileAndSyntax")); " is 144.
Long Statement,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The length of the statement  "			Messages.PaneMessage (dte' "--- (Importing .pri file) file: " + info.Name + " does not exist in .pri file' move to " + vcproj.ProjectDirectory + "Deleted"); " is 156.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.newButton = new ImageButton (HelperFunctions.GetSharedImage ("Qt4ProjectLib.Images.newitem.png")' HelperFunctions.GetSharedImage ("Qt4ProjectLib.Images.newitem_d.png")); " is 174.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.delButton = new ImageButton (HelperFunctions.GetSharedImage ("Qt4ProjectLib.Images.delete.png")' HelperFunctions.GetSharedImage ("Qt4ProjectLib.Images.delete_d.png")); " is 172.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.projLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 188.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.projListBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 190.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.openCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 191.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.lineBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.createPriFileCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 200.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 185.
Long Statement,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The length of the statement  "	this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,FindQtDirWithTools,The length of the statement  "			if (viProjectQtVersion != null && vi.qtMajor == viProjectQtVersion.qtMajor && vi.qtMinor == viProjectQtVersion.qtMinor) { " is 121.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ToggleProjectKind,The length of the statement  "				librarian.AdditionalLibraryDirectories = ReplaceCaseInsensitive (librarian.AdditionalLibraryDirectories' "$(QTDIR)"' qtDir); " is 124.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ToggleProjectKind,The length of the statement  "			if (ppdefs != null && ppdefs.IndexOf ("QT_PLUGIN") > -1 && ppdefs.IndexOf ("QDESIGNER_EXPORT_WIDGETS") > -1 && ppdefs.IndexOf ("QtDesigner") > -1 && linker.AdditionalDependencies != null && linker.AdditionalDependencies.IndexOf ("QtDesigner") > -1) { " is 250.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetQtDirFromQMakeProject,The length of the statement  "						if (File.Exists (dirName + "\\qtmain.lib") || File.Exists (dirName + "\\qtmaind.lib") || File.Exists (dirName + "\\QtCore4.lib") || File.Exists (dirName + "\\QtCored4.lib")) { " is 175.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,SetEnvironmentVariableEx,The length of the statement  "		EnvironmentPermission environmentPermission = new EnvironmentPermission (EnvironmentPermissionAccess.Write' environmentVariable); " is 129.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsFilterSelected,The length of the statement  "				if (filt != null && filt.UniqueIdentifier != null && filt.UniqueIdentifier.ToLower () == filter.UniqueIdentifier.ToLower () && HelperFunctions.IsQt4Project (GetSelectedQtProject (dteObject))) " is 191.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The length of the statement  "		if (checkExitCode && application.ToLower ().IndexOf ("lupdate.exe") > -1 || checkExitCode && application.ToLower ().IndexOf ("lrelease.exe") > -1) { " is 148.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The length of the statement  "			System.Threading.Thread errorThread = new System.Threading.Thread (new System.Threading.ParameterizedThreadStart (ReadQtStandardError)); " is 136.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The length of the statement  "				Messages.PaneMessage (project.DTE' "--- (" + HelperFunctions.RemoveFileNameExtension (info) + ") " + file + ": Exit Code: " + exitCode); " is 136.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,DisplayErrorMessage,The length of the statement  "			Messages.DisplayErrorMessage (SR.GetString ("Helpers_ExitError"' proc.ExitCode.ToString ()) + "\r\n" + proc.errorString (proc.ExitCode)' proc.solutionString (proc.ExitCode)); " is 174.
Long Statement,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,DisplayErrorMessage,The length of the statement  "			Messages.DisplayErrorMessage (SR.GetString ("Helpers_ExitError"' proc.ExitCode.ToString ()) + "\r\n" + proc.errorString (proc.ExitCode)); " is 137.
Long Statement,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProFile,The length of the statement  "		if ((!string.IsNullOrEmpty (dteObject.Solution.FullName)) || (HelperFunctions.ProjectsInSolution (dteObject).Count > 0)) { " is 122.
Long Statement,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProFile,The length of the statement  "			if (MessageBox.Show (SR.GetString ("ExportProject_SubdirsProfileSolutionClose")' SR.GetString ("OpenSolution")' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.OK) " is 184.
Long Statement,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProject,The length of the statement  "						if (compiler.GetPreprocessorDefinitions ().IndexOf ("QT_PLUGIN") > -1 && compiler.GetPreprocessorDefinitions ().IndexOf ("QDESIGNER_EXPORT_WIDGETS") > -1 && compiler.GetAdditionalIncludeDirectories ().IndexOf ("QtDesigner") > -1 && linker.AdditionalDependencies.IndexOf ("QtDesigner") > -1) { " is 292.
Long Statement,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RunQmake,The length of the statement  "	if (!VCInfo.Exists || DialogResult.Yes == MessageBox.Show (SR.GetString ("ExportProject_ProjectExistsRegenerateOrReuse"' VCInfo.Name)' SR.GetString ("ProjectExists")' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 219.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayCriticalErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + ExceptionToString (e)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayCriticalErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + MessageToString (msg)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + ExceptionToString (e) + SolutionString + solution' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 151.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + MessageToString (msg) + SolutionString + solution' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 151.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + ExceptionToString (e)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayErrorMessage,The length of the statement  "	MessageBox.Show (ErrorString + MessageToString (msg)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayWarningMessage,The length of the statement  "	MessageBox.Show (WarningString + ExceptionToString (e) + SolutionString + solution' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 155.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayWarningMessage,The length of the statement  "	MessageBox.Show (WarningString + MessageToString (msg) + SolutionString + solution' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 155.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayWarningMessage,The length of the statement  "	MessageBox.Show (WarningString + ExceptionToString (e)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 127.
Long Statement,Digia.Qt4ProjectLib,Messages,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\Messages.cs,DisplayWarningMessage,The length of the statement  "	MessageBox.Show (WarningString + MessageToString (msg)' Resources.msgBoxCaption' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 127.
Long Statement,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,NewCmdLine,The length of the statement  "			newCmdLine = newCmdLine + "\"" + Resources.moc4Command + "\" " + mocOptions + " \"" + inputMocFile + "\" -o \"" + outputFile + "\"" + " " + defines + " " + includes; " is 165.
Long Statement,Digia.Qt4ProjectLib,QMake,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,RunQMake,The length of the statement  "	qmakeArgs += @"QMAKE_LIBDIR=$(QTDIR)\lib " + @"QMAKE_MOC=$(QTDIR)\bin\moc.exe " + @"QMAKE_QMAKE=$(QTDIR)\bin\qmake.exe"; " is 120.
Long Statement,Digia.Qt4ProjectLib,QMake,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,RunQMake,The length of the statement  "		InvokeExternalTarget (PaneMessageDataEvent' "--- (qmake) : Working Directory: " + qmakeProcess.StartInfo.WorkingDirectory); " is 123.
Long Statement,Digia.Qt4ProjectLib,QMake,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,RunQMake,The length of the statement  "		InvokeExternalTarget (PaneMessageDataEvent' "--- (qmake) : Arguments: " + qmakeProcess.StartInfo.Arguments + Environment.NewLine); " is 130.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddDefine,The length of the statement  "		if (((!IsDebugConfiguration (config)) && ((bldConf & BuildConfig.Release) != 0)) || ((IsDebugConfiguration (config)) && ((bldConf & BuildConfig.Debug) != 0))) { " is 160.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,IsDebugConfiguration,The length of the statement  "	if (compiler != null && (compiler.RuntimeLibrary == runtimeLibraryOption.rtMultiThreadedDebug || compiler.RuntimeLibrary == runtimeLibraryOption.rtMultiThreadedDebugDLL)) " is 170.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The length of the statement  "			string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\""; " is 157.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,IsMoccedFileIncluded,The length of the statement  "					if (strLine.IndexOf ("#include \"moc_" + baseName + ".cpp\"") != -1 || strLine.IndexOf ("#include <moc_" + baseName + ".cpp>") != -1) { " is 135.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The length of the statement  "				tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' pattern' ""' RegexOptions.Multiline | RegexOptions.IgnoreCase); " is 138.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The length of the statement  "				tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"\s*;\s*;\s*"' ";"' RegexOptions.Multiline); " is 120.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The length of the statement  "				tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"(^\s*;|\s*;\s*$)"' ""' RegexOptions.Multiline); " is 124.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AdjustWhitespace,The length of the statement  "	if (!HelperFunctions.HasSourceFileExtension (file) && !HelperFunctions.HasHeaderFileExtension (file) && !file.EndsWith (".ui")) " is 127.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,CopyFileToFolder,The length of the statement  "		if (DialogResult.No == MessageBox.Show (SR.GetString ("QtProject_FileExistsInProjectFolder"' destName)' Resources.msgBoxCaption' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 181.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,The length of the statement  "			string newCmdLine = mocCmdChecker.NewCmdLine (tool.CommandLine' GetIncludes (cppConfig)' GetDefines (cppConfig)' QtVSIPSettings.GetMocOptions (envPro)' srcMocFile.RelativePath' pchParameters' outputFileName); " is 208.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The length of the statement  "		Messages.PaneMessage (dte' "Moc step update failed for " + s + ". Reason: Could not determine source file for moccing."); " is 121.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The length of the statement  "	Messages.PaneMessage (dte' "\r\n=== Moc steps updated. Successful: " + orgFiles.Count.ToString () + "   Failed: " + abandonedMocFiles.Count.ToString () + " ===\r\n"); " is 166.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,Clean,The length of the statement  "			if (envPro.FullName.Contains (context.ProjectName) && context.PlatformName == envPro.ConfigurationManager.ActiveConfiguration.PlatformName) " is 139.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,ChangeQtVersion,The length of the statement  "	if (vsPlatformNameOld != vsPlatformNameNew || viOld.qtPatch != viNew.qtPatch || viOld.qtMinor != viNew.qtMinor || viOld.qtMajor != viNew.qtMajor) { " is 147.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddPlatformToVCProj,The length of the statement  "	XmlNodeList cfgList = configurations.SelectNodes ("Configuration[@Name='Debug|" + oldPlatformName + "'] | " + "Configuration[@Name='Release|" + oldPlatformName + "']"); " is 168.
Long Statement,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddPlatformToVCProj,The length of the statement  "	XmlNodeList fileCfgList = vsProj.SelectNodes (fileCfgPath + "[@Name='Debug|" + oldPlatformName + "'] | " + fileCfgPath + "[@Name='Release|" + oldPlatformName + "']"); " is 166.
Long Statement,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,HasProjectQtVersion,The length of the statement  "	if (project.Globals.get_VariablePersists ("Qt4Version " + platform) || project.Globals.get_VariablePersists ("Qt4Version") || project.Globals.get_VariablePersists ("QtVersion " + platform) || project.Globals.get_VariablePersists ("QtVersion")) " is 243.
Long Statement,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,HasInvalidVersions,The length of the statement  "				if (defaultQtVersion.vi.qtMajor < v.vi.qtMajor || (defaultQtVersion.vi.qtMajor == v.vi.qtMajor && (defaultQtVersion.vi.qtMinor < v.vi.qtMinor || (defaultQtVersion.vi.qtMinor == v.vi.qtMinor && defaultQtVersion.vi.qtPatch < v.vi.qtPatch)))) { " is 241.
Long Statement,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The length of the statement  "					if ((type == Resources.mocDirKeyword && (HelperFunctions.HasHeaderFileExtension (vcfile.Name) || vcfile.Name.ToLower ().EndsWith (".moc"))) || (type == Resources.uicDirKeyword && vcfile.Name.ToLower ().EndsWith (".ui")) || (type == Resources.rccDirKeyword && vcfile.Name.ToLower ().EndsWith (".qrc"))) { " is 303.
Long Statement,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The length of the statement  "							if (tool != null && (tool.CommandLine.ToLower ().IndexOf ("moc.exe") != -1 || (tool.CommandLine.ToLower ().IndexOf ("uic.exe") != -1) || (tool.CommandLine.ToLower ().IndexOf ("rcc.exe") != -1))) " is 194.
Complex Conditional,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,AddLibraries,The conditional expression  "d.Length > 0 && !d.StartsWith ("$(qtdir)\\lib") && !d.StartsWith (qtDir + "\\lib") && !d.StartsWith ("qt") && !d.StartsWith (".\\qt") && d != ".""  is complex.
Complex Conditional,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,NormalizeRelativeFilePath,The conditional expression  "path != "." && !IsAbsoluteFilePath (path) && !path.StartsWith (".\\") && !path.StartsWith ("$")"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ToggleProjectKind,The conditional expression  "ppdefs != null && ppdefs.IndexOf ("QT_PLUGIN") > -1 && ppdefs.IndexOf ("QDESIGNER_EXPORT_WIDGETS") > -1 && ppdefs.IndexOf ("QtDesigner") > -1 && linker.AdditionalDependencies != null && linker.AdditionalDependencies.IndexOf ("QtDesigner") > -1"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetQtDirFromQMakeProject,The conditional expression  "File.Exists (dirName + "\\qtmain.lib") || File.Exists (dirName + "\\qtmaind.lib") || File.Exists (dirName + "\\QtCore4.lib") || File.Exists (dirName + "\\QtCored4.lib")"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsFilterSelected,The conditional expression  "filt != null && filt.UniqueIdentifier != null && filt.UniqueIdentifier.ToLower () == filter.UniqueIdentifier.ToLower () && HelperFunctions.IsQt4Project (GetSelectedQtProject (dteObject))"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The conditional expression  "checkExitCode && application.ToLower ().IndexOf ("lupdate.exe") > -1 || checkExitCode && application.ToLower ().IndexOf ("lrelease.exe") > -1"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProject,The conditional expression  "compiler.GetPreprocessorDefinitions ().IndexOf ("QT_PLUGIN") > -1 && compiler.GetPreprocessorDefinitions ().IndexOf ("QDESIGNER_EXPORT_WIDGETS") > -1 && compiler.GetAdditionalIncludeDirectories ().IndexOf ("QtDesigner") > -1 && linker.AdditionalDependencies.IndexOf ("QtDesigner") > -1"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddDefine,The conditional expression  "((!IsDebugConfiguration (config)) && ((bldConf & BuildConfig.Release) != 0)) || ((IsDebugConfiguration (config)) && ((bldConf & BuildConfig.Debug) != 0))"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The conditional expression  "(a > -1 && a < end) || (end < 0 && a > -1)"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The conditional expression  "(a > -1 && a < end) || (end < 0 && a > -1)"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,ChangeQtVersion,The conditional expression  "vsPlatformNameOld != vsPlatformNameNew || viOld.qtPatch != viNew.qtPatch || viOld.qtMinor != viNew.qtMinor || viOld.qtMajor != viNew.qtMajor"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,HasProjectQtVersion,The conditional expression  "project.Globals.get_VariablePersists ("Qt4Version " + platform) || project.Globals.get_VariablePersists ("Qt4Version") || project.Globals.get_VariablePersists ("QtVersion " + platform) || project.Globals.get_VariablePersists ("QtVersion")"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtVersionManager,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVersionManager.cs,HasInvalidVersions,The conditional expression  "defaultQtVersion.vi.qtMajor < v.vi.qtMajor || (defaultQtVersion.vi.qtMajor == v.vi.qtMajor && (defaultQtVersion.vi.qtMinor < v.vi.qtMinor || (defaultQtVersion.vi.qtMinor == v.vi.qtMinor && defaultQtVersion.vi.qtPatch < v.vi.qtPatch)))"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The conditional expression  "(type == Resources.mocDirKeyword && (HelperFunctions.HasHeaderFileExtension (vcfile.Name) || vcfile.Name.ToLower ().EndsWith (".moc"))) || (type == Resources.uicDirKeyword && vcfile.Name.ToLower ().EndsWith (".ui")) || (type == Resources.rccDirKeyword && vcfile.Name.ToLower ().EndsWith (".qrc"))"  is complex.
Complex Conditional,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The conditional expression  "tool != null && (tool.CommandLine.ToLower ().IndexOf ("moc.exe") != -1 || (tool.CommandLine.ToLower ().IndexOf ("uic.exe") != -1) || (tool.CommandLine.ToLower ().IndexOf ("rcc.exe") != -1))"  is complex.
Empty Catch Block,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,Create,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,Create,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,Create,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,DeploymentToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\DeploymentToolWrapper.cs,Create,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CreateProFileSolution,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ReplaceInCustomBuildTools,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetQtDirFromQMakeProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsQt4Project,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsQt5Project,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsVcProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsQMakeProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsFilterSelected,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetSelectedProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ProjectsInSolution,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,addSubProjects,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ImportProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,ApplyPostImportSteps,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QMake,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InvokeExternalTarget,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtConfig,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtConfig.cs,Init,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetIncludesFromCompilerTool,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateRccStep,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetFileFromFilter,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileInSubfilter,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddFileInSubfilter,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveFileFromFilter,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveFileFromFilter,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,Finish,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,IsDesignerPluginProject,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UsesPrecompiledHeaders,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetPrecompiledHeaderThrough,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetPrecompiledHeaderFile,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemovePlatform,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,FindProjectHierarchyItem,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetOption,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetDirectory,The method has an empty catch block.
Empty Catch Block,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,cleanUpCache,The method has an empty catch block.
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: foreach (string include in includes) {  	string incl = include;  	if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  		incl = incl.Remove (0' 2);  		incl = incl.Remove (incl.Length - 2' 2);  	}  	fixedincludes [i++] = incl;  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: foreach (string include in includes) {  	string incl = include;  	if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  		incl = incl.Remove (0' 2);  		incl = incl.Remove (incl.Length - 2' 2);  	}  	fixedincludes [i++] = incl;  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: foreach (string include in includes) {  	string incl = include;  	if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  		incl = incl.Remove (0' 2);  		incl = incl.Remove (incl.Length - 2' 2);  	}  	fixedincludes [i++] = incl;  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  	incl = incl.Remove (0' 2);  	incl = incl.Remove (incl.Length - 2' 2);  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  	incl = incl.Remove (0' 2);  	incl = incl.Remove (incl.Length - 2' 2);  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: if (incl.StartsWith ("\\\"") && incl.EndsWith ("\\\"")) {  	incl = incl.Remove (0' 2);  	incl = incl.Remove (incl.Length - 2' 2);  }  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: incl = incl.Remove (0' 2);  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: incl = incl.Remove (incl.Length - 2' 2);  
Magic Number,Digia.Qt4ProjectLib,CompilerToolWrapper,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CompilerToolWrapper.cs,GetAdditionalIncludeDirectoriesList,The following statement contains a magic number: incl = incl.Remove (incl.Length - 2' 2);  
Magic Number,Digia.Qt4ProjectLib,CxxStreamReader,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CxxStreamReader.cs,ProcessString,The following statement contains a magic number: switch (state) {  case State.Normal:  	{  		string lineCopy = line;  		line = "";  		for (int i = 0' j = 1; i < lineCopy.Length; ++i' ++j) {  			if (lineCopy [i] == '/' && j < lineCopy.Length) {  				if (lineCopy [j] == '*') {  					// C style comment detected  					int endIdx = lineCopy.IndexOf ("*/"' j + 1);  					if (endIdx >= 0) {  						i = endIdx + 1;  						j = i + 1;  						continue;  					}  					else {  						state = State.Comment;  						break;  					}  				}  				else if (lineCopy [j] == '/') {  					// C++ style comment detected  					break;  				}  			}  			else if (lineCopy [i] == '"') {  				// start of a string detected  				int endIdx = j - 1;  				do {  					endIdx = lineCopy.IndexOf ('"'' endIdx + 1);  				}  				while (endIdx >= 0 && lineCopy [endIdx - 1] == '\\');  				if (endIdx < 0) {  					if (lineCopy.EndsWith ("\\")) {  						partialLine = line;  						if (!removeStrings)  							partialLine += lineCopy.Substring (i);  						state = State.String;  					}  					else {  						state = State.Normal;  					}  					line = "";  					break;  				}  				else {  					if (!removeStrings)  						line += lineCopy.Substring (i' endIdx - i + 1);  					i = endIdx;  					j = i + 1;  					continue;  				}  			}  			line += lineCopy [i];  		}  	}  	break;  case State.Comment:  	{  		int idx = line.IndexOf ("*/");  		if (idx >= 0) {  			state = State.Normal;  			line = line.Substring (idx + 2);  			break;  		}  		else {  			line = "";  			// skip line  		}  	}  	break;  case State.String:  	{  		string lineCopy = line;  		line = "";  		int endIdx = -1;  		do {  			endIdx = lineCopy.IndexOf ('"'' endIdx + 1);  		}  		while (endIdx >= 0 && lineCopy [endIdx - 1] == '\\');  		if (endIdx < 0) {  			if (!removeStrings)  				partialLine += lineCopy;  		}  		else {  			state = State.Normal;  			line = partialLine;  			if (!removeStrings)  				line += lineCopy.Substring (0' endIdx + 1);  			line += ProcessString (lineCopy.Substring (endIdx + 1)' removeStrings);  		}  	}  	break;  }  
Magic Number,Digia.Qt4ProjectLib,CxxStreamReader,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CxxStreamReader.cs,ProcessString,The following statement contains a magic number: if (idx >= 0) {  	state = State.Normal;  	line = line.Substring (idx + 2);  	break;  }  else {  	line = "";  	// skip line  }  
Magic Number,Digia.Qt4ProjectLib,CxxStreamReader,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CxxStreamReader.cs,ProcessString,The following statement contains a magic number: line = line.Substring (idx + 2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,The following statement contains a magic number: if (createSlnFile) {  	StreamWriter sw;  	string slnName = HelperFunctions.RemoveFileNameExtension (fi);  	string slnFileName = slnDir.FullName + "\\" + slnName + ".pro";  	if (File.Exists (slnFileName))  		if (MessageBox.Show (SR.GetString ("ExportProject_ExistsOverwriteQuestion"' slnFileName)' SR.GetString ("ExportSolution")' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No)  			return;  	try {  		sw = new StreamWriter (File.Create (slnFileName));  	}  	catch (System.Exception e) {  		Messages.DisplayErrorMessage (e);  		return;  	}  	ProFileContent content = new ProFileContent (null);  	ProFileOption option = new ProFileOption ("TEMPLATE");  	option.NewOption = null;  	// just one option...  	option.AssignSymbol = ProFileOption.AssignType.AT_Equals;  	content.Options.Add (option);  	option.List.Add ("subdirs");  	option = new ProFileOption ("SUBDIRS");  	option.ShortComment = "#Projects";  	content.Options.Add (option);  	string proFullName' relativePath;  	char[] trimChars =  {  		'\\'  	};  	foreach (ProFileContent profile in prosln.ProFiles) {  		FileInfo fiProject = new FileInfo (profile.Project.ProjectFile);  		string projectBaseName = HelperFunctions.RemoveFileNameExtension (fiProject);  		proFullName = profile.Project.ProjectDirectory + projectBaseName + ".pro";  		relativePath = HelperFunctions.GetRelativePath (slnDir.FullName' proFullName);  		relativePath = relativePath.TrimEnd (trimChars);  		relativePath = HelperFunctions.ChangePathFormat (relativePath.Remove (0' 2));  		option.List.Add (relativePath);  	}  	using (sw) {  		sw.WriteLine (Resources.exportSolutionHeader);  		for (int i = 0; i < content.Options.Count; i++) {  			WriteProFileOption (sw' (ProFileOption)content.Options [i]);  		}  	}  	if (openFile)  		dteObject.OpenFile (EnvDTE.Constants.vsViewKindTextView' slnFileName).Activate ();  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,The following statement contains a magic number: foreach (ProFileContent profile in prosln.ProFiles) {  	FileInfo fiProject = new FileInfo (profile.Project.ProjectFile);  	string projectBaseName = HelperFunctions.RemoveFileNameExtension (fiProject);  	proFullName = profile.Project.ProjectDirectory + projectBaseName + ".pro";  	relativePath = HelperFunctions.GetRelativePath (slnDir.FullName' proFullName);  	relativePath = relativePath.TrimEnd (trimChars);  	relativePath = HelperFunctions.ChangePathFormat (relativePath.Remove (0' 2));  	option.List.Add (relativePath);  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProSolution,The following statement contains a magic number: relativePath = HelperFunctions.ChangePathFormat (relativePath.Remove (0' 2));  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The following statement contains a magic number: if (!string.IsNullOrEmpty (priFileToInclude)) {  	foreach (ProFileOption option in content.Options) {  		if (option.Name == "include" && !option.List.Contains (priFileToInclude)) {  			string relativePriPath = HelperFunctions.GetRelativePath (Path.GetDirectoryName (proFile)' priFileToInclude);  			if (relativePriPath.StartsWith (".\\"))  				relativePriPath = relativePriPath.Substring (2);  			relativePriPath = HelperFunctions.ChangePathFormat (relativePriPath);  			option.List.Add (relativePriPath);  			break;  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The following statement contains a magic number: foreach (ProFileOption option in content.Options) {  	if (option.Name == "include" && !option.List.Contains (priFileToInclude)) {  		string relativePriPath = HelperFunctions.GetRelativePath (Path.GetDirectoryName (proFile)' priFileToInclude);  		if (relativePriPath.StartsWith (".\\"))  			relativePriPath = relativePriPath.Substring (2);  		relativePriPath = HelperFunctions.ChangePathFormat (relativePriPath);  		option.List.Add (relativePriPath);  		break;  	}  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The following statement contains a magic number: if (option.Name == "include" && !option.List.Contains (priFileToInclude)) {  	string relativePriPath = HelperFunctions.GetRelativePath (Path.GetDirectoryName (proFile)' priFileToInclude);  	if (relativePriPath.StartsWith (".\\"))  		relativePriPath = relativePriPath.Substring (2);  	relativePriPath = HelperFunctions.ChangePathFormat (relativePriPath);  	option.List.Add (relativePriPath);  	break;  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The following statement contains a magic number: if (relativePriPath.StartsWith (".\\"))  	relativePriPath = relativePriPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFile,The following statement contains a magic number: relativePriPath = relativePriPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,BestMatch,The following statement contains a magic number: if (inPath.StartsWith (".\\"))  	inPath = inPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,BestMatch,The following statement contains a magic number: inPath = inPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CollectFilters,The following statement contains a magic number: if (newPath.StartsWith (".\\"))  	newPath = newPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,CollectFilters,The following statement contains a magic number: newPath = newPath.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The following statement contains a magic number: foreach (string file in cmpPriFiles) {  	if (cmpProjFiles.IndexOf (file) > -1)  		continue;  	if (flat) {  		vcproj.AddFile (file);  		// the file is not in the project  	}  	else {  		string path = HelperFunctions.GetRelativePath (vcproj.ProjectDirectory' file);  		if (path.StartsWith (".\\"))  			path = path.Substring (2);  		int i = path.LastIndexOf ('\\');  		if (i > -1)  			path = path.Substring (0' i);  		else  			path = ".";  		if (pathFilterTable.Contains (path)) {  			VCFilter f = pathFilterTable [path] as VCFilter;  			f.AddFile (file);  			continue;  		}  		VCFilter filter = BestMatch (path' pathFilterTable);  		string filterDir = filterPathTable [filter] as string;  		string name = path;  		if (!name.StartsWith ("..") && name.StartsWith (filterDir))  			name = name.Substring (filterDir.Length + 1);  		VCFilter newFilter = filter.AddFilter (name) as VCFilter;  		newFilter.AddFile (file);  		filterPathTable.Add (newFilter' path);  		pathFilterTable.Add (path' newFilter);  	}  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The following statement contains a magic number: if (flat) {  	vcproj.AddFile (file);  	// the file is not in the project  }  else {  	string path = HelperFunctions.GetRelativePath (vcproj.ProjectDirectory' file);  	if (path.StartsWith (".\\"))  		path = path.Substring (2);  	int i = path.LastIndexOf ('\\');  	if (i > -1)  		path = path.Substring (0' i);  	else  		path = ".";  	if (pathFilterTable.Contains (path)) {  		VCFilter f = pathFilterTable [path] as VCFilter;  		f.AddFile (file);  		continue;  	}  	VCFilter filter = BestMatch (path' pathFilterTable);  	string filterDir = filterPathTable [filter] as string;  	string name = path;  	if (!name.StartsWith ("..") && name.StartsWith (filterDir))  		name = name.Substring (filterDir.Length + 1);  	VCFilter newFilter = filter.AddFilter (name) as VCFilter;  	newFilter.AddFile (file);  	filterPathTable.Add (newFilter' path);  	pathFilterTable.Add (path' newFilter);  }  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The following statement contains a magic number: if (path.StartsWith (".\\"))  	path = path.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,SyncIncludeFiles,The following statement contains a magic number: path = path.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: if (SR.LanguageName == "de")  	this.Size = new Size (470' 300);  else  	this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: if (SR.LanguageName == "de")  	this.Size = new Size (470' 300);  else  	this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: if (SR.LanguageName == "de")  	this.Size = new Size (470' 300);  else  	this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: if (SR.LanguageName == "de")  	this.Size = new Size (470' 300);  else  	this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: this.Size = new Size (470' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: this.Size = new Size (470' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,ExportProjectDialog,The following statement contains a magic number: this.Size = new Size (400' 300);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (352' 232);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (352' 232);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (72' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (72' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 5;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (272' 232);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (272' 232);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (72' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (72' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 4;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projLabel.Location = new System.Drawing.Point (0' 8);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projLabel.Size = new System.Drawing.Size (200' 16);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projLabel.Size = new System.Drawing.Size (200' 16);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projLabel.TabIndex = 3;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionListBox.Location = new System.Drawing.Point (0' 72);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionListBox.Size = new System.Drawing.Size (200' 82);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionListBox.Size = new System.Drawing.Size (200' 82);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionListBox.TabIndex = 3;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionLabel.Location = new System.Drawing.Point (0' 8);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionLabel.Size = new System.Drawing.Size (200' 16);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionLabel.Size = new System.Drawing.Size (200' 16);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionLabel.TabIndex = 5;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionComboBox.Location = new System.Drawing.Point (0' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionComboBox.Size = new System.Drawing.Size (200' 21);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionComboBox.Size = new System.Drawing.Size (200' 21);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionComboBox.TabIndex = 2;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.commentLabel.Location = new System.Drawing.Point (0' 160);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.commentLabel.Size = new System.Drawing.Size (200' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.commentLabel.Size = new System.Drawing.Size (200' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.commentLabel.TabIndex = 6;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionTextBox.Location = new System.Drawing.Point (0' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionTextBox.Size = new System.Drawing.Size (136' 20);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionTextBox.Size = new System.Drawing.Size (136' 20);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.optionTextBox.TabIndex = 7;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projListBox.Location = new System.Drawing.Point (0' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projListBox.Size = new System.Drawing.Size (200' 124);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projListBox.Size = new System.Drawing.Size (200' 124);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.projListBox.TabIndex = 10;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.openCheckBox.Location = new System.Drawing.Point (0' 184);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.openCheckBox.Size = new System.Drawing.Size (208' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.openCheckBox.Size = new System.Drawing.Size (208' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.openCheckBox.TabIndex = 11;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.lineBox.Location = new System.Drawing.Point (-8' 216);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.lineBox.Location = new System.Drawing.Point (-8' 216);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.lineBox.Size = new System.Drawing.Size (536' 8);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.lineBox.Size = new System.Drawing.Size (536' 8);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.lineBox.TabIndex = 12;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.createPriFileCheckBox.Location = new System.Drawing.Point (0' 160);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.createPriFileCheckBox.Size = new System.Drawing.Size (200' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.createPriFileCheckBox.Size = new System.Drawing.Size (200' 24);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.createPriFileCheckBox.TabIndex = 13;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (8' 0);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (200' 208);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (200' 208);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 14;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (216' 0);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (208' 208);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (208' 208);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 15;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.newButton.Location = new System.Drawing.Point (144' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.newButton.Location = new System.Drawing.Point (144' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.newButton.Size = new System.Drawing.Size (24' 23);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.newButton.Size = new System.Drawing.Size (24' 23);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.newButton.TabIndex = 8;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.delButton.Location = new System.Drawing.Point (176' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.delButton.Location = new System.Drawing.Point (176' 48);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.delButton.Size = new System.Drawing.Size (24' 23);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.delButton.Size = new System.Drawing.Size (24' 23);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.delButton.TabIndex = 9;  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (432' 262);  
Magic Number,Digia.Qt4ProjectLib,ExportProjectDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ExportProjectDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (432' 262);  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsAbsoluteFilePath,The following statement contains a magic number: if (path.Length >= 2 && path [1] == ':')  	return true;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ReplaceDirectory,The following statement contains a magic number: for (int i = 0; i < paths.Count; ++i) {  	string dirName = paths [i];  	if (dirName.StartsWith ("\"") && dirName.EndsWith ("\"")) {  		dirName = dirName.Substring (1' dirName.Length - 2);  	}  	if (!Path.IsPathRooted (dirName)) {  		// convert to absolute path  		dirName = Path.Combine (Path.GetDirectoryName (project.FullName)' dirName);  		dirName = Path.GetFullPath (dirName);  		string alteredDirName = ReplaceCaseInsensitive (dirName' oldDirectory' replacement);  		if (alteredDirName == dirName)  			continue;  		dirName = alteredDirName;  	}  	else {  		dirName = ReplaceCaseInsensitive (dirName' oldDirectory' replacement);  	}  	paths [i] = dirName;  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ReplaceDirectory,The following statement contains a magic number: if (dirName.StartsWith ("\"") && dirName.EndsWith ("\"")) {  	dirName = dirName.Substring (1' dirName.Length - 2);  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,ReplaceDirectory,The following statement contains a magic number: dirName = dirName.Substring (1' dirName.Length - 2);  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CreateProjectTemplateFile,The following statement contains a magic number: try {  	if (SR.LanguageName == "ja")  		sw = new StreamWriter (tmpFile' false' System.Text.Encoding.GetEncoding (932));  	else  		sw = new StreamWriter (tmpFile' false);  }  catch (System.Exception e) {  	Messages.DisplayErrorMessage (e' SR.GetString ("HelperFunctions_TryCreatingNewProject"));  	return null;  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CreateProjectTemplateFile,The following statement contains a magic number: if (SR.LanguageName == "ja")  	sw = new StreamWriter (tmpFile' false' System.Text.Encoding.GetEncoding (932));  else  	sw = new StreamWriter (tmpFile' false);  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,CreateProjectTemplateFile,The following statement contains a magic number: sw = new StreamWriter (tmpFile' false' System.Text.Encoding.GetEncoding (932));  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsFilterSelected,The following statement contains a magic number: try {  	System.Guid guid = new Guid ("{6bb5f8f0-4483-11d3-8bcf-00c04f8ec28c}");  	EnvDTE.SelectedItems itms = dteObject.SelectedItems;  	foreach (EnvDTE.SelectedItem selItem in itms) {  		if (selItem.ProjectItem == null)  			continue;  		string kindGuid = selItem.ProjectItem.Kind.Substring (1' selItem.ProjectItem.Kind.Length - 2);  		if (kindGuid.ToLower () == guid.ToString ().ToLower ()) {  			VCFilter filt = (VCFilter)selItem.ProjectItem.Object;  			if (filt != null && filt.UniqueIdentifier != null && filt.UniqueIdentifier.ToLower () == filter.UniqueIdentifier.ToLower () && HelperFunctions.IsQt4Project (GetSelectedQtProject (dteObject)))  				return true;  		}  	}  	return false;  }  catch {  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,IsFilterSelected,The following statement contains a magic number: foreach (EnvDTE.SelectedItem selItem in itms) {  	if (selItem.ProjectItem == null)  		continue;  	string kindGuid = selItem.ProjectItem.Kind.Substring (1' selItem.ProjectItem.Kind.Length - 2);  	if (kindGuid.ToLower () == guid.ToString ().ToLower ()) {  		VCFilter filt = (VCFilter)selItem.ProjectItem.Object;  		if (filt != null && filt.UniqueIdentifier != null && filt.UniqueIdentifier.ToLower () == filter.UniqueIdentifier.ToLower () && HelperFunctions.IsQt4Project (GetSelectedQtProject (dteObject)))  			return true;  	}  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: if (os.Version.Major >= 6 || (os.Version.Major == 5 && os.Version.Minor >= 1))  	return 8191 - epsilon;  // Windows XP and above  else  	return 2047 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: if (os.Version.Major >= 6 || (os.Version.Major == 5 && os.Version.Minor >= 1))  	return 8191 - epsilon;  // Windows XP and above  else  	return 2047 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: if (os.Version.Major >= 6 || (os.Version.Major == 5 && os.Version.Minor >= 1))  	return 8191 - epsilon;  // Windows XP and above  else  	return 2047 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: if (os.Version.Major >= 6 || (os.Version.Major == 5 && os.Version.Minor >= 1))  	return 8191 - epsilon;  // Windows XP and above  else  	return 2047 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: return 8191 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetMaximumCommandLineLength,The following statement contains a magic number: return 2047 - epsilon;  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The following statement contains a magic number: try {  	proc.Start ();  	if (checkExitCode && application.ToLower ().IndexOf ("lupdate.exe") > -1 || checkExitCode && application.ToLower ().IndexOf ("lrelease.exe") > -1) {  		System.Threading.Thread errorThread = new System.Threading.Thread (new System.Threading.ParameterizedThreadStart (ReadQtStandardError));  		errorThread.Start (dte);  		proc.WaitForExit ();  		errorThread.Join ();  		int exitCode = proc.ExitCode;  		if (exitCode == 0) {  			string arg = arguments;  			int index = arg.IndexOf ("-ts");  			string file = "file: " + arg + " ";  			if (index > 0)  				file = "file: " + arg.Substring (index + 3) + " ";  			FileInfo info = new FileInfo (application);  			Messages.PaneMessage (project.DTE' "--- (" + HelperFunctions.RemoveFileNameExtension (info) + ") " + file + ": Exit Code: " + exitCode);  		}  		else {  			DisplayErrorMessage (proc);  		}  		proc.Close ();  	}  }  catch {  	throw new Qt4VSException (SR.GetString ("Helpers_CannotStart"' proc.StartInfo.FileName));  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The following statement contains a magic number: if (checkExitCode && application.ToLower ().IndexOf ("lupdate.exe") > -1 || checkExitCode && application.ToLower ().IndexOf ("lrelease.exe") > -1) {  	System.Threading.Thread errorThread = new System.Threading.Thread (new System.Threading.ParameterizedThreadStart (ReadQtStandardError));  	errorThread.Start (dte);  	proc.WaitForExit ();  	errorThread.Join ();  	int exitCode = proc.ExitCode;  	if (exitCode == 0) {  		string arg = arguments;  		int index = arg.IndexOf ("-ts");  		string file = "file: " + arg + " ";  		if (index > 0)  			file = "file: " + arg.Substring (index + 3) + " ";  		FileInfo info = new FileInfo (application);  		Messages.PaneMessage (project.DTE' "--- (" + HelperFunctions.RemoveFileNameExtension (info) + ") " + file + ": Exit Code: " + exitCode);  	}  	else {  		DisplayErrorMessage (proc);  	}  	proc.Close ();  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The following statement contains a magic number: if (exitCode == 0) {  	string arg = arguments;  	int index = arg.IndexOf ("-ts");  	string file = "file: " + arg + " ";  	if (index > 0)  		file = "file: " + arg.Substring (index + 3) + " ";  	FileInfo info = new FileInfo (application);  	Messages.PaneMessage (project.DTE' "--- (" + HelperFunctions.RemoveFileNameExtension (info) + ") " + file + ": Exit Code: " + exitCode);  }  else {  	DisplayErrorMessage (proc);  }  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The following statement contains a magic number: if (index > 0)  	file = "file: " + arg.Substring (index + 3) + " ";  
Magic Number,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,StartExternalQtApplication,The following statement contains a magic number: file = "file: " + arg.Substring (index + 3) + " ";  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: foreach (VCFile vcfile in (IVCCollection)vcProject.Files) {  	foreach (VCFileConfiguration config in (IVCCollection)vcfile.FileConfigurations) {  		try {  			VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  			if (tool == null)  				continue;  			string[] commandLines = tool.CommandLine.Split (new string[] {  				"\r\n"  			}' StringSplitOptions.RemoveEmptyEntries);  			string commandLineToSet = "";  			bool firstLoop = true;  			for (int i = 0; i < commandLines.Length; i++) {  				string commandLine = commandLines [i];  				// If CONFIG contains silent in the pro file' there is an @echo at the beginning of the  				// command line which we remove.  				if (commandLine.Contains ("moc.exe") && commandLine.StartsWith ("@echo"))  					commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  				if (firstLoop)  					firstLoop = false;  				else  					commandLineToSet += "\r\n";  				commandLineToSet += commandLine;  			}  			tool.CommandLine = commandLineToSet;  		}  		catch (Exception) {  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)vcfile.FileConfigurations) {  	try {  		VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  		if (tool == null)  			continue;  		string[] commandLines = tool.CommandLine.Split (new string[] {  			"\r\n"  		}' StringSplitOptions.RemoveEmptyEntries);  		string commandLineToSet = "";  		bool firstLoop = true;  		for (int i = 0; i < commandLines.Length; i++) {  			string commandLine = commandLines [i];  			// If CONFIG contains silent in the pro file' there is an @echo at the beginning of the  			// command line which we remove.  			if (commandLine.Contains ("moc.exe") && commandLine.StartsWith ("@echo"))  				commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  			if (firstLoop)  				firstLoop = false;  			else  				commandLineToSet += "\r\n";  			commandLineToSet += commandLine;  		}  		tool.CommandLine = commandLineToSet;  	}  	catch (Exception) {  	}  }  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: try {  	VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  	if (tool == null)  		continue;  	string[] commandLines = tool.CommandLine.Split (new string[] {  		"\r\n"  	}' StringSplitOptions.RemoveEmptyEntries);  	string commandLineToSet = "";  	bool firstLoop = true;  	for (int i = 0; i < commandLines.Length; i++) {  		string commandLine = commandLines [i];  		// If CONFIG contains silent in the pro file' there is an @echo at the beginning of the  		// command line which we remove.  		if (commandLine.Contains ("moc.exe") && commandLine.StartsWith ("@echo"))  			commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  		if (firstLoop)  			firstLoop = false;  		else  			commandLineToSet += "\r\n";  		commandLineToSet += commandLine;  	}  	tool.CommandLine = commandLineToSet;  }  catch (Exception) {  }  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: for (int i = 0; i < commandLines.Length; i++) {  	string commandLine = commandLines [i];  	// If CONFIG contains silent in the pro file' there is an @echo at the beginning of the  	// command line which we remove.  	if (commandLine.Contains ("moc.exe") && commandLine.StartsWith ("@echo"))  		commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  	if (firstLoop)  		firstLoop = false;  	else  		commandLineToSet += "\r\n";  	commandLineToSet += commandLine;  }  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: if (commandLine.Contains ("moc.exe") && commandLine.StartsWith ("@echo"))  	commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  
Magic Number,Digia.Qt4ProjectLib,ProjectImporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectImporter.cs,RepairMocSteps,The following statement contains a magic number: commandLine = commandLine.Substring (commandLine.IndexOf ("&&") + 3);  
Magic Number,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,ExtractIncludes,The following statement contains a magic number: for (int i = 0; i < col.Count; ++i) {  	string s = col [i].Groups [1].ToString ();  	if (s.Length != 0)  		lst.Add (NormalizePath (s));  	else  		lst.Add (NormalizePath (col [i].Groups [2].ToString ()));  }  
Magic Number,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,ExtractIncludes,The following statement contains a magic number: if (s.Length != 0)  	lst.Add (NormalizePath (s));  else  	lst.Add (NormalizePath (col [i].Groups [2].ToString ()));  
Magic Number,Digia.Qt4ProjectLib,MocCmdChecker,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\MocCmdChecker.cs,ExtractIncludes,The following statement contains a magic number: lst.Add (NormalizePath (col [i].Groups [2].ToString ()));  
Magic Number,Digia.Qt4ProjectLib,QMakeConf,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeConf.cs,ExpandVariables,The following statement contains a magic number: while (pos != -1) {  	int startPos = pos + 2;  	int endPos = startPos;  	if (value [startPos] != '[')// at the moment no handling of qmake internal variables  	 {  		for (; endPos < value.Length; ++endPos) {  			if ((Char.IsPunctuation (value [endPos]) && value [endPos] != '_') || Char.IsWhiteSpace (value [endPos])) {  				break;  			}  		}  		if (endPos > startPos) {  			string varName = value.Substring (startPos' endPos - startPos);  			object varValueObj = entries [varName];  			string varValue = "";  			if (varValueObj != null)  				varValue = varValueObj.ToString ();  			value = value.Substring (0' pos) + varValue + value.Substring (endPos);  			endPos = pos + varValue.Length;  		}  	}  	pos = value.IndexOf ("$$"' endPos);  }  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 9);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 9);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (370' 13);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (370' 13);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point (13' 28);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point (13' 28);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size (369' 23);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size (369' 23);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (394' 67);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (394' 67);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (402' 94);  
Magic Number,Digia.Qt4ProjectLib,InfoDialog,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeProcess.cs,InfoDialog,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (402' 94);  
Magic Number,Digia.Qt4ProjectLib,QtConfig,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtConfig.cs,parseLine,The following statement contains a magic number: if (line.StartsWith ("CONFIG")) {  	string[] values = line.Substring (6).Split (new char[] {  		' ''  		'\t'  	});  	foreach (string s in values) {  		if (s == "static")  			isStaticBuild = true;  		else if (s == "shared")  			isStaticBuild = false;  	}  }  else if (line.StartsWith ("DEFAULT_SIGNATURE")) {  	int idx = line.IndexOf ('=');  	if (idx < 0)  		return;  	signatureFile = line.Remove (0' idx + 1).Trim ();  }  
Magic Number,Digia.Qt4ProjectLib,QtModules,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtModules.cs,InitQtModule,The following statement contains a magic number: if (libraryPrefix.StartsWith ("Qt"))  	moduleInfo.proVarQT = libraryPrefix.Substring (2).ToLower ();  else  	moduleInfo.proVarQT = libraryPrefix.ToLower ();  
Magic Number,Digia.Qt4ProjectLib,QtModules,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtModules.cs,InitQtModule,The following statement contains a magic number: moduleInfo.proVarQT = libraryPrefix.Substring (2).ToLower ();  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetUiGeneratedFileName,The following statement contains a magic number: if (fi.Extension == ".ui") {  	return QtVSIPSettings.GetUicDirectory (envPro) + "\\ui_" + file.Remove (file.Length - 3' 3) + ".h";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetUiGeneratedFileName,The following statement contains a magic number: if (fi.Extension == ".ui") {  	return QtVSIPSettings.GetUicDirectory (envPro) + "\\ui_" + file.Remove (file.Length - 3' 3) + ".h";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetUiGeneratedFileName,The following statement contains a magic number: return QtVSIPSettings.GetUicDirectory (envPro) + "\\ui_" + file.Remove (file.Length - 3' 3) + ".h";  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetUiGeneratedFileName,The following statement contains a magic number: return QtVSIPSettings.GetUicDirectory (envPro) + "\\ui_" + file.Remove (file.Length - 3' 3) + ".h";  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetPCHMocOptions,The following statement contains a magic number: if (mocDir.StartsWith (".\\"))  	mocDir = mocDir.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetPCHMocOptions,The following statement contains a magic number: mocDir = mocDir.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: try {  	string mocFileName = GetMocFileName (file.FullPath);  	if (mocFileName == null)  		return;  	bool hasDifferentMocFilePerConfig = QtVSIPSettings.HasDifferentMocFilePerConfig (envPro);  	bool hasDifferentMocFilePerPlatform = QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro);  	bool mocableIsCPP = mocFileName.ToLower ().EndsWith (".moc");  	#if (VS2010 || VS2012 || VS2013)  	if (!mocableIsCPP && file.ItemType != "CustomBuild") {  		file.ItemType = "CustomBuild";  	}  	#endif  	#if VS2013  	                file = Update(this' file); #endif  	#region Add moc for each configuration  	foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  		string name = ((VCCustomBuildTool)config.Tool).toolName;  		VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  		VCPlatform platform = vcConfig.Platform as VCPlatform;  		string platformName = platform.Name;  		string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  		string platformFilterName = null;  		string configFilterName = null;  		if (mocRelPath.Contains (platformName)) {  			platformFilterName = platformName;  		}  		if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  			configFilterName = vcConfig.ConfigurationName;  		}  		VCFile mocFile = GetFileFromProject (mocRelPath);  		if (mocFile == null) {  			FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  			if (!fi.Directory.Exists)  				fi.Directory.Create ();  			mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  			#if (VS2010 || VS2012 || VS2013)  			if (mocFileName.ToLower ().EndsWith (".moc")) {  				ProjectItem mocFileItem = mocFile.Object as ProjectItem;  				if (mocFileItem != null)  					HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  			}  			#endif  		}  		if (mocFile == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  		VCCustomBuildTool tool = null;  		string fileToMoc = null;  		if (!mocableIsCPP) {  			tool = HelperFunctions.GetCustomBuildTool (config);  			fileToMoc = ProjectMacros.Path;  		}  		else {  			VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  			tool = HelperFunctions.GetCustomBuildTool (mocConf);  			fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  		}  		if (tool == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  		if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerPlatform) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  					continue;  				bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  				if (exclude) {  					if (mocConf.ExcludedFromBuild != exclude)  						mocConf.ExcludedFromBuild = exclude;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (platformName != mocConfPlatform.Name)  					continue;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else {  			VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  			if (moccedFileConfig != null) {  				VCFile cppFile = GetCppFileForMocStep (file);  				if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  					if (!moccedFileConfig.ExcludedFromBuild) {  						moccedFileConfig.ExcludedFromBuild = true;  					}  				}  				else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  					moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  		string dps = tool.AdditionalDependencies;  		if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  			if (dps.Length > 0 && !dps.EndsWith (";"))  				dps += ";";  			tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  		}  		tool.Description = "Moc'ing " + file.Name + "...";  		string inputMocFile = ProjectMacros.Path;  		if (mocableIsCPP)  			inputMocFile = file.RelativePath;  		string output = tool.Outputs;  		string outputMocFile = "";  		string outputMocMacro = "";  		string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  		string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  		System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  		MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  		if (matchList.Count > 0) {  			if (matchList [0].Length > 0) {  				outputMocFile = matchList [0].ToString ();  			}  			else if (matchList [1].Length > 1) {  				outputMocFile = matchList [1].ToString ();  			}  			if (outputMocFile.StartsWith ("\""))  				outputMocFile = outputMocFile.Substring (1);  			if (outputMocFile.EndsWith ("\""))  				outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		}  		else {  			outputMocFile = GetRelativeMocFilePath (file.FullPath);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  			if (output.Length > 0 && !output.EndsWith (";"))  				output += ";";  			tool.Outputs = output + "\"" + outputMocMacro + "\"";  		}  		string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  		// Tell moc to include the PCH header if we are using precompiled headers in the project  		CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  		if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  			newCmdLine += " " + GetPCHMocOptions (file' compiler);  		}  		QtVersionManager versionManager = QtVersionManager.The ();  		VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  		bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  		string strDefinesIncludes = "";  		VCFile cppPropertyFile;  		if (!mocableIsCPP)  			cppPropertyFile = GetCppFileForMocStep (file);  		else  			cppPropertyFile = GetCppFileForMocStep (mocFile);  		VCFileConfiguration defineIncludeConfig;  		if (cppPropertyFile != null)  			defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  		else  			// No file specific defines/includes but at least the project defines/includes are added  			defineIncludeConfig = config;  		strDefinesIncludes += GetDefines (defineIncludeConfig);  		strDefinesIncludes += GetIncludes (defineIncludeConfig);  		int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  		if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  			// Command line is too long. We must use an options file.  			string mocIncludeCommands = "";  			string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  			string redirectOp = " > ";  			int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  			string[] options = strDefinesIncludes.Split (' ');  			int i = options.Length - 1;  			for (; i >= 0; --i) {  				if (options [i].Length == 0)  					continue;  				mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  				cmdLineLength -= options [i].Length + 1;  				if (cmdLineLength < maxCmdLineLength)  					break;  				if (i == options.Length - 1)  					// first loop  					redirectOp = " >> ";  			}  			strDefinesIncludes = "@" + mocIncludeFile;  			for (int k = 0; k < i; ++k)  				if (options [k].Length > 0)  					strDefinesIncludes += " " + options [k];  			newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  		}  		else {  			newCmdLine = newCmdLine + " " + strDefinesIncludes;  		}  		if (tool.CommandLine.Trim ().Length > 0) {  			string cmdLine = tool.CommandLine;  			// remove the moc option file commands  			{  				Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  				cmdLine = rex.Replace (cmdLine' "");  			}  			Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  			if (m.Success) {  				int start = m.Index;  				int end = cmdLine.IndexOf ("&&"' start);  				int a = cmdLine.IndexOf ("\r\n"' start);  				if ((a > -1 && a < end) || (end < 0 && a > -1))  					end = a;  				if (end < 0)  					end = cmdLine.Length;  				tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  			}  			else {  				tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  			}  		}  		else {  			tool.CommandLine = newCmdLine;  		}  	}  	#endregion  }  catch {  	file.ItemType = oldItemType;  	throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: try {  	string mocFileName = GetMocFileName (file.FullPath);  	if (mocFileName == null)  		return;  	bool hasDifferentMocFilePerConfig = QtVSIPSettings.HasDifferentMocFilePerConfig (envPro);  	bool hasDifferentMocFilePerPlatform = QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro);  	bool mocableIsCPP = mocFileName.ToLower ().EndsWith (".moc");  	#if (VS2010 || VS2012 || VS2013)  	if (!mocableIsCPP && file.ItemType != "CustomBuild") {  		file.ItemType = "CustomBuild";  	}  	#endif  	#if VS2013  	                file = Update(this' file); #endif  	#region Add moc for each configuration  	foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  		string name = ((VCCustomBuildTool)config.Tool).toolName;  		VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  		VCPlatform platform = vcConfig.Platform as VCPlatform;  		string platformName = platform.Name;  		string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  		string platformFilterName = null;  		string configFilterName = null;  		if (mocRelPath.Contains (platformName)) {  			platformFilterName = platformName;  		}  		if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  			configFilterName = vcConfig.ConfigurationName;  		}  		VCFile mocFile = GetFileFromProject (mocRelPath);  		if (mocFile == null) {  			FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  			if (!fi.Directory.Exists)  				fi.Directory.Create ();  			mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  			#if (VS2010 || VS2012 || VS2013)  			if (mocFileName.ToLower ().EndsWith (".moc")) {  				ProjectItem mocFileItem = mocFile.Object as ProjectItem;  				if (mocFileItem != null)  					HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  			}  			#endif  		}  		if (mocFile == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  		VCCustomBuildTool tool = null;  		string fileToMoc = null;  		if (!mocableIsCPP) {  			tool = HelperFunctions.GetCustomBuildTool (config);  			fileToMoc = ProjectMacros.Path;  		}  		else {  			VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  			tool = HelperFunctions.GetCustomBuildTool (mocConf);  			fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  		}  		if (tool == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  		if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerPlatform) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  					continue;  				bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  				if (exclude) {  					if (mocConf.ExcludedFromBuild != exclude)  						mocConf.ExcludedFromBuild = exclude;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (platformName != mocConfPlatform.Name)  					continue;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else {  			VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  			if (moccedFileConfig != null) {  				VCFile cppFile = GetCppFileForMocStep (file);  				if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  					if (!moccedFileConfig.ExcludedFromBuild) {  						moccedFileConfig.ExcludedFromBuild = true;  					}  				}  				else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  					moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  		string dps = tool.AdditionalDependencies;  		if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  			if (dps.Length > 0 && !dps.EndsWith (";"))  				dps += ";";  			tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  		}  		tool.Description = "Moc'ing " + file.Name + "...";  		string inputMocFile = ProjectMacros.Path;  		if (mocableIsCPP)  			inputMocFile = file.RelativePath;  		string output = tool.Outputs;  		string outputMocFile = "";  		string outputMocMacro = "";  		string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  		string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  		System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  		MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  		if (matchList.Count > 0) {  			if (matchList [0].Length > 0) {  				outputMocFile = matchList [0].ToString ();  			}  			else if (matchList [1].Length > 1) {  				outputMocFile = matchList [1].ToString ();  			}  			if (outputMocFile.StartsWith ("\""))  				outputMocFile = outputMocFile.Substring (1);  			if (outputMocFile.EndsWith ("\""))  				outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		}  		else {  			outputMocFile = GetRelativeMocFilePath (file.FullPath);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  			if (output.Length > 0 && !output.EndsWith (";"))  				output += ";";  			tool.Outputs = output + "\"" + outputMocMacro + "\"";  		}  		string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  		// Tell moc to include the PCH header if we are using precompiled headers in the project  		CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  		if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  			newCmdLine += " " + GetPCHMocOptions (file' compiler);  		}  		QtVersionManager versionManager = QtVersionManager.The ();  		VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  		bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  		string strDefinesIncludes = "";  		VCFile cppPropertyFile;  		if (!mocableIsCPP)  			cppPropertyFile = GetCppFileForMocStep (file);  		else  			cppPropertyFile = GetCppFileForMocStep (mocFile);  		VCFileConfiguration defineIncludeConfig;  		if (cppPropertyFile != null)  			defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  		else  			// No file specific defines/includes but at least the project defines/includes are added  			defineIncludeConfig = config;  		strDefinesIncludes += GetDefines (defineIncludeConfig);  		strDefinesIncludes += GetIncludes (defineIncludeConfig);  		int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  		if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  			// Command line is too long. We must use an options file.  			string mocIncludeCommands = "";  			string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  			string redirectOp = " > ";  			int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  			string[] options = strDefinesIncludes.Split (' ');  			int i = options.Length - 1;  			for (; i >= 0; --i) {  				if (options [i].Length == 0)  					continue;  				mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  				cmdLineLength -= options [i].Length + 1;  				if (cmdLineLength < maxCmdLineLength)  					break;  				if (i == options.Length - 1)  					// first loop  					redirectOp = " >> ";  			}  			strDefinesIncludes = "@" + mocIncludeFile;  			for (int k = 0; k < i; ++k)  				if (options [k].Length > 0)  					strDefinesIncludes += " " + options [k];  			newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  		}  		else {  			newCmdLine = newCmdLine + " " + strDefinesIncludes;  		}  		if (tool.CommandLine.Trim ().Length > 0) {  			string cmdLine = tool.CommandLine;  			// remove the moc option file commands  			{  				Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  				cmdLine = rex.Replace (cmdLine' "");  			}  			Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  			if (m.Success) {  				int start = m.Index;  				int end = cmdLine.IndexOf ("&&"' start);  				int a = cmdLine.IndexOf ("\r\n"' start);  				if ((a > -1 && a < end) || (end < 0 && a > -1))  					end = a;  				if (end < 0)  					end = cmdLine.Length;  				tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  			}  			else {  				tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  			}  		}  		else {  			tool.CommandLine = newCmdLine;  		}  	}  	#endregion  }  catch {  	file.ItemType = oldItemType;  	throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: try {  	string mocFileName = GetMocFileName (file.FullPath);  	if (mocFileName == null)  		return;  	bool hasDifferentMocFilePerConfig = QtVSIPSettings.HasDifferentMocFilePerConfig (envPro);  	bool hasDifferentMocFilePerPlatform = QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro);  	bool mocableIsCPP = mocFileName.ToLower ().EndsWith (".moc");  	#if (VS2010 || VS2012 || VS2013)  	if (!mocableIsCPP && file.ItemType != "CustomBuild") {  		file.ItemType = "CustomBuild";  	}  	#endif  	#if VS2013  	                file = Update(this' file); #endif  	#region Add moc for each configuration  	foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  		string name = ((VCCustomBuildTool)config.Tool).toolName;  		VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  		VCPlatform platform = vcConfig.Platform as VCPlatform;  		string platformName = platform.Name;  		string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  		string platformFilterName = null;  		string configFilterName = null;  		if (mocRelPath.Contains (platformName)) {  			platformFilterName = platformName;  		}  		if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  			configFilterName = vcConfig.ConfigurationName;  		}  		VCFile mocFile = GetFileFromProject (mocRelPath);  		if (mocFile == null) {  			FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  			if (!fi.Directory.Exists)  				fi.Directory.Create ();  			mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  			#if (VS2010 || VS2012 || VS2013)  			if (mocFileName.ToLower ().EndsWith (".moc")) {  				ProjectItem mocFileItem = mocFile.Object as ProjectItem;  				if (mocFileItem != null)  					HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  			}  			#endif  		}  		if (mocFile == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  		VCCustomBuildTool tool = null;  		string fileToMoc = null;  		if (!mocableIsCPP) {  			tool = HelperFunctions.GetCustomBuildTool (config);  			fileToMoc = ProjectMacros.Path;  		}  		else {  			VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  			tool = HelperFunctions.GetCustomBuildTool (mocConf);  			fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  		}  		if (tool == null)  			throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  		if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerPlatform) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  					continue;  				bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  				if (exclude) {  					if (mocConf.ExcludedFromBuild != exclude)  						mocConf.ExcludedFromBuild = exclude;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else if (hasDifferentMocFilePerConfig) {  			foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  				VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  				VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  				if (platformName != mocConfPlatform.Name)  					continue;  				if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  					if (!mocConf.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = true;  				}  				else {  					if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  						mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  				}  			}  		}  		else {  			VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  			if (moccedFileConfig != null) {  				VCFile cppFile = GetCppFileForMocStep (file);  				if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  					if (!moccedFileConfig.ExcludedFromBuild) {  						moccedFileConfig.ExcludedFromBuild = true;  					}  				}  				else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  					moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  		string dps = tool.AdditionalDependencies;  		if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  			if (dps.Length > 0 && !dps.EndsWith (";"))  				dps += ";";  			tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  		}  		tool.Description = "Moc'ing " + file.Name + "...";  		string inputMocFile = ProjectMacros.Path;  		if (mocableIsCPP)  			inputMocFile = file.RelativePath;  		string output = tool.Outputs;  		string outputMocFile = "";  		string outputMocMacro = "";  		string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  		string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  		System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  		MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  		if (matchList.Count > 0) {  			if (matchList [0].Length > 0) {  				outputMocFile = matchList [0].ToString ();  			}  			else if (matchList [1].Length > 1) {  				outputMocFile = matchList [1].ToString ();  			}  			if (outputMocFile.StartsWith ("\""))  				outputMocFile = outputMocFile.Substring (1);  			if (outputMocFile.EndsWith ("\""))  				outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		}  		else {  			outputMocFile = GetRelativeMocFilePath (file.FullPath);  			string outputMocPath = Path.GetDirectoryName (outputMocFile);  			string stringToReplace = Path.GetFileName (outputMocFile);  			outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  			if (output.Length > 0 && !output.EndsWith (";"))  				output += ";";  			tool.Outputs = output + "\"" + outputMocMacro + "\"";  		}  		string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  		// Tell moc to include the PCH header if we are using precompiled headers in the project  		CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  		if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  			newCmdLine += " " + GetPCHMocOptions (file' compiler);  		}  		QtVersionManager versionManager = QtVersionManager.The ();  		VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  		bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  		string strDefinesIncludes = "";  		VCFile cppPropertyFile;  		if (!mocableIsCPP)  			cppPropertyFile = GetCppFileForMocStep (file);  		else  			cppPropertyFile = GetCppFileForMocStep (mocFile);  		VCFileConfiguration defineIncludeConfig;  		if (cppPropertyFile != null)  			defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  		else  			// No file specific defines/includes but at least the project defines/includes are added  			defineIncludeConfig = config;  		strDefinesIncludes += GetDefines (defineIncludeConfig);  		strDefinesIncludes += GetIncludes (defineIncludeConfig);  		int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  		if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  			// Command line is too long. We must use an options file.  			string mocIncludeCommands = "";  			string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  			string redirectOp = " > ";  			int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  			string[] options = strDefinesIncludes.Split (' ');  			int i = options.Length - 1;  			for (; i >= 0; --i) {  				if (options [i].Length == 0)  					continue;  				mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  				cmdLineLength -= options [i].Length + 1;  				if (cmdLineLength < maxCmdLineLength)  					break;  				if (i == options.Length - 1)  					// first loop  					redirectOp = " >> ";  			}  			strDefinesIncludes = "@" + mocIncludeFile;  			for (int k = 0; k < i; ++k)  				if (options [k].Length > 0)  					strDefinesIncludes += " " + options [k];  			newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  		}  		else {  			newCmdLine = newCmdLine + " " + strDefinesIncludes;  		}  		if (tool.CommandLine.Trim ().Length > 0) {  			string cmdLine = tool.CommandLine;  			// remove the moc option file commands  			{  				Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  				cmdLine = rex.Replace (cmdLine' "");  			}  			Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  			if (m.Success) {  				int start = m.Index;  				int end = cmdLine.IndexOf ("&&"' start);  				int a = cmdLine.IndexOf ("\r\n"' start);  				if ((a > -1 && a < end) || (end < 0 && a > -1))  					end = a;  				if (end < 0)  					end = cmdLine.Length;  				tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  			}  			else {  				tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  			}  		}  		else {  			tool.CommandLine = newCmdLine;  		}  	}  	#endregion  }  catch {  	file.ItemType = oldItemType;  	throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  	string name = ((VCCustomBuildTool)config.Tool).toolName;  	VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  	VCPlatform platform = vcConfig.Platform as VCPlatform;  	string platformName = platform.Name;  	string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  	string platformFilterName = null;  	string configFilterName = null;  	if (mocRelPath.Contains (platformName)) {  		platformFilterName = platformName;  	}  	if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  		configFilterName = vcConfig.ConfigurationName;  	}  	VCFile mocFile = GetFileFromProject (mocRelPath);  	if (mocFile == null) {  		FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  		if (!fi.Directory.Exists)  			fi.Directory.Create ();  		mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  		#if (VS2010 || VS2012 || VS2013)  		if (mocFileName.ToLower ().EndsWith (".moc")) {  			ProjectItem mocFileItem = mocFile.Object as ProjectItem;  			if (mocFileItem != null)  				HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  		}  		#endif  	}  	if (mocFile == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  	VCCustomBuildTool tool = null;  	string fileToMoc = null;  	if (!mocableIsCPP) {  		tool = HelperFunctions.GetCustomBuildTool (config);  		fileToMoc = ProjectMacros.Path;  	}  	else {  		VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  		tool = HelperFunctions.GetCustomBuildTool (mocConf);  		fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  	}  	if (tool == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  	if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerPlatform) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  				continue;  			bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  			if (exclude) {  				if (mocConf.ExcludedFromBuild != exclude)  					mocConf.ExcludedFromBuild = exclude;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (platformName != mocConfPlatform.Name)  				continue;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else {  		VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  		if (moccedFileConfig != null) {  			VCFile cppFile = GetCppFileForMocStep (file);  			if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  				if (!moccedFileConfig.ExcludedFromBuild) {  					moccedFileConfig.ExcludedFromBuild = true;  				}  			}  			else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  				moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  		}  	}  	string dps = tool.AdditionalDependencies;  	if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  		if (dps.Length > 0 && !dps.EndsWith (";"))  			dps += ";";  		tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  	}  	tool.Description = "Moc'ing " + file.Name + "...";  	string inputMocFile = ProjectMacros.Path;  	if (mocableIsCPP)  		inputMocFile = file.RelativePath;  	string output = tool.Outputs;  	string outputMocFile = "";  	string outputMocMacro = "";  	string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  	string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  	System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  	MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  	if (matchList.Count > 0) {  		if (matchList [0].Length > 0) {  			outputMocFile = matchList [0].ToString ();  		}  		else if (matchList [1].Length > 1) {  			outputMocFile = matchList [1].ToString ();  		}  		if (outputMocFile.StartsWith ("\""))  			outputMocFile = outputMocFile.Substring (1);  		if (outputMocFile.EndsWith ("\""))  			outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  	}  	else {  		outputMocFile = GetRelativeMocFilePath (file.FullPath);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		if (output.Length > 0 && !output.EndsWith (";"))  			output += ";";  		tool.Outputs = output + "\"" + outputMocMacro + "\"";  	}  	string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  	// Tell moc to include the PCH header if we are using precompiled headers in the project  	CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  	if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  		newCmdLine += " " + GetPCHMocOptions (file' compiler);  	}  	QtVersionManager versionManager = QtVersionManager.The ();  	VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  	bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  	string strDefinesIncludes = "";  	VCFile cppPropertyFile;  	if (!mocableIsCPP)  		cppPropertyFile = GetCppFileForMocStep (file);  	else  		cppPropertyFile = GetCppFileForMocStep (mocFile);  	VCFileConfiguration defineIncludeConfig;  	if (cppPropertyFile != null)  		defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  	else  		// No file specific defines/includes but at least the project defines/includes are added  		defineIncludeConfig = config;  	strDefinesIncludes += GetDefines (defineIncludeConfig);  	strDefinesIncludes += GetIncludes (defineIncludeConfig);  	int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  	if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  		// Command line is too long. We must use an options file.  		string mocIncludeCommands = "";  		string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  		string redirectOp = " > ";  		int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  		string[] options = strDefinesIncludes.Split (' ');  		int i = options.Length - 1;  		for (; i >= 0; --i) {  			if (options [i].Length == 0)  				continue;  			mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  			cmdLineLength -= options [i].Length + 1;  			if (cmdLineLength < maxCmdLineLength)  				break;  			if (i == options.Length - 1)  				// first loop  				redirectOp = " >> ";  		}  		strDefinesIncludes = "@" + mocIncludeFile;  		for (int k = 0; k < i; ++k)  			if (options [k].Length > 0)  				strDefinesIncludes += " " + options [k];  		newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  	}  	else {  		newCmdLine = newCmdLine + " " + strDefinesIncludes;  	}  	if (tool.CommandLine.Trim ().Length > 0) {  		string cmdLine = tool.CommandLine;  		// remove the moc option file commands  		{  			Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  			cmdLine = rex.Replace (cmdLine' "");  		}  		Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  		if (m.Success) {  			int start = m.Index;  			int end = cmdLine.IndexOf ("&&"' start);  			int a = cmdLine.IndexOf ("\r\n"' start);  			if ((a > -1 && a < end) || (end < 0 && a > -1))  				end = a;  			if (end < 0)  				end = cmdLine.Length;  			tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  		}  		else {  			tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  		}  	}  	else {  		tool.CommandLine = newCmdLine;  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  	string name = ((VCCustomBuildTool)config.Tool).toolName;  	VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  	VCPlatform platform = vcConfig.Platform as VCPlatform;  	string platformName = platform.Name;  	string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  	string platformFilterName = null;  	string configFilterName = null;  	if (mocRelPath.Contains (platformName)) {  		platformFilterName = platformName;  	}  	if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  		configFilterName = vcConfig.ConfigurationName;  	}  	VCFile mocFile = GetFileFromProject (mocRelPath);  	if (mocFile == null) {  		FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  		if (!fi.Directory.Exists)  			fi.Directory.Create ();  		mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  		#if (VS2010 || VS2012 || VS2013)  		if (mocFileName.ToLower ().EndsWith (".moc")) {  			ProjectItem mocFileItem = mocFile.Object as ProjectItem;  			if (mocFileItem != null)  				HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  		}  		#endif  	}  	if (mocFile == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  	VCCustomBuildTool tool = null;  	string fileToMoc = null;  	if (!mocableIsCPP) {  		tool = HelperFunctions.GetCustomBuildTool (config);  		fileToMoc = ProjectMacros.Path;  	}  	else {  		VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  		tool = HelperFunctions.GetCustomBuildTool (mocConf);  		fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  	}  	if (tool == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  	if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerPlatform) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  				continue;  			bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  			if (exclude) {  				if (mocConf.ExcludedFromBuild != exclude)  					mocConf.ExcludedFromBuild = exclude;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (platformName != mocConfPlatform.Name)  				continue;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else {  		VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  		if (moccedFileConfig != null) {  			VCFile cppFile = GetCppFileForMocStep (file);  			if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  				if (!moccedFileConfig.ExcludedFromBuild) {  					moccedFileConfig.ExcludedFromBuild = true;  				}  			}  			else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  				moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  		}  	}  	string dps = tool.AdditionalDependencies;  	if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  		if (dps.Length > 0 && !dps.EndsWith (";"))  			dps += ";";  		tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  	}  	tool.Description = "Moc'ing " + file.Name + "...";  	string inputMocFile = ProjectMacros.Path;  	if (mocableIsCPP)  		inputMocFile = file.RelativePath;  	string output = tool.Outputs;  	string outputMocFile = "";  	string outputMocMacro = "";  	string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  	string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  	System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  	MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  	if (matchList.Count > 0) {  		if (matchList [0].Length > 0) {  			outputMocFile = matchList [0].ToString ();  		}  		else if (matchList [1].Length > 1) {  			outputMocFile = matchList [1].ToString ();  		}  		if (outputMocFile.StartsWith ("\""))  			outputMocFile = outputMocFile.Substring (1);  		if (outputMocFile.EndsWith ("\""))  			outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  	}  	else {  		outputMocFile = GetRelativeMocFilePath (file.FullPath);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		if (output.Length > 0 && !output.EndsWith (";"))  			output += ";";  		tool.Outputs = output + "\"" + outputMocMacro + "\"";  	}  	string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  	// Tell moc to include the PCH header if we are using precompiled headers in the project  	CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  	if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  		newCmdLine += " " + GetPCHMocOptions (file' compiler);  	}  	QtVersionManager versionManager = QtVersionManager.The ();  	VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  	bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  	string strDefinesIncludes = "";  	VCFile cppPropertyFile;  	if (!mocableIsCPP)  		cppPropertyFile = GetCppFileForMocStep (file);  	else  		cppPropertyFile = GetCppFileForMocStep (mocFile);  	VCFileConfiguration defineIncludeConfig;  	if (cppPropertyFile != null)  		defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  	else  		// No file specific defines/includes but at least the project defines/includes are added  		defineIncludeConfig = config;  	strDefinesIncludes += GetDefines (defineIncludeConfig);  	strDefinesIncludes += GetIncludes (defineIncludeConfig);  	int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  	if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  		// Command line is too long. We must use an options file.  		string mocIncludeCommands = "";  		string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  		string redirectOp = " > ";  		int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  		string[] options = strDefinesIncludes.Split (' ');  		int i = options.Length - 1;  		for (; i >= 0; --i) {  			if (options [i].Length == 0)  				continue;  			mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  			cmdLineLength -= options [i].Length + 1;  			if (cmdLineLength < maxCmdLineLength)  				break;  			if (i == options.Length - 1)  				// first loop  				redirectOp = " >> ";  		}  		strDefinesIncludes = "@" + mocIncludeFile;  		for (int k = 0; k < i; ++k)  			if (options [k].Length > 0)  				strDefinesIncludes += " " + options [k];  		newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  	}  	else {  		newCmdLine = newCmdLine + " " + strDefinesIncludes;  	}  	if (tool.CommandLine.Trim ().Length > 0) {  		string cmdLine = tool.CommandLine;  		// remove the moc option file commands  		{  			Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  			cmdLine = rex.Replace (cmdLine' "");  		}  		Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  		if (m.Success) {  			int start = m.Index;  			int end = cmdLine.IndexOf ("&&"' start);  			int a = cmdLine.IndexOf ("\r\n"' start);  			if ((a > -1 && a < end) || (end < 0 && a > -1))  				end = a;  			if (end < 0)  				end = cmdLine.Length;  			tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  		}  		else {  			tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  		}  	}  	else {  		tool.CommandLine = newCmdLine;  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,AddMocStep,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  	string name = ((VCCustomBuildTool)config.Tool).toolName;  	VCConfiguration vcConfig = config.ProjectConfiguration as VCConfiguration;  	VCPlatform platform = vcConfig.Platform as VCPlatform;  	string platformName = platform.Name;  	string mocRelPath = GetRelativeMocFilePath (file.FullPath' vcConfig.ConfigurationName' platformName);  	string platformFilterName = null;  	string configFilterName = null;  	if (mocRelPath.Contains (platformName)) {  		platformFilterName = platformName;  	}  	if (mocRelPath.Contains (vcConfig.ConfigurationName)) {  		configFilterName = vcConfig.ConfigurationName;  	}  	VCFile mocFile = GetFileFromProject (mocRelPath);  	if (mocFile == null) {  		FileInfo fi = new FileInfo (this.VCProject.ProjectDirectory + "\\" + mocRelPath);  		if (!fi.Directory.Exists)  			fi.Directory.Create ();  		mocFile = AddFileInSubfilter (Filters.GeneratedFiles ()' platformFilterName' configFilterName' mocRelPath);  		#if (VS2010 || VS2012 || VS2013)  		if (mocFileName.ToLower ().EndsWith (".moc")) {  			ProjectItem mocFileItem = mocFile.Object as ProjectItem;  			if (mocFileItem != null)  				HelperFunctions.EnsureCustomBuildToolAvailable (mocFileItem);  		}  		#endif  	}  	if (mocFile == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotAddMocStep"' file.FullPath));  	VCCustomBuildTool tool = null;  	string fileToMoc = null;  	if (!mocableIsCPP) {  		tool = HelperFunctions.GetCustomBuildTool (config);  		fileToMoc = ProjectMacros.Path;  	}  	else {  		VCFileConfiguration mocConf = GetVCFileConfigurationByName (mocFile' vcConfig.Name);  		tool = HelperFunctions.GetCustomBuildTool (mocConf);  		fileToMoc = HelperFunctions.GetRelativePath (vcPro.ProjectDirectory' file.FullPath);  	}  	if (tool == null)  		throw new Qt4VSException (SR.GetString ("QtProject_CannotFindCustomBuildTool"' file.FullPath));  	if (hasDifferentMocFilePerPlatform && hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerPlatform) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (projectCfg.ConfigurationName != vcConfig.ConfigurationName)  				continue;  			bool exclude = mocConfPlatform.Name != platformName || (IsMoccedFileIncluded (file) && !mocableIsCPP);  			if (exclude) {  				if (mocConf.ExcludedFromBuild != exclude)  					mocConf.ExcludedFromBuild = exclude;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else if (hasDifferentMocFilePerConfig) {  		foreach (VCFileConfiguration mocConf in (IVCCollection)mocFile.FileConfigurations) {  			VCConfiguration projectCfg = mocConf.ProjectConfiguration as VCConfiguration;  			VCPlatform mocConfPlatform = projectCfg.Platform as VCPlatform;  			if (platformName != mocConfPlatform.Name)  				continue;  			if (projectCfg.Name != vcConfig.Name || (IsMoccedFileIncluded (file) && !mocableIsCPP)) {  				if (!mocConf.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = true;  			}  			else {  				if (mocConf.ExcludedFromBuild != config.ExcludedFromBuild)  					mocConf.ExcludedFromBuild = config.ExcludedFromBuild;  			}  		}  	}  	else {  		VCFileConfiguration moccedFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  		if (moccedFileConfig != null) {  			VCFile cppFile = GetCppFileForMocStep (file);  			if (cppFile != null && IsMoccedFileIncluded (cppFile)) {  				if (!moccedFileConfig.ExcludedFromBuild) {  					moccedFileConfig.ExcludedFromBuild = true;  				}  			}  			else if (moccedFileConfig.ExcludedFromBuild != config.ExcludedFromBuild)  				moccedFileConfig.ExcludedFromBuild = config.ExcludedFromBuild;  		}  	}  	string dps = tool.AdditionalDependencies;  	if (dps.IndexOf ("\"" + Resources.moc4Command + "\"") < 0) {  		if (dps.Length > 0 && !dps.EndsWith (";"))  			dps += ";";  		tool.AdditionalDependencies = dps + "\"" + Resources.moc4Command + "\";" + fileToMoc;  	}  	tool.Description = "Moc'ing " + file.Name + "...";  	string inputMocFile = ProjectMacros.Path;  	if (mocableIsCPP)  		inputMocFile = file.RelativePath;  	string output = tool.Outputs;  	string outputMocFile = "";  	string outputMocMacro = "";  	string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  	string pattern = "(\"(.*\\\\" + mocFileName + ")\"|(\\S*" + mocFileName + "))";  	System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  	MatchCollection matchList = regExp.Matches (tool.Outputs.Replace (ProjectMacros.Name' baseFileName));  	if (matchList.Count > 0) {  		if (matchList [0].Length > 0) {  			outputMocFile = matchList [0].ToString ();  		}  		else if (matchList [1].Length > 1) {  			outputMocFile = matchList [1].ToString ();  		}  		if (outputMocFile.StartsWith ("\""))  			outputMocFile = outputMocFile.Substring (1);  		if (outputMocFile.EndsWith ("\""))  			outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  	}  	else {  		outputMocFile = GetRelativeMocFilePath (file.FullPath);  		string outputMocPath = Path.GetDirectoryName (outputMocFile);  		string stringToReplace = Path.GetFileName (outputMocFile);  		outputMocMacro = outputMocPath + "\\" + stringToReplace.Replace (baseFileName' ProjectMacros.Name);  		if (output.Length > 0 && !output.EndsWith (";"))  			output += ";";  		tool.Outputs = output + "\"" + outputMocMacro + "\"";  	}  	string newCmdLine = "\"" + Resources.moc4Command + "\" " + QtVSIPSettings.GetMocOptions (envPro) + " \"" + inputMocFile + "\" -o \"" + outputMocMacro + "\"";  	// Tell moc to include the PCH header if we are using precompiled headers in the project  	CompilerToolWrapper compiler = CompilerToolWrapper.Create (vcConfig);  	if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone) {  		newCmdLine += " " + GetPCHMocOptions (file' compiler);  	}  	QtVersionManager versionManager = QtVersionManager.The ();  	VersionInformation versionInfo = new VersionInformation (versionManager.GetInstallPath (envPro));  	bool mocSupportsIncludes = (versionInfo.qtMajor == 4 && versionInfo.qtMinor >= 2) || versionInfo.qtMajor >= 5;  	string strDefinesIncludes = "";  	VCFile cppPropertyFile;  	if (!mocableIsCPP)  		cppPropertyFile = GetCppFileForMocStep (file);  	else  		cppPropertyFile = GetCppFileForMocStep (mocFile);  	VCFileConfiguration defineIncludeConfig;  	if (cppPropertyFile != null)  		defineIncludeConfig = GetVCFileConfigurationByName (cppPropertyFile' config.Name);  	else  		// No file specific defines/includes but at least the project defines/includes are added  		defineIncludeConfig = config;  	strDefinesIncludes += GetDefines (defineIncludeConfig);  	strDefinesIncludes += GetIncludes (defineIncludeConfig);  	int cmdLineLength = newCmdLine.Length + strDefinesIncludes.Length + 1;  	if (cmdLineLength > HelperFunctions.GetMaximumCommandLineLength () && mocSupportsIncludes) {  		// Command line is too long. We must use an options file.  		string mocIncludeCommands = "";  		string mocIncludeFile = "\"" + outputMocFile + ".inc\"";  		string redirectOp = " > ";  		int maxCmdLineLength = HelperFunctions.GetMaximumCommandLineLength () - (mocIncludeFile.Length + 1);  		string[] options = strDefinesIncludes.Split (' ');  		int i = options.Length - 1;  		for (; i >= 0; --i) {  			if (options [i].Length == 0)  				continue;  			mocIncludeCommands += "echo " + options [i] + redirectOp + mocIncludeFile + "\r\n";  			cmdLineLength -= options [i].Length + 1;  			if (cmdLineLength < maxCmdLineLength)  				break;  			if (i == options.Length - 1)  				// first loop  				redirectOp = " >> ";  		}  		strDefinesIncludes = "@" + mocIncludeFile;  		for (int k = 0; k < i; ++k)  			if (options [k].Length > 0)  				strDefinesIncludes += " " + options [k];  		newCmdLine = mocIncludeCommands + newCmdLine + " " + strDefinesIncludes;  	}  	else {  		newCmdLine = newCmdLine + " " + strDefinesIncludes;  	}  	if (tool.CommandLine.Trim ().Length > 0) {  		string cmdLine = tool.CommandLine;  		// remove the moc option file commands  		{  			Regex rex = new Regex ("^echo.+[.](moc|cpp)[.]inc\"\r\n"' RegexOptions.Multiline);  			cmdLine = rex.Replace (cmdLine' "");  		}  		Match m = System.Text.RegularExpressions.Regex.Match (cmdLine' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  		if (m.Success) {  			int start = m.Index;  			int end = cmdLine.IndexOf ("&&"' start);  			int a = cmdLine.IndexOf ("\r\n"' start);  			if ((a > -1 && a < end) || (end < 0 && a > -1))  				end = a;  			if (end < 0)  				end = cmdLine.Length;  			tool.CommandLine = cmdLine.Replace (cmdLine.Substring (start' end - start)' newCmdLine);  		}  		else {  			tool.CommandLine = cmdLine + "\r\n" + newCmdLine;  		}  	}  	else {  		tool.CommandLine = newCmdLine;  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: try {  	if (!HasMocStep (file))  		return;  	if (HelperFunctions.HasHeaderFileExtension (file.Name)) {  		foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  			VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  			if (tool == null)  				continue;  			string cmdLine = tool.CommandLine;  			if (cmdLine.Length > 0) {  				Regex rex = new Regex (@"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  				while (true) {  					Match m = rex.Match (cmdLine);  					if (!m.Success)  						break;  					int start = m.Index;  					int end = cmdLine.IndexOf ("&&"' start);  					int a = cmdLine.IndexOf ("\r\n"' start);  					if ((a > -1 && a < end) || (end < 0 && a > -1))  						end = a;  					if (end < 0)  						end = cmdLine.Length;  					cmdLine = cmdLine.Remove (start' end - start).Trim ();  					if (cmdLine.StartsWith ("&&"))  						cmdLine = cmdLine.Remove (0' 2).Trim ();  				}  				tool.CommandLine = cmdLine;  			}  			Regex reg = new Regex ("Moc'ing .+\\.\\.\\.");  			string addDepends = tool.AdditionalDependencies;  			addDepends = System.Text.RegularExpressions.Regex.Replace (addDepends' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")"' "");  			addDepends = addDepends.Replace (file.RelativePath' "");  			tool.AdditionalDependencies = "";  			tool.Description = reg.Replace (tool.Description' "");  			tool.Description = tool.Description.Replace ("MOC " + file.Name' "");  			string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  			string pattern = "(\"(.*\\\\" + GetMocFileName (file.FullPath) + ")\"|(\\S*" + GetMocFileName (file.FullPath) + "))";  			string outputMocFile = null;  			System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  			tool.Outputs = tool.Outputs.Replace (ProjectMacros.Name' baseFileName);  			MatchCollection matchList = regExp.Matches (tool.Outputs);  			if (matchList.Count > 0) {  				if (matchList [0].Length > 0) {  					outputMocFile = matchList [0].ToString ();  				}  				else if (matchList [1].Length > 1) {  					outputMocFile = matchList [1].ToString ();  				}  			}  			tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' pattern' ""' RegexOptions.Multiline | RegexOptions.IgnoreCase);  			tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"\s*;\s*;\s*"' ";"' RegexOptions.Multiline);  			tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"(^\s*;|\s*;\s*$)"' ""' RegexOptions.Multiline);  			if (outputMocFile != null) {  				if (outputMocFile.StartsWith ("\""))  					outputMocFile = outputMocFile.Substring (1);  				if (outputMocFile.EndsWith ("\""))  					outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  				outputMocFile = outputMocFile.Replace ("$(ConfigurationName)"' config.Name.Substring (0' config.Name.IndexOf ('|')));  				outputMocFile = outputMocFile.Replace ("$(PlatformName)"' config.Name.Remove (0' config.Name.IndexOf ('|') + 1));  			}  			VCFile mocFile = GetFileFromProject (outputMocFile);  			if (mocFile != null)  				RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  		}  		file.ItemType = "ClInclude";  	}  	else {  		if (QtVSIPSettings.HasDifferentMocFilePerConfig (envPro) || QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro)) {  			foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  				string mocFileName = GetMocFileName (file.Name);  				VCFile mocFile = GetGeneratedMocFile (mocFileName' config);  				if (mocFile != null)  					RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  			}  		}  		else {  			string mocFileName = GetMocFileName (file.Name);  			VCFile mocFile = GetGeneratedMocFile (mocFileName' null);  			if (mocFile != null)  				RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  		}  	}  }  catch {  	throw new Qt4VSException (SR.GetString ("QtProject_CannotRemoveMocStep"' file.FullPath));  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: if (HelperFunctions.HasHeaderFileExtension (file.Name)) {  	foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  		VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  		if (tool == null)  			continue;  		string cmdLine = tool.CommandLine;  		if (cmdLine.Length > 0) {  			Regex rex = new Regex (@"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  			while (true) {  				Match m = rex.Match (cmdLine);  				if (!m.Success)  					break;  				int start = m.Index;  				int end = cmdLine.IndexOf ("&&"' start);  				int a = cmdLine.IndexOf ("\r\n"' start);  				if ((a > -1 && a < end) || (end < 0 && a > -1))  					end = a;  				if (end < 0)  					end = cmdLine.Length;  				cmdLine = cmdLine.Remove (start' end - start).Trim ();  				if (cmdLine.StartsWith ("&&"))  					cmdLine = cmdLine.Remove (0' 2).Trim ();  			}  			tool.CommandLine = cmdLine;  		}  		Regex reg = new Regex ("Moc'ing .+\\.\\.\\.");  		string addDepends = tool.AdditionalDependencies;  		addDepends = System.Text.RegularExpressions.Regex.Replace (addDepends' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")"' "");  		addDepends = addDepends.Replace (file.RelativePath' "");  		tool.AdditionalDependencies = "";  		tool.Description = reg.Replace (tool.Description' "");  		tool.Description = tool.Description.Replace ("MOC " + file.Name' "");  		string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  		string pattern = "(\"(.*\\\\" + GetMocFileName (file.FullPath) + ")\"|(\\S*" + GetMocFileName (file.FullPath) + "))";  		string outputMocFile = null;  		System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  		tool.Outputs = tool.Outputs.Replace (ProjectMacros.Name' baseFileName);  		MatchCollection matchList = regExp.Matches (tool.Outputs);  		if (matchList.Count > 0) {  			if (matchList [0].Length > 0) {  				outputMocFile = matchList [0].ToString ();  			}  			else if (matchList [1].Length > 1) {  				outputMocFile = matchList [1].ToString ();  			}  		}  		tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' pattern' ""' RegexOptions.Multiline | RegexOptions.IgnoreCase);  		tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"\s*;\s*;\s*"' ";"' RegexOptions.Multiline);  		tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"(^\s*;|\s*;\s*$)"' ""' RegexOptions.Multiline);  		if (outputMocFile != null) {  			if (outputMocFile.StartsWith ("\""))  				outputMocFile = outputMocFile.Substring (1);  			if (outputMocFile.EndsWith ("\""))  				outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  			outputMocFile = outputMocFile.Replace ("$(ConfigurationName)"' config.Name.Substring (0' config.Name.IndexOf ('|')));  			outputMocFile = outputMocFile.Replace ("$(PlatformName)"' config.Name.Remove (0' config.Name.IndexOf ('|') + 1));  		}  		VCFile mocFile = GetFileFromProject (outputMocFile);  		if (mocFile != null)  			RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  	}  	file.ItemType = "ClInclude";  }  else {  	if (QtVSIPSettings.HasDifferentMocFilePerConfig (envPro) || QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro)) {  		foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  			string mocFileName = GetMocFileName (file.Name);  			VCFile mocFile = GetGeneratedMocFile (mocFileName' config);  			if (mocFile != null)  				RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  		}  	}  	else {  		string mocFileName = GetMocFileName (file.Name);  		VCFile mocFile = GetGeneratedMocFile (mocFileName' null);  		if (mocFile != null)  			RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)file.FileConfigurations) {  	VCCustomBuildTool tool = HelperFunctions.GetCustomBuildTool (config);  	if (tool == null)  		continue;  	string cmdLine = tool.CommandLine;  	if (cmdLine.Length > 0) {  		Regex rex = new Regex (@"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  		while (true) {  			Match m = rex.Match (cmdLine);  			if (!m.Success)  				break;  			int start = m.Index;  			int end = cmdLine.IndexOf ("&&"' start);  			int a = cmdLine.IndexOf ("\r\n"' start);  			if ((a > -1 && a < end) || (end < 0 && a > -1))  				end = a;  			if (end < 0)  				end = cmdLine.Length;  			cmdLine = cmdLine.Remove (start' end - start).Trim ();  			if (cmdLine.StartsWith ("&&"))  				cmdLine = cmdLine.Remove (0' 2).Trim ();  		}  		tool.CommandLine = cmdLine;  	}  	Regex reg = new Regex ("Moc'ing .+\\.\\.\\.");  	string addDepends = tool.AdditionalDependencies;  	addDepends = System.Text.RegularExpressions.Regex.Replace (addDepends' @"(\S*moc.exe|""\S+:\\\.*moc.exe"")"' "");  	addDepends = addDepends.Replace (file.RelativePath' "");  	tool.AdditionalDependencies = "";  	tool.Description = reg.Replace (tool.Description' "");  	tool.Description = tool.Description.Replace ("MOC " + file.Name' "");  	string baseFileName = file.Name.Remove (file.Name.LastIndexOf ('.'));  	string pattern = "(\"(.*\\\\" + GetMocFileName (file.FullPath) + ")\"|(\\S*" + GetMocFileName (file.FullPath) + "))";  	string outputMocFile = null;  	System.Text.RegularExpressions.Regex regExp = new Regex (pattern);  	tool.Outputs = tool.Outputs.Replace (ProjectMacros.Name' baseFileName);  	MatchCollection matchList = regExp.Matches (tool.Outputs);  	if (matchList.Count > 0) {  		if (matchList [0].Length > 0) {  			outputMocFile = matchList [0].ToString ();  		}  		else if (matchList [1].Length > 1) {  			outputMocFile = matchList [1].ToString ();  		}  	}  	tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' pattern' ""' RegexOptions.Multiline | RegexOptions.IgnoreCase);  	tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"\s*;\s*;\s*"' ";"' RegexOptions.Multiline);  	tool.Outputs = System.Text.RegularExpressions.Regex.Replace (tool.Outputs' @"(^\s*;|\s*;\s*$)"' ""' RegexOptions.Multiline);  	if (outputMocFile != null) {  		if (outputMocFile.StartsWith ("\""))  			outputMocFile = outputMocFile.Substring (1);  		if (outputMocFile.EndsWith ("\""))  			outputMocFile = outputMocFile.Substring (0' outputMocFile.Length - 1);  		outputMocFile = outputMocFile.Replace ("$(ConfigurationName)"' config.Name.Substring (0' config.Name.IndexOf ('|')));  		outputMocFile = outputMocFile.Replace ("$(PlatformName)"' config.Name.Remove (0' config.Name.IndexOf ('|') + 1));  	}  	VCFile mocFile = GetFileFromProject (outputMocFile);  	if (mocFile != null)  		RemoveFileFromFilter (mocFile' Filters.GeneratedFiles ());  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: if (cmdLine.Length > 0) {  	Regex rex = new Regex (@"(\S*moc.exe|""\S+:\\\.*moc.exe"")");  	while (true) {  		Match m = rex.Match (cmdLine);  		if (!m.Success)  			break;  		int start = m.Index;  		int end = cmdLine.IndexOf ("&&"' start);  		int a = cmdLine.IndexOf ("\r\n"' start);  		if ((a > -1 && a < end) || (end < 0 && a > -1))  			end = a;  		if (end < 0)  			end = cmdLine.Length;  		cmdLine = cmdLine.Remove (start' end - start).Trim ();  		if (cmdLine.StartsWith ("&&"))  			cmdLine = cmdLine.Remove (0' 2).Trim ();  	}  	tool.CommandLine = cmdLine;  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: while (true) {  	Match m = rex.Match (cmdLine);  	if (!m.Success)  		break;  	int start = m.Index;  	int end = cmdLine.IndexOf ("&&"' start);  	int a = cmdLine.IndexOf ("\r\n"' start);  	if ((a > -1 && a < end) || (end < 0 && a > -1))  		end = a;  	if (end < 0)  		end = cmdLine.Length;  	cmdLine = cmdLine.Remove (start' end - start).Trim ();  	if (cmdLine.StartsWith ("&&"))  		cmdLine = cmdLine.Remove (0' 2).Trim ();  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: if (cmdLine.StartsWith ("&&"))  	cmdLine = cmdLine.Remove (0' 2).Trim ();  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RemoveMocStep,The following statement contains a magic number: cmdLine = cmdLine.Remove (0' 2).Trim ();  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,MoveFileToDeletedFolder,The following statement contains a magic number: try {  	if (!Directory.Exists (destFolder))  		Directory.CreateDirectory (destFolder);  	while (File.Exists (destName)) {  		fileNr++;  		destName = destName.Substring (0' destName.LastIndexOf (".")) + ".b";  		if (fileNr > 9)  			destName += fileNr.ToString ();  		else  			destName += "0" + fileNr.ToString ();  	}  	srcFile.MoveTo (destName);  }  catch (System.Exception e) {  	Messages.DisplayWarningMessage (e' SR.GetString ("QtProject_DeletedFolderFullOrProteced"));  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,MoveFileToDeletedFolder,The following statement contains a magic number: while (File.Exists (destName)) {  	fileNr++;  	destName = destName.Substring (0' destName.LastIndexOf (".")) + ".b";  	if (fileNr > 9)  		destName += fileNr.ToString ();  	else  		destName += "0" + fileNr.ToString ();  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,MoveFileToDeletedFolder,The following statement contains a magic number: if (fileNr > 9)  	destName += fileNr.ToString ();  else  	destName += "0" + fileNr.ToString ();  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetGeneratedMocFile,The following statement contains a magic number: if (QtVSIPSettings.HasDifferentMocFilePerConfig (envPro) || QtVSIPSettings.HasDifferentMocFilePerPlatform (envPro)) {  	VCConfiguration projectConfig = (VCConfiguration)fileConfig.ProjectConfiguration;  	string configName = projectConfig.ConfigurationName;  	string platformName = ((VCPlatform)projectConfig.Platform).Name;  	VCFilter generatedFiles = FindFilterFromGuid (Filters.GeneratedFiles ().UniqueIdentifier);  	if (generatedFiles == null)  		return null;  	foreach (VCFilter filt in (IVCCollection)generatedFiles.Filters)  		if (filt.Name == configName + "_" + platformName || filt.Name == configName || filt.Name == platformName)  			foreach (VCFile filtFile in (IVCCollection)filt.Files)  				if (filtFile.FullPath.EndsWith (fileName))  					return filtFile;  	//If a project from the an AddIn prior to 1.1.0 was loaded' the generated files are located directly  	//in the generated files filter.  	string relativeMocPath = QtVSIPSettings.GetMocDirectory (envPro' configName' platformName) + '\\' + fileName;  	//Remove .\ at the beginning of the mocPath  	if (relativeMocPath.StartsWith (".\\"))  		relativeMocPath = relativeMocPath.Remove (0' 2);  	foreach (VCFile filtFile in (IVCCollection)generatedFiles.Files)  		if (filtFile.FullPath.EndsWith (relativeMocPath' StringComparison.OrdinalIgnoreCase))  			return filtFile;  }  else {  	VCFilter generatedFiles = FindFilterFromGuid (Filters.GeneratedFiles ().UniqueIdentifier);  	foreach (VCFile filtFile in (IVCCollection)generatedFiles.Files)  		if (filtFile.FullPath.EndsWith ('\\' + fileName))  			return filtFile;  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetGeneratedMocFile,The following statement contains a magic number: if (relativeMocPath.StartsWith (".\\"))  	relativeMocPath = relativeMocPath.Remove (0' 2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetGeneratedMocFile,The following statement contains a magic number: relativeMocPath = relativeMocPath.Remove (0' 2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,The following statement contains a magic number: foreach (VCFileConfiguration config in (IVCCollection)vcfile.FileConfigurations) {  	try {  		VCCustomBuildTool tool = null;  		VCFile mocable = null;  		if (isHeaderFile) {  			mocable = vcfile;  			tool = HelperFunctions.GetCustomBuildTool (config);  		}  		else {  			string mocFileName = GetMocFileName (vcfile.FullPath);  			VCFile mocFile = GetGeneratedMocFile (mocFileName' config);  			if (mocFile != null) {  				VCFileConfiguration mocFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  				tool = HelperFunctions.GetCustomBuildTool (mocFileConfig);  				mocable = mocFile;  			}  			// It is possible that the function was called from a source file's property change' it is possible that  			// we have to obtain the tool from the according header file  			if (tool == null && singleFile) {  				string headerName = vcfile.FullPath.Remove (vcfile.FullPath.LastIndexOf ('.')) + ".h";  				mocFileName = GetMocFileName (headerName);  				mocFile = GetGeneratedMocFile (mocFileName' config);  				if (mocFile != null) {  					mocable = GetFileFromProject (headerName);  					VCFileConfiguration customBuildConfig = GetVCFileConfigurationByName (mocable' config.Name);  					tool = HelperFunctions.GetCustomBuildTool (customBuildConfig);  				}  			}  		}  		if (tool == null || tool.CommandLine.ToLower ().IndexOf ("moc.exe") == -1)  			continue;  		VCFile srcMocFile = GetSourceFileForMocStep (mocable);  		VCFile cppFile = GetCppFileForMocStep (mocable);  		if (srcMocFile == null)  			continue;  		bool mocableIsCPP = (srcMocFile == cppFile);  		string pchParameters = null;  		VCFileConfiguration cppConfig = GetVCFileConfigurationByName (cppFile' config.Name);  		CompilerToolWrapper compiler = CompilerToolWrapper.Create (cppConfig);  		if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone)  			pchParameters = GetPCHMocOptions (srcMocFile' compiler);  		string outputFileName = QtVSIPSettings.GetMocDirectory (envPro) + "\\";  		if (mocableIsCPP) {  			outputFileName += ProjectMacros.Name;  			outputFileName += ".moc";  		}  		else {  			outputFileName += "moc_";  			outputFileName += ProjectMacros.Name;  			outputFileName += ".cpp";  		}  		string newCmdLine = mocCmdChecker.NewCmdLine (tool.CommandLine' GetIncludes (cppConfig)' GetDefines (cppConfig)' QtVSIPSettings.GetMocOptions (envPro)' srcMocFile.RelativePath' pchParameters' outputFileName);  		// The tool's command line automatically gets a trailing "\r\n".  		// We have to remove it to make the check below work.  		string origCommandLine = tool.CommandLine;  		if (origCommandLine.EndsWith ("\r\n"))  			origCommandLine = origCommandLine.Substring (0' origCommandLine.Length - 2);  		if (newCmdLine != null && newCmdLine != origCommandLine) {  			// We have to delete the old moc file in order to trigger custom build step.  			string configName = config.Name.Remove (config.Name.IndexOf ("|"));  			string platformName = config.Name.Substring (config.Name.IndexOf ("|") + 1);  			string projectPath = envPro.FullName.Remove (envPro.FullName.LastIndexOf ('\\'));  			string mocRelPath = GetRelativeMocFilePath (srcMocFile.FullPath' configName' platformName);  			string mocPath = Path.Combine (projectPath' mocRelPath);  			if (File.Exists (mocPath))  				File.Delete (mocPath);  			tool.CommandLine = newCmdLine;  		}  	}  	catch {  		Messages.PaneMessage (dte' "ERROR: failed to refresh moc step for " + vcfile.ItemName);  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,The following statement contains a magic number: try {  	VCCustomBuildTool tool = null;  	VCFile mocable = null;  	if (isHeaderFile) {  		mocable = vcfile;  		tool = HelperFunctions.GetCustomBuildTool (config);  	}  	else {  		string mocFileName = GetMocFileName (vcfile.FullPath);  		VCFile mocFile = GetGeneratedMocFile (mocFileName' config);  		if (mocFile != null) {  			VCFileConfiguration mocFileConfig = GetVCFileConfigurationByName (mocFile' config.Name);  			tool = HelperFunctions.GetCustomBuildTool (mocFileConfig);  			mocable = mocFile;  		}  		// It is possible that the function was called from a source file's property change' it is possible that  		// we have to obtain the tool from the according header file  		if (tool == null && singleFile) {  			string headerName = vcfile.FullPath.Remove (vcfile.FullPath.LastIndexOf ('.')) + ".h";  			mocFileName = GetMocFileName (headerName);  			mocFile = GetGeneratedMocFile (mocFileName' config);  			if (mocFile != null) {  				mocable = GetFileFromProject (headerName);  				VCFileConfiguration customBuildConfig = GetVCFileConfigurationByName (mocable' config.Name);  				tool = HelperFunctions.GetCustomBuildTool (customBuildConfig);  			}  		}  	}  	if (tool == null || tool.CommandLine.ToLower ().IndexOf ("moc.exe") == -1)  		continue;  	VCFile srcMocFile = GetSourceFileForMocStep (mocable);  	VCFile cppFile = GetCppFileForMocStep (mocable);  	if (srcMocFile == null)  		continue;  	bool mocableIsCPP = (srcMocFile == cppFile);  	string pchParameters = null;  	VCFileConfiguration cppConfig = GetVCFileConfigurationByName (cppFile' config.Name);  	CompilerToolWrapper compiler = CompilerToolWrapper.Create (cppConfig);  	if (compiler.GetUsePrecompiledHeader () != pchOption.pchNone)  		pchParameters = GetPCHMocOptions (srcMocFile' compiler);  	string outputFileName = QtVSIPSettings.GetMocDirectory (envPro) + "\\";  	if (mocableIsCPP) {  		outputFileName += ProjectMacros.Name;  		outputFileName += ".moc";  	}  	else {  		outputFileName += "moc_";  		outputFileName += ProjectMacros.Name;  		outputFileName += ".cpp";  	}  	string newCmdLine = mocCmdChecker.NewCmdLine (tool.CommandLine' GetIncludes (cppConfig)' GetDefines (cppConfig)' QtVSIPSettings.GetMocOptions (envPro)' srcMocFile.RelativePath' pchParameters' outputFileName);  	// The tool's command line automatically gets a trailing "\r\n".  	// We have to remove it to make the check below work.  	string origCommandLine = tool.CommandLine;  	if (origCommandLine.EndsWith ("\r\n"))  		origCommandLine = origCommandLine.Substring (0' origCommandLine.Length - 2);  	if (newCmdLine != null && newCmdLine != origCommandLine) {  		// We have to delete the old moc file in order to trigger custom build step.  		string configName = config.Name.Remove (config.Name.IndexOf ("|"));  		string platformName = config.Name.Substring (config.Name.IndexOf ("|") + 1);  		string projectPath = envPro.FullName.Remove (envPro.FullName.LastIndexOf ('\\'));  		string mocRelPath = GetRelativeMocFilePath (srcMocFile.FullPath' configName' platformName);  		string mocPath = Path.Combine (projectPath' mocRelPath);  		if (File.Exists (mocPath))  			File.Delete (mocPath);  		tool.CommandLine = newCmdLine;  	}  }  catch {  	Messages.PaneMessage (dte' "ERROR: failed to refresh moc step for " + vcfile.ItemName);  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,The following statement contains a magic number: if (origCommandLine.EndsWith ("\r\n"))  	origCommandLine = origCommandLine.Substring (0' origCommandLine.Length - 2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,RefreshMocStep,The following statement contains a magic number: origCommandLine = origCommandLine.Substring (0' origCommandLine.Length - 2);  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetSourceFileForMocStep,The following statement contains a magic number: if (fileName.ToLower ().EndsWith (".moc")) {  	fileName = fileName.Substring (0' fileName.Length - 4) + ".cpp";  	if (fileName.Length > 0) {  		foreach (VCFile f in (IVCCollection)vcPro.Files) {  			if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ()))  				return f;  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,GetSourceFileForMocStep,The following statement contains a magic number: fileName = fileName.Substring (0' fileName.Length - 4) + ".cpp";  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (vcFilter != null) {  	List<VCFile> generatedFiles = GetAllFilesFromFilter (vcFilter);  	for (int i = generatedFiles.Count - 1; i >= 0; i--) {  		VCFile file = generatedFiles [i];  		string fileName = null;  		if (file.Name.ToLower ().StartsWith ("moc_")) {  			fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  		}  		else if (file.Name.ToLower ().EndsWith (".moc")) {  			fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  		}  		if (fileName != null) {  			bool found = false;  			foreach (VCFile f in (IVCCollection)vcPro.Files) {  				if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  					if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  						orgFiles.Add (f);  					RemoveFileFromFilter (file' vcFilter);  					HelperFunctions.DeleteEmptyParentDirs (file);  					found = true;  					break;  				}  			}  			if (!found) {  				// We can't find foo.h for moc_foo.cpp or   				// we can't find foo.cpp for foo.moc' thus we put the  				// filename moc_foo.cpp / foo.moc into an error list.  				abandonedMocFiles.Add (file.Name);  			}  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (vcFilter != null) {  	List<VCFile> generatedFiles = GetAllFilesFromFilter (vcFilter);  	for (int i = generatedFiles.Count - 1; i >= 0; i--) {  		VCFile file = generatedFiles [i];  		string fileName = null;  		if (file.Name.ToLower ().StartsWith ("moc_")) {  			fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  		}  		else if (file.Name.ToLower ().EndsWith (".moc")) {  			fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  		}  		if (fileName != null) {  			bool found = false;  			foreach (VCFile f in (IVCCollection)vcPro.Files) {  				if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  					if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  						orgFiles.Add (f);  					RemoveFileFromFilter (file' vcFilter);  					HelperFunctions.DeleteEmptyParentDirs (file);  					found = true;  					break;  				}  			}  			if (!found) {  				// We can't find foo.h for moc_foo.cpp or   				// we can't find foo.cpp for foo.moc' thus we put the  				// filename moc_foo.cpp / foo.moc into an error list.  				abandonedMocFiles.Add (file.Name);  			}  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (vcFilter != null) {  	List<VCFile> generatedFiles = GetAllFilesFromFilter (vcFilter);  	for (int i = generatedFiles.Count - 1; i >= 0; i--) {  		VCFile file = generatedFiles [i];  		string fileName = null;  		if (file.Name.ToLower ().StartsWith ("moc_")) {  			fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  		}  		else if (file.Name.ToLower ().EndsWith (".moc")) {  			fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  		}  		if (fileName != null) {  			bool found = false;  			foreach (VCFile f in (IVCCollection)vcPro.Files) {  				if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  					if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  						orgFiles.Add (f);  					RemoveFileFromFilter (file' vcFilter);  					HelperFunctions.DeleteEmptyParentDirs (file);  					found = true;  					break;  				}  			}  			if (!found) {  				// We can't find foo.h for moc_foo.cpp or   				// we can't find foo.cpp for foo.moc' thus we put the  				// filename moc_foo.cpp / foo.moc into an error list.  				abandonedMocFiles.Add (file.Name);  			}  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: for (int i = generatedFiles.Count - 1; i >= 0; i--) {  	VCFile file = generatedFiles [i];  	string fileName = null;  	if (file.Name.ToLower ().StartsWith ("moc_")) {  		fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  	}  	else if (file.Name.ToLower ().EndsWith (".moc")) {  		fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  	}  	if (fileName != null) {  		bool found = false;  		foreach (VCFile f in (IVCCollection)vcPro.Files) {  			if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  				if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  					orgFiles.Add (f);  				RemoveFileFromFilter (file' vcFilter);  				HelperFunctions.DeleteEmptyParentDirs (file);  				found = true;  				break;  			}  		}  		if (!found) {  			// We can't find foo.h for moc_foo.cpp or   			// we can't find foo.cpp for foo.moc' thus we put the  			// filename moc_foo.cpp / foo.moc into an error list.  			abandonedMocFiles.Add (file.Name);  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: for (int i = generatedFiles.Count - 1; i >= 0; i--) {  	VCFile file = generatedFiles [i];  	string fileName = null;  	if (file.Name.ToLower ().StartsWith ("moc_")) {  		fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  	}  	else if (file.Name.ToLower ().EndsWith (".moc")) {  		fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  	}  	if (fileName != null) {  		bool found = false;  		foreach (VCFile f in (IVCCollection)vcPro.Files) {  			if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  				if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  					orgFiles.Add (f);  				RemoveFileFromFilter (file' vcFilter);  				HelperFunctions.DeleteEmptyParentDirs (file);  				found = true;  				break;  			}  		}  		if (!found) {  			// We can't find foo.h for moc_foo.cpp or   			// we can't find foo.cpp for foo.moc' thus we put the  			// filename moc_foo.cpp / foo.moc into an error list.  			abandonedMocFiles.Add (file.Name);  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: for (int i = generatedFiles.Count - 1; i >= 0; i--) {  	VCFile file = generatedFiles [i];  	string fileName = null;  	if (file.Name.ToLower ().StartsWith ("moc_")) {  		fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  	}  	else if (file.Name.ToLower ().EndsWith (".moc")) {  		fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  	}  	if (fileName != null) {  		bool found = false;  		foreach (VCFile f in (IVCCollection)vcPro.Files) {  			if (f.FullPath.ToLower ().EndsWith ("\\" + fileName.ToLower ())) {  				if (!orgFiles.Contains (f) && HasMocStep (f' oldMocDir))  					orgFiles.Add (f);  				RemoveFileFromFilter (file' vcFilter);  				HelperFunctions.DeleteEmptyParentDirs (file);  				found = true;  				break;  			}  		}  		if (!found) {  			// We can't find foo.h for moc_foo.cpp or   			// we can't find foo.cpp for foo.moc' thus we put the  			// filename moc_foo.cpp / foo.moc into an error list.  			abandonedMocFiles.Add (file.Name);  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (file.Name.ToLower ().StartsWith ("moc_")) {  	fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  }  else if (file.Name.ToLower ().EndsWith (".moc")) {  	fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (file.Name.ToLower ().StartsWith ("moc_")) {  	fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  }  else if (file.Name.ToLower ().EndsWith (".moc")) {  	fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (file.Name.ToLower ().StartsWith ("moc_")) {  	fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  }  else if (file.Name.ToLower ().EndsWith (".moc")) {  	fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: fileName = file.Name.Substring (4' file.Name.Length - 8) + ".h";  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: if (file.Name.ToLower ().EndsWith (".moc")) {  	fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  }  
Magic Number,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,UpdateMocSteps,The following statement contains a magic number: fileName = file.Name.Substring (0' file.Name.Length - 4) + ".cpp";  
Magic Number,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,Size,The following statement contains a magic number: s.Width = GetGridValue ("gridX"' 10);  
Magic Number,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,Size,The following statement contains a magic number: s.Height = GetGridValue ("gridY"' 10);  
Magic Number,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetGridValue,The following statement contains a magic number: if (regKey != null) {  	try {  		int val = Convert.ToInt32 ((regKey.GetValue (key' defaultValue)));  		if (val <= 0 || val > 100)  			return defaultValue;  		else  			return val;  	}  	catch (Exception) {  		return defaultValue;  	}  }  else {  	return defaultValue;  }  
Magic Number,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetGridValue,The following statement contains a magic number: try {  	int val = Convert.ToInt32 ((regKey.GetValue (key' defaultValue)));  	if (val <= 0 || val > 100)  		return defaultValue;  	else  		return val;  }  catch (Exception) {  	return defaultValue;  }  
Magic Number,Digia.Qt4ProjectLib,QtVSIPSettings,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtVSIPSettings.cs,GetGridValue,The following statement contains a magic number: if (val <= 0 || val > 100)  	return defaultValue;  else  	return val;  
Magic Number,Digia.Qt4ProjectLib,RccOptions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\RccOptions.cs,RccOptions,The following statement contains a magic number: if (id.StartsWith (".\\"))  	name = name.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,RccOptions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\RccOptions.cs,RccOptions,The following statement contains a magic number: name = name.Substring (2);  
Magic Number,Digia.Qt4ProjectLib,RccOptions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\RccOptions.cs,RccOptions,The following statement contains a magic number: if (name.EndsWith (".qrc"))  	name = name.Substring (0' name.Length - 4);  
Magic Number,Digia.Qt4ProjectLib,RccOptions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\RccOptions.cs,RccOptions,The following statement contains a magic number: name = name.Substring (0' name.Length - 4);  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: try {  	StreamReader inF = new StreamReader (Locate_qglobal_h ());  	Regex rgxpVersion = new Regex ("#define\\s*QT_VERSION\\s*0x(?<number>\\d+)"' RegexOptions.Multiline);  	string contents = inF.ReadToEnd ();  	inF.Close ();  	Match matchObj = rgxpVersion.Match (contents);  	if (!matchObj.Success) {  		qtDir = null;  		return;  	}  	string strVersion = matchObj.Groups [1].ToString ();  	uint version = Convert.ToUInt32 (strVersion' 16);  	qtMajor = version >> 16;  	qtMinor = (version >> 8) & 0xFF;  	qtPatch = version & 0xFF;  	if (qtMajor == 4) {  		qt4Version = true;  	}  	else {  		qt4Version = false;  	}  }  catch (Exception/*e*/) {  	qtDir = null;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: try {  	StreamReader inF = new StreamReader (Locate_qglobal_h ());  	Regex rgxpVersion = new Regex ("#define\\s*QT_VERSION\\s*0x(?<number>\\d+)"' RegexOptions.Multiline);  	string contents = inF.ReadToEnd ();  	inF.Close ();  	Match matchObj = rgxpVersion.Match (contents);  	if (!matchObj.Success) {  		qtDir = null;  		return;  	}  	string strVersion = matchObj.Groups [1].ToString ();  	uint version = Convert.ToUInt32 (strVersion' 16);  	qtMajor = version >> 16;  	qtMinor = (version >> 8) & 0xFF;  	qtPatch = version & 0xFF;  	if (qtMajor == 4) {  		qt4Version = true;  	}  	else {  		qt4Version = false;  	}  }  catch (Exception/*e*/) {  	qtDir = null;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: try {  	StreamReader inF = new StreamReader (Locate_qglobal_h ());  	Regex rgxpVersion = new Regex ("#define\\s*QT_VERSION\\s*0x(?<number>\\d+)"' RegexOptions.Multiline);  	string contents = inF.ReadToEnd ();  	inF.Close ();  	Match matchObj = rgxpVersion.Match (contents);  	if (!matchObj.Success) {  		qtDir = null;  		return;  	}  	string strVersion = matchObj.Groups [1].ToString ();  	uint version = Convert.ToUInt32 (strVersion' 16);  	qtMajor = version >> 16;  	qtMinor = (version >> 8) & 0xFF;  	qtPatch = version & 0xFF;  	if (qtMajor == 4) {  		qt4Version = true;  	}  	else {  		qt4Version = false;  	}  }  catch (Exception/*e*/) {  	qtDir = null;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: try {  	StreamReader inF = new StreamReader (Locate_qglobal_h ());  	Regex rgxpVersion = new Regex ("#define\\s*QT_VERSION\\s*0x(?<number>\\d+)"' RegexOptions.Multiline);  	string contents = inF.ReadToEnd ();  	inF.Close ();  	Match matchObj = rgxpVersion.Match (contents);  	if (!matchObj.Success) {  		qtDir = null;  		return;  	}  	string strVersion = matchObj.Groups [1].ToString ();  	uint version = Convert.ToUInt32 (strVersion' 16);  	qtMajor = version >> 16;  	qtMinor = (version >> 8) & 0xFF;  	qtPatch = version & 0xFF;  	if (qtMajor == 4) {  		qt4Version = true;  	}  	else {  		qt4Version = false;  	}  }  catch (Exception/*e*/) {  	qtDir = null;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: qtMajor = version >> 16;  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: qtMinor = (version >> 8) & 0xFF;  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,VersionInformation,The following statement contains a magic number: if (qtMajor == 4) {  	qt4Version = true;  }  else {  	qt4Version = false;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: foreach (string filename in candidates) {  	if (File.Exists (filename)) {  		// check whether we look at the real qglobal.h or just a "pointer"  		StreamReader inF = new StreamReader (filename);  		Regex rgxpVersion = new Regex ("#include\\s+\"(.+global.h)\""' RegexOptions.Multiline);  		Match matchObj = rgxpVersion.Match (inF.ReadToEnd ());  		inF.Close ();  		if (!matchObj.Success)  			return filename;  		if (matchObj.Groups.Count >= 2) {  			string origCurrentDirectory = Directory.GetCurrentDirectory ();  			Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  			// remove "\\qglobal.h"  			string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  			Directory.SetCurrentDirectory (origCurrentDirectory);  			if (File.Exists (absIncludeFile))  				return absIncludeFile;  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: foreach (string filename in candidates) {  	if (File.Exists (filename)) {  		// check whether we look at the real qglobal.h or just a "pointer"  		StreamReader inF = new StreamReader (filename);  		Regex rgxpVersion = new Regex ("#include\\s+\"(.+global.h)\""' RegexOptions.Multiline);  		Match matchObj = rgxpVersion.Match (inF.ReadToEnd ());  		inF.Close ();  		if (!matchObj.Success)  			return filename;  		if (matchObj.Groups.Count >= 2) {  			string origCurrentDirectory = Directory.GetCurrentDirectory ();  			Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  			// remove "\\qglobal.h"  			string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  			Directory.SetCurrentDirectory (origCurrentDirectory);  			if (File.Exists (absIncludeFile))  				return absIncludeFile;  		}  	}  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: if (File.Exists (filename)) {  	// check whether we look at the real qglobal.h or just a "pointer"  	StreamReader inF = new StreamReader (filename);  	Regex rgxpVersion = new Regex ("#include\\s+\"(.+global.h)\""' RegexOptions.Multiline);  	Match matchObj = rgxpVersion.Match (inF.ReadToEnd ());  	inF.Close ();  	if (!matchObj.Success)  		return filename;  	if (matchObj.Groups.Count >= 2) {  		string origCurrentDirectory = Directory.GetCurrentDirectory ();  		Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  		// remove "\\qglobal.h"  		string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  		Directory.SetCurrentDirectory (origCurrentDirectory);  		if (File.Exists (absIncludeFile))  			return absIncludeFile;  	}  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: if (File.Exists (filename)) {  	// check whether we look at the real qglobal.h or just a "pointer"  	StreamReader inF = new StreamReader (filename);  	Regex rgxpVersion = new Regex ("#include\\s+\"(.+global.h)\""' RegexOptions.Multiline);  	Match matchObj = rgxpVersion.Match (inF.ReadToEnd ());  	inF.Close ();  	if (!matchObj.Success)  		return filename;  	if (matchObj.Groups.Count >= 2) {  		string origCurrentDirectory = Directory.GetCurrentDirectory ();  		Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  		// remove "\\qglobal.h"  		string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  		Directory.SetCurrentDirectory (origCurrentDirectory);  		if (File.Exists (absIncludeFile))  			return absIncludeFile;  	}  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: if (matchObj.Groups.Count >= 2) {  	string origCurrentDirectory = Directory.GetCurrentDirectory ();  	Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  	// remove "\\qglobal.h"  	string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  	Directory.SetCurrentDirectory (origCurrentDirectory);  	if (File.Exists (absIncludeFile))  		return absIncludeFile;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: if (matchObj.Groups.Count >= 2) {  	string origCurrentDirectory = Directory.GetCurrentDirectory ();  	Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  	// remove "\\qglobal.h"  	string absIncludeFile = Path.GetFullPath (matchObj.Groups [1].ToString ());  	Directory.SetCurrentDirectory (origCurrentDirectory);  	if (File.Exists (absIncludeFile))  		return absIncludeFile;  }  
Magic Number,Digia.Qt4ProjectLib,VersionInformation,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\VersionInformation.cs,Locate_qglobal_h,The following statement contains a magic number: Directory.SetCurrentDirectory (filename.Substring (0' filename.Length - 10));  
Missing Default,Digia.Qt4ProjectLib,CxxStreamReader,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\CxxStreamReader.cs,ProcessString,The following switch statement is missing a default case: switch (state) {  case State.Normal:  	{  		string lineCopy = line;  		line = "";  		for (int i = 0' j = 1; i < lineCopy.Length; ++i' ++j) {  			if (lineCopy [i] == '/' && j < lineCopy.Length) {  				if (lineCopy [j] == '*') {  					// C style comment detected  					int endIdx = lineCopy.IndexOf ("*/"' j + 1);  					if (endIdx >= 0) {  						i = endIdx + 1;  						j = i + 1;  						continue;  					}  					else {  						state = State.Comment;  						break;  					}  				}  				else if (lineCopy [j] == '/') {  					// C++ style comment detected  					break;  				}  			}  			else if (lineCopy [i] == '"') {  				// start of a string detected  				int endIdx = j - 1;  				do {  					endIdx = lineCopy.IndexOf ('"'' endIdx + 1);  				}  				while (endIdx >= 0 && lineCopy [endIdx - 1] == '\\');  				if (endIdx < 0) {  					if (lineCopy.EndsWith ("\\")) {  						partialLine = line;  						if (!removeStrings)  							partialLine += lineCopy.Substring (i);  						state = State.String;  					}  					else {  						state = State.Normal;  					}  					line = "";  					break;  				}  				else {  					if (!removeStrings)  						line += lineCopy.Substring (i' endIdx - i + 1);  					i = endIdx;  					j = i + 1;  					continue;  				}  			}  			line += lineCopy [i];  		}  	}  	break;  case State.Comment:  	{  		int idx = line.IndexOf ("*/");  		if (idx >= 0) {  			state = State.Normal;  			line = line.Substring (idx + 2);  			break;  		}  		else {  			line = "";  			// skip line  		}  	}  	break;  case State.String:  	{  		string lineCopy = line;  		line = "";  		int endIdx = -1;  		do {  			endIdx = lineCopy.IndexOf ('"'' endIdx + 1);  		}  		while (endIdx >= 0 && lineCopy [endIdx - 1] == '\\');  		if (endIdx < 0) {  			if (!removeStrings)  				partialLine += lineCopy;  		}  		else {  			state = State.Normal;  			line = partialLine;  			if (!removeStrings)  				line += lineCopy.Substring (0' endIdx + 1);  			line += ProcessString (lineCopy.Substring (endIdx + 1)' removeStrings);  		}  	}  	break;  }  
Missing Default,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,WriteProFileOption,The following switch statement is missing a default case: switch (option.AssignSymbol) {  case ProFileOption.AssignType.AT_Equals:  	sw.Write (" = ");  	break;  case ProFileOption.AssignType.AT_MinusEquals:  	sw.Write (" -= ");  	break;  case ProFileOption.AssignType.AT_PlusEquals:  	sw.Write (" += ");  	break;  }  
Missing Default,Digia.Qt4ProjectLib,ProjectExporter,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\ProjectExporter.cs,GetFilesInPriFile,The following switch statement is missing a default case: switch (ftl) {  case FilesToList.FL_CppFiles:  	ParseTag (sr' "SOURCES"' fileList);  	break;  case FilesToList.FL_HFiles:  	ParseTag (sr' "HEADERS"' fileList);  	break;  case FilesToList.FL_UiFiles:  	ParseTag (sr' "FORMS"' fileList);  	break;  }  
Missing Default,Digia.Qt4ProjectLib,HelperFunctions,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\HelperFunctions.cs,GetProjectFiles,The following switch statement is missing a default case: switch (filter) {  case FilesToList.FL_UiFiles:  	// form files  	if (vcfile.Extension.ToLower () == ".ui")  		fileList.Add (ChangePathFormat (vcfile.RelativePath));  	break;  case FilesToList.FL_HFiles:  	if (HelperFunctions.HasHeaderFileExtension (vcfile.Name))  		fileList.Add (ChangePathFormat (vcfile.RelativePath));  	break;  case FilesToList.FL_CppFiles:  	if (HelperFunctions.HasSourceFileExtension (vcfile.Name))  		fileList.Add (ChangePathFormat (vcfile.RelativePath));  	break;  }  
Missing Default,Digia.Qt4ProjectLib,QMakeConf,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QMakeConf.cs,QMakeConf,The following switch statement is missing a default case: switch (itype) {  case InitType.InitQtInstallPath:  	Init (new VersionInformation (str));  	break;  case InitType.InitQMakeConf:  	Init (str);  	break;  }  
Missing Default,Digia.Qt4ProjectLib,QrcParser,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QrcParser.cs,parse,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (reader.LocalName.ToLower () == "qresource") {  		currentPrefix = new QrcPrefix ();  		currentPrefix.Prefix = reader.GetAttribute ("prefix");  		currentPrefix.Language = reader.GetAttribute ("lang");  		prefixes.Push (currentPrefix);  	}  	else if (reader.LocalName.ToLower () == "file") {  		currentItem = new QrcItem ();  		currentItem.Alias = reader.GetAttribute ("name");  	}  	break;  case XmlNodeType.EndElement:  	if (reader.LocalName.ToLower () == "qresource") {  		prefxs.Add (prefixes.Pop ());  	}  	else if (reader.LocalName.ToLower () == "file" && prefixes.Peek () != null && currentItem != null) {  		((QrcPrefix)(prefixes.Peek ())).AddQrcItem (currentItem);  		currentItem = null;  	}  	break;  case XmlNodeType.Text:  	if (currentItem != null)  		currentItem.Path = reader.Value;  	break;  }  
Missing Default,Digia.Qt4ProjectLib,QtProject,C:\repos\JackyDing_Qt4VSAddin\src\Qt4ProjectLib\QtProject.cs,WriteProjectBasicConfigurations,The following switch statement is missing a default case: switch (type & TemplateType.ProjectType) {  case TemplateType.DynamicLibrary:  	configType = ConfigurationTypes.typeDynamicLibrary;  	targetExtension = ".dll";  	break;  case TemplateType.StaticLibrary:  	configType = ConfigurationTypes.typeStaticLibrary;  	targetExtension = ".lib";  	break;  }  
