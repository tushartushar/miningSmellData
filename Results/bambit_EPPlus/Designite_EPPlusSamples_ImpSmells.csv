Implementation smell,Namespace,Class,File,Method,Description
Long Method,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The method has 135 lines of code.
Long Method,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The method has 279 lines of code.
Long Method,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The method has 124 lines of code.
Long Method,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The method has 115 lines of code.
Complex Method,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,Cyclomatic complexity of the method is 17
Complex Method,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,ReadExistingValidationsFromPackage,Cyclomatic complexity of the method is 15
Complex Method,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetDataFromSQL,Cyclomatic complexity of the method is 8
Complex Method,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,Cyclomatic complexity of the method is 9
Complex Method,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,Cyclomatic complexity of the method is 19
Complex Method,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,Cyclomatic complexity of the method is 14
Complex Method,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,Cyclomatic complexity of the method is 12
Complex Method,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,Cyclomatic complexity of the method is 9
Long Parameter List,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,SHGetFileInfo,The method has 5 parameters.
Long Parameter List,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The method has 5 parameters.
Long Parameter List,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The method has 5 parameters.
Long Parameter List,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The method has 6 parameters.
Long Statement,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The length of the statement  "		sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?"; " is 124.
Long Statement,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The length of the statement  "		using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it. " is 125.
Long Statement,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,PrintWholeValidationDetails,The length of the statement  "	sheet.Cells ["D" + row.ToString ()].Value = wholeValidation.Formula.Value.HasValue ? wholeValidation.Formula.Value.Value.ToString () : wholeValidation.Formula.ExcelFormula; " is 172.
Long Statement,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,PrintWholeValidationDetails,The length of the statement  "	sheet.Cells ["E" + row.ToString ()].Value = wholeValidation.Formula2.Value.HasValue ? wholeValidation.Formula2.Value.Value.ToString () : wholeValidation.Formula2.ExcelFormula; " is 175.
Long Statement,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,PrintTimeValidationDetails,The length of the statement  "		value1 = string.Format ("{0}:{1}:{2}"' validation.Formula.Value.Hour' validation.Formula.Value.Minute' validation.Formula.Value.Second ?? 0); " is 141.
Long Statement,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetDataFromSQL,The length of the statement  "		using (SqlCommand sqlCmd = new SqlCommand ("select h.Title' FirstName' MiddleName' LastName' SubTotal' OrderDate' TaxAmt' Freight' TotalDue  from Sales.SalesOrderHeader s inner join HumanResources.Employee h on s.SalesPersonID = h.EmployeeID inner join Person.Contact c on c.ContactID = h.ContactID order by LastName' FirstName' MiddleName;"' sqlConn)) { " is 354.
Long Statement,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The length of the statement  "	var rng = wsList.Cells ["J1"].LoadFromCollection (list' true' TableStyles.Medium10' BindingFlags.Instance | BindingFlags.Public' new MemberInfo[] { " is 147.
Long Statement,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The length of the statement  "		var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1); " is 134.
Long Statement,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The length of the statement  "		package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus"; " is 140.
Long Statement,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The length of the statement  "	//Note: For security reasons you should never mix external data and code(to avoid code injections!)' especially not on a webserver.  " is 131.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "		//If you have a clue where the data is' specify a smaller range in the cells indexer to get better performance (for example "1:1'65536:65536" here) " is 147.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "		//Here we use more than one column in the where clause. We start by searching column D' then use the Offset method to check the value of column C. " is 146.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "		where cell.Value is double && (double)cell.Value >= 9500 && (double)cell.Value <= 10000 && cell.Offset (0' -1).GetValue<DateTime> ().Year == DateTime.Today.Year + 1 " is 164.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "		Console.WriteLine ("Print all cells with a value between 9500 and 10000 in column D and the year of Column C is {0} ..."' DateTime.Today.Year + 1); " is 147.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "		foreach (var cell in query3)//The cells returned here will all be in column D' since that is the address in the indexer. Use the Offset method to print any other cells from the same row. " is 186.
Long Statement,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The length of the statement  "			Console.WriteLine ("Cell {0} has value {1:N0} Date is {2:d}"' cell.Address' cell.Value' cell.Offset (0' -1).GetValue<DateTime> ()); " is 131.
Long Statement,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The length of the statement  "		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages); " is 149.
Long Statement,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The length of the statement  "				using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) { " is 278.
Long Statement,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The length of the statement  "			worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages); " is 149.
Long Statement,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The length of the statement  "		xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML"; " is 158.
Long Statement,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The length of the statement  "			using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) { " is 486.
Long Statement,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The length of the statement  "	shape.Text = "This example demonstrates how to create various drawing objects like pictures' shapes and charts.\n\r\n\rThe first sheet contains all subdirectories and files with an icon' name' size and dates.\n\r\n\rThe second sheet contains statistics about extensions and the top-10 largest files."; " is 301.
Long Statement,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The length of the statement  "		ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3)); " is 122.
Long Statement,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The length of the statement  "	//We need to set the width for column F manually since the end sum formula is the widest cell in the column (EPPlus don't calculate any forumlas' so no output text is avalible).  " is 177.
Long Statement,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The length of the statement  "	var range = sheet.Cells ["A1"].LoadFromText (new FileInfo ("..\\..\\csv\\Sample9-1.txt")' format' TableStyles.Medium27' true); " is 126.
Long Statement,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The length of the statement  "	//Tables don't support custom styling at this stage(you can of course format the cells)' but we can create a Namedstyle for a column... " is 135.
Long Statement,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The length of the statement  "	var tbl = sheet.Tables.Add (range.Offset (0' 0' range.End.Row - range.Start.Row + 1' range.End.Column - range.Start.Column + 2)' "Table"); " is 138.
Long Statement,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The length of the statement  "	var serie3 = chartType2.Series.Add (range.Offset (1' 2' range.End.Row - 1' 1)' range.Offset (1' 0' range.End.Row - 1' 1)); " is 122.
Long Statement,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The length of the statement  "		//Parameter 2 is the directory to report. Paramter 3 is how deep the scan will go. Parameter 4 Skips Icons if set to true (The icon handling is slow) " is 149.
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (templateFile)) {  	//Lock the workbook totally  	var workbook = package.Workbook;  	workbook.Protection.LockWindows = true;  	workbook.Protection.LockStructure = true;  	workbook.View.SetWindowSize (150' 525' 14500' 6000);  	workbook.View.ShowHorizontalScrollBar = false;  	workbook.View.ShowVerticalScrollBar = false;  	workbook.View.ShowSheetTabs = false;  	//Set a password for the workbookprotection  	workbook.Protection.SetPassword ("EPPlus");  	//Encrypt with no password  	package.Encryption.IsEncrypted = true;  	var sheet = package.Workbook.Worksheets.Add ("Quiz");  	sheet.View.ShowGridLines = false;  	sheet.View.ShowHeaders = false;  	using (var range = sheet.Cells ["A:XFD"]) {  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  		range.Style.Font.Name = "Broadway";  		range.Style.Hidden = true;  	}  	sheet.Cells ["A1"].Value = "Quiz-Sweden";  	sheet.Cells ["A1"].Style.Font.Size = 18;  	sheet.Cells ["A3"].Value = "Enter your name:";  	sheet.Column (1).Width = 30;  	sheet.Column (2).Width = 80;  	sheet.Column (3).Width = 20;  	sheet.Cells ["A7"].Value = "What is the name of the capital of Sweden?";  	sheet.Cells ["A9"].Value = "At which place did the Swedish team end up in the Soccer Worldcup 1994?";  	sheet.Cells ["A11"].Value = "What is the first name of the famous Swedish inventor/scientist that founded the Nobel-prize?";  	using (var r = sheet.Cells ["B3'C7'C9'C11"]) {  		r.Style.Fill.BackgroundColor.SetColor (Color.WhiteSmoke);  		r.Style.Border.Top.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Top.Color.SetColor (Color.Black);  		r.Style.Border.Right.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Right.Color.SetColor (Color.Black);  		r.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Bottom.Color.SetColor (Color.Black);  		r.Style.Border.Left.Style = ExcelBorderStyle.Dotted;  		r.Style.Border.Left.Color.SetColor (Color.Black);  		r.Style.Locked = false;  		r.Style.Hidden = false;  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;  	}  	sheet.Select ("B3");  	sheet.Protection.SetPassword ("EPPlus");  	sheet.Protection.AllowSelectLockedCells = false;  	//Options question 1  	var list1 = sheet.Cells ["C7"].DataValidation.AddListDataValidation ();  	list1.Formula.Values.Add ("Bern");  	list1.Formula.Values.Add ("Stockholm");  	list1.Formula.Values.Add ("Oslo");  	list1.ShowErrorMessage = true;  	list1.Error = "Please select a value from the list";  	var list2 = sheet.Cells ["C9"].DataValidation.AddListDataValidation ();  	list2.Formula.Values.Add ("First");  	list2.Formula.Values.Add ("Second");  	list2.Formula.Values.Add ("Third");  	list2.ShowErrorMessage = true;  	list2.Error = "Please select a value from the list";  	var list3 = sheet.Cells ["C11"].DataValidation.AddListDataValidation ();  	list3.Formula.Values.Add ("Carl Gustaf");  	list3.Formula.Values.Add ("Ingmar");  	list3.Formula.Values.Add ("Alfred");  	list3.ShowErrorMessage = true;  	list3.Error = "Please select a value from the list";  	//Save' and the template is ready for use  	package.Save ();  	//Quiz-template is done' now create the answer template and encrypt it...  	using (var packageAnswers = new ExcelPackage (package.Stream))//We use the stream from the template here to get a copy of it.  	 {  		var sheetAnswers = packageAnswers.Workbook.Worksheets [1];  		sheetAnswers.Cells ["C7"].Value = "Stockholm";  		sheetAnswers.Cells ["C9"].Value = "Third";  		sheetAnswers.Cells ["C11"].Value = "Alfred";  		packageAnswers.Encryption.Algorithm = EncryptionAlgorithm.AES192;  		//For the answers we want a little bit stronger encryption  		packageAnswers.SaveAs (answerFile' "EPPlus");  		//Save and set the password to EPPlus. The password can also be set using packageAnswers.Encryption.Password property  	}  	//Ok' Since this is     qan example we create one user answer...  	using (var packageAnswers = new ExcelPackage (package.Stream)) {  		var sheetUser = packageAnswers.Workbook.Worksheets [1];  		sheetUser.Cells ["B3"].Value = "Jan Källman";  		sheetUser.Cells ["C7"].Value = "Bern";  		sheetUser.Cells ["C9"].Value = "Third";  		sheetUser.Cells ["C11"].Value = "Alfred";  		packageAnswers.SaveAs (JKAnswerFile' "JK");  		//We use default encryption here (AES128) and Password JK  	}  }  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: workbook.View.SetWindowSize (150' 525' 14500' 6000);  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: workbook.View.SetWindowSize (150' 525' 14500' 6000);  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: workbook.View.SetWindowSize (150' 525' 14500' 6000);  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: workbook.View.SetWindowSize (150' 525' 14500' 6000);  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Cells ["A1"].Style.Font.Size = 18;  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Column (1).Width = 30;  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Column (2).Width = 80;  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Column (2).Width = 80;  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Column (3).Width = 20;  
Magic Number,EPPlusSamples,Sample10,C:\repos\bambit_EPPlus\SampleApp\Sample10.cs,RunSample10,The following statement contains a magic number: sheet.Column (3).Width = 20;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddIntegerValidation,The following statement contains a magic number: validation.Formula2.Value = 5;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddListValidationFormula,The following statement contains a magic number: sheet.Cells ["B3"].Value = 2;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddListValidationFormula,The following statement contains a magic number: sheet.Cells ["B4"].Value = 3;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddListValidationValues,The following statement contains a magic number: for (var i = 1; i <= 5; i++) {  	validation.Formula.Values.Add (i.ToString ());  }  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddTimeValidation,The following statement contains a magic number: time.Hour = 13;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddTimeValidation,The following statement contains a magic number: time.Minute = 30;  
Magic Number,EPPlusSamples,Sample11,C:\repos\bambit_EPPlus\SampleApp\Sample11.cs,AddTimeValidation,The following statement contains a magic number: time.Second = 10;  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: using (ExcelPackage pck = new ExcelPackage (newFile)) {  	// get the handle to the existing worksheet  	var wsData = pck.Workbook.Worksheets.Add ("SalesData");  	var dataRange = wsData.Cells ["A1"].LoadFromCollection (from s in list  	orderby s.LastName' s.FirstName  	select s' true' OfficeOpenXml.Table.TableStyles.Medium2);  	wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  	wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  	dataRange.AutoFitColumns ();  	var wsPivot = pck.Workbook.Worksheets.Add ("PivotSimple");  	var pivotTable1 = wsPivot.PivotTables.Add (wsPivot.Cells ["A1"]' dataRange' "PerEmploee");  	pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  	var dataField = pivotTable1.DataFields.Add (pivotTable1.Fields [6]);  	dataField.Format = "#'##0";  	pivotTable1.DataOnRows = true;  	var chart = wsPivot.Drawings.AddChart ("PivotChart"' eChartType.Pie' pivotTable1);  	chart.SetPosition (1' 0' 4' 0);  	chart.SetSize (600' 400);  	var wsPivot2 = pck.Workbook.Worksheets.Add ("PivotDateGrp");  	var pivotTable2 = wsPivot2.PivotTables.Add (wsPivot2.Cells ["A3"]' dataRange' "PerEmploeeAndQuarter");  	pivotTable2.RowFields.Add (pivotTable2.Fields ["Name"]);  	//Add a rowfield  	var rowField = pivotTable2.RowFields.Add (pivotTable2.Fields ["OrderDate"]);  	//This is a date field so we want to group by Years and quaters. This will create one additional field for years.  	rowField.AddDateGrouping (eDateGroupBy.Years | eDateGroupBy.Quarters);  	//Get the Quaters field and change the texts  	var quaterField = pivotTable2.Fields.GetDateGroupField (eDateGroupBy.Quarters);  	quaterField.Items [0].Text = "<";  	//Values below min date' but we use auto so its not used  	quaterField.Items [1].Text = "Q1";  	quaterField.Items [2].Text = "Q2";  	quaterField.Items [3].Text = "Q3";  	quaterField.Items [4].Text = "Q4";  	quaterField.Items [5].Text = ">";  	//Values above max date' but we use auto so its not used  	//Add a pagefield  	var pageField = pivotTable2.PageFields.Add (pivotTable2.Fields ["Title"]);  	//Add the data fields and format them  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["SubTotal"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Tax"]);  	dataField.Format = "#'##0";  	dataField = pivotTable2.DataFields.Add (pivotTable2.Fields ["Freight"]);  	dataField.Format = "#'##0";  	//We want the datafields to appear in columns  	pivotTable2.DataOnRows = false;  	pck.Save ();  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 6' dataRange.End.Row' 6].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: wsData.Cells [2' 7' dataRange.End.Row' 11].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: pivotTable1.RowFields.Add (pivotTable1.Fields [4]);  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: chart.SetPosition (1' 0' 4' 0);  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: chart.SetSize (600' 400);  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: chart.SetSize (600' 400);  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: quaterField.Items [2].Text = "Q2";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: quaterField.Items [3].Text = "Q3";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: quaterField.Items [4].Text = "Q4";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,RunSample12,The following statement contains a magic number: quaterField.Items [5].Text = ">";  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: for (int i = 0; i < 500; i++) {  	ret.Add (new SalesDTO () {  		FirstName = firstNames [r.Next (4)]'  		LastName = lastNames [r.Next (3)]'  		OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  		Title = "Sales Representative"'  		SubTotal = r.Next (100' 10000)'  		Tax = 0'  		Freight = 0  	});  }  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample12,C:\repos\bambit_EPPlus\SampleApp\Sample12.cs,GetRandomData,The following statement contains a magic number: ret.Add (new SalesDTO () {  	FirstName = firstNames [r.Next (4)]'  	LastName = lastNames [r.Next (3)]'  	OrderDate = new DateTime (2002' 1' 1).AddDays (r.Next (1000))'  	Title = "Sales Representative"'  	SubTotal = r.Next (100' 10000)'  	Tax = 0'  	Freight = 0  });  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsDt.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsEnum.Cells [2' 2' dt.Rows.Count - 1' 2].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsEnum.Cells [2' 2' dt.Rows.Count - 1' 2].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsEnum.Cells [2' 2' dt.Rows.Count - 1' 2].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 2' dt.Rows.Count + 1' 2].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 3' dt.Rows.Count + 1' 4].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 7' dt.Rows.Count + 1' 8].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 7' dt.Rows.Count + 1' 8].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Cells [2' 7' dt.Rows.Count + 1' 8].Style.Numberformat.Format = "mm-dd-yy";  
Magic Number,EPPlusSamples,Sample13,C:\repos\bambit_EPPlus\SampleApp\Sample13.cs,RunSample13,The following statement contains a magic number: wsList.Tables.GetFromRange (rng).Columns [2].Name = "Description";  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Conditional Formatting");  	// Create 4 columns of samples data  	for (int col = 1; col < 10; col++) {  		// Add the headers  		worksheet.Cells [1' col].Value = "Sample " + col;  		for (int row = 2; row < 21; row++) {  			// Add some items...  			worksheet.Cells [row' col].Value = row;  		}  	}  	// -------------------------------------------------------------------  	// TwoColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress1 = new ExcelAddress ("A2:A10");  	var cfRule1 = worksheet.ConditionalFormatting.AddTwoColorScale (cfAddress1);  	// Now' lets change some properties:  	cfRule1.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;  	cfRule1.LowValue.Value = 4;  	cfRule1.LowValue.Color = ColorTranslator.FromHtml ("#FFFFEB84");  	cfRule1.HighValue.Type = eExcelConditionalFormattingValueObjectType.Formula;  	cfRule1.HighValue.Formula = "IF($G$1=\"A</x:&'cfRule>\"'1'5)";  	cfRule1.StopIfTrue = true;  	cfRule1.Style.Font.Bold = true;  	// But others you can't (readonly)  	// cfRule1.Type = eExcelConditionalFormattingRuleType.ThreeColorScale;  	// -------------------------------------------------------------------  	// ThreeColorScale Conditional Formatting example  	// -------------------------------------------------------------------  	ExcelAddress cfAddress2 = new ExcelAddress (2' 2' 10' 2);  	//="B2:B10"  	var cfRule2 = worksheet.ConditionalFormatting.AddThreeColorScale (cfAddress2);  	// Changing some properties again  	cfRule2.Priority = 1;  	cfRule2.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;  	cfRule2.MiddleValue.Value = 30;  	cfRule2.StopIfTrue = true;  	// You can access a rule by its Priority  	var cfRule2Priority = cfRule2.Priority;  	var cfRule2_1 = worksheet.ConditionalFormatting.RulesByPriority (cfRule2Priority);  	// And you can even change the rule's Address  	cfRule2_1.Address = new ExcelAddress ("Z1:Z3");  	// -------------------------------------------------------------------  	// Adding another ThreeColorScale in a different way (observe that we are  	// pointing to the same range as the first rule we entered. Excel allows it to  	// happen and group the rules in one <conditionalFormatting> node)  	// -------------------------------------------------------------------  	var cfRule3 = worksheet.Cells [cfAddress1.Address].ConditionalFormatting.AddThreeColorScale ();  	cfRule3.LowValue.Color = Color.LemonChiffon;  	// -------------------------------------------------------------------  	// Change the rules priorities to change their execution order  	// -------------------------------------------------------------------  	cfRule3.Priority = 1;  	cfRule1.Priority = 2;  	cfRule2.Priority = 3;  	// -------------------------------------------------------------------  	// Create an Above Average rule  	// -------------------------------------------------------------------  	var cfRule5 = worksheet.ConditionalFormatting.AddAboveAverage (new ExcelAddress ("B11:B20"));  	cfRule5.Style.Font.Bold = true;  	cfRule5.Style.Font.Color.Color = Color.Red;  	cfRule5.Style.Font.Strike = true;  	// -------------------------------------------------------------------  	// Create an Above Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule6 = worksheet.ConditionalFormatting.AddAboveOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Average rule  	// -------------------------------------------------------------------  	var cfRule7 = worksheet.ConditionalFormatting.AddBelowAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Below Or Equal Average rule  	// -------------------------------------------------------------------  	var cfRule8 = worksheet.ConditionalFormatting.AddBelowOrEqualAverage (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Above StdDev rule  	// -------------------------------------------------------------------  	var cfRule9 = worksheet.ConditionalFormatting.AddAboveStdDev (new ExcelAddress ("B11:B20"));  	cfRule9.StdDev = 0;  	// -------------------------------------------------------------------  	// Create a Below StdDev rule  	// -------------------------------------------------------------------  	var cfRule10 = worksheet.ConditionalFormatting.AddBelowStdDev (new ExcelAddress ("B11:B20"));  	cfRule10.StdDev = 2;  	// -------------------------------------------------------------------  	// Create a Bottom rule  	// -------------------------------------------------------------------  	var cfRule11 = worksheet.ConditionalFormatting.AddBottom (new ExcelAddress ("B11:B20"));  	cfRule11.Rank = 4;  	// -------------------------------------------------------------------  	// Create a Bottom Percent rule  	// -------------------------------------------------------------------  	var cfRule12 = worksheet.ConditionalFormatting.AddBottomPercent (new ExcelAddress ("B11:B20"));  	cfRule12.Rank = 15;  	// -------------------------------------------------------------------  	// Create a Top rule  	// -------------------------------------------------------------------  	var cfRule13 = worksheet.ConditionalFormatting.AddTop (new ExcelAddress ("B11:B20"));  	// -------------------------------------------------------------------  	// Create a Top Percent rule  	// -------------------------------------------------------------------  	var cfRule14 = worksheet.ConditionalFormatting.AddTopPercent (new ExcelAddress ("B11:B20"));  	cfRule14.Style.Border.Left.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Left.Color.Theme = 3;  	cfRule14.Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;  	cfRule14.Style.Border.Bottom.Color.Index = 8;  	cfRule14.Style.Border.Right.Style = ExcelBorderStyle.Thin;  	cfRule14.Style.Border.Right.Color.Color = Color.Blue;  	cfRule14.Style.Border.Top.Style = ExcelBorderStyle.Hair;  	cfRule14.Style.Border.Top.Color.Auto = true;  	// -------------------------------------------------------------------  	// Create a Last 7 Days rule  	// -------------------------------------------------------------------  	ExcelAddress timePeriodAddress = new ExcelAddress ("D21:G34 C11:C20");  	var cfRule15 = worksheet.ConditionalFormatting.AddLast7Days (timePeriodAddress);  	cfRule15.Style.Fill.PatternType = ExcelFillStyle.LightTrellis;  	cfRule15.Style.Fill.PatternColor.Color = Color.BurlyWood;  	cfRule15.Style.Fill.BackgroundColor.Color = Color.LightCyan;  	// -------------------------------------------------------------------  	// Create a Last Month rule  	// -------------------------------------------------------------------  	var cfRule16 = worksheet.ConditionalFormatting.AddLastMonth (timePeriodAddress);  	cfRule16.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Last Week rule  	// -------------------------------------------------------------------  	var cfRule17 = worksheet.ConditionalFormatting.AddLastWeek (timePeriodAddress);  	cfRule17.Style.NumberFormat.Format = "YYYY";  	// -------------------------------------------------------------------  	// Create a Next Month rule  	// -------------------------------------------------------------------  	var cfRule18 = worksheet.ConditionalFormatting.AddNextMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Next Week rule  	// -------------------------------------------------------------------  	var cfRule19 = worksheet.ConditionalFormatting.AddNextWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Month rule  	// -------------------------------------------------------------------  	var cfRule20 = worksheet.ConditionalFormatting.AddThisMonth (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a This Week rule  	// -------------------------------------------------------------------  	var cfRule21 = worksheet.ConditionalFormatting.AddThisWeek (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Today rule  	// -------------------------------------------------------------------  	var cfRule22 = worksheet.ConditionalFormatting.AddToday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Tomorrow rule  	// -------------------------------------------------------------------  	var cfRule23 = worksheet.ConditionalFormatting.AddTomorrow (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a Yesterday rule  	// -------------------------------------------------------------------  	var cfRule24 = worksheet.ConditionalFormatting.AddYesterday (timePeriodAddress);  	// -------------------------------------------------------------------  	// Create a BeginsWith rule  	// -------------------------------------------------------------------  	ExcelAddress cellIsAddress = new ExcelAddress ("E11:E20");  	var cfRule25 = worksheet.ConditionalFormatting.AddBeginsWith (cellIsAddress);  	cfRule25.Text = "SearchMe";  	// -------------------------------------------------------------------  	// Create a Between rule  	// -------------------------------------------------------------------  	var cfRule26 = worksheet.ConditionalFormatting.AddBetween (cellIsAddress);  	cfRule26.Formula = "IF(E11>5'10'20)";  	cfRule26.Formula2 = "IF(E11>5'30'50)";  	// -------------------------------------------------------------------  	// Create a ContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule27 = worksheet.ConditionalFormatting.AddContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule28 = worksheet.ConditionalFormatting.AddContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a ContainsText rule  	// -------------------------------------------------------------------  	var cfRule29 = worksheet.ConditionalFormatting.AddContainsText (cellIsAddress);  	cfRule29.Text = "Me";  	// -------------------------------------------------------------------  	// Create a DuplicateValues rule  	// -------------------------------------------------------------------  	var cfRule30 = worksheet.ConditionalFormatting.AddDuplicateValues (cellIsAddress);  	// -------------------------------------------------------------------  	// Create an EndsWith rule  	// -------------------------------------------------------------------  	var cfRule31 = worksheet.ConditionalFormatting.AddEndsWith (cellIsAddress);  	cfRule31.Text = "EndText";  	// -------------------------------------------------------------------  	// Create an Equal rule  	// -------------------------------------------------------------------  	var cfRule32 = worksheet.ConditionalFormatting.AddEqual (cellIsAddress);  	cfRule32.Formula = "6";  	// -------------------------------------------------------------------  	// Create an Expression rule  	// -------------------------------------------------------------------  	var cfRule33 = worksheet.ConditionalFormatting.AddExpression (cellIsAddress);  	cfRule33.Formula = "E11=E12";  	// -------------------------------------------------------------------  	// Create a GreaterThan rule  	// -------------------------------------------------------------------  	var cfRule34 = worksheet.ConditionalFormatting.AddGreaterThan (cellIsAddress);  	cfRule34.Formula = "SE(E11<10'10'65)";  	// -------------------------------------------------------------------  	// Create a GreaterThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule35 = worksheet.ConditionalFormatting.AddGreaterThanOrEqual (cellIsAddress);  	cfRule35.Formula = "35";  	// -------------------------------------------------------------------  	// Create a LessThan rule  	// -------------------------------------------------------------------  	var cfRule36 = worksheet.ConditionalFormatting.AddLessThan (cellIsAddress);  	cfRule36.Formula = "36";  	// -------------------------------------------------------------------  	// Create a LessThanOrEqual rule  	// -------------------------------------------------------------------  	var cfRule37 = worksheet.ConditionalFormatting.AddLessThanOrEqual (cellIsAddress);  	cfRule37.Formula = "37";  	// -------------------------------------------------------------------  	// Create a NotBetween rule  	// -------------------------------------------------------------------  	var cfRule38 = worksheet.ConditionalFormatting.AddNotBetween (cellIsAddress);  	cfRule38.Formula = "333";  	cfRule38.Formula2 = "999";  	// -------------------------------------------------------------------  	// Create a NotContainsBlanks rule  	// -------------------------------------------------------------------  	var cfRule39 = worksheet.ConditionalFormatting.AddNotContainsBlanks (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsErrors rule  	// -------------------------------------------------------------------  	var cfRule40 = worksheet.ConditionalFormatting.AddNotContainsErrors (cellIsAddress);  	// -------------------------------------------------------------------  	// Create a NotContainsText rule  	// -------------------------------------------------------------------  	var cfRule41 = worksheet.ConditionalFormatting.AddNotContainsText (cellIsAddress);  	cfRule41.Text = "NotMe";  	// -------------------------------------------------------------------  	// Create an NotEqual rule  	// -------------------------------------------------------------------  	var cfRule42 = worksheet.ConditionalFormatting.AddNotEqual (cellIsAddress);  	cfRule42.Formula = "14";  	ExcelAddress cfAddress43 = new ExcelAddress ("G2:G10");  	var cfRule43 = worksheet.ConditionalFormatting.AddThreeIconSet (cfAddress43' eExcelconditionalFormatting3IconsSetType.TrafficLights1);  	ExcelAddress cfAddress44 = new ExcelAddress ("H2:H10");  	var cfRule44 = worksheet.ConditionalFormatting.AddDatabar (cfAddress44' Color.DarkBlue);  	// -----------------------------------------------------------  	// Removing Conditional Formatting rules  	// -----------------------------------------------------------  	// Remove one Rule by its object  	//worksheet.ConditionalFormatting.Remove(cfRule1);  	// Remove one Rule by index  	//worksheet.ConditionalFormatting.RemoveAt(1);  	// Remove one Rule by its Priority  	//worksheet.ConditionalFormatting.RemoveByPriority(2);  	// Remove all the Rules  	//worksheet.ConditionalFormatting.RemoveAll();  	// set some document properties  	package.Workbook.Properties.Title = "Conditional Formatting";  	package.Workbook.Properties.Author = "Eyal Seagull";  	package.Workbook.Properties.Comments = "This sample demonstrates how to add Conditional Formatting to an Excel 2007 worksheet using EPPlus";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Eyal Seagull");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: for (int col = 1; col < 10; col++) {  	// Add the headers  	worksheet.Cells [1' col].Value = "Sample " + col;  	for (int row = 2; row < 21; row++) {  		// Add some items...  		worksheet.Cells [row' col].Value = row;  	}  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: for (int col = 1; col < 10; col++) {  	// Add the headers  	worksheet.Cells [1' col].Value = "Sample " + col;  	for (int row = 2; row < 21; row++) {  		// Add some items...  		worksheet.Cells [row' col].Value = row;  	}  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: for (int col = 1; col < 10; col++) {  	// Add the headers  	worksheet.Cells [1' col].Value = "Sample " + col;  	for (int row = 2; row < 21; row++) {  		// Add some items...  		worksheet.Cells [row' col].Value = row;  	}  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: for (int row = 2; row < 21; row++) {  	// Add some items...  	worksheet.Cells [row' col].Value = row;  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: for (int row = 2; row < 21; row++) {  	// Add some items...  	worksheet.Cells [row' col].Value = row;  }  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule1.LowValue.Value = 4;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule2.MiddleValue.Value = 30;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule1.Priority = 2;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule2.Priority = 3;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule10.StdDev = 2;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule11.Rank = 4;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule12.Rank = 15;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule14.Style.Border.Left.Color.Theme = 3;  
Magic Number,EPPlusSamples,Sample14,C:\repos\bambit_EPPlus\SampleApp\Sample14.cs,RunSample14,The following statement contains a magic number: cfRule14.Style.Border.Bottom.Color.Index = 8;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: ws.DefaultColWidth = 3;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: ws.DefaultRowHeight = 15;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: code = string.Format (code' ships [0]' ships [1]' ships [2]' ships [3]' ships [4]' board1.Address' board2.Address);  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: code = string.Format (code' ships [0]' ships [1]' ships [2]' ships [3]' ships [4]' board1.Address' board2.Address);  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: code = string.Format (code' ships [0]' ships [1]' ships [2]' ships [3]' ships [4]' board1.Address' board2.Address);  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: tb.SetPosition (1' 0' 27' 0);  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,VBASample3,The following statement contains a magic number: ws.Row (1).Style.Font.Size = 18;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,AddChart,The following statement contains a magic number: chrt.To.Row = rng.Start.Row + 9;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,AddChart,The following statement contains a magic number: chrt.To.Column = rng.Start.Column + 9;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,AddChart,The following statement contains a magic number: rng.Offset (1' 2).Value = "Misses";  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,AddChart,The following statement contains a magic number: rng.Offset (1' 3).Value = "Hits";  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int col = 0; col <= rng.End.Column - rng.Start.Column; col++) {  	for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  		if (col % 4 == 0) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  		}  		if (col % 4 == 1) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  		}  		if (col % 4 == 2) {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  		}  		else {  			rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  		}  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: for (int row = 0; row <= rng.End.Row - rng.Start.Row; row++) {  	if (col % 4 == 0) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  	}  	if (col % 4 == 1) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  	}  	if (col % 4 == 2) {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  	}  	else {  		rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  	}  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 0) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 0) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 45;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 1) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 1) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 70;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 2) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  }  else {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 2) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  }  else {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 2) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  }  else {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: if (col % 4 == 2) {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  }  else {  	rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  }  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 110;  
Magic Number,EPPlusSamples,Sample15,C:\repos\bambit_EPPlus\SampleApp\Sample15.cs,CreateBoard,The following statement contains a magic number: rng.Offset (row' col' 1' 1).Style.Fill.Gradient.Degree = 135;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: using (var package = new ExcelPackage ()) {  	var dataTable = new DataTable ("test");  	dataTable.Columns.Add ("col1");  	dataTable.Columns.Add ("col2");  	dataTable.Columns.Add ("col3");  	dataTable.Columns.Add ("col4");  	dataTable.Rows.Add ("qwe11"' "qwe12"' "qwe13"' "qwe14");  	dataTable.Rows.Add ("qwe21"' "qwe22"' "qwe23"' "qwe24");  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dataTable.TableName);  	worksheet.Cells ["A1"].LoadFromDataTable (dataTable' true' TableStyles.None);  	worksheet.Protection.AllowSelectLockedCells = false;  	worksheet.Protection.AllowSelectUnlockedCells = true;  	worksheet.Protection.AllowSort = true;  	worksheet.Protection.AllowFormatColumns = true;  	worksheet.Protection.AllowAutoFilter = true;  	worksheet.Protection.AllowEditObject = true;  	worksheet.Protection.IsProtected = true;  	var r1 = worksheet.ProtectedRanges.Add ("Range1"' new ExcelAddress (1' 1' worksheet.Dimension.End.Row' 4));  	worksheet.ProtectedRanges.Remove (r1);  	var r2 = worksheet.ProtectedRanges.Add ("Range2"' new ExcelAddress ("F3:T12'F15:T30"));  	r2.SetPassword ("EPPlus");  	worksheet.Column (1).Width = 30;  	worksheet.Column (2).Width = 30;  	worksheet.Column (3).Width = 100;  	worksheet.Column (4).Width = 100;  	worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  	worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  	using (var fs = new FileStream (Path.Combine (outputDir.ToString ()' "sample16.xlsx")' FileMode.Create))  		package.SaveAs (fs);  }  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (1).Width = 30;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (2).Width = 30;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (2).Width = 30;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (3).Width = 100;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (3).Width = 100;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (4).Width = 100;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Column (4).Width = 100;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Cells [1' 4' worksheet.Dimension.End.Row' 4].Style.Locked = false;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  
Magic Number,EPPlusSamples,Sample16,C:\repos\bambit_EPPlus\SampleApp\Sample16.cs,RunSample16,The following statement contains a magic number: worksheet.Cells [1' 3' worksheet.Dimension.End.Row' 4].Style.WrapText = true;  
Magic Number,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	ExcelWorksheet sheet = package.Workbook.Worksheets [1];  	//Select all cells in column d between 9990 and 10000  	var query1 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9990 && (double)cell.Value <= 10000  	select cell);  	Console.WriteLine ("Print all cells with value between 9990 and 10000 in column D ...");  	Console.WriteLine ();  	int count = 0;  	foreach (var cell in query1) {  		Console.WriteLine ("Cell {0} has value {1:N0}"' cell.Address' cell.Value);  		count++;  	}  	Console.WriteLine ("{0} cells found ..."' count);  	Console.WriteLine ();  	//Select all bold cells  	Console.WriteLine ("Now get all bold cells from the entire sheet...");  	var query2 = (from cell in sheet.Cells [sheet.Dimension.Address]  	where cell.Style.Font.Bold  	select cell);  	//If you have a clue where the data is' specify a smaller range in the cells indexer to get better performance (for example "1:1'65536:65536" here)  	count = 0;  	foreach (var cell in query2) {  		if (!string.IsNullOrEmpty (cell.Formula)) {  			Console.WriteLine ("Cell {0} is bold and has a formula of {1:N0}"' cell.Address' cell.Formula);  		}  		else {  			Console.WriteLine ("Cell {0} is bold and has a value of {1:N0}"' cell.Address' cell.Value);  		}  		count++;  	}  	//Here we use more than one column in the where clause. We start by searching column D' then use the Offset method to check the value of column C.  	var query3 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9500 && (double)cell.Value <= 10000 && cell.Offset (0' -1).GetValue<DateTime> ().Year == DateTime.Today.Year + 1  	select cell);  	Console.WriteLine ();  	Console.WriteLine ("Print all cells with a value between 9500 and 10000 in column D and the year of Column C is {0} ..."' DateTime.Today.Year + 1);  	Console.WriteLine ();  	count = 0;  	foreach (var cell in query3)//The cells returned here will all be in column D' since that is the address in the indexer. Use the Offset method to print any other cells from the same row.  	 {  		Console.WriteLine ("Cell {0} has value {1:N0} Date is {2:d}"' cell.Address' cell.Value' cell.Offset (0' -1).GetValue<DateTime> ());  		count++;  	}  }  
Magic Number,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	ExcelWorksheet sheet = package.Workbook.Worksheets [1];  	//Select all cells in column d between 9990 and 10000  	var query1 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9990 && (double)cell.Value <= 10000  	select cell);  	Console.WriteLine ("Print all cells with value between 9990 and 10000 in column D ...");  	Console.WriteLine ();  	int count = 0;  	foreach (var cell in query1) {  		Console.WriteLine ("Cell {0} has value {1:N0}"' cell.Address' cell.Value);  		count++;  	}  	Console.WriteLine ("{0} cells found ..."' count);  	Console.WriteLine ();  	//Select all bold cells  	Console.WriteLine ("Now get all bold cells from the entire sheet...");  	var query2 = (from cell in sheet.Cells [sheet.Dimension.Address]  	where cell.Style.Font.Bold  	select cell);  	//If you have a clue where the data is' specify a smaller range in the cells indexer to get better performance (for example "1:1'65536:65536" here)  	count = 0;  	foreach (var cell in query2) {  		if (!string.IsNullOrEmpty (cell.Formula)) {  			Console.WriteLine ("Cell {0} is bold and has a formula of {1:N0}"' cell.Address' cell.Formula);  		}  		else {  			Console.WriteLine ("Cell {0} is bold and has a value of {1:N0}"' cell.Address' cell.Value);  		}  		count++;  	}  	//Here we use more than one column in the where clause. We start by searching column D' then use the Offset method to check the value of column C.  	var query3 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9500 && (double)cell.Value <= 10000 && cell.Offset (0' -1).GetValue<DateTime> ().Year == DateTime.Today.Year + 1  	select cell);  	Console.WriteLine ();  	Console.WriteLine ("Print all cells with a value between 9500 and 10000 in column D and the year of Column C is {0} ..."' DateTime.Today.Year + 1);  	Console.WriteLine ();  	count = 0;  	foreach (var cell in query3)//The cells returned here will all be in column D' since that is the address in the indexer. Use the Offset method to print any other cells from the same row.  	 {  		Console.WriteLine ("Cell {0} has value {1:N0} Date is {2:d}"' cell.Address' cell.Value' cell.Offset (0' -1).GetValue<DateTime> ());  		count++;  	}  }  
Magic Number,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	ExcelWorksheet sheet = package.Workbook.Worksheets [1];  	//Select all cells in column d between 9990 and 10000  	var query1 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9990 && (double)cell.Value <= 10000  	select cell);  	Console.WriteLine ("Print all cells with value between 9990 and 10000 in column D ...");  	Console.WriteLine ();  	int count = 0;  	foreach (var cell in query1) {  		Console.WriteLine ("Cell {0} has value {1:N0}"' cell.Address' cell.Value);  		count++;  	}  	Console.WriteLine ("{0} cells found ..."' count);  	Console.WriteLine ();  	//Select all bold cells  	Console.WriteLine ("Now get all bold cells from the entire sheet...");  	var query2 = (from cell in sheet.Cells [sheet.Dimension.Address]  	where cell.Style.Font.Bold  	select cell);  	//If you have a clue where the data is' specify a smaller range in the cells indexer to get better performance (for example "1:1'65536:65536" here)  	count = 0;  	foreach (var cell in query2) {  		if (!string.IsNullOrEmpty (cell.Formula)) {  			Console.WriteLine ("Cell {0} is bold and has a formula of {1:N0}"' cell.Address' cell.Formula);  		}  		else {  			Console.WriteLine ("Cell {0} is bold and has a value of {1:N0}"' cell.Address' cell.Value);  		}  		count++;  	}  	//Here we use more than one column in the where clause. We start by searching column D' then use the Offset method to check the value of column C.  	var query3 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9500 && (double)cell.Value <= 10000 && cell.Offset (0' -1).GetValue<DateTime> ().Year == DateTime.Today.Year + 1  	select cell);  	Console.WriteLine ();  	Console.WriteLine ("Print all cells with a value between 9500 and 10000 in column D and the year of Column C is {0} ..."' DateTime.Today.Year + 1);  	Console.WriteLine ();  	count = 0;  	foreach (var cell in query3)//The cells returned here will all be in column D' since that is the address in the indexer. Use the Offset method to print any other cells from the same row.  	 {  		Console.WriteLine ("Cell {0} has value {1:N0} Date is {2:d}"' cell.Address' cell.Value' cell.Offset (0' -1).GetValue<DateTime> ());  		count++;  	}  }  
Magic Number,EPPlusSamples,LinqSample,C:\repos\bambit_EPPlus\SampleApp\Sample8.cs,RunLinqSample,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	ExcelWorksheet sheet = package.Workbook.Worksheets [1];  	//Select all cells in column d between 9990 and 10000  	var query1 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9990 && (double)cell.Value <= 10000  	select cell);  	Console.WriteLine ("Print all cells with value between 9990 and 10000 in column D ...");  	Console.WriteLine ();  	int count = 0;  	foreach (var cell in query1) {  		Console.WriteLine ("Cell {0} has value {1:N0}"' cell.Address' cell.Value);  		count++;  	}  	Console.WriteLine ("{0} cells found ..."' count);  	Console.WriteLine ();  	//Select all bold cells  	Console.WriteLine ("Now get all bold cells from the entire sheet...");  	var query2 = (from cell in sheet.Cells [sheet.Dimension.Address]  	where cell.Style.Font.Bold  	select cell);  	//If you have a clue where the data is' specify a smaller range in the cells indexer to get better performance (for example "1:1'65536:65536" here)  	count = 0;  	foreach (var cell in query2) {  		if (!string.IsNullOrEmpty (cell.Formula)) {  			Console.WriteLine ("Cell {0} is bold and has a formula of {1:N0}"' cell.Address' cell.Formula);  		}  		else {  			Console.WriteLine ("Cell {0} is bold and has a value of {1:N0}"' cell.Address' cell.Value);  		}  		count++;  	}  	//Here we use more than one column in the where clause. We start by searching column D' then use the Offset method to check the value of column C.  	var query3 = (from cell in sheet.Cells ["d:d"]  	where cell.Value is double && (double)cell.Value >= 9500 && (double)cell.Value <= 10000 && cell.Offset (0' -1).GetValue<DateTime> ().Year == DateTime.Today.Year + 1  	select cell);  	Console.WriteLine ();  	Console.WriteLine ("Print all cells with a value between 9500 and 10000 in column D and the year of Column C is {0} ..."' DateTime.Today.Year + 1);  	Console.WriteLine ();  	count = 0;  	foreach (var cell in query3)//The cells returned here will all be in column D' since that is the address in the indexer. Use the Offset method to print any other cells from the same row.  	 {  		Console.WriteLine ("Cell {0} has value {1:N0} Date is {2:d}"' cell.Address' cell.Value' cell.Offset (0' -1).GetValue<DateTime> ());  		count++;  	}  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile)) {  	// add a new worksheet to the empty workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add ("Inventory");  	//Add the headers  	worksheet.Cells [1' 1].Value = "ID";  	worksheet.Cells [1' 2].Value = "Product";  	worksheet.Cells [1' 3].Value = "Quantity";  	worksheet.Cells [1' 4].Value = "Price";  	worksheet.Cells [1' 5].Value = "Value";  	//Add some items...  	worksheet.Cells ["A2"].Value = 12001;  	worksheet.Cells ["B2"].Value = "Nails";  	worksheet.Cells ["C2"].Value = 37;  	worksheet.Cells ["D2"].Value = 3.99;  	worksheet.Cells ["A3"].Value = 12002;  	worksheet.Cells ["B3"].Value = "Hammer";  	worksheet.Cells ["C3"].Value = 5;  	worksheet.Cells ["D3"].Value = 12.10;  	worksheet.Cells ["A4"].Value = 12003;  	worksheet.Cells ["B4"].Value = "Saw";  	worksheet.Cells ["C4"].Value = 12;  	worksheet.Cells ["D4"].Value = 15.37;  	//Add a formula for the value-column  	worksheet.Cells ["E2:E4"].Formula = "C2*D2";  	//Ok now format the values;  	using (var range = worksheet.Cells [1' 1' 1' 5]) {  		range.Style.Font.Bold = true;  		range.Style.Fill.PatternType = ExcelFillStyle.Solid;  		range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  		range.Style.Font.Color.SetColor (Color.White);  	}  	worksheet.Cells ["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;  	worksheet.Cells ["A5:E5"].Style.Font.Bold = true;  	worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  	worksheet.Cells ["C2:C5"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D2:E5"].Style.Numberformat.Format = "#'##0.00";  	//Create an autofilter for the range  	worksheet.Cells ["A1:E4"].AutoFilter = true;  	worksheet.Cells ["A2:A4"].Style.Numberformat.Format = "@";  	//Format as text  	worksheet.Cells.AutoFitColumns (0);  	//Autofit columns for all cells  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "&24&U&\"Arial'Regular Bold\" Inventory";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	worksheet.PrinterSettings.RepeatRows = worksheet.Cells ["1:2"];  	worksheet.PrinterSettings.RepeatColumns = worksheet.Cells ["A:G"];  	// Change the sheet view to show it in page layout mode  	worksheet.View.PageLayoutView = true;  	// set some document properties  	package.Workbook.Properties.Title = "Invertory";  	package.Workbook.Properties.Author = "Jan K�llman";  	package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";  	// set some extended property values  	package.Workbook.Properties.Company = "AdventureWorks Inc.";  	// set some custom property values  	package.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "Jan K�llman");  	package.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "EPPlus");  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [1' 2].Value = "Product";  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [1' 3].Value = "Quantity";  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [1' 4].Value = "Price";  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [1' 5].Value = "Value";  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["A2"].Value = 12001;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["C2"].Value = 37;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["D2"].Value = 3.99;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["A3"].Value = 12002;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["C3"].Value = 5;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["D3"].Value = 12.10;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["A4"].Value = 12003;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["C4"].Value = 12;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells ["D4"].Value = 15.37;  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: using (var range = worksheet.Cells [1' 1' 1' 5]) {  	range.Style.Font.Bold = true;  	range.Style.Fill.PatternType = ExcelFillStyle.Solid;  	range.Style.Fill.BackgroundColor.SetColor (Color.DarkBlue);  	range.Style.Font.Color.SetColor (Color.White);  }  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample1,C:\repos\bambit_EPPlus\SampleApp\Sample1.cs,RunSample1,The following statement contains a magic number: worksheet.Cells [5' 3' 5' 5].Formula = string.Format ("SUBTOTAL(9'{0})"' new ExcelAddress (2' 3' 4' 3).Address);  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelPackage xlPackage = new ExcelPackage (newFile)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add ("Sales");  	var namedStyle = xlPackage.Workbook.Styles.CreateNamedStyle ("HyperLink");  	//This one is language dependent  	namedStyle.Style.Font.UnderLine = true;  	namedStyle.Style.Font.Color.SetColor (Color.Blue);  	if (worksheet != null) {  		const int startRow = 5;  		int row = startRow;  		//Create Headers and format them   		worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  		using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.White);  			r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		}  		worksheet.Cells ["A2"].Value = "Year-End Sales Report";  		using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  			r.Merge = true;  			r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  			r.Style.Font.Color.SetColor (Color.Black);  			r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  			r.Style.Fill.PatternType = ExcelFillStyle.Solid;  			r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		}  		worksheet.Cells ["A4"].Value = "Name";  		worksheet.Cells ["B4"].Value = "Job Title";  		worksheet.Cells ["C4"].Value = "Region";  		worksheet.Cells ["D4"].Value = "Monthly Quota";  		worksheet.Cells ["E4"].Value = "Quota YTD";  		worksheet.Cells ["F4"].Value = "Sales YTD";  		worksheet.Cells ["G4"].Value = "Quota %";  		worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  		// lets connect to the AdventureWorks sample database for some data  		using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  			sqlConn.Open ();  			using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  				using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  					// get the data and fill rows 5 onwards  					while (sqlReader.Read ()) {  						int col = 1;  						// our query has the columns in the right order' so simply  						// iterate through the columns  						for (int i = 0; i < sqlReader.FieldCount; i++) {  							// use the email address as a hyperlink for column 1  							if (sqlReader.GetName (i) == "EmailAddress") {  								// insert the email address as a hyperlink for the name  								string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  								worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  							}  							else {  								// do not bother filling cell with blank data (also useful if we have a formula in a cell)  								if (sqlReader.GetValue (i) != null)  									worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  								col++;  							}  						}  						row++;  					}  					sqlReader.Close ();  					worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  					worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  					worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  					worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  					//Set column width  					worksheet.Column (1).Width = 25;  					worksheet.Column (2).Width = 28;  					worksheet.Column (3).Width = 18;  					worksheet.Column (4).Width = 12;  					worksheet.Column (5).Width = 10;  					worksheet.Column (6).Width = 10;  					worksheet.Column (7).Width = 12;  				}  			}  			sqlConn.Close ();  		}  		// lets set the header text   		worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  		// add the page number to the footer plus the total number of pages  		worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  		// add the sheet name to the footer  		worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  		// add the file path to the footer  		worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	xlPackage.Workbook.Properties.Title = "Sample 3";  	xlPackage.Workbook.Properties.Author = "John Tunnicliffe";  	xlPackage.Workbook.Properties.Subject = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Keywords = "Office Open XML";  	xlPackage.Workbook.Properties.Category = "ExcelPackage Samples";  	xlPackage.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 file from scratch using the Packaging API and Office Open XML";  	// set some extended property values  	xlPackage.Workbook.Properties.Company = "AdventureWorks Inc.";  	xlPackage.Workbook.Properties.HyperlinkBase = new Uri ("http://www.codeplex.com/MSFTDBProdSamples");  	// set some custom property values  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("Checked by"' "John Tunnicliffe");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("EmployeeID"' "1147");  	xlPackage.Workbook.Properties.SetCustomPropertyValue ("AssemblyName"' "ExcelPackage");  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: if (worksheet != null) {  	const int startRow = 5;  	int row = startRow;  	//Create Headers and format them   	worksheet.Cells ["A1"].Value = "AdventureWorks Inc.";  	using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	}  	worksheet.Cells ["A2"].Value = "Year-End Sales Report";  	using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.Black);  		r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	}  	worksheet.Cells ["A4"].Value = "Name";  	worksheet.Cells ["B4"].Value = "Job Title";  	worksheet.Cells ["C4"].Value = "Region";  	worksheet.Cells ["D4"].Value = "Monthly Quota";  	worksheet.Cells ["E4"].Value = "Quota YTD";  	worksheet.Cells ["F4"].Value = "Sales YTD";  	worksheet.Cells ["G4"].Value = "Quota %";  	worksheet.Cells ["A4:G4"].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells ["A4:G4"].Style.Font.Bold = true;  	// lets connect to the AdventureWorks sample database for some data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 5 onwards  				while (sqlReader.Read ()) {  					int col = 1;  					// our query has the columns in the right order' so simply  					// iterate through the columns  					for (int i = 0; i < sqlReader.FieldCount; i++) {  						// use the email address as a hyperlink for column 1  						if (sqlReader.GetName (i) == "EmailAddress") {  							// insert the email address as a hyperlink for the name  							string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  							worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  						}  						else {  							// do not bother filling cell with blank data (also useful if we have a formula in a cell)  							if (sqlReader.GetValue (i) != null)  								worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  							col++;  						}  					}  					row++;  				}  				sqlReader.Close ();  				worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  				worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  				worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  				worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  				//Set column width  				worksheet.Column (1).Width = 25;  				worksheet.Column (2).Width = 28;  				worksheet.Column (3).Width = 18;  				worksheet.Column (4).Width = 12;  				worksheet.Column (5).Width = 10;  				worksheet.Column (6).Width = 10;  				worksheet.Column (7).Width = 12;  			}  		}  		sqlConn.Close ();  	}  	// lets set the header text   	worksheet.HeaderFooter.OddHeader.CenteredText = "AdventureWorks Inc. Sales Report";  	// add the page number to the footer plus the total number of pages  	worksheet.HeaderFooter.OddFooter.RightAlignedText = string.Format ("Page {0} of {1}"' ExcelHeaderFooter.PageNumber' ExcelHeaderFooter.NumberOfPages);  	// add the sheet name to the footer  	worksheet.HeaderFooter.OddFooter.CenteredText = ExcelHeaderFooter.SheetName;  	// add the file path to the footer  	worksheet.HeaderFooter.OddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A1:G1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 22' FontStyle.Italic));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.Black);  	r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.Black);  	r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.Black);  	r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (ExcelRange r = worksheet.Cells ["A2:G2"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.Black);  	r.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Font.SetFromFont (new Font ("Britannic Bold"' 18' FontStyle.Italic));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells ["A4:G4"].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 5 onwards  			while (sqlReader.Read ()) {  				int col = 1;  				// our query has the columns in the right order' so simply  				// iterate through the columns  				for (int i = 0; i < sqlReader.FieldCount; i++) {  					// use the email address as a hyperlink for column 1  					if (sqlReader.GetName (i) == "EmailAddress") {  						// insert the email address as a hyperlink for the name  						string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  						worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  					}  					else {  						// do not bother filling cell with blank data (also useful if we have a formula in a cell)  						if (sqlReader.GetValue (i) != null)  							worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  						col++;  					}  				}  				row++;  			}  			sqlReader.Close ();  			worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  			worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  			worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  			worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  			//Set column width  			worksheet.Column (1).Width = 25;  			worksheet.Column (2).Width = 28;  			worksheet.Column (3).Width = 18;  			worksheet.Column (4).Width = 12;  			worksheet.Column (5).Width = 10;  			worksheet.Column (6).Width = 10;  			worksheet.Column (7).Width = 12;  		}  	}  	sqlConn.Close ();  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("select LastName + '' ' + FirstName AS [Name]' EmailAddress' JobTitle' CountryRegionName' ISNULL(SalesQuota'0) AS SalesQuota' ISNULL(SalesQuota'0)*12 AS YearlyQuota' SalesYTD from Sales.vSalesPerson ORDER BY SalesYTD desc"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 5 onwards  		while (sqlReader.Read ()) {  			int col = 1;  			// our query has the columns in the right order' so simply  			// iterate through the columns  			for (int i = 0; i < sqlReader.FieldCount; i++) {  				// use the email address as a hyperlink for column 1  				if (sqlReader.GetName (i) == "EmailAddress") {  					// insert the email address as a hyperlink for the name  					string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  					worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  				}  				else {  					// do not bother filling cell with blank data (also useful if we have a formula in a cell)  					if (sqlReader.GetValue (i) != null)  						worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  					col++;  				}  			}  			row++;  		}  		sqlReader.Close ();  		worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  		worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  		worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  		worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  		//Set column width  		worksheet.Column (1).Width = 25;  		worksheet.Column (2).Width = 28;  		worksheet.Column (3).Width = 18;  		worksheet.Column (4).Width = 12;  		worksheet.Column (5).Width = 10;  		worksheet.Column (6).Width = 10;  		worksheet.Column (7).Width = 12;  	}  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 5 onwards  	while (sqlReader.Read ()) {  		int col = 1;  		// our query has the columns in the right order' so simply  		// iterate through the columns  		for (int i = 0; i < sqlReader.FieldCount; i++) {  			// use the email address as a hyperlink for column 1  			if (sqlReader.GetName (i) == "EmailAddress") {  				// insert the email address as a hyperlink for the name  				string hyperlink = "mailto:" + sqlReader.GetValue (i).ToString ();  				worksheet.Cells [row' 1].Hyperlink = new Uri (hyperlink' UriKind.Absolute);  			}  			else {  				// do not bother filling cell with blank data (also useful if we have a formula in a cell)  				if (sqlReader.GetValue (i) != null)  					worksheet.Cells [row' col].Value = sqlReader.GetValue (i);  				col++;  			}  		}  		row++;  	}  	sqlReader.Close ();  	worksheet.Cells [startRow' 1' row - 1' 1].StyleName = "HyperLink";  	worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  	worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  	worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  	//Set column width  	worksheet.Column (1).Width = 25;  	worksheet.Column (2).Width = 28;  	worksheet.Column (3).Width = 18;  	worksheet.Column (4).Width = 12;  	worksheet.Column (5).Width = 10;  	worksheet.Column (6).Width = 10;  	worksheet.Column (7).Width = 12;  }  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 4' row - 1' 6].Style.Numberformat.Format = "[$$-409]#'##0";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 7' row - 1' 7].Style.Numberformat.Format = "0%";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Cells [startRow' 7' row - 1' 7].FormulaR1C1 = "=IF(RC[-2]=0'0'RC[-1]/RC[-2])";  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (1).Width = 25;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (2).Width = 28;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (2).Width = 28;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (3).Width = 18;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (3).Width = 18;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (4).Width = 12;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (4).Width = 12;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (5).Width = 10;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (5).Width = 10;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (6).Width = 10;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (6).Width = 10;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (7).Width = 12;  
Magic Number,EPPlusSamples,Sample3,C:\repos\bambit_EPPlus\SampleApp\Sample3.cs,RunSample3,The following statement contains a magic number: worksheet.Column (7).Width = 12;  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelPackage p = new ExcelPackage (template' true)) {  	//Set up the headers  	ExcelWorksheet ws = p.Workbook.Worksheets [1];  	ws.Cells ["A20"].Value = "Date";  	ws.Cells ["B20"].Value = "EOD Rate";  	ws.Cells ["B20:D20"].Merge = true;  	ws.Cells ["E20"].Value = "Change";  	ws.Cells ["E20:G20"].Merge = true;  	ws.Cells ["B20:E20"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;  	using (ExcelRange row = ws.Cells ["A20:G20"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  		row.Style.Font.Color.SetColor (Color.White);  		row.Style.Font.Bold = true;  	}  	ws.Cells ["B21"].Value = "USD/JPY";  	ws.Cells ["C21"].Value = "USD/EUR";  	ws.Cells ["D21"].Value = "USD/GBP";  	ws.Cells ["E21"].Value = "USD/JPY";  	ws.Cells ["F21"].Value = "USD/EUR";  	ws.Cells ["G21"].Value = "USD/GBP";  	using (ExcelRange row = ws.Cells ["A21:G21"]) {  		row.Style.Fill.PatternType = ExcelFillStyle.Solid;  		row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		row.Style.Font.Color.SetColor (Color.Black);  		row.Style.Font.Bold = true;  	}  	int startRow = 22;  	//Connect to the database and fill the data  	using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  		int row = startRow;  		sqlConn.Open ();  		using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  			using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  				// get the data and fill rows 22 onwards  				while (sqlReader.Read ()) {  					ws.Cells [row' 1].Value = sqlReader [0];  					ws.Cells [row' 2].Value = sqlReader [1];  					ws.Cells [row' 3].Value = sqlReader [2];  					ws.Cells [row' 4].Value = sqlReader [3];  					row++;  				}  			}  			//Set the numberformat  			ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  			ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  			//Set the Formulas   			ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  			ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  		}  		//Set the series for the chart. The series must exist in the template or the program will crash.  		ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  		chart.Title.Text = "Exchange rate %";  		chart.Series [0].Header = "USD/JPY";  		chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  		chart.Series [1].Header = "USD/EUR";  		chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  		chart.Series [2].Header = "USD/GBP";  		chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  		chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  	}  	//Get the documet as a byte array from the stream and save it to disk.  (This is usefull in a webapplication) ...   	Byte[] bin = p.GetAsByteArray ();  	string file = outputdir + "\\sample4.xlsx";  	File.WriteAllBytes (file' bin);  	return file;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A20:G20"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	row.Style.Font.Color.SetColor (Color.White);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A20:G20"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	row.Style.Font.Color.SetColor (Color.White);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A20:G20"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  	row.Style.Font.Color.SetColor (Color.White);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A21:G21"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	row.Style.Font.Color.SetColor (Color.Black);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A21:G21"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	row.Style.Font.Color.SetColor (Color.Black);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (ExcelRange row = ws.Cells ["A21:G21"]) {  	row.Style.Fill.PatternType = ExcelFillStyle.Solid;  	row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	row.Style.Font.Color.SetColor (Color.Black);  	row.Style.Font.Bold = true;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: row.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlConnection sqlConn = new SqlConnection (connectionString)) {  	int row = startRow;  	sqlConn.Open ();  	using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  		using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  			// get the data and fill rows 22 onwards  			while (sqlReader.Read ()) {  				ws.Cells [row' 1].Value = sqlReader [0];  				ws.Cells [row' 2].Value = sqlReader [1];  				ws.Cells [row' 3].Value = sqlReader [2];  				ws.Cells [row' 4].Value = sqlReader [3];  				row++;  			}  		}  		//Set the numberformat  		ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  		ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  		//Set the Formulas   		ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  		ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  	}  	//Set the series for the chart. The series must exist in the template or the program will crash.  	ExcelChart chart = ((ExcelChart)ws.Drawings ["SampleChart"]);  	chart.Title.Text = "Exchange rate %";  	chart.Series [0].Header = "USD/JPY";  	chart.Series [0].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  	chart.Series [1].Header = "USD/EUR";  	chart.Series [1].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  	chart.Series [2].Header = "USD/GBP";  	chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  	chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlCommand sqlCmd = new SqlCommand ("SELECT CurrencyRateDate' SUM(Case when ToCurrencyCode = 'JPY' Then EndOfDayRate Else 0 END) AS [JPY]' SUM(Case when ToCurrencyCode = 'EUR' Then EndOfDayRate Else 0 END) AS [EUR]' SUM(Case when ToCurrencyCode = 'GBP' Then EndOfDayRate Else 0 END) AS [GBP] FROM [AdventureWorks].[Sales].[CurrencyRate]  where [FromCurrencyCode]='USD' AND ToCurrencyCode in ('JPY'' 'EUR'' 'GBP') GROUP BY CurrencyRateDate  ORDER BY CurrencyRateDate"' sqlConn)) {  	using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  		// get the data and fill rows 22 onwards  		while (sqlReader.Read ()) {  			ws.Cells [row' 1].Value = sqlReader [0];  			ws.Cells [row' 2].Value = sqlReader [1];  			ws.Cells [row' 3].Value = sqlReader [2];  			ws.Cells [row' 4].Value = sqlReader [3];  			row++;  		}  	}  	//Set the numberformat  	ws.Cells [startRow' 1' row - 1' 1].Style.Numberformat.Format = "yyyy-mm-dd";  	ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  	//Set the Formulas   	ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  	ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 22 onwards  	while (sqlReader.Read ()) {  		ws.Cells [row' 1].Value = sqlReader [0];  		ws.Cells [row' 2].Value = sqlReader [1];  		ws.Cells [row' 3].Value = sqlReader [2];  		ws.Cells [row' 4].Value = sqlReader [3];  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 22 onwards  	while (sqlReader.Read ()) {  		ws.Cells [row' 1].Value = sqlReader [0];  		ws.Cells [row' 2].Value = sqlReader [1];  		ws.Cells [row' 3].Value = sqlReader [2];  		ws.Cells [row' 4].Value = sqlReader [3];  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 22 onwards  	while (sqlReader.Read ()) {  		ws.Cells [row' 1].Value = sqlReader [0];  		ws.Cells [row' 2].Value = sqlReader [1];  		ws.Cells [row' 3].Value = sqlReader [2];  		ws.Cells [row' 4].Value = sqlReader [3];  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 22 onwards  	while (sqlReader.Read ()) {  		ws.Cells [row' 1].Value = sqlReader [0];  		ws.Cells [row' 2].Value = sqlReader [1];  		ws.Cells [row' 3].Value = sqlReader [2];  		ws.Cells [row' 4].Value = sqlReader [3];  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: using (SqlDataReader sqlReader = sqlCmd.ExecuteReader ()) {  	// get the data and fill rows 22 onwards  	while (sqlReader.Read ()) {  		ws.Cells [row' 1].Value = sqlReader [0];  		ws.Cells [row' 2].Value = sqlReader [1];  		ws.Cells [row' 3].Value = sqlReader [2];  		ws.Cells [row' 4].Value = sqlReader [3];  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: while (sqlReader.Read ()) {  	ws.Cells [row' 1].Value = sqlReader [0];  	ws.Cells [row' 2].Value = sqlReader [1];  	ws.Cells [row' 3].Value = sqlReader [2];  	ws.Cells [row' 4].Value = sqlReader [3];  	row++;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: while (sqlReader.Read ()) {  	ws.Cells [row' 1].Value = sqlReader [0];  	ws.Cells [row' 2].Value = sqlReader [1];  	ws.Cells [row' 3].Value = sqlReader [2];  	ws.Cells [row' 4].Value = sqlReader [3];  	row++;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: while (sqlReader.Read ()) {  	ws.Cells [row' 1].Value = sqlReader [0];  	ws.Cells [row' 2].Value = sqlReader [1];  	ws.Cells [row' 3].Value = sqlReader [2];  	ws.Cells [row' 4].Value = sqlReader [3];  	row++;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: while (sqlReader.Read ()) {  	ws.Cells [row' 1].Value = sqlReader [0];  	ws.Cells [row' 2].Value = sqlReader [1];  	ws.Cells [row' 3].Value = sqlReader [2];  	ws.Cells [row' 4].Value = sqlReader [3];  	row++;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: while (sqlReader.Read ()) {  	ws.Cells [row' 1].Value = sqlReader [0];  	ws.Cells [row' 2].Value = sqlReader [1];  	ws.Cells [row' 3].Value = sqlReader [2];  	ws.Cells [row' 4].Value = sqlReader [3];  	row++;  }  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [row' 2].Value = sqlReader [1];  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [row' 3].Value = sqlReader [2];  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [row' 3].Value = sqlReader [2];  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [row' 4].Value = sqlReader [3];  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [row' 4].Value = sqlReader [3];  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow' 2' row - 1' 4].Style.Numberformat.Format = "#'##0.0000";  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow + 1' 5' row - 1' 7].Formula = string.Format ("B${0}/B{1}-1"' startRow' startRow + 1);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: ws.Cells [startRow' 5' row - 1' 7].Style.Numberformat.Format = "0.00%";  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [0].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 5' row - 1' 5);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [1].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 6' row - 1' 6);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [2].Header = "USD/GBP";  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [2].XSeries = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 1' row - 1' 1);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  
Magic Number,EPPlusSamples,Sample4,C:\repos\bambit_EPPlus\SampleApp\Sample4.cs,RunSample4,The following statement contains a magic number: chart.Series [2].Series = "'" + ws.Name + "'!" + ExcelRange.GetAddress (startRow + 1' 7' row - 1' 7);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (newFile' templateFile)) {  	//Open worksheet 1  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	worksheet.InsertRow (5' 2);  	worksheet.Cells ["A5"].Value = "12010";  	worksheet.Cells ["B5"].Value = "Drill";  	worksheet.Cells ["C5"].Value = 20;  	worksheet.Cells ["D5"].Value = 8;  	worksheet.Cells ["A6"].Value = "12011";  	worksheet.Cells ["B6"].Value = "Crowbar";  	worksheet.Cells ["C6"].Value = 7;  	worksheet.Cells ["D6"].Value = 23.48;  	worksheet.Cells ["E2:E6"].FormulaR1C1 = "RC[-2]*RC[-1]";  	var name = worksheet.Names.Add ("SubTotalName"' worksheet.Cells ["C7:E7"]);  	name.Style.Font.Italic = true;  	name.Formula = "SUBTOTAL(9'C2:C6)";  	//Format the new rows  	worksheet.Cells ["C5:C6"].Style.Numberformat.Format = "#'##0";  	worksheet.Cells ["D5:E6"].Style.Numberformat.Format = "#'##0.00";  	var chart = (worksheet.Drawings.AddChart ("PieChart"' eChartType.Pie3D) as ExcelPieChart);  	chart.Title.Text = "Total";  	//From row 1 colum 5 with five pixels offset  	chart.SetPosition (0' 0' 5' 5);  	chart.SetSize (600' 300);  	ExcelAddress valueAddress = new ExcelAddress (2' 5' 6' 5);  	var ser = (chart.Series.Add (valueAddress.Address' "B2:B6") as ExcelPieChartSerie);  	chart.DataLabel.ShowCategory = true;  	chart.DataLabel.ShowPercent = true;  	chart.Legend.Border.LineStyle = eLineStyle.Solid;  	chart.Legend.Border.Fill.Style = eFillStyle.SolidFill;  	chart.Legend.Border.Fill.Color = Color.DarkBlue;  	//Switch the PageLayoutView back to normal  	worksheet.View.PageLayoutView = false;  	// save our new workbook and we are done!  	package.Save ();  }  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.InsertRow (5' 2);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.InsertRow (5' 2);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.Cells ["C5"].Value = 20;  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.Cells ["D5"].Value = 8;  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.Cells ["C6"].Value = 7;  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: worksheet.Cells ["D6"].Value = 23.48;  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: chart.SetPosition (0' 0' 5' 5);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: chart.SetPosition (0' 0' 5' 5);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: chart.SetSize (600' 300);  
Magic Number,EPPlusSamples,Sample5,C:\repos\bambit_EPPlus\SampleApp\Sample5.cs,RunSample5,The following statement contains a magic number: chart.SetSize (600' 300);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (1).Width = 2.5;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (2).Width = 60;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (2).Width = 60;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (3).Width = 16;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (3).Width = 16;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (4).Width = 20;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (4).Width = 20;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (5).Width = 20;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (5).Width = 20;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (4).OutlineLevel = 1;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (4).Collapsed = true;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (5).OutlineLevel = 1;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Column (5).Collapsed = true;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.View.FreezePanes (2' 1);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 3' row - 1' 3].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 3' row - 1' 3].Style.Numberformat.Format = "#'##0";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 4' row - 1' 4].Style.Numberformat.Format = "yyyy-MM-dd hh:mm";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 4' row - 1' 4].Style.Numberformat.Format = "yyyy-MM-dd hh:mm";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 5' row - 1' 5].Style.Numberformat.Format = "yyyy-MM-dd hh:mm";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 5' row - 1' 5].Style.Numberformat.Format = "yyyy-MM-dd hh:mm";  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.SetPosition (1' 5' 6' 5);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.SetPosition (1' 5' 6' 5);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.SetPosition (1' 5' 6' 5);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.SetSize (400' 200);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.SetSize (400' 200);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: shape.Fill.Transparancy = 20;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 2' row' 5].AutoFitColumns ();  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.Cells [1' 2' row' 5].AutoFitColumns ();  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,RunSample6,The following statement contains a magic number: ws.PrinterSettings.PrintArea = ws.Cells [1' 1' row - 1' 5];  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: comment.From.Column = 7;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: comment.From.Row = 3;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: comment.To.Column = 16;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: comment.To.Row = 8;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (0' 128' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddComments,The following statement contains a magic number: rc.Color = Color.FromArgb (123' 21' 21);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: using (ExcelRange r = ws.Cells ["A1:O1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 22' FontStyle.Regular));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: using (ExcelRange r = ws.Cells ["A1:O1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 22' FontStyle.Regular));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: using (ExcelRange r = ws.Cells ["A1:O1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 22' FontStyle.Regular));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: using (ExcelRange r = ws.Cells ["A1:O1"]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 22' FontStyle.Regular));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: r.Style.Font.SetFromFont (new Font ("Arial"' 22' FontStyle.Regular));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (23' 55' 93));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: rtDir.Size = 18;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.SetPosition (1' 0' 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.SetSize (400' 400);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.SetSize (400' 400);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.Series.Add (ExcelRange.GetAddress (3' 2' row - 1' 2)' ExcelRange.GetAddress (3' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.Series.Add (ExcelRange.GetAddress (3' 2' row - 1' 2)' ExcelRange.GetAddress (3' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.Series.Add (ExcelRange.GetAddress (3' 2' row - 1' 2)' ExcelRange.GetAddress (3' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: pieChart.Series.Add (ExcelRange.GetAddress (3' 2' row - 1' 2)' ExcelRange.GetAddress (3' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: row = AddStatRows (ws' lst' 16' ""' "Count");  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.SetPosition (1' 0' 8' 16);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.SetPosition (1' 0' 8' 16);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.SetSize (400' 400);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.SetSize (400' 400);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.Series.Add (ExcelRange.GetAddress (16' 2' row - 1' 2)' ExcelRange.GetAddress (16' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.Series.Add (ExcelRange.GetAddress (16' 2' row - 1' 2)' ExcelRange.GetAddress (16' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.Series.Add (ExcelRange.GetAddress (16' 2' row - 1' 2)' ExcelRange.GetAddress (16' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: doughtnutChart.Series.Add (ExcelRange.GetAddress (16' 2' row - 1' 2)' ExcelRange.GetAddress (16' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: row = AddStatRows (ws' _fileSize' 29' "Files"' "Size");  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.SetPosition (22' 0' 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.SetPosition (22' 0' 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.SetSize (800' 398);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.SetSize (800' 398);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.Series.Add (ExcelRange.GetAddress (30' 2' row - 1' 2)' ExcelRange.GetAddress (30' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.Series.Add (ExcelRange.GetAddress (30' 2' row - 1' 2)' ExcelRange.GetAddress (30' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.Series.Add (ExcelRange.GetAddress (30' 2' row - 1' 2)' ExcelRange.GetAddress (30' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: barChart.Series.Add (ExcelRange.GetAddress (30' 2' row - 1' 2)' ExcelRange.GetAddress (30' 1' row - 1' 1));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: ws.Cells [1' 1' row' 2].AutoFitColumns (1);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddGraphs,The following statement contains a magic number: ws.PrinterSettings.Scale = 67;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (header != "") {  	ws.Cells [row' 1].Value = header;  	using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  	}  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (header != "") {  	ws.Cells [row' 1].Value = header;  	using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  	}  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (header != "") {  	ws.Cells [row' 1].Value = header;  	using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  	}  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (header != "") {  	ws.Cells [row' 1].Value = header;  	using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  	}  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (header != "") {  	ws.Cells [row' 1].Value = header;  	using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  		r.Merge = true;  		r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  		r.Style.Font.Color.SetColor (Color.White);  		r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  		r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  		r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  	}  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Merge = true;  	r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  	r.Style.Font.Color.SetColor (Color.White);  	r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;  	r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;  	r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: r.Style.Font.SetFromFont (new Font ("Arial"' 16' FontStyle.Italic));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: r.Style.Fill.BackgroundColor.SetColor (Color.FromArgb (79' 129' 189));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 2].Value = propertyName;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Style.Font.SetFromFont (new Font ("Arial"' 12' FontStyle.Bold));  	//AlterColor(ws' row);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: using (ExcelRange r = ws.Cells [row' 1' row' 2]) {  	r.Style.Font.SetFromFont (new Font ("Arial"' 12' FontStyle.Bold));  	//AlterColor(ws' row);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: r.Style.Font.SetFromFont (new Font ("Arial"' 12' FontStyle.Bold));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (lst.Count - i > 0) {  		ws.Cells [row' 1].Value = lst [lst.Count - i - 1].Name;  		if (propertyName == "Size") {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  		}  		else {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  		}  		//AlterColor(ws' row);  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (lst.Count - i > 0) {  		ws.Cells [row' 1].Value = lst [lst.Count - i - 1].Name;  		if (propertyName == "Size") {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  		}  		else {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  		}  		//AlterColor(ws' row);  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (lst.Count - i > 0) {  		ws.Cells [row' 1].Value = lst [lst.Count - i - 1].Name;  		if (propertyName == "Size") {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  		}  		else {  			ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  		}  		//AlterColor(ws' row);  		row++;  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (lst.Count - i > 0) {  	ws.Cells [row' 1].Value = lst [lst.Count - i - 1].Name;  	if (propertyName == "Size") {  		ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  	}  	else {  		ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  	}  	//AlterColor(ws' row);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (lst.Count - i > 0) {  	ws.Cells [row' 1].Value = lst [lst.Count - i - 1].Name;  	if (propertyName == "Size") {  		ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  	}  	else {  		ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  	}  	//AlterColor(ws' row);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (propertyName == "Size") {  	ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  }  else {  	ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (propertyName == "Size") {  	ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  }  else {  	ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Size;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 2].Value = lst [lst.Count - i - 1].Count;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: for (int i = 0; i < lst.Count - 10; i++) {  	if (propertyName == "Size") {  		rest += lst [i].Size;  	}  	else {  		rest += lst [i].Count;  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (rest > 0) {  	ws.Cells [row' 1].Value = "Others";  	ws.Cells [row' 2].Value = rest;  	ws.Cells [row' 1' row' 2].Style.Fill.PatternType = ExcelFillStyle.Solid;  	ws.Cells [row' 1' row' 2].Style.Fill.BackgroundColor.SetColor (Color.LightGray);  	//AlterColor(ws' row);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (rest > 0) {  	ws.Cells [row' 1].Value = "Others";  	ws.Cells [row' 2].Value = rest;  	ws.Cells [row' 1' row' 2].Style.Fill.PatternType = ExcelFillStyle.Solid;  	ws.Cells [row' 1' row' 2].Style.Fill.BackgroundColor.SetColor (Color.LightGray);  	//AlterColor(ws' row);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: if (rest > 0) {  	ws.Cells [row' 1].Value = "Others";  	ws.Cells [row' 2].Value = rest;  	ws.Cells [row' 1' row' 2].Style.Fill.PatternType = ExcelFillStyle.Solid;  	ws.Cells [row' 1' row' 2].Style.Fill.BackgroundColor.SetColor (Color.LightGray);  	//AlterColor(ws' row);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 2].Value = rest;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 1' row' 2].Style.Fill.PatternType = ExcelFillStyle.Solid;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatRows,The following statement contains a magic number: ws.Cells [row' 1' row' 2].Style.Fill.BackgroundColor.SetColor (Color.LightGray);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AlterColor,The following statement contains a magic number: using (ExcelRange rowRange = ws.Cells [row' 1' row' 2]) {  	rowRange.Style.Fill.PatternType = ExcelFillStyle.Solid;  	if (row % 2 == 1) {  		rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  	}  	else {  		rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightYellow);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AlterColor,The following statement contains a magic number: using (ExcelRange rowRange = ws.Cells [row' 1' row' 2]) {  	rowRange.Style.Fill.PatternType = ExcelFillStyle.Solid;  	if (row % 2 == 1) {  		rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  	}  	else {  		rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightYellow);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AlterColor,The following statement contains a magic number: if (row % 2 == 1) {  	rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightGray);  }  else {  	rowRange.Style.Fill.BackgroundColor.SetColor (Color.LightYellow);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (!skipIcons) {  	Bitmap icon = GetIcon (dir.FullName);  	ws.Row (row).Height = height;  	//Add the icon as a picture  	if (icon != null) {  		ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' icon);  		pic.SetPosition ((int)20 * (row - 1) + 2' 0);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (!skipIcons) {  	Bitmap icon = GetIcon (dir.FullName);  	ws.Row (row).Height = height;  	//Add the icon as a picture  	if (icon != null) {  		ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' icon);  		pic.SetPosition ((int)20 * (row - 1) + 2' 0);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (icon != null) {  	ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' icon);  	pic.SetPosition ((int)20 * (row - 1) + 2' 0);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (icon != null) {  	ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' icon);  	pic.SetPosition ((int)20 * (row - 1) + 2' 0);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: pic.SetPosition ((int)20 * (row - 1) + 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: pic.SetPosition ((int)20 * (row - 1) + 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 2].Value = dir.Name;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 4].Value = dir.CreationTime;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 5].Value = dir.LastAccessTime;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 2' row' 5].Style.Font.Bold = true;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 2' row' 5].Style.Font.Bold = true;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: foreach (FileInfo file in dir.GetFiles ()) {  	if (!skipIcons) {  		Bitmap fileIcon = GetIcon (file.FullName);  		ws.Row (row).Height = height;  		if (fileIcon != null) {  			ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  			pic.SetPosition ((int)20 * (row - 1) + 2' 0);  		}  	}  	ws.Cells [row' 2].Value = file.Name;  	ws.Cells [row' 3].Value = file.Length;  	ws.Cells [row' 4].Value = file.CreationTime;  	ws.Cells [row' 5].Value = file.LastAccessTime;  	ws.Row (row).OutlineLevel = level + 1;  	AddStatistics (file);  	row++;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (!skipIcons) {  	Bitmap fileIcon = GetIcon (file.FullName);  	ws.Row (row).Height = height;  	if (fileIcon != null) {  		ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  		pic.SetPosition ((int)20 * (row - 1) + 2' 0);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (!skipIcons) {  	Bitmap fileIcon = GetIcon (file.FullName);  	ws.Row (row).Height = height;  	if (fileIcon != null) {  		ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  		pic.SetPosition ((int)20 * (row - 1) + 2' 0);  	}  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (fileIcon != null) {  	ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  	pic.SetPosition ((int)20 * (row - 1) + 2' 0);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (fileIcon != null) {  	ExcelPicture pic = ws.Drawings.AddPicture ("pic" + (row).ToString ()' fileIcon);  	pic.SetPosition ((int)20 * (row - 1) + 2' 0);  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: pic.SetPosition ((int)20 * (row - 1) + 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: pic.SetPosition ((int)20 * (row - 1) + 2' 0);  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 2].Value = file.Name;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 3].Value = file.Length;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 4].Value = file.CreationTime;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [row' 5].Value = file.LastAccessTime;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (row - 1 > prevRow) {  	ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  }  else {  	ws.Cells [prevRow' 3].Value = 0;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (row - 1 > prevRow) {  	ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  }  else {  	ws.Cells [prevRow' 3].Value = 0;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (row - 1 > prevRow) {  	ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  }  else {  	ws.Cells [prevRow' 3].Value = 0;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: if (row - 1 > prevRow) {  	ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  }  else {  	ws.Cells [prevRow' 3].Value = 0;  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [prevRow' 3].Formula = string.Format ("SUBTOTAL(9' {0})"' ExcelCellBase.GetAddress (prevRow + 1' 3' row - 1' 3));  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddDirectory,The following statement contains a magic number: ws.Cells [prevRow' 3].Value = 0;  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatistics,The following statement contains a magic number: if (_fileSize.Count < 10) {  	_fileSize.Add (new StatItem {  		Name = file.Name'  		Size = file.Length  	});  	if (_fileSize.Count == 10) {  		_fileSize.Sort ();  	}  }  else if (_fileSize [0].Size < file.Length) {  	_fileSize.RemoveAt (0);  	_fileSize.Add (new StatItem {  		Name = file.Name'  		Size = file.Length  	});  	_fileSize.Sort ();  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatistics,The following statement contains a magic number: if (_fileSize.Count < 10) {  	_fileSize.Add (new StatItem {  		Name = file.Name'  		Size = file.Length  	});  	if (_fileSize.Count == 10) {  		_fileSize.Sort ();  	}  }  else if (_fileSize [0].Size < file.Length) {  	_fileSize.RemoveAt (0);  	_fileSize.Add (new StatItem {  		Name = file.Name'  		Size = file.Length  	});  	_fileSize.Sort ();  }  
Magic Number,EPPlusSamples,Sample6,C:\repos\bambit_EPPlus\SampleApp\Sample6.cs,AddStatistics,The following statement contains a magic number: if (_fileSize.Count == 10) {  	_fileSize.Sort ();  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: for (int row = 1; row <= Rows; row++) {  	ws.SetValue (row' 1' row);  	//The SetValue method is a little bit faster than using the Value property  	ws.SetValue (row' 2' string.Format ("Row {0}"' row));  	ws.SetValue (row' 3' DateTime.Today.AddDays (row));  	ws.SetValue (row' 4' rnd.NextDouble () * 10000);  	ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  	if (row % 10000 == 0) {  		Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  	}  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.SetValue (row' 2' string.Format ("Row {0}"' row));  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.SetValue (row' 3' DateTime.Today.AddDays (row));  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.SetValue (row' 4' rnd.NextDouble () * 10000);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.SetValue (row' 4' rnd.NextDouble () * 10000);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [row' 5].FormulaR1C1 = "RC[-4]+RC[-1]";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: if (row % 10000 == 0) {  	Console.WriteLine ("{0:HH.mm.ss}\tWriting row {1}..."' DateTime.Now' row);  }  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows + 1' 5].Formula = string.Format ("Sum({0})"' new ExcelAddress (1' 5' Rows' 5).Address);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows + 1' 5].Formula = string.Format ("Sum({0})"' new ExcelAddress (1' 5' Rows' 5).Address);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows + 1' 5].Formula = string.Format ("Sum({0})"' new ExcelAddress (1' 5' Rows' 5).Address);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows + 1' 5].Style.Font.Bold = true;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows + 1' 5].Style.Numberformat.Format = "#'##0.00";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 3' Rows' 3].Style.Numberformat.Format = "YYYY-MM-DD";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 3' Rows' 3].Style.Numberformat.Format = "YYYY-MM-DD";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 4' Rows' 5].Style.Numberformat.Format = "#'##0.00";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 4' Rows' 5].Style.Numberformat.Format = "#'##0.00";  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.View.FreezePanes (2' 1);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows - 100' 1' Rows' 5].AutoFitColumns (5);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows - 100' 1' Rows' 5].AutoFitColumns (5);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [Rows - 100' 1' Rows' 5].AutoFitColumns (5);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Column (5).Width = 15;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Column (5).Width = 15;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Locked = false;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Locked = false;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Locked = false;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.PatternType = ExcelFillStyle.Solid;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.PatternType = ExcelFillStyle.Solid;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.PatternType = ExcelFillStyle.Solid;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.BackgroundColor.SetColor (Color.White);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.BackgroundColor.SetColor (Color.White);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [2' 3' Rows + 1' 4].Style.Fill.BackgroundColor.SetColor (Color.White);  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 5' Rows + 2' 5].Style.Hidden = true;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 5' Rows + 2' 5].Style.Hidden = true;  
Magic Number,EPPlusSamples,Sample7,C:\repos\bambit_EPPlus\SampleApp\Sample7.cs,RunSample7,The following statement contains a magic number: ws.Cells [1' 5' Rows + 2' 5].Style.Hidden = true;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: format.SkipLinesBeginning = 2;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [2].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [2].DataCellStyleName = "TableNumber";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [3].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [3].DataCellStyleName = "TableNumber";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [4].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [4].DataCellStyleName = "TableNumber";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [5].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [5].DataCellStyleName = "TableNumber";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [6].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: tbl.Columns [6].DataCellStyleName = "TableNumber";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: chart.SetPosition (0' 630);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: chart.SetSize (800' 600);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: chart.SetSize (800' 600);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile1,The following statement contains a magic number: for (int col = 1; col < 7; col++) {  	var ser = chart.Series.Add (range.Offset (1' col' range.End.Row - 1' 1)' range.Offset (1' 0' range.End.Row - 1' 1));  	ser.HeaderAddress = range.Offset (0' col' 1' 1);  }  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: tbl.Columns [2].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: tbl.Columns [3].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: tbl.Columns [4].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: tbl.Columns [5].TotalsRowFunction = RowFunctions.Sum;  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: tbl.Columns [5].Name = "Profit";  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: chart.SetPosition (0' 540);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: chart.SetSize (800' 600);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: chart.SetSize (800' 600);  
Magic Number,EPPlusSamples,Sample9,C:\repos\bambit_EPPlus\SampleApp\Sample9.cs,LoadFile2,The following statement contains a magic number: chartType2.YAxis.MaxValue = 50;  
Magic Number,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The following statement contains a magic number: try {  	//Sample 3' 4 and 12 uses the Adventureworks database. Enter then name of your SQL server into the variable below...  	//Leave this blank if you don't have access to the Adventureworks database   	string SqlServerName = "";  	// change this line to contain the path to the output folder  	DirectoryInfo outputDir = new DirectoryInfo (@"c:\temp\SampleApp");  	if (!outputDir.Exists)  		throw new Exception ("outputDir does not exist!");  	// Sample 1 - simply creates a new workbook from scratch  	// containing a worksheet that adds a few numbers together   	Console.WriteLine ("Running sample 1");  	string output = Sample1.RunSample1 (outputDir);  	Console.WriteLine ("Sample 1 created: {0}"' output);  	Console.WriteLine ();  	// Sample 2 - simply reads some values from the file generated by sample 1  	// and outputs them to the console  	Console.WriteLine ("Running sample 2");  	Sample2.RunSample2 (output);  	Console.WriteLine ();  	output = "";  	if (SqlServerName != "") {  		string connectionStr = string.Format (@"server={0};database=AdventureWorks;Integrated Security=true;"' SqlServerName);  		// Sample 3 - creates a workbook from scratch   		// This is the same sample as the original Excelpackage' sample 4' but without the template  		// This sample requires the AdventureWorks database.    		//Shows how to use Ranges' Styling' Namedstyles and Hyperlinks  		Console.WriteLine ("Running sample 3");  		output = Sample3.RunSample3 (outputDir' connectionStr);  		Console.WriteLine ("Sample 3 created: {0}"' output);  		Console.WriteLine ();  		// Sample 4 - creates a workbook based on a template.  		// Populates a range with data and set the series of a linechart.  		// This sample requires the AdventureWorks database.    		Console.WriteLine ("Running sample 4");  		output = Sample4.RunSample4 (connectionStr' new FileInfo ("..\\..\\GraphTemplate.xlsx")' outputDir);  		//Template path from /bin/debug or /bin/release  		Console.WriteLine ("Sample 4 created: {0}"' output);  		Console.WriteLine ();  	}  	//Sample 5  	//Open sample 1 and add a pie chart.  	Console.WriteLine ("Running sample 5");  	output = Sample5.RunSample5 (outputDir);  	Console.WriteLine ("Sample 5 created:"' output);  	Console.WriteLine ();  	//Sample 6  	//Creates an advanced report on a directory in the filesystem.  	//Parameter 2 is the directory to report. Paramter 3 is how deep the scan will go. Parameter 4 Skips Icons if set to true (The icon handling is slow)  	//This example demonstrates how to use outlines' tables'comments' shapes' pictures and charts.                  	Console.WriteLine ("Running sample 6");  	output = Sample6.RunSample6 (outputDir' new DirectoryInfo ("..\\..")' 5' false);  	Console.WriteLine ("Sample 6 created:"' output);  	Console.WriteLine ();  	//Sample 7  	//This sample shows the performance capabilities of the component and shows sheet protection.  	//Load X(param 2) rows with five columns  	Console.WriteLine ("Running sample 7");  	output = Sample7.RunSample7 (outputDir' 65534);  	Console.WriteLine ("Sample 7 created:"' output);  	Console.WriteLine ();  	//Sample 8 - Linq  	//Opens Sample 7 and perform some Linq queries  	Console.WriteLine ("Running sample 8-Linq");  	LinqSample.RunLinqSample (outputDir);  	Console.WriteLine ();  	//Sample 9 Loads two csv files into tables and creates an area chart and a Column/Line chart on the data.  	//This sample also shows how to use a secondary axis.  	Console.WriteLine ("Running sample 9");  	output = Sample9.RunSample9 (outputDir);  	Console.WriteLine ("Sample 9 created: {0}"' output);  	Console.WriteLine ();  	//Sample 10 Swedish Quiz : Shows Encryption and workbook and sheet protection.  	Console.WriteLine ("Running sample 10");  	Sample10.RunSample10 (outputDir);  	Console.WriteLine ("Sample 10 created: {0}"' outputDir.FullName);  	Console.WriteLine ();  	//Sample 11 - Data validation  	Console.WriteLine ("Running sample 11");  	output = Sample11.RunSample11 (outputDir);  	Console.WriteLine ("Sample 11 created {0}"' output);  	Console.WriteLine ();  	//Sample 12 - Pivottables  	Console.WriteLine ("Running sample 12");  	output = Sample12.RunSample12 (SqlServerName' outputDir);  	Console.WriteLine ("Sample 12 created {0}"' output);  	Console.WriteLine ();  	//Sample 13 - Shows a few ways to load data (Datatable' IEnumerable and more).  	Console.WriteLine ("Running sample 13");  	Sample13.RunSample13 (outputDir);  	Console.WriteLine ("Sample 13 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 14 - Conditional Formatting  	Console.WriteLine ("Running sample 14");  	Sample14.RunSample14 (outputDir);  	Console.WriteLine ("Sample 14 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 15 - Shows how to work with macro-enabled workbooks(VBA).  	Console.WriteLine ("Running sample 15-VBA");  	Sample15.VBASample (outputDir);  	Console.WriteLine ("Sample 15 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 16 - Shows how to work with protected ranges  	Console.WriteLine ("Running sample 16");  	Sample16.RunSample16 (outputDir);  	Console.WriteLine ("Sample 16 created {0}"' outputDir.Name);  	Console.WriteLine ();  }  catch (Exception ex) {  	Console.WriteLine ("Error: {0}"' ex.Message);  }  
Magic Number,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The following statement contains a magic number: try {  	//Sample 3' 4 and 12 uses the Adventureworks database. Enter then name of your SQL server into the variable below...  	//Leave this blank if you don't have access to the Adventureworks database   	string SqlServerName = "";  	// change this line to contain the path to the output folder  	DirectoryInfo outputDir = new DirectoryInfo (@"c:\temp\SampleApp");  	if (!outputDir.Exists)  		throw new Exception ("outputDir does not exist!");  	// Sample 1 - simply creates a new workbook from scratch  	// containing a worksheet that adds a few numbers together   	Console.WriteLine ("Running sample 1");  	string output = Sample1.RunSample1 (outputDir);  	Console.WriteLine ("Sample 1 created: {0}"' output);  	Console.WriteLine ();  	// Sample 2 - simply reads some values from the file generated by sample 1  	// and outputs them to the console  	Console.WriteLine ("Running sample 2");  	Sample2.RunSample2 (output);  	Console.WriteLine ();  	output = "";  	if (SqlServerName != "") {  		string connectionStr = string.Format (@"server={0};database=AdventureWorks;Integrated Security=true;"' SqlServerName);  		// Sample 3 - creates a workbook from scratch   		// This is the same sample as the original Excelpackage' sample 4' but without the template  		// This sample requires the AdventureWorks database.    		//Shows how to use Ranges' Styling' Namedstyles and Hyperlinks  		Console.WriteLine ("Running sample 3");  		output = Sample3.RunSample3 (outputDir' connectionStr);  		Console.WriteLine ("Sample 3 created: {0}"' output);  		Console.WriteLine ();  		// Sample 4 - creates a workbook based on a template.  		// Populates a range with data and set the series of a linechart.  		// This sample requires the AdventureWorks database.    		Console.WriteLine ("Running sample 4");  		output = Sample4.RunSample4 (connectionStr' new FileInfo ("..\\..\\GraphTemplate.xlsx")' outputDir);  		//Template path from /bin/debug or /bin/release  		Console.WriteLine ("Sample 4 created: {0}"' output);  		Console.WriteLine ();  	}  	//Sample 5  	//Open sample 1 and add a pie chart.  	Console.WriteLine ("Running sample 5");  	output = Sample5.RunSample5 (outputDir);  	Console.WriteLine ("Sample 5 created:"' output);  	Console.WriteLine ();  	//Sample 6  	//Creates an advanced report on a directory in the filesystem.  	//Parameter 2 is the directory to report. Paramter 3 is how deep the scan will go. Parameter 4 Skips Icons if set to true (The icon handling is slow)  	//This example demonstrates how to use outlines' tables'comments' shapes' pictures and charts.                  	Console.WriteLine ("Running sample 6");  	output = Sample6.RunSample6 (outputDir' new DirectoryInfo ("..\\..")' 5' false);  	Console.WriteLine ("Sample 6 created:"' output);  	Console.WriteLine ();  	//Sample 7  	//This sample shows the performance capabilities of the component and shows sheet protection.  	//Load X(param 2) rows with five columns  	Console.WriteLine ("Running sample 7");  	output = Sample7.RunSample7 (outputDir' 65534);  	Console.WriteLine ("Sample 7 created:"' output);  	Console.WriteLine ();  	//Sample 8 - Linq  	//Opens Sample 7 and perform some Linq queries  	Console.WriteLine ("Running sample 8-Linq");  	LinqSample.RunLinqSample (outputDir);  	Console.WriteLine ();  	//Sample 9 Loads two csv files into tables and creates an area chart and a Column/Line chart on the data.  	//This sample also shows how to use a secondary axis.  	Console.WriteLine ("Running sample 9");  	output = Sample9.RunSample9 (outputDir);  	Console.WriteLine ("Sample 9 created: {0}"' output);  	Console.WriteLine ();  	//Sample 10 Swedish Quiz : Shows Encryption and workbook and sheet protection.  	Console.WriteLine ("Running sample 10");  	Sample10.RunSample10 (outputDir);  	Console.WriteLine ("Sample 10 created: {0}"' outputDir.FullName);  	Console.WriteLine ();  	//Sample 11 - Data validation  	Console.WriteLine ("Running sample 11");  	output = Sample11.RunSample11 (outputDir);  	Console.WriteLine ("Sample 11 created {0}"' output);  	Console.WriteLine ();  	//Sample 12 - Pivottables  	Console.WriteLine ("Running sample 12");  	output = Sample12.RunSample12 (SqlServerName' outputDir);  	Console.WriteLine ("Sample 12 created {0}"' output);  	Console.WriteLine ();  	//Sample 13 - Shows a few ways to load data (Datatable' IEnumerable and more).  	Console.WriteLine ("Running sample 13");  	Sample13.RunSample13 (outputDir);  	Console.WriteLine ("Sample 13 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 14 - Conditional Formatting  	Console.WriteLine ("Running sample 14");  	Sample14.RunSample14 (outputDir);  	Console.WriteLine ("Sample 14 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 15 - Shows how to work with macro-enabled workbooks(VBA).  	Console.WriteLine ("Running sample 15-VBA");  	Sample15.VBASample (outputDir);  	Console.WriteLine ("Sample 15 created {0}"' outputDir.Name);  	Console.WriteLine ();  	//Sample 16 - Shows how to work with protected ranges  	Console.WriteLine ("Running sample 16");  	Sample16.RunSample16 (outputDir);  	Console.WriteLine ("Sample 16 created {0}"' outputDir.Name);  	Console.WriteLine ();  }  catch (Exception ex) {  	Console.WriteLine ("Error: {0}"' ex.Message);  }  
Magic Number,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The following statement contains a magic number: output = Sample6.RunSample6 (outputDir' new DirectoryInfo ("..\\..")' 5' false);  
Magic Number,EPPlusSamples,Sample_Main,C:\repos\bambit_EPPlus\SampleApp\Sample_Main.cs,Main,The following statement contains a magic number: output = Sample7.RunSample7 (outputDir' 65534);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	// get the first worksheet in the workbook  	ExcelWorksheet worksheet = package.Workbook.Worksheets [1];  	int col = 2;  	//The item description  	// output the data in column 2  	for (int row = 2; row < 5; row++)  		Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  	// output the formula in row 5  	Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  	Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  }  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: for (int row = 2; row < 5; row++)  	Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: for (int row = 2; row < 5; row++)  	Console.WriteLine ("\tCell({0}'{1}).Value={2}"' row' col' worksheet.Cells [row' col].Value);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 3' 5' worksheet.Cells [3' 5].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 3' 5' worksheet.Cells [3' 5].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).Formula={2}"' 5' 3' worksheet.Cells [5' 3].Formula);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  
Magic Number,EPPlusSamples,Sample2,C:\repos\bambit_EPPlus\SampleApp\Sample2.cs,RunSample2,The following statement contains a magic number: Console.WriteLine ("\tCell({0}'{1}).FormulaR1C1={2}"' 5' 3' worksheet.Cells [5' 3].FormulaR1C1);  
