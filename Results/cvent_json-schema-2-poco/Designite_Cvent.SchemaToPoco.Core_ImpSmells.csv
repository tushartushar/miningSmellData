Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cvent.SchemaToPoco.Core,JsonSchemaToCodeUnit,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaToCodeUnit.cs,Execute,The method has 126 lines of code.
Long Method,Cvent.SchemaToPoco.Core,JsonSchemaResolver,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaResolver.cs,ResolveSchemaHelper,The method has 120 lines of code.
Complex Method,Cvent.SchemaToPoco.Core,JsonSchemaToCodeUnit,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaToCodeUnit.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,Cvent.SchemaToPoco.Core,JsonSchemaResolver,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaResolver.cs,ResolveSchemaHelper,Cyclomatic complexity of the method is 13
Complex Method,Cvent.SchemaToPoco.Core.Wrappers,PropertyWrapper,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\Wrappers\PropertyWrapper.cs,Populate,Cyclomatic complexity of the method is 16
Long Statement,Cvent.SchemaToPoco.Core,JsonSchemaToCodeUnit,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaToCodeUnit.cs,Execute,The length of the statement  "                            strType = JsonSchemaUtils.IsArray(schema) ? string.Format("{0}<{1}>"' JsonSchemaUtils.GetArrayType(schema)' type.Name) : type.Name;" is 131.
Long Statement,Cvent.SchemaToPoco.Core,JsonSchemaToPoco,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaToPoco.cs,LoadSchemas,The length of the statement  "            var resolver = new JsonSchemaResolver(_configuration.Namespace' !_configuration.Verbose' _configuration.OutputDirectory); " is 121.
Long Statement,Cvent.SchemaToPoco.Core,JsonSchemaToPoco,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaToPoco.cs,Generate,The length of the statement  "                    string saveLoc = Path.Combine(_configuration.OutputDirectory' entry.Key.Namespace.Replace('.'' Path.DirectorySeparatorChar)' entry.Key.Schema.Title + ".cs"); " is 157.
Long Statement,Cvent.SchemaToPoco.Core,JsonSchemaResolver,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaResolver.cs,ResolveSchemas,The length of the statement  "            var uri = IoUtils.GetAbsoluteUri(new Uri(Directory.GetCurrentDirectory())' new Uri(filePath' UriKind.RelativeOrAbsolute)' false);" is 129.
Complex Conditional,Cvent.SchemaToPoco.Core.Wrappers,NamespaceWrapper,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\Wrappers\NamespaceWrapper.cs,AddImportsFromSchema,The conditional expression  "(schema.Required != null && schema.Required.Value) || schema.MaximumLength != null ||                  schema.MinimumLength != null                  || schema.MinimumItems != null || schema.MaximumItems != null || schema.Pattern != null"  is complex.
Magic Number,Cvent.SchemaToPoco.Core,JsonSchemaResolver,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaResolver.cs,StandardizeReferences,The following statement contains a magic number: for (int i = lines.Count - 1; i >= 0; i--)             {                 if (pattern.IsMatch(lines[i]))                 {                     var matched = pattern.Match(lines[i]);                     var matchedPath = matched.Groups[2].Value;                     var absPath = IoUtils.GetAbsoluteUri(parentUri' new Uri(matchedPath' UriKind.RelativeOrAbsolute)' true);                     lines[i] = matched.Groups[1].Value + absPath + matched.Groups[3].Value + "'";                 }             }
Magic Number,Cvent.SchemaToPoco.Core,JsonSchemaResolver,C:\repos\cvent_json-schema-2-poco\Source\Cvent.SchemaToPoco.Core\JsonSchemaResolver.cs,StandardizeReferences,The following statement contains a magic number: for (int i = lines.Count - 1; i >= 0; i--)             {                 if (pattern.IsMatch(lines[i]))                 {                     var matched = pattern.Match(lines[i]);                     var matchedPath = matched.Groups[2].Value;                     var absPath = IoUtils.GetAbsoluteUri(parentUri' new Uri(matchedPath' UriKind.RelativeOrAbsolute)' true);                     lines[i] = matched.Groups[1].Value + absPath + matched.Groups[3].Value + "'";                 }             }
