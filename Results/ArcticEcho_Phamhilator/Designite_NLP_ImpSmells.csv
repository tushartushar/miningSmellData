Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Phamhilator.NLP,BagOfWords,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\BagOfWords.cs,GetSimilarity,Cyclomatic complexity of the method is 13
Long Statement,Phamhilator.NLP,BagOfWords,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\BagOfWords.cs,CalculateDocumentLength,The length of the statement  "			len += Terms [term].IDF * Terms [term].DocumentIDsByTFs [docID] * Terms [term].IDF * Terms [term].DocumentIDsByTFs [docID]; " is 123.
Magic Number,Phamhilator.NLP,BagOfWords,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\BagOfWords.cs,RecalculateIDFs,The following statement contains a magic number: foreach (var term in Terms.Keys) {  	// How many documents contain the term?  	var docsFound = Terms [term].DocumentIDsByTFs.Count;  	Terms [term].IDF = (float)Math.Log (totalDocCount / docsFound' 2);  }  
Magic Number,Phamhilator.NLP,BagOfWords,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\BagOfWords.cs,RecalculateIDFs,The following statement contains a magic number: Terms [term].IDF = (float)Math.Log (totalDocCount / docsFound' 2);  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagCodeBlocks,The following statement contains a magic number: while (m.Success) {  	var code = tagged.Substring (m.Index' m.Length);  	var lines = code.Split ('\n');  	tagged = tagged.Remove (m.Index' m.Length);  	if (lines.Length < 4) {  		tagged = tagged.Insert (m.Index' " •CBS• ");  	} else if (lines.Length < 26) {  		tagged = tagged.Insert (m.Index' " •CBM• ");  	} else {  		tagged = tagged.Insert (m.Index' " •CBL• ");  	}  	m = CodeBlock.Match (tagged);  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagCodeBlocks,The following statement contains a magic number: while (m.Success) {  	var code = tagged.Substring (m.Index' m.Length);  	var lines = code.Split ('\n');  	tagged = tagged.Remove (m.Index' m.Length);  	if (lines.Length < 4) {  		tagged = tagged.Insert (m.Index' " •CBS• ");  	} else if (lines.Length < 26) {  		tagged = tagged.Insert (m.Index' " •CBM• ");  	} else {  		tagged = tagged.Insert (m.Index' " •CBL• ");  	}  	m = CodeBlock.Match (tagged);  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagCodeBlocks,The following statement contains a magic number: if (lines.Length < 4) {  	tagged = tagged.Insert (m.Index' " •CBS• ");  } else if (lines.Length < 26) {  	tagged = tagged.Insert (m.Index' " •CBM• ");  } else {  	tagged = tagged.Insert (m.Index' " •CBL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagCodeBlocks,The following statement contains a magic number: if (lines.Length < 4) {  	tagged = tagged.Insert (m.Index' " •CBS• ");  } else if (lines.Length < 26) {  	tagged = tagged.Insert (m.Index' " •CBM• ");  } else {  	tagged = tagged.Insert (m.Index' " •CBL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagCodeBlocks,The following statement contains a magic number: if (lines.Length < 26) {  	tagged = tagged.Insert (m.Index' " •CBM• ");  } else {  	tagged = tagged.Insert (m.Index' " •CBL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagInlineCode,The following statement contains a magic number: foreach (var match in matches) {  	var code = tagged.Substring (match.Index' match.Length);  	tagged = tagged.Remove (match.Index' match.Length);  	if (code.Length < 6) {  		tagged = tagged.Insert (match.Index' " •ICS• ");  	} else if (code.Length < 26) {  		tagged = tagged.Insert (match.Index' " •ICM• ");  	} else {  		tagged = tagged.Insert (match.Index' " •ICL• ");  	}  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagInlineCode,The following statement contains a magic number: foreach (var match in matches) {  	var code = tagged.Substring (match.Index' match.Length);  	tagged = tagged.Remove (match.Index' match.Length);  	if (code.Length < 6) {  		tagged = tagged.Insert (match.Index' " •ICS• ");  	} else if (code.Length < 26) {  		tagged = tagged.Insert (match.Index' " •ICM• ");  	} else {  		tagged = tagged.Insert (match.Index' " •ICL• ");  	}  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagInlineCode,The following statement contains a magic number: if (code.Length < 6) {  	tagged = tagged.Insert (match.Index' " •ICS• ");  } else if (code.Length < 26) {  	tagged = tagged.Insert (match.Index' " •ICM• ");  } else {  	tagged = tagged.Insert (match.Index' " •ICL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagInlineCode,The following statement contains a magic number: if (code.Length < 6) {  	tagged = tagged.Insert (match.Index' " •ICS• ");  } else if (code.Length < 26) {  	tagged = tagged.Insert (match.Index' " •ICM• ");  } else {  	tagged = tagged.Insert (match.Index' " •ICL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagInlineCode,The following statement contains a magic number: if (code.Length < 26) {  	tagged = tagged.Insert (match.Index' " •ICM• ");  } else {  	tagged = tagged.Insert (match.Index' " •ICL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagBlockQuotes,The following statement contains a magic number: while (m.Success) {  	var quote = tagged.Substring (m.Index' m.Length);  	var lines = quote.Split ('\n');  	tagged = tagged.Remove (m.Index' m.Length);  	if (lines.Length < 4) {  		tagged = tagged.Insert (m.Index' " •BQS• ");  	} else if (lines.Length < 11) {  		tagged = tagged.Insert (m.Index' " •BQM• ");  	} else {  		tagged = tagged.Insert (m.Index' " •BQL• ");  	}  	m = blockQuote.Match (tagged);  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagBlockQuotes,The following statement contains a magic number: while (m.Success) {  	var quote = tagged.Substring (m.Index' m.Length);  	var lines = quote.Split ('\n');  	tagged = tagged.Remove (m.Index' m.Length);  	if (lines.Length < 4) {  		tagged = tagged.Insert (m.Index' " •BQS• ");  	} else if (lines.Length < 11) {  		tagged = tagged.Insert (m.Index' " •BQM• ");  	} else {  		tagged = tagged.Insert (m.Index' " •BQL• ");  	}  	m = blockQuote.Match (tagged);  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagBlockQuotes,The following statement contains a magic number: if (lines.Length < 4) {  	tagged = tagged.Insert (m.Index' " •BQS• ");  } else if (lines.Length < 11) {  	tagged = tagged.Insert (m.Index' " •BQM• ");  } else {  	tagged = tagged.Insert (m.Index' " •BQL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagBlockQuotes,The following statement contains a magic number: if (lines.Length < 4) {  	tagged = tagged.Insert (m.Index' " •BQS• ");  } else if (lines.Length < 11) {  	tagged = tagged.Insert (m.Index' " •BQM• ");  } else {  	tagged = tagged.Insert (m.Index' " •BQL• ");  }  
Magic Number,Phamhilator.NLP,PosTagger,F:\newReposMay17\ArcticEcho_Phamhilator\NLP\PosTagger.cs,TagBlockQuotes,The following statement contains a magic number: if (lines.Length < 11) {  	tagged = tagged.Insert (m.Index' " •BQM• ");  } else {  	tagged = tagged.Insert (m.Index' " •BQL• ");  }  
