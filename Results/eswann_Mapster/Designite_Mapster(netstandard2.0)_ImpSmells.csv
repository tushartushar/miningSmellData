Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The method has 130 lines of code.
Complex Method,Mapster,NameMatchingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\NameMatchingStrategy.cs,BreakWords,Cyclomatic complexity of the method is 11
Complex Method,Mapster,SettingStore,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\SettingStore.cs,Apply,Cyclomatic complexity of the method is 11
Complex Method,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,CustomResolverFn,Cyclomatic complexity of the method is 8
Complex Method,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,Cyclomatic complexity of the method is 8
Complex Method,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,Cyclomatic complexity of the method is 8
Complex Method,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,Cyclomatic complexity of the method is 10
Complex Method,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,CreateClassConverter,Cyclomatic complexity of the method is 13
Complex Method,Mapster.Adapters,ClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CanInline,Cyclomatic complexity of the method is 8
Complex Method,Mapster.Adapters,ClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateBlockExpression,Cyclomatic complexity of the method is 8
Complex Method,Mapster.Adapters,DictionaryAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\DictionaryAdapter.cs,CreateBlockExpression,Cyclomatic complexity of the method is 8
Complex Method,Mapster.Utils,Enum<TEnum>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Utils\Enum.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,Mapster,TypeAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapter.cs,Adapt,The method has 5 parameters. Parameters: source' destination' sourceType' destinationType' config
Long Parameter List,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateInlineMapExpression,The method has 5 parameters. Parameters: sourceType' destinationType' mapType' context' mapping
Long Parameter List,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,InvokeMapping,The method has 5 parameters. Parameters: mappingFactory' source' result' arg' setResult
Long Parameter List,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptExpressionCore,The method has 5 parameters. Parameters: source' destinationType' arg' mapping' destination
Long Parameter List,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptExpression,The method has 5 parameters. Parameters: source' destinationType' arg' mapping' destination
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,PropertyOrFieldFn,The length of the statement  "            var destinationMemberName = destinationMember.GetMemberName(arg.Settings.GetMemberNames' strategy.DestinationMemberNameConverter); " is 130.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,PropertyOrFieldFn,The length of the statement  "                .Where(member => member.GetMemberName(arg.Settings.GetMemberNames' strategy.SourceMemberNameConverter) == destinationMemberName) " is 128.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,GetMethodFn,The length of the statement  "            var destinationMemberName = "Get" + destinationMember.GetMemberName(arg.Settings.GetMemberNames' strategy.DestinationMemberNameConverter); " is 138.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,GetMethodFn,The length of the statement  "                .FirstOrDefault(m => strategy.SourceMemberNameConverter(m.Name) == destinationMemberName && m.GetParameters().Length == 0); " is 123.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,FlattenMemberFn,The length of the statement  "            var destinationMemberName = destinationMember.GetMemberName(arg.Settings.GetMemberNames' strategy.DestinationMemberNameConverter); " is 130.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,FindUnflatteningPairs,The length of the statement  "            var destinationMemberName = destinationMember.GetMemberName(arg.Settings.GetMemberNames' strategy.DestinationMemberNameConverter); " is 130.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,FindUnflatteningPairs,The length of the statement  "                foreach (var prop in GetDeepUnflattening(destinationMember' sourceMemberName.Substring(destinationMemberName.Length).TrimStart('_')' arg)) " is 138.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,GetDeepUnflattening,The length of the statement  "            var members = destinationMember.Type.GetFieldsAndProperties(accessorFlags: BindingFlags.NonPublic | BindingFlags.Public); " is 121.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,DictionaryFn,The length of the statement  "            var destinationMemberName = destinationMember.GetMemberName(arg.Settings.GetMemberNames' strategy.DestinationMemberNameConverter); " is 130.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,DictionaryFn,The length of the statement  "                var method = typeof(MapsterHelper).GetMethods().First(m => m.Name == nameof(MapsterHelper.FlexibleGet)).MakeGenericMethod(args[1]); " is 131.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,DictionaryFn,The length of the statement  "                return Expression.Call(method' source.To(dictType)' key' MapsterHelper.GetConverterExpression(strategy.SourceMemberNameConverter)); " is 131.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,DictionaryFn,The length of the statement  "                var method = typeof(MapsterHelper).GetMethods().First(m => m.Name == nameof(MapsterHelper.GetValueOrDefault)).MakeGenericMethod(args); " is 134.
Long Statement,Mapster,ValueAccessingStrategy,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Settings\ValueAccessingStrategy.cs,CustomResolverForDictionaryFn,The length of the statement  "            var method = typeof(MapsterHelper).GetMethods().First(m => m.Name == nameof(MapsterHelper.GetValueOrDefault)).MakeGenericMethod(args); " is 134.
Long Statement,Mapster,TypeAdapterBuilder<TSource>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterBuilder.cs,CreateMapToTargetExpression,The length of the statement  "            return (Expression<Func<TSource' TDestination' TDestination>>) this.Config.CreateMapExpression(tuple' MapType.MapToTarget); " is 123.
Long Statement,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateRuleTemplate,The length of the statement  "                    Priority = arg => arg.SourceType.GetDictionaryType()?.GetGenericArguments()[0] == typeof(string) ? DictionaryAdapter.DefaultScore : (int?)null' " is 143.
Long Statement,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetMapToTargetFunction,The length of the statement  "            object del = _mapToTargetDict[key] ?? AddToHash(_mapToTargetDict' key' tuple => Compiler(CreateMapExpression(tuple' MapType.MapToTarget))); " is 139.
Long Statement,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetDynamicMapFunction,The length of the statement  "            object del = _dynamicMapDict[key] ?? AddToHash(_dynamicMapDict' key' tuple => Compiler(CreateDynamicMapExpression(tuple))); " is 123.
Long Statement,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,Scan,The length of the statement  "                .Where(x => typeof(IRegister).GetTypeInfo().IsAssignableFrom(x.GetTypeInfo()) && x.GetTypeInfo().IsClass && !x.GetTypeInfo().IsAbstract)) " is 137.
Long Statement,Mapster,TypeAdapterSetterExtensions,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,CheckCompiled,The length of the statement  "                throw new InvalidOperationException("TypeAdapter.Adapt was already called' please clone or create new TypeAdapterConfig."); " is 123.
Long Statement,Mapster,TypeAdapterSetter<TSource;TDestination>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,MapWith,The length of the statement  "                    Settings.ConverterToTargetFactory = arg => Expression.Lambda(converterFactory.Body' converterFactory.Parameters[0]' dest); " is 122.
Long Statement,Mapster,TwoWaysTypeAdapterSetter<TSource;TDestination>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,IgnoreMember,The length of the statement  "            DestinationToSourceSetter.IgnoreMember((model' side) => predicate(model' side == MemberSide.Source ? MemberSide.Destination : MemberSide.Source)); " is 146.
Long Statement,Mapster,TwoWaysTypeAdapterSetter<TSource;TDestination>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,IncludeMember,The length of the statement  "            DestinationToSourceSetter.IgnoreMember((model' side) => predicate(model' side == MemberSide.Source ? MemberSide.Destination : MemberSide.Source)); " is 146.
Long Statement,Mapster,ReflectionUtils,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,GetDictionaryType,The length of the statement  "            return destinationType.GetInterface(type => type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(IDictionary<'>)); " is 139.
Long Statement,Mapster.Adapters,ArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ArrayAdapter.cs,CreateBlockExpression,The length of the statement  "                var method = typeof(Array).GetMethod("Copy"' new[] { typeof(Array)' typeof(int)' typeof(Array)' typeof(int)' typeof(int) }); " is 124.
Long Statement,Mapster.Adapters,ArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ArrayAdapter.cs,CreateBlockExpression,The length of the statement  "                return Expression.Call(method' source' Expression.Constant(0)' destination' Expression.Constant(0)' ExpressionEx.CreateCountExpression(source' true)); " is 150.
Long Statement,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,The length of the statement  "                throw new InvalidOperationException("Implicit mapping is not allowed (check GlobalSettings.RequireExplicitMapping) and no configuration exists"); " is 145.
Long Statement,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,The length of the statement  "                else if (arg.Context.Running.Count > 1 && !arg.Context.Config.SelfContainedCodeGeneration && !arg.Context.IsSubFunction()) " is 122.
Long Statement,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The length of the statement  "            if (destination != null && this.UseTargetValue && arg.GetConstructUsing()?.Parameters.Count != 2 && destination.CanBeNull()) " is 124.
Long Statement,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The length of the statement  "                    var tryGetMethod = typeof(Dictionary<object' object>).GetMethod("TryGetValue"' new[] { typeof(object)' typeof(object).MakeByRefType() }); " is 137.
Long Statement,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateInstantiationExpression,The length of the statement  "                throw new InvalidOperationException($"No default constructor for type '{arg.DestinationType.Name}'' please use 'ConstructUsing' or 'MapWith'"); " is 143.
Long Statement,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,CreateClassConverter,The length of the statement  "                var nextIgnore = arg.Settings.Ignore.Next((ParameterExpression)source' (ParameterExpression?)destination' destinationMember.Name); " is 130.
Long Statement,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,CreateClassConverter,The length of the statement  "                var nextResolvers = arg.Settings.Resolvers.Next(arg.Settings.Ignore' (ParameterExpression)source' destinationMember.Name) " is 121.
Long Statement,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,CreateClassConverter,The length of the statement  "                throw new InvalidOperationException($"The following members of destination class {arg.DestinationType} do not have a corresponding source member mapped or ignored:{string.Join("'"' unmappedDestinationMembers)}"); " is 212.
Long Statement,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,GetSetterModel,The length of the statement  "                Members = arg.DestinationType.GetFieldsAndProperties(requireSetter: true' accessorFlags: BindingFlags.NonPublic | BindingFlags.Public) " is 134.
Long Statement,Mapster.Adapters,ClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateInlineExpression,The length of the statement  "                    && member.Getter.Type.GetTypeInfo().GetCustomAttributes(true).All(attr => attr.GetType().Name != "ComplexTypeAttribute")) " is 121.
Long Statement,Mapster.Adapters,CollectionAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CanInline,The length of the statement  "                throw new InvalidOperationException($"{arg.DestinationType} is not supported for projection' please consider using List<>"); " is 124.
Long Statement,Mapster.Adapters,MultiDimensionalArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\MultiDimensionalArrayAdapter.cs,CreateBlockExpression,The length of the statement  "                var method = typeof(Array).GetMethod("Copy"' new[] { typeof(Array)' typeof(int)' typeof(Array)' typeof(int)' typeof(int) }); " is 124.
Long Statement,Mapster.Adapters,MultiDimensionalArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\MultiDimensionalArrayAdapter.cs,CreateBlockExpression,The length of the statement  "                return Expression.Call(method' source' Expression.Constant(0)' destination' Expression.Constant(0)' ExpressionEx.CreateCountExpression(source' true)); " is 150.
Long Statement,Mapster.Adapters,PrimitiveAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\PrimitiveAdapter.cs,ConvertType,The length of the statement  "                throw new InvalidOperationException("Cannot convert immutable type' please consider using 'MapWith' method to create mapping"); " is 127.
Long Statement,Mapster.Adapters,PrimitiveAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\PrimitiveAdapter.cs,ConvertType,The length of the statement  "            return Expression.Convert(Expression.Call(changeTypeMethod' Expression.Convert(source' typeof(object))' Expression.Constant(destinationType))' destinationType); " is 160.
Long Statement,Mapster.Models,InvokerModel,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Models\InvokerModel.cs,Next,The length of the statement  "                    : Expression.Lambda(this.Invoker?.Apply(source) ?? ExpressionEx.PropertyOrField(source' this.SourceMemberName)' source)' " is 120.
Long Statement,Mapster.Utils,ExpressionEx,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Utils\ExpressionEx.cs,IsReferenceAssignableFrom,The length of the statement  "            if (!destType.GetTypeInfo().IsValueType && !srcType.GetTypeInfo().IsValueType && destType.GetTypeInfo().IsAssignableFrom(srcType.GetTypeInfo())) " is 144.
Complex Conditional,Mapster.Adapters,ArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ArrayAdapter.cs,CreateBlockExpression,The conditional expression  "source.Type.IsArray &&                  source.Type.GetArrayRank() == 1 &&                  source.Type.GetElementType() == destination.Type.GetElementType() &&                  source.Type.GetElementType().IsPrimitiveKind()"  is complex.
Complex Conditional,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The conditional expression  "destination != null && this.UseTargetValue && arg.GetConstructUsing()?.Parameters.Count != 2 && destination.CanBeNull()"  is complex.
Complex Conditional,Mapster.Adapters,BaseClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseClassAdapter.cs,CreateClassConverter,The conditional expression  "arg.Settings.IgnoreNonMapped != true &&                          arg.Settings.Unflattening == true &&                          arg.DestinationType.GetDictionaryType() == null &&                          arg.SourceType.GetDictionaryType() == null"  is complex.
Complex Conditional,Mapster.Adapters,ClassAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateInlineExpression,The conditional expression  "arg.MapType == MapType.Projection                      && member.Getter.Type != member.DestinationMember.Type                      && !member.Getter.Type.IsCollection()                      && !member.DestinationMember.Type.IsCollection()                      && member.Getter.Type.GetTypeInfo().GetCustomAttributes(true).All(attr => attr.GetType().Name != "ComplexTypeAttribute")"  is complex.
Complex Conditional,Mapster.Adapters,MultiDimensionalArrayAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\MultiDimensionalArrayAdapter.cs,CreateBlockExpression,The conditional expression  "source.Type.IsArray &&                  source.Type.GetArrayRank() == destination.Type.GetArrayRank() &&                  source.Type.GetElementType() == destination.Type.GetElementType() &&                  source.Type.GetElementType().IsPrimitiveKind()"  is complex.
Empty Catch Block,Mapster.Adapters,PrimitiveAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\PrimitiveAdapter.cs,ConvertType,The method has an empty catch block.
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateRuleTemplate,The following statement contains a magic number: return new List<TypeAdapterRule>              {                  new PrimitiveAdapter().CreateRule()'    //-200                  new ClassAdapter().CreateRule()'        //-150                  new RecordTypeAdapter().CreateRule()'   //-149                  new CollectionAdapter().CreateRule()'   //-125                  new DictionaryAdapter().CreateRule()'   //-124                  new ArrayAdapter().CreateRule()'        //-123                  new MultiDimensionalArrayAdapter().CreateRule()' //-122                  new ObjectAdapter().CreateRule()'       //-111                  new StringAdapter().CreateRule()'       //-110                  new EnumAdapter().CreateRule()'         //-109                    //fallback rules                  new TypeAdapterRule                  {                      Priority = arg => -200'                      Settings = new TypeAdapterSettings                      {                          //match exact name                          NameMatchingStrategy = NameMatchingStrategy.Exact'                          ShouldMapMember =                          {                              ShouldMapMember.IgnoreAdaptIgnore'      //ignore AdaptIgnore attribute                              ShouldMapMember.AllowPublic'            //match public prop                              ShouldMapMember.AllowAdaptMember'       //match AdaptMember attribute                          }'                          GetMemberNames =                          {                              GetMemberName.AdaptMember'              //get name using AdaptMember attribute                          }'                          ValueAccessingStrategies =                          {                              ValueAccessingStrategy.CustomResolver'  //get value from Map                              ValueAccessingStrategy.PropertyOrField' //get value from properties/fields                              ValueAccessingStrategy.GetMethod'       //get value from get method                              ValueAccessingStrategy.FlattenMember'   //get value from chain of properties                          }                      }                  }'                    //dictionary accessor                  new TypeAdapterRule                  {                      Priority = arg => arg.SourceType.GetDictionaryType()?.GetGenericArguments()[0] == typeof(string) ? DictionaryAdapter.DefaultScore : (int?)null'                      Settings = new TypeAdapterSettings                      {                          ValueAccessingStrategies =                          {                              ValueAccessingStrategy.CustomResolverForDictionary'                              ValueAccessingStrategy.Dictionary'                          }'                      }                  }              };
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,TypeAdapterConfig,The following statement contains a magic number: this.Rules.Add(new TypeAdapterRule              {                  Priority = arg => -100'                  Settings = settings'              });
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,When,The following statement contains a magic number: var rule = new TypeAdapterRule              {                  Priority = arg => canMap(arg.SourceType' arg.DestinationType' arg.MapType) ? (int?)25 : null'                  Settings = new TypeAdapterSettings()'              };
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,When,The following statement contains a magic number: var rule = new TypeAdapterRule              {                  Priority = arg => canMap(arg) ? (int?)25 : null'                  Settings = new TypeAdapterSettings()'              };
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: return 50;
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: int score = 35;
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: return 25;
Magic Number,Mapster,TypeAdapterConfig,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: score = 50;
Magic Number,Mapster,TypeAdapterSetter<TSource;TDestination>,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,Include,The following statement contains a magic number: Config.Rules.Add(new TypeAdapterRule              {                  Priority = arg =>                      arg.SourceType == typeof(TDerivedSource) &&                      arg.DestinationType == typeof(TDerivedDestination) ? (int?)100 : null'                  Settings = Settings              });
Magic Number,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptToTargetFunc,The following statement contains a magic number: return Expression.Lambda(body'                      new[] {p' p2}.Concat(arg.Context.ExtraParameters))                  .TrimParameters(2);
Magic Number,Mapster.Adapters,BaseAdapter,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The following statement contains a magic number: destination != null && this.UseTargetValue && arg.GetConstructUsing()?.Parameters.Count != 2 && destination.CanBeNull()
Magic Number,Mapster.Models,TypeTuple,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: return ((Source?.GetHashCode() ?? 0) << 16) ^ ((Destination?.GetHashCode() ?? 0) & 65535);
Magic Number,Mapster.Models,TypeTuple,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: return ((Source?.GetHashCode() ?? 0) << 16) ^ ((Destination?.GetHashCode() ?? 0) & 65535);
Missing Default,Mapster.Utils,BlockExpressionDetector,D:\research\architectureSmells\repos\eswann_Mapster\src\Mapster\Utils\BlockExpressionDetector.cs,Visit,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.Assign:                  case ExpressionType.Block:                  case ExpressionType.DebugInfo:                  case ExpressionType.Goto:                  case ExpressionType.Label:                  case ExpressionType.Loop:                  case ExpressionType.Switch:                  case ExpressionType.Throw:                  case ExpressionType.Try:                  case ExpressionType.AddAssign:                  case ExpressionType.AndAssign:                  case ExpressionType.DivideAssign:                  case ExpressionType.ExclusiveOrAssign:                  case ExpressionType.LeftShiftAssign:                  case ExpressionType.ModuloAssign:                  case ExpressionType.MultiplyAssign:                  case ExpressionType.OrAssign:                  case ExpressionType.PowerAssign:                  case ExpressionType.RightShiftAssign:                  case ExpressionType.SubtractAssign:                  case ExpressionType.AddAssignChecked:                  case ExpressionType.MultiplyAssignChecked:                  case ExpressionType.SubtractAssignChecked:                  case ExpressionType.PreIncrementAssign:                  case ExpressionType.PreDecrementAssign:                  case ExpressionType.PostIncrementAssign:                  case ExpressionType.PostDecrementAssign:                      this.IsBlockExpression = true;                      return node;              }
