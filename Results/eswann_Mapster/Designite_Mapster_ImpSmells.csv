Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mapster,NameMatchingStrategy,F:\newReposMay17\eswann_Mapster\src\Mapster\NameMatchingStrategy.cs,BreakWords,Cyclomatic complexity of the method is 11
Complex Method,Mapster,TypeAdapterSettings,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterSettings.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,BuildUnderlyingTypeConvertExpression,Cyclomatic complexity of the method is 10
Complex Method,Mapster.Utils,BlockExpressionDetector,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\BlockExpressionDetector.cs,Visit,Cyclomatic complexity of the method is 29
Long Parameter List,Mapster,TypeAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapter.cs,Adapt,The method has 5 parameters.
Long Statement,Mapster,ValueAccessingStrategy,F:\newReposMay17\eswann_Mapster\src\Mapster\ValueAccessingStrategy.cs,CustomResolverFn,The length of the statement  "		getter = Expression.Condition (lastCondition.Apply (source)' getter' Expression.Constant (getter.Type.GetDefault ()' getter.Type)); " is 131.
Long Statement,Mapster,ValueAccessingStrategy,F:\newReposMay17\eswann_Mapster\src\Mapster\ValueAccessingStrategy.cs,PropertyOrFieldFn,The length of the statement  "		var members = source.Type.GetFieldsAndProperties (accessorFlags: nonPublicPropertyOrField ? BindingFlags.NonPublic : BindingFlags.Public); " is 138.
Long Statement,Mapster,ValueAccessingStrategy,F:\newReposMay17\eswann_Mapster\src\Mapster\ValueAccessingStrategy.cs,PropertyOrFieldFn,The length of the statement  "		return members.Where (member => strategy.SourceMemberNameConverter (member.Name) == destinationMemberName).Select (member => member.GetExpression (source)).FirstOrDefault (); " is 174.
Long Statement,Mapster,ValueAccessingStrategy,F:\newReposMay17\eswann_Mapster\src\Mapster\ValueAccessingStrategy.cs,GetMethodFn,The length of the statement  "	var getMethod = source.Type.GetMethods (BindingFlags.Public | BindingFlags.Instance).FirstOrDefault (m => strategy.SourceMemberNameConverter (m.Name) == destinationMemberName && m.GetParameters ().Length == 0); " is 210.
Long Statement,Mapster,TypeAdapterSetter,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,MapWith,The length of the statement  "		Settings.ConverterToTargetFactory = arg => Expression.Lambda (converterFactory.Body' converterFactory.Parameters [0]' dest); " is 124.
Long Statement,Mapster,TypeAdapterSetter,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,Inherits,The length of the statement  "		throw new InvalidCastException ("In order to use inherits' TSource must inherit directly or indirectly from TBaseSource."); " is 123.
Long Statement,Mapster,TypeAdapterSetter,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,Inherits,The length of the statement  "		throw new InvalidCastException ("In order to use inherits' TDestination must inherit directly or indirectly from TBaseDestination."); " is 133.
Long Statement,Mapster,TypeAdapterSetterExtensions,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterSetter.cs,CheckCompiled,The length of the statement  "		throw new InvalidOperationException ("TypeAdapter.Adapt was already called' please clone or create new TypeAdapterConfig."); " is 124.
Long Statement,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateRuleTemplate,The length of the statement  "			Priority = (srcType' destType' mapType) => srcType.GetDictionaryType ().GetGenericArguments () [0] == typeof(string) ? -149 : (int?)null' " is 137.
Long Statement,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateInlineMapExpression,The length of the statement  "		var arg = GetCompileArgument (tuple.Source' tuple.Destination' parentMapType == MapType.Projection ? MapType.Projection : MapType.InlineMap' context); " is 150.
Long Statement,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,Scan,The length of the statement  "	List<IRegister> registers = assemblies.Select (assembly => assembly.GetTypes ().Where (x => typeof(IRegister).GetTypeInfo ().IsAssignableFrom (x.GetTypeInfo ()) && x.GetTypeInfo ().IsClass && !x.GetTypeInfo ().IsAbstract)).SelectMany (registerTypes => registerTypes.Select (registerType => (IRegister)Activator.CreateInstance (registerType))).ToList (); " is 353.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,GetFieldsAndProperties,The length of the statement  "	var properties = type.GetProperties (bindingFlags).Where (x => (allowNoSetter || x.CanWrite) && (allowNonPublicSetter || x.GetSetMethod () != null)).Select (CreateModel); " is 170.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,BuildUnderlyingTypeConvertExpression,The length of the statement  "		throw new InvalidOperationException ("Cannot convert immutable type' please consider using 'MapWith' method to create mapping"); " is 128.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,BuildUnderlyingTypeConvertExpression,The length of the statement  "	return Expression.Convert (Expression.Call (changeTypeMethod' Expression.Convert (source' typeof(object))' Expression.Constant (destType))' destType); " is 150.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,GetDeepFlattening,The length of the statement  "			return Expression.Condition (Expression.Equal (exp' Expression.Constant (null' exp.Type))' Expression.Constant (ifTrue.Type.GetDefault ()' ifTrue.Type)' ifTrue); " is 161.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,IsReferenceAssignableFrom,The length of the statement  "	if (!destType.GetTypeInfo ().IsValueType && !srcType.GetTypeInfo ().IsValueType && destType.GetTypeInfo ().IsAssignableFrom (srcType.GetTypeInfo ())) " is 149.
Long Statement,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,GetDictionaryType,The length of the statement  "	return destinationType.GetInterface (type => type.GetTypeInfo ().IsGenericType && type.GetGenericTypeDefinition () == typeof(IDictionary<' >)); " is 143.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CanInline,The length of the statement  "	if (constructUsing != null && constructUsing.Body.NodeType != ExpressionType.New && constructUsing.Body.NodeType != ExpressionType.MemberInit) { " is 144.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CanInline,The length of the statement  "	if (arg.Settings.PreserveReference == true && arg.MapType != MapType.Projection && !arg.SourceType.GetTypeInfo ().IsValueType && !arg.DestinationType.GetTypeInfo ().IsValueType) " is 177.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,The length of the statement  "	if (this.CheckExplicitMapping && arg.Context.Config.RequireExplicitMapping && !arg.Context.Config.RuleMap.ContainsKey (new TypeTuple (arg.SourceType' arg.DestinationType))) { " is 174.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,The length of the statement  "		throw new InvalidOperationException ("Implicit mapping is not allowed (check GlobalSettings.RequireExplicitMapping) and no configuration exists"); " is 146.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateExpressionBody,The length of the statement  "	return CanInline (source' destination' arg) ? CreateInlineExpressionBody (source' arg).To (arg.DestinationType' true) : CreateBlockExpressionBody (source' destination' arg); " is 173.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The length of the statement  "	if (arg.Settings.PreserveReference == true && !arg.SourceType.GetTypeInfo ().IsValueType && !arg.DestinationType.GetTypeInfo ().IsValueType) { " is 142.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The length of the statement  "		var refAdd = Expression.Call (dict' "Add"' null' Expression.Convert (source' typeof(object))' Expression.Convert (result' typeof(object))); " is 139.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateBlockExpressionBody,The length of the statement  "		set = Expression.IfThenElse (compareNull' Expression.Assign (result' destination ?? Expression.Constant (arg.DestinationType.GetDefault ()' arg.DestinationType))' set); " is 168.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateInlineExpressionBody,The length of the statement  "	if (arg.MapType != MapType.Projection && (!arg.SourceType.GetTypeInfo ().IsValueType || arg.SourceType.IsNullable ())) { " is 120.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateInstantiationExpression,The length of the statement  "	return constructUsing != null ? constructUsing.Apply (source).TrimConversion ().To (arg.DestinationType) : Expression.New (arg.DestinationType); " is 144.
Long Statement,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptExpression,The length of the statement  "	if (source.Type == destinationType && (arg.Settings.ShallowCopyForSameType == true || arg.MapType == MapType.Projection)) " is 121.
Long Statement,Mapster.Adapters,ClassWithNonPublicMemberAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\ClassWithNonPublicMemberAdapter.cs,GetClassModel,The length of the statement  "		Members = destinationType.GetFieldsAndProperties (allowNoSetter: false' accessorFlags: BindingFlags.Public | BindingFlags.NonPublic) " is 132.
Long Statement,Mapster.Adapters,DictionaryAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\DictionaryAdapter.cs,CreateBlockExpression,The length of the statement  "		var itemSet = setMethod != null ? (Expression)Expression.Call (setMethod' dict' key' Expression.Constant (strategy.DestinationMemberNameConverter)' value) : Expression.Assign (Expression.Property (dict' indexer' key)' value); " is 225.
Long Statement,Mapster.Adapters,RecordTypeAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\RecordTypeAdapter.cs,CreateInstantiationExpression,The length of the statement  "			if (arg.Settings.IgnoreNullValues == true && (!property.Getter.Type.GetTypeInfo ().IsValueType || property.Getter.Type.IsNullable ())) { " is 136.
Long Statement,Mapster.Adapters,RecordTypeAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\RecordTypeAdapter.cs,CreateInstantiationExpression,The length of the statement  "				var condition = Expression.Not (property.SetterCondition.Apply (source' Expression.Constant (arg.DestinationType.GetDefault ()' arg.DestinationType))); " is 151.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateCountExpression,The length of the statement  "		var countMethod = typeof(Enumerable).GetMethods ().First (m => m.Name == "Count" && m.GetParameters ().Length == 1).MakeGenericMethod (source.Type.ExtractCollectionType ()); " is 173.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateInstantiationExpression,The length of the statement  "	var listType = arg.DestinationType.GetTypeInfo ().IsInterface ? typeof(List<>).MakeGenericType (destinationElementType) : arg.DestinationType; " is 142.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateBlockExpression,The length of the statement  "		if (source.Type.IsArray && source.Type.GetElementType () == destination.Type.GetElementType () && source.Type.GetElementType ().UnwrapNullable ().IsConvertible ()) { " is 165.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateBlockExpression,The length of the statement  "			return Expression.Call (method' source' Expression.Constant (0)' destination' Expression.Constant (0)' Expression.ArrayLength (source)); " is 136.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateBlockExpression,The length of the statement  "		var listType = destination.Type.GetGenericEnumerableType () != null ? typeof(ICollection<>).MakeGenericType (destinationElementType) : typeof(IList); " is 149.
Long Statement,Mapster.Adapters,CollectionAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\CollectionAdapter.cs,CreateInlineExpression,The length of the statement  "	if (arg.DestinationType.GetTypeInfo ().IsAssignableFrom (source.Type.GetTypeInfo ()) && (arg.Settings.ShallowCopyForSameType == true || arg.MapType == MapType.Projection)) " is 171.
Long Statement,Mapster.Adapters,PrimitiveAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\PrimitiveAdapter.cs,CreateExpressionBody,The length of the statement  "		if (arg.MapType != MapType.Projection && (!arg.SourceType.GetTypeInfo ().IsValueType || arg.SourceType.IsNullable ())) { " is 120.
Long Statement,Mapster.Adapters,PrimitiveAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\PrimitiveAdapter.cs,CreateExpressionBody,The length of the statement  "			convert = Expression.Condition (compareNull' Expression.Constant (destinationType.GetDefault ()' destinationType)' convert); " is 124.
Long Statement,Mapster.Adapters,ClassAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateBlockExpression,The length of the statement  "		if (arg.Settings.IgnoreNullValues == true && (!property.Getter.Type.GetTypeInfo ().IsValueType || property.Getter.Type.IsNullable ())) { " is 136.
Long Statement,Mapster.Adapters,ClassAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateInlineExpression,The length of the statement  "		if (arg.MapType == MapType.Projection && property.Getter.Type != property.Setter.Type && !property.Getter.Type.IsCollection () && !property.Setter.Type.IsCollection () && property.Getter.Type.GetTypeInfo ().GetCustomAttributes (true).All (attr => attr.GetType ().Name != "ComplexTypeAttribute") && (!property.Getter.Type.GetTypeInfo ().IsValueType || property.Getter.Type.IsNullable ())) { " is 389.
Long Statement,Mapster.Adapters,ClassAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateInlineExpression,The length of the statement  "			getter = Expression.Condition (compareNull' Expression.Constant (property.Setter.Type.GetDefault ()' property.Setter.Type)' getter); " is 132.
Complex Conditional,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CanInline,The conditional expression  "arg.Settings.PreserveReference == true && arg.MapType != MapType.Projection && !arg.SourceType.GetTypeInfo ().IsValueType && !arg.DestinationType.GetTypeInfo ().IsValueType"  is complex.
Complex Conditional,Mapster.Adapters,ClassAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\ClassAdapter.cs,CreateInlineExpression,The conditional expression  "arg.MapType == MapType.Projection && property.Getter.Type != property.Setter.Type && !property.Getter.Type.IsCollection () && !property.Setter.Type.IsCollection () && property.Getter.Type.GetTypeInfo ().GetCustomAttributes (true).All (attr => attr.GetType ().Name != "ComplexTypeAttribute") && (!property.Getter.Type.GetTypeInfo ().IsValueType || property.Getter.Type.IsNullable ())"  is complex.
Empty Catch Block,Mapster,ReflectionUtils,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\ReflectionUtils.cs,BuildUnderlyingTypeConvertExpression,The method has an empty catch block.
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,CreateRuleTemplate,The following statement contains a magic number: return new List<TypeAdapterRule> {  	new PrimitiveAdapter ().CreateRule ()'  	new RecordTypeAdapter ().CreateRule ()'  	new ClassAdapter ().CreateRule ()'  	new DictionaryAdapter ().CreateRule ()'  	new CollectionAdapter ().CreateRule ()'  	new TypeAdapterRule {  		Priority = (srcType' destType' mapType) => srcType.GetDictionaryType ().GetGenericArguments () [0] == typeof(string) ? -149 : (int?)null'  		Settings = new TypeAdapterSettings {  			ValueAccessingStrategies = new[] {  				ValueAccessingStrategy.Dictionary  			}.ToList ()'  		}  	}  };  
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,TypeAdapterConfig,The following statement contains a magic number: this.Rules.Add (new TypeAdapterRule {  	Priority = (sourceType' destinationType' mapType) => -100'  	Settings = settings'  });  
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: if (type1 == type2)  	return 50;  
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: return 50;  
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: if (type2.GetTypeInfo ().IsInterface) {  	return type2.GetTypeInfo ().IsAssignableFrom (type1.GetTypeInfo ()) ? (int?)25 : null;  }  
Magic Number,Mapster,TypeAdapterConfig,F:\newReposMay17\eswann_Mapster\src\Mapster\TypeAdapterConfig.cs,GetSubclassDistance,The following statement contains a magic number: return type2.GetTypeInfo ().IsAssignableFrom (type1.GetTypeInfo ()) ? (int?)25 : null;  
Magic Number,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptExpression,The following statement contains a magic number: if (arg.Settings.DestinationTransforms.Transforms.ContainsKey (exp.Type)) {  	var transform = arg.Settings.DestinationTransforms.Transforms [exp.Type];  	var replacer = new ParameterExpressionReplacer (transform.Parameters' exp);  	var newExp = replacer.Visit (transform.Body);  	exp = replacer.ReplaceCount >= 2 ? Expression.Invoke (transform' exp) : newExp;  }  
Magic Number,Mapster.Adapters,BaseAdapter,F:\newReposMay17\eswann_Mapster\src\Mapster\Adapters\BaseAdapter.cs,CreateAdaptExpression,The following statement contains a magic number: exp = replacer.ReplaceCount >= 2 ? Expression.Invoke (transform' exp) : newExp;  
Magic Number,Mapster.Models,TypeTuple,F:\newReposMay17\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Source.GetHashCode () ?? 0) << 16) ^ ((Destination.GetHashCode () ?? 0) & 65535);  }  
Magic Number,Mapster.Models,TypeTuple,F:\newReposMay17\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Source.GetHashCode () ?? 0) << 16) ^ ((Destination.GetHashCode () ?? 0) & 65535);  }  
Magic Number,Mapster.Models,TypeTuple,F:\newReposMay17\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: return ((Source.GetHashCode () ?? 0) << 16) ^ ((Destination.GetHashCode () ?? 0) & 65535);  
Magic Number,Mapster.Models,TypeTuple,F:\newReposMay17\eswann_Mapster\src\Mapster\Models\TypeTuple.cs,GetHashCode,The following statement contains a magic number: return ((Source.GetHashCode () ?? 0) << 16) ^ ((Destination.GetHashCode () ?? 0) & 65535);  
Missing Default,Mapster.Utils,BlockExpressionDetector,F:\newReposMay17\eswann_Mapster\src\Mapster\Utils\BlockExpressionDetector.cs,Visit,The following switch statement is missing a default case: switch (node.NodeType) {  case ExpressionType.Assign:  case ExpressionType.Block:  case ExpressionType.DebugInfo:  case ExpressionType.Goto:  case ExpressionType.Label:  case ExpressionType.RuntimeVariables:  case ExpressionType.Loop:  case ExpressionType.Switch:  case ExpressionType.Throw:  case ExpressionType.Try:  case ExpressionType.AddAssign:  case ExpressionType.AndAssign:  case ExpressionType.DivideAssign:  case ExpressionType.ExclusiveOrAssign:  case ExpressionType.LeftShiftAssign:  case ExpressionType.ModuloAssign:  case ExpressionType.MultiplyAssign:  case ExpressionType.OrAssign:  case ExpressionType.PowerAssign:  case ExpressionType.RightShiftAssign:  case ExpressionType.SubtractAssign:  case ExpressionType.AddAssignChecked:  case ExpressionType.MultiplyAssignChecked:  case ExpressionType.SubtractAssignChecked:  case ExpressionType.PreIncrementAssign:  case ExpressionType.PreDecrementAssign:  case ExpressionType.PostIncrementAssign:  case ExpressionType.PostDecrementAssign:  	this.IsBlockExpression = true;  	return node;  }  
