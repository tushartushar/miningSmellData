Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBehave.Internal,StoryRunnerFilter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\StoryRunnerFilter.cs,GetFilter,Cyclomatic complexity of the method is 10
Long Parameter List,NBehave.Internal,ParameterConverter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ParameterConverter.cs,GetValuesFromTableStep,The method has 5 parameters. Parameters: stringStep' getValues' addMethodOnList' values' method
Long Parameter List,NBehave,ActionMethodInfo,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\ActionMethodInfo.cs,ActionMethodInfo,The method has 5 parameters. Parameters: actionStepMatcher' action' methodInfo' actionType' instance
Long Identifier,NBehave.Internal,DelegatesWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindDelegatesWithAttribute,The length of the parameter delegatesWithActionStepAttribute is 32.
Long Identifier,NBehave.Internal,DelegatesWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindAllDelegatesWithAttribute,The length of the parameter delegatesWithActionStepAttribute is 32.
Long Identifier,NBehave.Internal,MethodWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindStaticMethodsWithAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Internal,MethodWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindMethodsWithAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Internal,MethodWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindAllMethodsWithAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Internal,StringStepRunner,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\StringStepRunner.cs,RunStep,The length of the parameter getParametersForActionStepText is 30.
Long Identifier,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,GetMethodsWithActionStepAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,GetAllMethodsWithActionStepAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave,IgnoreSpaceAndUnderScoreMatcher,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\IgnoreSpaceAndUnderScoreMatcher.cs,IsMatch,The length of the parameter matchWithoutSpaceAndUnderScore is 30.
Long Statement,NBehave.EventListeners,OutputEventListener,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\OutputEventListener.cs,ScenarioFinished,The length of the statement  "            writer.WriteColorString("Scenario: " + scenarioResult.ScenarioTitle + " - " + scenarioResult.Result.ToString().ToUpper()' GetColorForResult(scenarioResult.Result)); " is 164.
Long Statement,NBehave.EventListeners,OutputEventListener,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\OutputEventListener.cs,ScenarioFinished,The length of the statement  "                writer.WriteColorString("  " + stepResult.StringStep.Step + " - " + TypeAsString(stepResult)' GetColorForResult(stepResult.Result)); " is 132.
Long Statement,NBehave.EventListeners,OutputEventListener,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\OutputEventListener.cs,WriteBackground,The length of the statement  "            var backgroundSteps = scenarioResult.StepResults.Where(_ => _ is BackgroundStepResult).Cast<BackgroundStepResult>().ToList(); " is 125.
Long Statement,NBehave.Hooks,HooksParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Hooks\HooksParser.cs,FindMethods,The length of the statement  "            var methods = methodWithAttributeFinder.FindMethodsWithAttribute<HookMetaData' HookAttribute>(type' BuildMethodHookType); " is 121.
Long Statement,NBehave.Hooks,HooksParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Hooks\HooksParser.cs,FindDelegates,The length of the statement  "            var delegates = delegatesWithAttributeFinder.FindDelegatesWithAttribute<HookMetaData' HookAttribute>(type' BuildDelegateHookType); " is 130.
Long Statement,NBehave.Hooks,HooksParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Hooks\HooksParser.cs,BuildDelegateHookType,The length of the statement  "                var message = string.Format("Field {0} with attribute {1} must be of type SystemAction."' @delegate.Name' hookAttrib.GetType().Name); " is 133.
Long Statement,NBehave.Hooks,HooksParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Hooks\HooksParser.cs,BuildMethodHookType,The length of the statement  "                var message = string.Format("Method {0} on class {1} may not have any parameters."' method.Name' method.DeclaringType.Name); " is 124.
Long Statement,NBehave.Internal,ActionCatalog,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionCatalog.cs,FindMatchingAction,The length of the statement  "                            Prio = sortMethodAfter.Contains(_.Action.MethodParametersType) ? sortMethodAfter.IndexOf(_.Action.MethodParametersType) : Int32.MaxValue " is 136.
Long Statement,NBehave.Internal,MethodWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindStaticMethodsWithAttribute,The length of the statement  "            var methodsWithActionStepAttribute = FindAllMethodsWithAttribute(actionSteps' typeof(TAttrib)' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 163.
Long Statement,NBehave.Internal,MethodWithAttributeFinder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\MethodWithAttributeFinder.cs,FindMethodsWithAttribute,The length of the statement  "            var methodsWithActionStepAttribute = FindAllMethodsWithAttribute(actionSteps' typeof(TAttrib)' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 165.
Long Statement,NBehave.Internal,ParameterConverter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ParameterConverter.cs,GetValuesFromTableStep,The length of the statement  "            List<string> paramNames = (stringStep.TableSteps.FirstOrDefault() ?? Example.EmptyExample).ColumnNames.Select(_ => _.Name).ToList(); " is 132.
Long Statement,NBehave.Internal,ParameterConverter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ParameterConverter.cs,CreateInstanceOfComplexType,The length of the statement  "                var prop = instance.GetType().GetProperties().FirstOrDefault(_ => _.Name.Equals(argName' StringComparison.CurrentCultureIgnoreCase)); " is 133.
Long Statement,NBehave.Internal,ParameterConverter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ParameterConverter.cs,CreateInstanceOfComplexType,The length of the statement  "                    throw new ArgumentException(string.Format("Type '{0}' dont have a property with the name '{1}'"' instance.GetType().Name' argName)); " is 132.
Long Statement,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,FindStaticActionStepMethods,The length of the statement  "            var methods = methodWithAttributeFinder.FindStaticMethodsWithAttribute<ActionMethodInfo' ActionStepAttribute>(actionSteps' BuildActionMethodInfo); " is 146.
Long Statement,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,FindActionStepMethods,The length of the statement  "            var methods = methodWithAttributeFinder.FindMethodsWithAttribute<ActionMethodInfo' ActionStepAttribute>(actionSteps' BuildActionMethodInfo); " is 140.
Long Statement,NBehave,ActionMethodInfo,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\ActionMethodInfo.cs,FigureOutParameterTypes,The length of the statement  "                return IsStringType(arg) || arg.IsPrimitive ? MethodParametersType.UntypedListStep : MethodParametersType.TypedListStep; " is 120.
Long Statement,NBehave,EmbeddedRunner,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EmbeddedRunner.cs,AbsolutePathToFeature,The length of the statement  "            string absolutePathToFeature = (Path.IsPathRooted(featureFile)) ? featureFile : Path.Combine(Path.GetDirectoryName(assemblyPath)' featureFile); " is 143.
Long Statement,NBehave.Internal.Gherkin,GherkinListener,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\Gherkin\GherkinListener.cs,Feature,The length of the statement  "            listener.Feature(new Token(feature.Trim()' lineInFile)' new Token(title' lineInFile)' new Token(narrative' lineInFile)); " is 120.
Long Statement,NBehave.EventListeners.CodeGeneration,ActionStepCodeGenerator,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\CodeGeneration\ActionStepCodeGenerator.cs,GenerateMethodFor,The length of the statement  "            var methodSignature = string.Format("public void {0}({1}){2}"' methodName.Replace(' '' '_')' GetParameters(actionStep)' " "); " is 125.
Long Statement,NBehave.EventListeners.Xml,XmlOutputWriter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\Xml\XmlOutputWriter.cs,CreatePendingSteps,The length of the statement  "                scenarioResult.AddActionStepResult(new StepResult(new StringStep(""' step.Message' "lost it")' new Pending(scenarioResult.Message))); " is 133.
Long Statement,NBehave.Remoting,AppDomainRunner,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Remoting\AppDomainRunner.cs,CreateRunnerInNewAppDomain,The length of the statement  "            var runner = (RemotableStoryRunner)appDomain.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName' typeof(RemotableStoryRunner).FullName); " is 150.
Long Statement,NBehave.Remoting,AppDomainRunner,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Remoting\AppDomainRunner.cs,CreateAppDomain,The length of the statement  "            var bootstrapper = (AppDomainBootstrapper)appDomain.CreateInstanceFromAndUnwrap(typeof(AppDomainBootstrapper).Assembly.Location' typeof(AppDomainBootstrapper).FullName); " is 169.
Long Statement,NBehave.TextParsing,GherkinScenarioParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\GherkinScenarioParser.cs,Background,The length of the statement  "            events.Enqueue(new BackgroundEvent(currentScenario' e => BackgroundEvent.Invoke(this' new EventArgs<Scenario>(scenario)))); " is 123.
Long Statement,NBehave.TextParsing,GherkinScenarioParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\GherkinScenarioParser.cs,DocString,The length of the statement  "            events.Enqueue(new DocStringEvent(docStringText' e => DocStringEvent.Invoke(this' new EventArgs<string>(docStringText)))); " is 122.
Long Statement,NBehave.TextParsing.TagFilter,TagFilter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\TagFilter\TagFilter.cs,GetEventsForNextScenario,The length of the statement  "            return GetEventsWhile(events' nextEvent => nextEvent is ScenarioEvent || nextEvent is EofEvent || nextEvent is FeatureEvent).ToList(); " is 134.
Long Statement,NBehave.TextParsing.TagFilter,OrFilter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\TagFilter\TagFilter.cs,GetScenariosToRun,The length of the statement  "            var includeOperand2 = NotTheseTags.Any() ? scenarioEvents.Except(scenarioEvents.Where(_ => NotTheseTags.Intersect(_.Tags).Any()).ToList()) : new GherkinEvent[0]; " is 161.
Long Statement,NBehave.TextParsing.ModelBuilders,StepBuilder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\ModelBuilders\StepBuilder.cs,HandleTableEvent,The length of the statement  "            var stringTableStep = new StringTableStep(previousStep.Token' previousStep.MatchableStep' scenario.Source' previousStep.SourceLine); " is 132.
Complex Conditional,NBehave.Internal,ParameterConverter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ParameterConverter.cs,GetParametersForStep,The conditional expression  "args.Length == 1 && args[0].ParameterType.IsClass && args[0].ParameterType != typeof(string)                  && IsArrayOrIEnumerable(args[0]) == false"  is complex.
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,GetActionForThreeParameters,The following statement contains a magic number: Action<object' object' object> action =                  (a' b' c) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,GetActionForFourParameters,The following statement contains a magic number: Action<object' object' object' object> action =                  (a' b' c' d) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                         ChangeType(methodInfo' d' 3)                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,GetActionForFourParameters,The following statement contains a magic number: Action<object' object' object' object> action =                  (a' b' c' d) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                         ChangeType(methodInfo' d' 3)                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave,ExampleBuilder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\ExampleBuilder.cs,BuildColumnNames,The following statement contains a magic number: var theMiddle = cols.Length / 2;
Magic Number,NBehave,ExampleBuilder,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\ExampleBuilder.cs,BuildColumnValues,The following statement contains a magic number: var theMiddle = cols.Length / 2;
Magic Number,NBehave,StringStep,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\StringStep.cs,ToString,The following statement contains a magic number: s += Environment.NewLine +                       "\"\"\"".PadLeft(3+spaces' ' ') + Environment.NewLine +                       DocString + Environment.NewLine +                       "\"\"\"".PadLeft(3 + spaces' ' ') + Environment.NewLine;
Magic Number,NBehave,StringStep,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Domain\StringStep.cs,ToString,The following statement contains a magic number: s += Environment.NewLine +                       "\"\"\"".PadLeft(3+spaces' ' ') + Environment.NewLine +                       DocString + Environment.NewLine +                       "\"\"\"".PadLeft(3 + spaces' ' ') + Environment.NewLine;
Magic Number,NBehave.Internal.Gherkin,Token,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\Gherkin\Token.cs,GetHashCode,The following statement contains a magic number: return (LineInFile.GetHashCode() * 397) ^ (Content != null ? Content.GetHashCode() : 0);
Magic Number,NBehave.EventListeners.CodeGeneration,ActionStepCodeGenerator,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\EventListeners\CodeGeneration\ActionStepCodeGenerator.cs,GetParameters,The following statement contains a magic number: return parameters.Substring(0' parameters.Length - 2);
Magic Number,NBehave.TextParsing,GherkinEvent,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\TextParsing\GherkinEvent.cs,GetHashCode,The following statement contains a magic number: return (eventAction.GetHashCode() * 397) ^ Tags.GetHashCode();
Missing Default,NBehave.Internal,ActionStepParser,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\ActionStepParser.cs,CreateAction,The following switch statement is missing a default case: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Missing Default,NBehave.Internal,StoryRunnerFilter,C:\research\architectureSmells\repos\nbehave_NBehave\src\NBehave\Internal\StoryRunnerFilter.cs,GetFilter,The following switch statement is missing a default case: switch (member.MemberType)                  {                      case MemberTypes.Method:                          memberNameFilter = member.Name;                          clsFilter = member.DeclaringType.Name;                          nsFilter = member.DeclaringType.Namespace;                          break;                      case MemberTypes.TypeInfo:                          clsFilter = member.Name;                          break;                      case MemberTypes.All:                          break;                      case MemberTypes.Constructor:                          break;                      case MemberTypes.Custom:                          break;                      case MemberTypes.Event:                          break;                      case MemberTypes.Field:                          break;                      case MemberTypes.NestedType:                          break;                      case MemberTypes.Property:                          break;                  }
