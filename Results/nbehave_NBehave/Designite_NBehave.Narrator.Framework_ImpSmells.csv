Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 13
Complex Method,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 11
Long Parameter List,NBehave.Narrator.Framework.Internal,ParameterConverter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ParameterConverter.cs,GetValuesFromTableStep,The method has 5 parameters. Parameters: stringStep' getValues' addMethodOnList' values' method
Long Parameter List,NBehave.Narrator.Framework,ActionMethodInfo,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\ActionMethodInfo.cs,ActionMethodInfo,The method has 5 parameters. Parameters: actionStepMatcher' action' methodInfo' actionType' instance
Long Identifier,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,NBehave.Narrator.Framework.Internal,DelegatesWithAttributeFinder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\MethodWithAttributeFinder.cs,FindDelegatesWithAttribute,The length of the parameter delegatesWithActionStepAttribute is 32.
Long Identifier,NBehave.Narrator.Framework.Internal,DelegatesWithAttributeFinder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\MethodWithAttributeFinder.cs,FindAllDelegatesWithAttribute,The length of the parameter delegatesWithActionStepAttribute is 32.
Long Identifier,NBehave.Narrator.Framework.Internal,MethodWithAttributeFinder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\MethodWithAttributeFinder.cs,FindMethodsWithAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Narrator.Framework.Internal,MethodWithAttributeFinder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\MethodWithAttributeFinder.cs,FindAllMethodsWithAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Narrator.Framework.Internal,StringStepRunner,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\StringStepRunner.cs,RunStep,The length of the parameter getParametersForActionStepText is 30.
Long Identifier,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,GetMethodsWithActionStepAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,GetAllMethodsWithActionStepAttribute,The length of the parameter methodsWithActionStepAttribute is 30.
Long Identifier,NBehave.Narrator.Framework,IgnoreSpaceAndUnderScoreMatcher,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\IgnoreSpaceAndUnderScoreMatcher.cs,IsMatch,The length of the parameter matchWithoutSpaceAndUnderScore is 30.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' ignoreDuplicateImplementations); " is 128.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterType)' string.Empty' GetDefaultObjectFactory<RegisterType' RegisterType>()); " is 137.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterType)' name' GetDefaultObjectFactory<RegisterType' RegisterType>()); " is 129.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterImplementation)' string.Empty' GetDefaultObjectFactory<RegisterType' RegisterImplementation>()); " is 157.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterImplementation)' name' GetDefaultObjectFactory<RegisterType' RegisterImplementation>()); " is 149.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterType)' string.Empty' new InstanceFactory<RegisterType' RegisterType>(instance)); " is 141.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterType)' name' new InstanceFactory<RegisterType' RegisterType>(instance)); " is 133.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterImplementation)' string.Empty' new InstanceFactory<RegisterType' RegisterImplementation>(instance)); " is 161.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterImplementation)' name' new InstanceFactory<RegisterType' RegisterImplementation>(instance)); " is 153.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(typeof(RegisterType)' typeof(RegisterType)' string.Empty' new DelegateFactory<RegisterType>(factory)); " is 126.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,RegisterMany,The length of the statement  "            return RegisterManyInternal(typeof(RegisterType)' new CompositionFactoryWrapper<RegisterType>(typeof(MultiInstanceFactory<'>))); " is 128.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Resolve,The length of the statement  "            return this.ResolveInternal(new TypeRegistration(typeof(ResolveType))' NamedParameterOverloads.Default' ResolveOptions.Default) as ResolveType; " is 143.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(typeof(ResolveType))' NamedParameterOverloads.Default' options) as ResolveType; " is 123.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(typeof(ResolveType)' name)' NamedParameterOverloads.Default' ResolveOptions.Default) as ResolveType; " is 144.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(typeof(ResolveType)' name)' NamedParameterOverloads.Default' options) as ResolveType; " is 129.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(typeof(ResolveType)' name)' parameters' ResolveOptions.Default) as ResolveType; " is 123.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(typeof(ResolveType))' NamedParameterOverloads.Default' ResolveOptions.Default); " is 126.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(typeof(ResolveType)' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 132.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                var defaultFactoryMethod = this.GetType().GetMethod("GetDefaultObjectFactory"' BindingFlags.NonPublic | BindingFlags.Instance); " is 127.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                    where (type.IsClass == true) && (type.IsAbstract == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition)) " is 163.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface == true || type.IsAbstract == true) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition)) " is 138.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                            this.RegisterInternal(type' firstImplementation' string.Empty' genericDefaultFactoryMethod.Invoke(this' null) as ObjectFactoryBase); " is 132.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 206.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 214.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,ConstructType,The length of the statement  "                args[parameterIndex] = parameters.ContainsKey(currentParam.Name) ? parameters[currentParam.Name] : ResolveInternal(new TypeRegistration(currentParam.ParameterType)' NamedParameterOverloads.Default' options); " is 207.
Long Statement,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,NBehave.Narrator.Framework.Tiny,DelegateFactory<RegisterType>,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,NBehave.Narrator.Framework.Tiny,WeakDelegateFactory<RegisterType>,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,NBehave.Narrator.Framework.Tiny,InstanceFactory<RegisterType;RegisterImplementation>,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,NBehave.Narrator.Framework.Tiny,WeakInstanceFactory<RegisterType;RegisterImplementation>,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,NBehave.Narrator.Framework.EventListeners,OutputEventListener,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\OutputEventListener.cs,ScenarioFinished,The length of the statement  "            writer.WriteColorString("Scenario: " + scenarioResult.ScenarioTitle + " - " + scenarioResult.Result.ToString().ToUpper()' GetColorForResult(scenarioResult.Result)); " is 164.
Long Statement,NBehave.Narrator.Framework.EventListeners,OutputEventListener,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\OutputEventListener.cs,ScenarioFinished,The length of the statement  "                writer.WriteColorString("  " + stepResult.StringStep.Step + " - " + TypeAsString(stepResult)' GetColorForResult(stepResult.Result)); " is 132.
Long Statement,NBehave.Narrator.Framework.EventListeners,OutputEventListener,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\OutputEventListener.cs,WriteBackground,The length of the statement  "            var backgroundSteps = scenarioResult.StepResults.Where(_ => _ is BackgroundStepResult).Cast<BackgroundStepResult>().ToList(); " is 125.
Long Statement,NBehave.Narrator.Framework.Internal,ActionCatalog,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionCatalog.cs,FindMatchingAction,The length of the statement  "                            Prio = sortMethodAfter.Contains(_.Action.MethodParametersType) ? sortMethodAfter.IndexOf(_.Action.MethodParametersType) : Int32.MaxValue " is 136.
Long Statement,NBehave.Narrator.Framework.Internal,ParameterConverter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ParameterConverter.cs,GetValuesFromTableStep,The length of the statement  "            List<string> paramNames = (stringStep.TableSteps.FirstOrDefault() ?? Example.EmptyExample).ColumnNames.Select(_ => _.Name).ToList(); " is 132.
Long Statement,NBehave.Narrator.Framework.Internal,ParameterConverter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ParameterConverter.cs,CreateInstanceOfComplexType,The length of the statement  "                var prop = instance.GetType().GetProperties().FirstOrDefault(_ => _.Name.Equals(argName' StringComparison.CurrentCultureIgnoreCase)); " is 133.
Long Statement,NBehave.Narrator.Framework.Internal,ParameterConverter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ParameterConverter.cs,CreateInstanceOfComplexType,The length of the statement  "                    throw new ArgumentException(string.Format("Type '{0}' dont have a property with the name '{1}'"' instance.GetType().Name' argName)); " is 132.
Long Statement,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,FindActionStepMethods,The length of the statement  "            var methods = methodWithAttributeFinder.FindMethodsWithAttribute<ActionMethodInfo' ActionStepAttribute>(actionSteps' BuildActionMethodInfo); " is 140.
Long Statement,NBehave.Narrator.Framework,HooksParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Hooks\HooksParser.cs,FindMethods,The length of the statement  "            var methods = methodWithAttributeFinder.FindMethodsWithAttribute<HookMetaData' HookAttribute>(type' BuildMethodHookType); " is 121.
Long Statement,NBehave.Narrator.Framework,HooksParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Hooks\HooksParser.cs,FindDelegates,The length of the statement  "            var delegates = delegatesWithAttributeFinder.FindDelegatesWithAttribute<HookMetaData' HookAttribute>(type' BuildDelegateHookType); " is 130.
Long Statement,NBehave.Narrator.Framework,HooksParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Hooks\HooksParser.cs,BuildDelegateHookType,The length of the statement  "                var message = string.Format("Field {0} with attribute {1} must be of type SystemAction."' @delegate.Name' hookAttrib.GetType().Name); " is 133.
Long Statement,NBehave.Narrator.Framework,HooksParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Hooks\HooksParser.cs,BuildMethodHookType,The length of the statement  "                var message = string.Format("Method {0} on class {1} may not have any parameters."' method.Name' method.DeclaringType.Name); " is 124.
Long Statement,NBehave.Narrator.Framework,ActionStepCodeGenerator,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\CodeGeneration\ActionStepCodeGenerator.cs,GenerateMethodFor,The length of the statement  "            var methodSignature = string.Format("public void {0}({1}){2}"' methodName.Replace(' '' '_')' GetParameters(actionStep)' " "); " is 125.
Long Statement,NBehave.Narrator.Framework,ActionMethodInfo,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\ActionMethodInfo.cs,FigureOutParameterTypes,The length of the statement  "                return IsStringType(arg) || arg.IsPrimitive ? MethodParametersType.UntypedListStep : MethodParametersType.TypedListStep; " is 120.
Long Statement,NBehave.Narrator.Framework,EmbeddedRunner,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EmbeddedRunner.cs,AbsolutePathToFeature,The length of the statement  "            string absolutePathToFeature = (Path.IsPathRooted(featureFile)) ? featureFile : Path.Combine(Path.GetDirectoryName(assemblyPath)' featureFile); " is 143.
Long Statement,NBehave.Narrator.Framework.EventListeners.Xml,XmlOutputWriter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\Xml\XmlOutputWriter.cs,CreatePendingSteps,The length of the statement  "                scenarioResult.AddActionStepResult(new StepResult(new StringStep(step.Message' "lost it")' new Pending(scenarioResult.Message))); " is 129.
Long Statement,NBehave.Narrator.Framework.Remoting,AppDomainRunner,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Remoting\AppDomainRunner.cs,CreateRunnerInNewAppDomain,The length of the statement  "            var runner = (RemotableStoryRunner)appDomain.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName' typeof(RemotableStoryRunner).FullName); " is 150.
Long Statement,NBehave.Narrator.Framework.Remoting,AppDomainRunner,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Remoting\AppDomainRunner.cs,CreateAppDomain,The length of the statement  "            var bootstrapper = (AppDomainBootstrapper)appDomain.CreateInstanceFromAndUnwrap(typeof(AppDomainBootstrapper).Assembly.Location' typeof(AppDomainBootstrapper).FullName); " is 169.
Long Statement,NBehave.Narrator.Framework.TextParsing,GherkinScenarioParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\TextParsing\GherkinScenarioParser.cs,Background,The length of the statement  "            events.Enqueue(new BackgroundEvent(currentScenario' e => BackgroundEvent.Invoke(this' new EventArgs<Scenario>(scenario)))); " is 123.
Long Statement,NBehave.Narrator.Framework.TextParsing,GherkinScenarioParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\TextParsing\GherkinScenarioParser.cs,DocString,The length of the statement  "            events.Enqueue(new DocStringEvent(docStringText' e => DocStringEvent.Invoke(this' new EventArgs<string>(docStringText)))); " is 122.
Long Statement,NBehave.Narrator.Framework.TextParsing.TagFilter,TagFilter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\TextParsing\TagFilter\TagFilter.cs,GetEventsForNextScenario,The length of the statement  "            return GetEventsWhile(events' nextEvent => nextEvent is ScenarioEvent || nextEvent is EofEvent || nextEvent is FeatureEvent).ToList(); " is 134.
Long Statement,NBehave.Narrator.Framework.TextParsing.TagFilter,OrFilter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\TextParsing\TagFilter\TagFilter.cs,GetScenariosToRun,The length of the statement  "            var includeOperand2 = NotTheseTags.Any() ? scenarioEvents.Except(scenarioEvents.Where(_ => NotTheseTags.Intersect(_.Tags).Any()).ToList()) : new GherkinEvent[0]; " is 161.
Complex Conditional,NBehave.Narrator.Framework.Internal,ParameterConverter,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ParameterConverter.cs,GetParametersForStep,The conditional expression  "args.Length == 1 && args[0].ParameterType.IsClass && args[0].ParameterType != typeof(string)                  && IsArrayOrIEnumerable(args[0]) == false"  is complex.
Empty Catch Block,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,NBehave.Narrator.Framework.Tiny,TinyIoCContainer,C:\repos\nbehave_NBehave\lib\Tiny\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,CreateAction,The following statement contains a magic number: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,GetActionForThreeParameters,The following statement contains a magic number: Action<object' object' object> action =                  (a' b' c) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,GetActionForFourParameters,The following statement contains a magic number: Action<object' object' object' object> action =                  (a' b' c' d) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                         ChangeType(methodInfo' d' 3)                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,GetActionForFourParameters,The following statement contains a magic number: Action<object' object' object' object> action =                  (a' b' c' d) =>                  {                      var invokeParameters = new[]                                                     {                                                         ChangeType(methodInfo' a' 0)'                                                         ChangeType(methodInfo' b' 1)'                                                         ChangeType(methodInfo' c' 2)'                                                         ChangeType(methodInfo' d' 3)                                                     };                      methodInfo.Invoke(instance' invokeParameters);                  };
Magic Number,NBehave.Narrator.Framework,ExampleBuilder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\ExampleBuilder.cs,BuildColumnNames,The following statement contains a magic number: var theMiddle = cols.Length / 2;
Magic Number,NBehave.Narrator.Framework,ExampleBuilder,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\ExampleBuilder.cs,BuildColumnValues,The following statement contains a magic number: var theMiddle = cols.Length / 2;
Magic Number,NBehave.Narrator.Framework,ActionStepCodeGenerator,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\EventListeners\CodeGeneration\ActionStepCodeGenerator.cs,GetParameters,The following statement contains a magic number: return parameters.Substring(0' parameters.Length - 2);
Magic Number,NBehave.Narrator.Framework,GherkinEvent,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\TextParsing\GherkinEvent.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (eventAction.GetHashCode() * 397) ^ Tags.GetHashCode();              }
Magic Number,NBehave.Narrator.Framework,StringStep,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\StringStep.cs,ToString,The following statement contains a magic number: if (HasDocString)              {                  var spaces = new Regex(@"^\s*").Match(DocString).Length;                  s += Environment.NewLine +                       "\"\"\"".PadLeft(3+spaces' ' ') + Environment.NewLine +                       DocString + Environment.NewLine +                       "\"\"\"".PadLeft(3 + spaces' ' ') + Environment.NewLine;              }
Magic Number,NBehave.Narrator.Framework,StringStep,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Domain\StringStep.cs,ToString,The following statement contains a magic number: if (HasDocString)              {                  var spaces = new Regex(@"^\s*").Match(DocString).Length;                  s += Environment.NewLine +                       "\"\"\"".PadLeft(3+spaces' ' ') + Environment.NewLine +                       DocString + Environment.NewLine +                       "\"\"\"".PadLeft(3 + spaces' ' ') + Environment.NewLine;              }
Missing Default,NBehave.Narrator.Framework.Internal,ActionStepParser,C:\repos\nbehave_NBehave\src\NBehave.Narrator.Framework\Internal\ActionStepParser.cs,CreateAction,The following switch statement is missing a default case: switch (CountParameters(method))              {                  case 0:                      action = GetActionWithNoParameters(instance' method);                      break;                  case 1:                      action = GetActionForOneParameter(instance' methodInfo);                      break;                  case 2:                      action = GetActionForTwoParameters(instance' methodInfo);                      break;                  case 3:                      action = GetActionForThreeParameters(instance' methodInfo);                      break;                  case 4:                      action = GetActionForFourParameters(instance' methodInfo);                      break;              }
