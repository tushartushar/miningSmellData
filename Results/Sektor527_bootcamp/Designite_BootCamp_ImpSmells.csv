Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BootCamp,EnvironmentManager,C:\repos\Sektor527_bootcamp\BootCamp\EnvironmentManager.cs,Run,Cyclomatic complexity of the method is 18
Complex Method,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGrouping,Cyclomatic complexity of the method is 21
Complex Method,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,CreateGroups,Cyclomatic complexity of the method is 13
Complex Method,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,AssignItemToGroup,Cyclomatic complexity of the method is 13
Complex Method,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGamesListColumnClick,Cyclomatic complexity of the method is 15
Long Parameter List,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,ShowGroups,The method has 7 parameters.
Long Parameter List,BootCamp,Game,C:\repos\Sektor527_bootcamp\BootCamp\Game.cs,Game,The method has 6 parameters.
Long Statement,BootCamp,AlphabeticGrouper,C:\repos\Sektor527_bootcamp\BootCamp\AlphabeticGrouper.cs,MergeGroups,The length of the statement  "		return new KeyValuePair<string' int> (group.Key + "-" + regroup.Key.Substring (regroup.Key.Length - 1' 1)' regroup.Value + group.Value); " is 136.
Long Statement,BootCamp,EnvironmentManager,C:\repos\Sektor527_bootcamp\BootCamp\EnvironmentManager.cs,Run,The length of the statement  "		info.Arguments = String.Format ("\"{0} {1}\" -exit -noconsole -fullscreen"' Path.GetFullPath (game.Executable)' game.Arguments); " is 128.
Long Statement,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,AssignItemToGroup,The length of the statement  "			if (game.Name.Substring (0' 1).CompareTo (group.Name.Substring (0' 1)) >= 0 && game.Name.Substring (0' 1).CompareTo (group.Name.Substring (group.Name.Length - 1' 1)) <= 0) { " is 173.
Long Statement,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnDeleteGame,The length of the statement  "	if (MessageBox.Show (String.Format ("Are you sure you want to remove '{0}'?"' SelectedGame.Name)' "Boot Camp"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) " is 180.
Long Statement,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnPlayGame,The length of the statement  "		MessageBox.Show ("This game has no executable.\n\nEdit the game and fill in the 'Executable' text box."' "No executable designated"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 177.
Long Statement,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnPlayGame,The length of the statement  "		MessageBox.Show ("The executable does not exist.\n\nEdit the game and make sure the 'Executable' text box has a correct reference to an existing executable."' "Executable doesn't exist"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 231.
Long Statement,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,AddGame,The length of the statement  "	game.Environment = (Environments)Enum.Parse (typeof(Environments)' Properties.Settings.Default.FormAdd_LastSelectedEnvironment); " is 128.
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,CreateGroups,The following statement contains a magic number: switch (_groupCategory) {  case GroupCategory.Name:  	AlphabeticGrouper grouper = new AlphabeticGrouper {  		MinimumItemsPerGroup = 15'  		Ascending = _groupAscending  	};  	ShowGroups (grouper.Group (Program.GamesManager.Names)' "Name"' _groupAscending);  	break;  case GroupCategory.Genre:  	ShowGroups (Program.GamesManager.Genres' "Genre"' _groupAscending);  	break;  case GroupCategory.Environment:  	ShowGroups (new List<string> (Enum.GetNames (typeof(Environments)))' "Environment"' _groupAscending);  	break;  case GroupCategory.None:  	HideGroups ();  	break;  }  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnPlayGame,The following statement contains a magic number: GamesList.SelectedItems [0].SubItems [3].Text = SelectedGame.RunCount.ToString ();  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnPlayGame,The following statement contains a magic number: GamesList.SelectedItems [0].SubItems [4].Text = SelectedGame.RunTimestamp.ToString ("d MMMM yyyy' H:mm");  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnEditGame,The following statement contains a magic number: item.SubItems [2].Text = form.Game.Environment.ToString ();  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnResize,The following statement contains a magic number: GamesList.Columns [GamesList.Columns.Count - 1].Width = -2;  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGamesListColumnClick,The following statement contains a magic number: switch (e.Column) {  case 0:  	// Name  	sorter.SortCategory = GroupCategory.Name;  	break;  case 1:  	// Genre  	sorter.SortCategory = GroupCategory.Genre;  	break;  case 2:  	// Environment  	sorter.SortCategory = GroupCategory.Environment;  	break;  case 3:  	// Times Played  	sorter.SortCategory = GroupCategory.RunCount;  	break;  case 4:  	// Last Played  	sorter.SortCategory = GroupCategory.RunTimestamp;  	break;  }  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGamesListColumnClick,The following statement contains a magic number: switch (e.Column) {  case 0:  	// Name  	sorter.SortCategory = GroupCategory.Name;  	break;  case 1:  	// Genre  	sorter.SortCategory = GroupCategory.Genre;  	break;  case 2:  	// Environment  	sorter.SortCategory = GroupCategory.Environment;  	break;  case 3:  	// Times Played  	sorter.SortCategory = GroupCategory.RunCount;  	break;  case 4:  	// Last Played  	sorter.SortCategory = GroupCategory.RunTimestamp;  	break;  }  
Magic Number,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGamesListColumnClick,The following statement contains a magic number: switch (e.Column) {  case 0:  	// Name  	sorter.SortCategory = GroupCategory.Name;  	break;  case 1:  	// Genre  	sorter.SortCategory = GroupCategory.Genre;  	break;  case 2:  	// Environment  	sorter.SortCategory = GroupCategory.Environment;  	break;  case 3:  	// Times Played  	sorter.SortCategory = GroupCategory.RunCount;  	break;  case 4:  	// Last Played  	sorter.SortCategory = GroupCategory.RunTimestamp;  	break;  }  
Magic Number,BootCamp,Game,C:\repos\Sektor527_bootcamp\BootCamp\Game.cs,GetHashCode,The following statement contains a magic number: return 3 * Name.GetHashCode () + 5 * Environment.GetHashCode () + 7 * Path.GetFileName (Executable).GetHashCode ();  
Magic Number,BootCamp,Game,C:\repos\Sektor527_bootcamp\BootCamp\Game.cs,GetHashCode,The following statement contains a magic number: return 3 * Name.GetHashCode () + 5 * Environment.GetHashCode () + 7 * Path.GetFileName (Executable).GetHashCode ();  
Magic Number,BootCamp,Game,C:\repos\Sektor527_bootcamp\BootCamp\Game.cs,GetHashCode,The following statement contains a magic number: return 3 * Name.GetHashCode () + 5 * Environment.GetHashCode () + 7 * Path.GetFileName (Executable).GetHashCode ();  
Missing Default,BootCamp,EnvironmentManager,C:\repos\Sektor527_bootcamp\BootCamp\EnvironmentManager.cs,Run,The following switch statement is missing a default case: switch (game.Environment) {  case Environments.Windows:  case Environments.GameAndWatch: {  	ProcessStartInfo info = new ProcessStartInfo (Path.GetFileName (game.Executable));  	info.WorkingDirectory = Path.GetFullPath (Path.GetDirectoryName (game.Executable));  	info.Arguments = game.Arguments;  	Process.Start (info);  	break;  }  case Environments.Dosbox: {  	ProcessStartInfo info = new ProcessStartInfo ("dosbox.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "Dosbox"));  	info.Arguments = String.Format ("\"{0} {1}\" -exit -noconsole -fullscreen"' Path.GetFullPath (game.Executable)' game.Arguments);  	if (!String.IsNullOrEmpty (game.ISO)) {  		info.Arguments += String.Format (" -c \"imgmount d '{0}' -t iso\""' Path.GetFullPath (game.ISO));  	}  	Process.Start (info);  	break;  }  case Environments.C64: {  	ProcessStartInfo info = new ProcessStartInfo ("ccs64.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "CCS64"));  	info.Arguments = String.Format ("\"{0}\""' Path.GetFullPath (game.Executable));  	Process.Start (info);  	break;  }  case Environments.ScummVM: {  	break;  }  case Environments.Gameboy: {  	ProcessStartInfo info = new ProcessStartInfo ("VisualBoyAdvance.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "Gameboy"));  	info.Arguments = String.Format ("\"{0}\""' Path.GetFullPath (game.Executable));  	Process.Start (info);  	break;  }  case Environments.Nintendo64: {  	ProcessStartInfo info = new ProcessStartInfo ("project64.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "nintendo 64"));  	info.Arguments = String.Format ("\"{0}\""' Path.GetFullPath (game.Executable));  	Process.Start (info);  	break;  }  case Environments.SuperNintendo: {  	ProcessStartInfo info = new ProcessStartInfo ("snes9x.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "super nintendo"));  	info.Arguments = String.Format ("\"{0}\""' Path.GetFullPath (game.Executable));  	Process.Start (info);  	break;  }  case Environments.ZMachine: {  	ProcessStartInfo info = new ProcessStartInfo ("frotz.exe");  	info.WorkingDirectory = Path.GetFullPath (Path.Combine (Properties.Settings.Default.EmulatorsPath' "winfrotz"));  	info.Arguments = String.Format ("\"{0}\""' Path.GetFullPath (game.Executable));  	Process.Start (info);  	break;  }  }  
Missing Default,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,CreateGroups,The following switch statement is missing a default case: switch (_groupCategory) {  case GroupCategory.Name:  	AlphabeticGrouper grouper = new AlphabeticGrouper {  		MinimumItemsPerGroup = 15'  		Ascending = _groupAscending  	};  	ShowGroups (grouper.Group (Program.GamesManager.Names)' "Name"' _groupAscending);  	break;  case GroupCategory.Genre:  	ShowGroups (Program.GamesManager.Genres' "Genre"' _groupAscending);  	break;  case GroupCategory.Environment:  	ShowGroups (new List<string> (Enum.GetNames (typeof(Environments)))' "Environment"' _groupAscending);  	break;  case GroupCategory.None:  	HideGroups ();  	break;  }  
Missing Default,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnPlayGame,The following switch statement is missing a default case: switch (result) {  case BootCamp.Game.Result.ExecutableEmptyError:  	MessageBox.Show ("This game has no executable.\n\nEdit the game and fill in the 'Executable' text box."' "No executable designated"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	return;  case BootCamp.Game.Result.ExecutableDoesNotExistError:  	MessageBox.Show ("The executable does not exist.\n\nEdit the game and make sure the 'Executable' text box has a correct reference to an existing executable."' "Executable doesn't exist"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	return;  }  
Missing Default,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,OnGamesListColumnClick,The following switch statement is missing a default case: switch (e.Column) {  case 0:  	// Name  	sorter.SortCategory = GroupCategory.Name;  	break;  case 1:  	// Genre  	sorter.SortCategory = GroupCategory.Genre;  	break;  case 2:  	// Environment  	sorter.SortCategory = GroupCategory.Environment;  	break;  case 3:  	// Times Played  	sorter.SortCategory = GroupCategory.RunCount;  	break;  case 4:  	// Last Played  	sorter.SortCategory = GroupCategory.RunTimestamp;  	break;  }  
Missing Default,BootCamp,FormMain,C:\repos\Sektor527_bootcamp\BootCamp\FormMain.cs,ProcessCmdKey,The following switch statement is missing a default case: switch (keyData) {  case Keys.Control | Keys.F:  	inputSearch.Focus ();  	inputSearch.Text = "";  	return true;  case Keys.Escape:  	inputSearch.Text = "";  	GamesList.Focus ();  	return true;  }  
