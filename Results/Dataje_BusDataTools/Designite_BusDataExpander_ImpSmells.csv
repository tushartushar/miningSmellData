Implementation smell,Namespace,Class,File,Method,Description
Long Method,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The method has 241 lines of code.
Long Method,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,ProcessStopTrip,The method has 182 lines of code.
Complex Method,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,ProcessStopTrip,Cyclomatic complexity of the method is 76
Long Parameter List,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,ProcessStopTrip,The method has 10 parameters.
Long Statement,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,CreateDatabaseTable,The length of the statement  "	sqlCreate += "IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + dataTable.TableName + "]') AND type in (N'U'))"; " is 144.
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: while (results.Read ()) {  	//var fromCode = "2356";  	//var fromName = "Clos de la Mielle W";  	//var fromLat = "49.19419989";  	//var fromLong = "-2.163702009";  	//  	//var toCode = "3987";  	//var toName = "York Farm";  	//var toLat = "49.19543249";  	//var toLong = "-2.16058823";  	//  	var reference = results ["reference"].ToString ();  	//  	var fromCode = results ["fCode"].ToString ();  	var fromName = results ["fName"].ToString ();  	var fromLat = results ["fLatitude"].ToString ();  	var fromLong = results ["fLongitude"].ToString ();  	//  	var toCode = results ["tCode"].ToString ();  	var toName = results ["tName"].ToString ();  	var toLat = results ["tLatitude"].ToString ();  	var toLong = results ["tLongitude"].ToString ();  	//  	var hash = fromLat + "'" + fromLong + ":" + toLat + "'" + toLong;  	//  	while (true) {  		var success = ProcessStopTrip (hash' reference' fromCode' fromName' fromLat' fromLong' toCode' toName' toLat' toLong);  		//  		if (success) {  			break;  		}  		//  		Console.WriteLine ("There was an error on the last api call' waiting 1/2 a second before trying again");  		System.Threading.Thread.Sleep (500);  	}  	//  	if (mCallsThisSecond >= maxPerSecond) {  		Console.WriteLine ("Waiting for quota");  		//  		System.Threading.Thread.Sleep (1000);  		//  		mCallsThisSecond = 0;  	}  	//  	if (mTotalProcessed < maxToProcess) {  		continue;  	}  	//  	Console.WriteLine ("{0} new rows"' MeasurementsDataTable.Rows.Count);  	//  	CreateDatabaseTable (MeasurementsDataTable);  	//  	mTotalProcessed = 0;  	MeasurementsDataTable.Rows.Clear ();  }  
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: while (results.Read ()) {  	//var fromCode = "2356";  	//var fromName = "Clos de la Mielle W";  	//var fromLat = "49.19419989";  	//var fromLong = "-2.163702009";  	//  	//var toCode = "3987";  	//var toName = "York Farm";  	//var toLat = "49.19543249";  	//var toLong = "-2.16058823";  	//  	var reference = results ["reference"].ToString ();  	//  	var fromCode = results ["fCode"].ToString ();  	var fromName = results ["fName"].ToString ();  	var fromLat = results ["fLatitude"].ToString ();  	var fromLong = results ["fLongitude"].ToString ();  	//  	var toCode = results ["tCode"].ToString ();  	var toName = results ["tName"].ToString ();  	var toLat = results ["tLatitude"].ToString ();  	var toLong = results ["tLongitude"].ToString ();  	//  	var hash = fromLat + "'" + fromLong + ":" + toLat + "'" + toLong;  	//  	while (true) {  		var success = ProcessStopTrip (hash' reference' fromCode' fromName' fromLat' fromLong' toCode' toName' toLat' toLong);  		//  		if (success) {  			break;  		}  		//  		Console.WriteLine ("There was an error on the last api call' waiting 1/2 a second before trying again");  		System.Threading.Thread.Sleep (500);  	}  	//  	if (mCallsThisSecond >= maxPerSecond) {  		Console.WriteLine ("Waiting for quota");  		//  		System.Threading.Thread.Sleep (1000);  		//  		mCallsThisSecond = 0;  	}  	//  	if (mTotalProcessed < maxToProcess) {  		continue;  	}  	//  	Console.WriteLine ("{0} new rows"' MeasurementsDataTable.Rows.Count);  	//  	CreateDatabaseTable (MeasurementsDataTable);  	//  	mTotalProcessed = 0;  	MeasurementsDataTable.Rows.Clear ();  }  
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: while (true) {  	var success = ProcessStopTrip (hash' reference' fromCode' fromName' fromLat' fromLong' toCode' toName' toLat' toLong);  	//  	if (success) {  		break;  	}  	//  	Console.WriteLine ("There was an error on the last api call' waiting 1/2 a second before trying again");  	System.Threading.Thread.Sleep (500);  }  
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: if (mCallsThisSecond >= maxPerSecond) {  	Console.WriteLine ("Waiting for quota");  	//  	System.Threading.Thread.Sleep (1000);  	//  	mCallsThisSecond = 0;  }  
Magic Number,BusDataExpander,Program,C:\repos\Dataje_BusDataTools\BusDataExpander\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
