Implementation smell,Namespace,Class,File,Method,Description
Long Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReadValue,The method has 114 lines of code.
Long Method,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,IsModified,The method has 123 lines of code.
Long Method,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The method has 121 lines of code.
Long Method,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The method has 457 lines of code.
Long Method,NGit.Api,AddCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\AddCommand.cs,Call,The method has 116 lines of code.
Long Method,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,Call,The method has 173 lines of code.
Long Method,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,CreateTemporaryIndex,The method has 140 lines of code.
Long Method,NGit.Api,MergeCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommand.cs,Call,The method has 197 lines of code.
Long Method,NGit.Api,PullCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PullCommand.cs,Call,The method has 154 lines of code.
Long Method,NGit.Api,CreateBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CreateBranchCommand.cs,Call,The method has 205 lines of code.
Long Method,NGit.Api,RenameBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RenameBranchCommand.cs,Call,The method has 104 lines of code.
Long Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,Call,The method has 156 lines of code.
Long Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,InitFilesAndRewind,The method has 111 lines of code.
Long Method,NGit.Api,CheckoutCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CheckoutCommand.cs,Call,The method has 130 lines of code.
Long Method,NGit.Api,ResetCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ResetCommand.cs,Call,The method has 125 lines of code.
Long Method,NGit.Api,StashCreateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashCreateCommand.cs,Call,The method has 124 lines of code.
Long Method,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,FindExactRenames,The method has 184 lines of code.
Long Method,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The method has 112 lines of code.
Long Method,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The method has 106 lines of code.
Long Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,ProcessEntry,The method has 358 lines of code.
Long Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,IsValidPathSegment,The method has 116 lines of code.
Long Method,NGit.Fnmatch,GroupHead,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\GroupHead.cs,GroupHead,The method has 135 lines of code.
Long Method,NGit.Merge,MergeAlgorithm,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeAlgorithm.cs,Merge,The method has 242 lines of code.
Long Method,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ProcessEntry,The method has 223 lines of code.
Long Method,NGit.Patch,CombinedHunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\CombinedHunkHeader.cs,ParseBody,The method has 100 lines of code.
Long Method,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,ParseGitHeaders,The method has 131 lines of code.
Long Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,NextObject,The method has 119 lines of code.
Long Method,NGit.Revwalk,RewriteTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RewriteTreeFilter.cs,Include,The method has 152 lines of code.
Long Method,NGit.Revwalk,StartGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\StartGenerator.cs,Next,The method has 116 lines of code.
Long Method,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The method has 220 lines of code.
Long Method,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The method has 168 lines of code.
Long Method,NGit.Storage.File,RefDirectoryRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectoryRename.cs,DoRename,The method has 115 lines of code.
Long Method,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The method has 106 lines of code.
Long Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Prune,The method has 186 lines of code.
Long Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,WritePack,The method has 113 lines of code.
Long Method,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The method has 109 lines of code.
Long Method,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,Encode,The method has 122 lines of code.
Long Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The method has 133 lines of code.
Long Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The method has 147 lines of code.
Long Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,FindObjectsToPack,The method has 287 lines of code.
Long Method,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Dq,The method has 115 lines of code.
Long Method,NGit.Util,GitDateParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateParser.cs,Parse_relative,The method has 102 lines of code.
Long Method,NGit.Transport,FetchProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\FetchProcess.cs,ExecuteImp,The method has 146 lines of code.
Long Method,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,The method has 188 lines of code.
Long Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ProcessHaveLines,The method has 214 lines of code.
Long Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,SendPack,The method has 157 lines of code.
Long Method,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,DownloadObject,The method has 109 lines of code.
Long Method,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,DownloadPackedObject,The method has 106 lines of code.
Long Method,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Parse,The method has 139 lines of code.
Long Method,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,Connect,The method has 104 lines of code.
Long Method,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ValidateCommands,The method has 133 lines of code.
Long Method,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,SendStatusReport,The method has 120 lines of code.
Long Method,NGit.Blame,BlameGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\BlameGenerator.cs,ProcessMerge,The method has 210 lines of code.
Complex Method,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,ReadEnvironment,Cyclomatic complexity of the method is 15
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,EscapeValue,Cyclomatic complexity of the method is 13
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,GetEnum,Cyclomatic complexity of the method is 8
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReplaceStringList,Cyclomatic complexity of the method is 10
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ToText,Cyclomatic complexity of the method is 13
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,FromText,Cyclomatic complexity of the method is 14
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReadSectionName,Cyclomatic complexity of the method is 10
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReadKeyName,Cyclomatic complexity of the method is 12
Complex Method,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReadValue,Cyclomatic complexity of the method is 21
Complex Method,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,Cyclomatic complexity of the method is 10
Complex Method,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,WriteTree,Cyclomatic complexity of the method is 8
Complex Method,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,IsModified,Cyclomatic complexity of the method is 17
Complex Method,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,Cyclomatic complexity of the method is 19
Complex Method,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,CheckCommit,Cyclomatic complexity of the method is 9
Complex Method,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,DuplicateName,Cyclomatic complexity of the method is 11
Complex Method,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,CheckTree,Cyclomatic complexity of the method is 20
Complex Method,NGit,RefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefUpdate.cs,Link,Cyclomatic complexity of the method is 8
Complex Method,NGit,RefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefUpdate.cs,UpdateImpl,Cyclomatic complexity of the method is 10
Complex Method,NGit,RefWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefWriter.cs,WritePackedRefs,Cyclomatic complexity of the method is 8
Complex Method,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,Cyclomatic complexity of the method is 72
Complex Method,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,GetRepositoryState,Cyclomatic complexity of the method is 14
Complex Method,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,IsValidRefName,Cyclomatic complexity of the method is 12
Complex Method,NGit,Tree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Tree.cs,CompareNames,Cyclomatic complexity of the method is 16
Complex Method,NGit,Tree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Tree.cs,ReadTree,Cyclomatic complexity of the method is 14
Complex Method,NGit.Api,AddCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\AddCommand.cs,Call,Cyclomatic complexity of the method is 13
Complex Method,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,Call,Cyclomatic complexity of the method is 17
Complex Method,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,CreateTemporaryIndex,Cyclomatic complexity of the method is 16
Complex Method,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,ProcessOptions,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,MergeCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommand.cs,Call,Cyclomatic complexity of the method is 14
Complex Method,NGit.Api,MergeCommandResult,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommandResult.cs,AddConflict,Cyclomatic complexity of the method is 11
Complex Method,NGit.Api,PushCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PushCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,PullCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PullCommand.cs,Call,Cyclomatic complexity of the method is 16
Complex Method,NGit.Api,CreateBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CreateBranchCommand.cs,Call,Cyclomatic complexity of the method is 22
Complex Method,NGit.Api,DeleteBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\DeleteBranchCommand.cs,Call,Cyclomatic complexity of the method is 14
Complex Method,NGit.Api,RenameBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RenameBranchCommand.cs,Call,Cyclomatic complexity of the method is 15
Complex Method,NGit.Api,CherryPickCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CherryPickCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,Call,Cyclomatic complexity of the method is 17
Complex Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,PopSteps,Cyclomatic complexity of the method is 11
Complex Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,InitFilesAndRewind,Cyclomatic complexity of the method is 9
Complex Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,LoadSteps,Cyclomatic complexity of the method is 9
Complex Method,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,CheckoutCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CheckoutCommand.cs,Call,Cyclomatic complexity of the method is 11
Complex Method,NGit.Api,InitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\InitCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,RevertCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RevertCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,ResetCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ResetCommand.cs,Call,Cyclomatic complexity of the method is 12
Complex Method,NGit.Api,LsRemoteCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\LsRemoteCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,BlameCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\BlameCommand.cs,Call,Cyclomatic complexity of the method is 9
Complex Method,NGit.Api,DiffCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\DiffCommand.cs,Call,Cyclomatic complexity of the method is 11
Complex Method,NGit.Api,SubmoduleInitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\SubmoduleInitCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,SubmoduleSyncCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\SubmoduleSyncCommand.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,NGit.Api,SubmoduleUpdateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\SubmoduleUpdateCommand.cs,Call,Cyclomatic complexity of the method is 9
Complex Method,NGit.Api,ApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ApplyCommand.cs,Call,Cyclomatic complexity of the method is 9
Complex Method,NGit.Api,ApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ApplyCommand.cs,Apply,Cyclomatic complexity of the method is 15
Complex Method,NGit.Api,StashDropCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashDropCommand.cs,Call,Cyclomatic complexity of the method is 9
Complex Method,NGit.Diff,DiffEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffEntry.cs,Scan,Cyclomatic complexity of the method is 10
Complex Method,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,Format,Cyclomatic complexity of the method is 10
Complex Method,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,Open,Cyclomatic complexity of the method is 8
Complex Method,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,FormatHeader,Cyclomatic complexity of the method is 9
Complex Method,NGit.Diff,EditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,Calculate,Cyclomatic complexity of the method is 8
Complex Method,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,FindExactRenames,Cyclomatic complexity of the method is 25
Complex Method,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Common,Cyclomatic complexity of the method is 9
Complex Method,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,Cyclomatic complexity of the method is 12
Complex Method,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,Cyclomatic complexity of the method is 9
Complex Method,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,TryLongestCommonSequence,Cyclomatic complexity of the method is 15
Complex Method,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,Cyclomatic complexity of the method is 12
Complex Method,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,UpdateSmudgedEntries,Cyclomatic complexity of the method is 8
Complex Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,ProcessEntry,Cyclomatic complexity of the method is 12
Complex Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,DoCheckout,Cyclomatic complexity of the method is 13
Complex Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,ProcessEntry,Cyclomatic complexity of the method is 46
Complex Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,CheckoutEntry,Cyclomatic complexity of the method is 9
Complex Method,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,IsValidPathSegment,Cyclomatic complexity of the method is 27
Complex Method,NGit.Dircache,DirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEditor.cs,ApplyEdits,Cyclomatic complexity of the method is 9
Complex Method,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,Cyclomatic complexity of the method is 9
Complex Method,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,IsValidPath,Cyclomatic complexity of the method is 8
Complex Method,NGit.Dircache,DirCacheTree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheTree.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,NGit.Fnmatch,GroupHead,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\GroupHead.cs,GroupHead,Cyclomatic complexity of the method is 18
Complex Method,NGit.Ignore,IgnoreRule,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Ignore\IgnoreRule.cs,IsMatch,Cyclomatic complexity of the method is 16
Complex Method,NGit.Merge,MergeAlgorithm,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeAlgorithm.cs,Merge,Cyclomatic complexity of the method is 24
Complex Method,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,MergeImpl,Cyclomatic complexity of the method is 9
Complex Method,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ProcessEntry,Cyclomatic complexity of the method is 32
Complex Method,NGit.Merge,InCoreMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\StrategySimpleTwoWayInCore.cs,MergeImpl,Cyclomatic complexity of the method is 10
Complex Method,NGit.Merge,MergeMessageFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeMessageFormatter.cs,Format,Cyclomatic complexity of the method is 12
Complex Method,NGit.Patch,CombinedFileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\CombinedFileHeader.cs,ParseGitHeaders,Cyclomatic complexity of the method is 9
Complex Method,NGit.Patch,CombinedHunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\CombinedHunkHeader.cs,ParseBody,Cyclomatic complexity of the method is 13
Complex Method,NGit.Patch,CombinedHunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\CombinedHunkHeader.cs,ExtractFileLines,Cyclomatic complexity of the method is 10
Complex Method,NGit.Patch,CombinedHunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\CombinedHunkHeader.cs,ExtractFileLines,Cyclomatic complexity of the method is 10
Complex Method,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,ParseGitFileName,Cyclomatic complexity of the method is 9
Complex Method,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,ParseGitHeaders,Cyclomatic complexity of the method is 18
Complex Method,NGit.Patch,HunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\HunkHeader.cs,ToEditList,Cyclomatic complexity of the method is 9
Complex Method,NGit.Patch,HunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\HunkHeader.cs,ParseBody,Cyclomatic complexity of the method is 10
Complex Method,NGit.Patch,Patch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\Patch.cs,ParseFile,Cyclomatic complexity of the method is 11
Complex Method,NGit.Patch,Patch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\Patch.cs,ParseHunks,Cyclomatic complexity of the method is 14
Complex Method,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,Cyclomatic complexity of the method is 9
Complex Method,NGit.Revplot,PlotCommitList<L>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotCommitList.cs,Enter,Cyclomatic complexity of the method is 11
Complex Method,NGit.Revplot,PlotCommitList<L>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotCommitList.cs,HandleBlockedLanes,Cyclomatic complexity of the method is 10
Complex Method,NGit.Revwalk,InitialGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BoundaryGenerator.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,NGit.Revwalk,MergeBaseGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\MergeBaseGenerator.cs,Next,Cyclomatic complexity of the method is 10
Complex Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,NextObject,Cyclomatic complexity of the method is 20
Complex Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,FindObjectId,Cyclomatic complexity of the method is 18
Complex Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,Cyclomatic complexity of the method is 9
Complex Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,GetPathHashCode,Cyclomatic complexity of the method is 8
Complex Method,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,MarkTreeUninteresting,Cyclomatic complexity of the method is 9
Complex Method,NGit.Revwalk,PendingGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\PendingGenerator.cs,Next,Cyclomatic complexity of the method is 15
Complex Method,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,ParseCanonical,Cyclomatic complexity of the method is 10
Complex Method,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,GetFooterLines,Cyclomatic complexity of the method is 8
Complex Method,NGit.Revwalk,RevCommitList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommitList.cs,FillTo,Cyclomatic complexity of the method is 9
Complex Method,NGit.Revwalk,RevCommitList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommitList.cs,FillTo,Cyclomatic complexity of the method is 9
Complex Method,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,Reset,Cyclomatic complexity of the method is 8
Complex Method,NGit.Revwalk,RewriteGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RewriteGenerator.cs,Cleanup,Cyclomatic complexity of the method is 8
Complex Method,NGit.Revwalk,RewriteTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RewriteTreeFilter.cs,Include,Cyclomatic complexity of the method is 19
Complex Method,NGit.Revwalk,StartGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\StartGenerator.cs,Next,Cyclomatic complexity of the method is 15
Complex Method,NGit.Revwalk,DepthGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthGenerator.cs,Next,Cyclomatic complexity of the method is 10
Complex Method,NGit.Revwalk,RevWalkUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalkUtils.cs,FindBranchesReachableFrom,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,Cyclomatic complexity of the method is 8
Complex Method,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,Resolve,Cyclomatic complexity of the method is 13
Complex Method,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanPacksImpl,Cyclomatic complexity of the method is 8
Complex Method,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,Cyclomatic complexity of the method is 24
Complex Method,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,Cyclomatic complexity of the method is 8
Complex Method,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,Cyclomatic complexity of the method is 12
Complex Method,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Pack,Cyclomatic complexity of the method is 11
Complex Method,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Resolve,Cyclomatic complexity of the method is 8
Complex Method,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ParsePackedRefs,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ReadRef,Cyclomatic complexity of the method is 10
Complex Method,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ScanRef,Cyclomatic complexity of the method is 11
Complex Method,NGit.Storage.File,LooseScanner,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Scan,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,LooseScanner,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ScanOne,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,RefDirectoryRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectoryRename.cs,DoRename,Cyclomatic complexity of the method is 13
Complex Method,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,Cyclomatic complexity of the method is 12
Complex Method,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,Evict,Cyclomatic complexity of the method is 8
Complex Method,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,RenameAndOpenPack,Cyclomatic complexity of the method is 10
Complex Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,PrunePacked,Cyclomatic complexity of the method is 10
Complex Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Prune,Cyclomatic complexity of the method is 30
Complex Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Repack,Cyclomatic complexity of the method is 11
Complex Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,WritePack,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,GetStatistics,Cyclomatic complexity of the method is 11
Complex Method,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,Cyclomatic complexity of the method is 15
Complex Method,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,Cyclomatic complexity of the method is 13
Complex Method,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,Encode,Cyclomatic complexity of the method is 10
Complex Method,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,Cyclomatic complexity of the method is 12
Complex Method,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,Delta,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.Pack,ObjectToPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\ObjectToPack.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,WritePack,Cyclomatic complexity of the method is 13
Complex Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,Cyclomatic complexity of the method is 13
Complex Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,Cyclomatic complexity of the method is 15
Complex Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,FindObjectsToPack,Cyclomatic complexity of the method is 48
Complex Method,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,Select,Cyclomatic complexity of the method is 12
Complex Method,NGit.Storage.Pack,BaseSearch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BaseSearch.cs,AddBase,Cyclomatic complexity of the method is 12
Complex Method,NGit.Treewalk,NameConflictTreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\NameConflictTreeWalk.cs,FastMin,Cyclomatic complexity of the method is 12
Complex Method,NGit.Treewalk,NameConflictTreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\NameConflictTreeWalk.cs,CombineDF,Cyclomatic complexity of the method is 12
Complex Method,NGit.Treewalk,TreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\TreeWalk.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,CompareMetadata,Cyclomatic complexity of the method is 8
Complex Method,NGit.Treewalk.Filter,IndexDiffFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\IndexDiffFilter.cs,Include,Cyclomatic complexity of the method is 15
Complex Method,NGit.Util,ChangeIdUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\ChangeIdUtil.cs,InsertId,Cyclomatic complexity of the method is 13
Complex Method,NGit.Util,FS,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS.cs,ReadPipe,Cyclomatic complexity of the method is 9
Complex Method,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Dq,Cyclomatic complexity of the method is 15
Complex Method,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,RawParseUtils,Cyclomatic complexity of the method is 8
Complex Method,NGit.Util,IOUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IOUtil.cs,ReadFully,Cyclomatic complexity of the method is 8
Complex Method,NGit.Util,FileUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FileUtils.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,Format,Cyclomatic complexity of the method is 9
Complex Method,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,FormatDate,Cyclomatic complexity of the method is 8
Complex Method,NGit.Util,GitDateParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateParser.cs,Parse_relative,Cyclomatic complexity of the method is 13
Complex Method,NGit.Util.IO,EolCanonicalizingInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\EolCanonicalizingInputStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,NGit.Util.IO,AutoCRLFOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\AutoCRLFOutputStream.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Format,Cyclomatic complexity of the method is 13
Complex Method,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,RefSpec,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,SideBandInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandInputStream.cs,NeedDataPacket,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,Command,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TrackingRefUpdate.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,FetchProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\FetchProcess.cs,ExecuteImp,Cyclomatic complexity of the method is 22
Complex Method,NGit.Transport,FetchProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\FetchProcess.cs,ExpandAutoFollowTags,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,PushProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PushProcess.cs,PrepareRemoteUpdates,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,ReadAdvertisedRefsImpl,Cyclomatic complexity of the method is 13
Complex Method,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,MarkReachable,Cyclomatic complexity of the method is 10
Complex Method,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,EnableCapabilities,Cyclomatic complexity of the method is 10
Complex Method,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,Cyclomatic complexity of the method is 23
Complex Method,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,ReadStatusReport,Cyclomatic complexity of the method is 11
Complex Method,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,VerifyPrerequisites,Cyclomatic complexity of the method is 12
Complex Method,NGit.Transport,ReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\ReceivePack.cs,Service,Cyclomatic complexity of the method is 10
Complex Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Service,Cyclomatic complexity of the method is 10
Complex Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Negotiate,Cyclomatic complexity of the method is 10
Complex Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ProcessHaveLines,Cyclomatic complexity of the method is 31
Complex Method,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,SendPack,Cyclomatic complexity of the method is 24
Complex Method,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,DownloadObject,Cyclomatic complexity of the method is 17
Complex Method,NGit.Transport,WalkRemoteObjectDatabase,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkRemoteObjectDatabase.cs,ReadPackedRefsImpl,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,WalkPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkPushConnection.cs,Push,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Lookup,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,NGit.Transport,Host,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,CopyFrom,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,NGit.Transport,HttpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,ReadAdvertisedImpl,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,ConfigureRequest,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ResolveDeltasWithExternalBases,Cyclomatic complexity of the method is 9
Complex Method,NGit.Transport,TransportProtocol,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportProtocol.cs,CanHandle,Cyclomatic complexity of the method is 18
Complex Method,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,CheckConnectivity,Cyclomatic complexity of the method is 21
Complex Method,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ValidateCommands,Cyclomatic complexity of the method is 16
Complex Method,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,SendStatusReport,Cyclomatic complexity of the method is 21
Complex Method,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,MergeLeafBucket,Cyclomatic complexity of the method is 8
Complex Method,NGit.Transport.Resolver,FileResolver<C>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport.Resolver\FileResolver.cs,IsUnreasonableName,Cyclomatic complexity of the method is 8
Complex Method,NGit.Blame,BlameGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\BlameGenerator.cs,Next,Cyclomatic complexity of the method is 12
Complex Method,NGit.Blame,BlameGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\BlameGenerator.cs,ProcessOne,Cyclomatic complexity of the method is 8
Complex Method,NGit.Blame,BlameGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\BlameGenerator.cs,ProcessMerge,Cyclomatic complexity of the method is 35
Complex Method,NGit.Blame,Candidate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\Candidate.cs,Blame,Cyclomatic complexity of the method is 11
Complex Method,NGit.Submodule,SubmoduleWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Submodule\SubmoduleWalk.cs,GetSubmoduleRemoteUrl,Cyclomatic complexity of the method is 13
Long Parameter List,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,AbbreviatedObjectId,The method has 6 parameters. Parameters: n' new_1' new_2' new_3' new_4' new_5
Long Parameter List,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,GetEnum,The method has 5 parameters. Parameters: all' section' subsection' name' defaultValue
Long Parameter List,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,ReplaceStringList,The method has 5 parameters. Parameters: srcState' section' subsection' name' values
Long Parameter List,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The method has 5 parameters. Parameters: _enclosing' key' f' stage' newContent
Long Parameter List,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,PathCompare,The method has 7 parameters. Parameters: raw' aPos' aEnd' aMode' bPos' bEnd' bMode
Long Parameter List,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,ObjectId,The method has 5 parameters. Parameters: new_1' new_2' new_3' new_4' new_5
Long Parameter List,NGit,TextProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TextProgressMonitor.cs,Format,The method has 5 parameters. Parameters: s' taskName' cmp' totalWork' pcnt
Long Parameter List,NGit,Tree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Tree.cs,CompareNames,The method has 6 parameters. Parameters: a' nameUTF8' nameStart' nameEnd' lasta' lastb
Long Parameter List,NGit,Tree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Tree.cs,BinarySearch,The method has 5 parameters. Parameters: entries' nameUTF8' nameUTF8last' nameStart' nameEnd
Long Parameter List,NGit,TreeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TreeFormatter.cs,Append,The method has 5 parameters. Parameters: nameBuf' namePos' nameLen' mode' id
Long Parameter List,NGit,TreeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TreeFormatter.cs,Append,The method has 6 parameters. Parameters: nameBuf' namePos' nameLen' mode' idBuf' idPos
Long Parameter List,NGit,ConfigSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigSnapshot.cs,First,The method has 5 parameters. Parameters: s' i' s1' s2' n
Long Parameter List,NGit,ConfigSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigSnapshot.cs,End,The method has 5 parameters. Parameters: s' i' s1' s2' n
Long Parameter List,NGit,ConfigSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigSnapshot.cs,Compare2,The method has 6 parameters. Parameters: aSection' aSubsection' aName' bSection' bSubsection' bName
Long Parameter List,NGit.Api,MergeCommandResult,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommandResult.cs,MergeCommandResult,The method has 6 parameters. Parameters: newHead' base' mergedCommits' mergeStatus' mergeStrategy' lowLevelResults
Long Parameter List,NGit.Api,MergeCommandResult,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommandResult.cs,MergeCommandResult,The method has 7 parameters. Parameters: newHead' base' mergedCommits' mergeStatus' mergeStrategy' lowLevelResults' description
Long Parameter List,NGit.Api,MergeCommandResult,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommandResult.cs,MergeCommandResult,The method has 8 parameters. Parameters: newHead' base' mergedCommits' mergeStatus' mergeStrategy' lowLevelResults' failingPaths' description
Long Parameter List,NGit.Api,_PathEdit_349,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CheckoutCommand.cs,_PathEdit_349,The method has 7 parameters. Parameters: _enclosing' checkoutIndex' blobId' mode' workTree' r' baseArg1
Long Parameter List,NGit.Api,AddNoteCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\AddNoteCommand.cs,CommitNoteMap,The method has 5 parameters. Parameters: walk' map' notesCommit' inserter' msg
Long Parameter List,NGit.Api,RemoveNoteCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RemoveNoteCommand.cs,CommitNoteMap,The method has 5 parameters. Parameters: walk' map' notesCommit' inserter' msg
Long Parameter List,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,IsConflict,The method has 5 parameters. Parameters: stashIndexIter' stashWorkingTreeIter' headIter' indexIter' workingTreeIter
Long Parameter List,NGit.Diff,MyersDiff<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,MyersDiff,The method has 5 parameters. Parameters: edits' cmp' a' b' region
Long Parameter List,NGit.Diff,_LowLevelDiffAlgorithm_114,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,DiffNonCommon,The method has 5 parameters. Parameters: edits' cmp' a' b' region
Long Parameter List,NGit.Diff,HistogramDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiff.cs,DiffNonCommon,The method has 5 parameters. Parameters: edits' cmp' a' b' region
Long Parameter List,NGit.Diff,State<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiff.cs,State,The method has 5 parameters. Parameters: _enclosing' edits' cmp' a' b
Long Parameter List,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,HistogramDiffIndex,The method has 5 parameters. Parameters: maxChainLength' cmp' a' b' r
Long Parameter List,NGit.Diff,LowLevelDiffAlgorithm,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\LowLevelDiffAlgorithm.cs,DiffNonCommon,The method has 5 parameters. Parameters: edits' cmp' a' b' region
Long Parameter List,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,DirCacheCheckout,The method has 5 parameters. Parameters: repo' headCommitTree' dc' mergeCommitTree' workingTree
Long Parameter List,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The method has 6 parameters. Parameters: sharedInfo' infoAt' in' md' smudge_s' smudge_ns
Long Parameter List,NGit.Merge,MergeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeFormatter.cs,FormatMerge,The method has 6 parameters. Parameters: out' res' baseName' oursName' theirsName' charsetName
Long Parameter List,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,Add,The method has 5 parameters. Parameters: path' p' stage' lastMod' len
Long Parameter List,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ProcessEntry,The method has 5 parameters. Parameters: base' ours' theirs' index' work
Long Parameter List,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,UpdateIndex,The method has 5 parameters. Parameters: base' ours' theirs' result' of
Long Parameter List,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,DrawLine,The method has 6 parameters. Parameters: color' x1' y1' x2' y2' width
Long Parameter List,NGit.Revwalk,FooterLine,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\FooterLine.cs,FooterLine,The method has 6 parameters. Parameters: b' e' ks' ke' vs' ve
Long Parameter List,NGit.Storage.File,LargePackedDeltaObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,LargePackedDeltaObject,The method has 5 parameters. Parameters: objectOffset' baseOffset' headerLength' pack' db
Long Parameter List,NGit.Storage.File,_Filter_195,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,_Filter_195,The method has 8 parameters. Parameters: _enclosing' odi' wc' tmp' myId' baseArg1' baseArg2' baseArg3
Long Parameter List,NGit.Storage.File,LargePackedWholeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedWholeObject.cs,LargePackedWholeObject,The method has 6 parameters. Parameters: type' size' objectOffset' headerLength' pack' db
Long Parameter List,NGit.Storage.File,Delta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LocalObjectRepresentation.cs,Delta,The method has 5 parameters. Parameters: next' ofs' sz' hdrLen' baseOffset
Long Parameter List,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,ReadFully,The method has 5 parameters. Parameters: position' dstbuf' dstoff' cnt' curs
Long Parameter List,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Resolve,The method has 5 parameters. Parameters: ref' depth' prefix' loose' packed
Long Parameter List,NGit.Storage.File,_RefWriter_826,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,_RefWriter_826,The method has 5 parameters. Parameters: _enclosing' lck' oldPackedList' refs' baseArg1
Long Parameter List,NGit.Storage.File,LargeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,LargeObject,The method has 5 parameters. Parameters: type' size' path' id' db
Long Parameter List,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,Copy,The method has 5 parameters. Parameters: pack' position' dstbuf' dstoff' cnt
Long Parameter List,NGit.Storage.File,ReflogWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ReflogWriter.cs,Log,The method has 5 parameters. Parameters: refName' oldId' newId' ident' message
Long Parameter List,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,Negmatch,The method has 5 parameters. Parameters: res' resPtr' src' srcPtr' limit
Long Parameter List,NGit.Storage.Pack,DeltaTask,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaTask.cs,DeltaTask,The method has 7 parameters. Parameters: config' reader' dc' pm' batchSize' start' list
Long Parameter List,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,UseCachedPack,The method has 5 parameters. Parameters: walker' keepOnRestart' wantObj' baseObj' pack
Long Parameter List,NGit.Storage.Pack,BaseSearch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BaseSearch.cs,BaseSearch,The method has 5 parameters. Parameters: countingMonitor' bases' objects' edges' or
Long Parameter List,NGit.Treewalk,AbstractTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\AbstractTreeIterator.cs,PathCompare,The method has 5 parameters. Parameters: b' bPos' bEnd' bMode' aPos
Long Parameter List,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The method has 5 parameters. Parameters: source' srcOffset' numSigBytes' destination' destOffset
Long Parameter List,NGit.Util,ChangeIdUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\ChangeIdUtil.cs,ComputeChangeId,The method has 5 parameters. Parameters: treeId' firstParentId' author' committer' message
Long Parameter List,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The method has 6 parameters. Parameters: localDb' srcRef' remoteName' forceUpdate' localName' expectedOldObjectId
Long Parameter List,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The method has 6 parameters. Parameters: localDb' srcRef' remoteName' forceUpdate' localName' expectedOldObjectId
Long Parameter List,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The method has 7 parameters. Parameters: localDb' srcRef' srcId' remoteName' forceUpdate' localName' expectedOldObjectId
Long Parameter List,NGit.Transport,TrackingRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TrackingRefUpdate.cs,TrackingRefUpdate,The method has 5 parameters. Parameters: canForceUpdate' remoteName' localName' oldValue' newValue
Long Parameter List,NGit.Transport,SideBandProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandProgressMonitor.cs,Format,The method has 5 parameters. Parameters: s' taskName' cmp' totalWork' pcnt
Long Parameter List,NGit.Transport,_Thread_233,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,_Thread_233,The method has 5 parameters. Parameters: _enclosing' dst' out_r' in_w' baseArg1
Long Parameter List,NGit.Transport,_Thread_365,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,_Thread_365,The method has 5 parameters. Parameters: _enclosing' dst' out_r' in_w' baseArg1
Long Parameter List,NGit.Transport,CredentialsProviderUserInfo,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\CredentialsProviderUserInfo.cs,PromptKeyboardInteractive,The method has 5 parameters. Parameters: destination' name' instruction' prompt' echo
Long Parameter List,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,CreateSession,The method has 7 parameters. Parameters: credentialsProvider' fs' user' pass' host' port' hc
Long Parameter List,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,CreateSession,The method has 5 parameters. Parameters: hc' user' host' port' fs
Long Parameter List,NGit.Transport,PreUploadHook,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PreUploadHook.cs,OnEndNegotiateRound,The method has 5 parameters. Parameters: up' wants' cntCommon' cntNotFound' ready
Long Parameter List,NGit.Transport,_PreUploadHook_60,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PreUploadHook.cs,OnEndNegotiateRound,The method has 5 parameters. Parameters: up' wants' cntCommon' cntNotFound' ready
Long Parameter List,NGit.Transport,PreUploadHookChain,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PreUploadHookChain.cs,OnEndNegotiateRound,The method has 5 parameters. Parameters: up' wants' cntCommon' cntNotFound' ready
Long Parameter List,NGit.Notes,NonNoteEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NonNoteEntry.cs,PathCompare,The method has 8 parameters. Parameters: aBuf' aPos' aEnd' aMode' bBuf' bPos' bEnd' bMode
Long Parameter List,NGit.Notes,DefaultNoteMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\DefaultNoteMerger.cs,Merge,The method has 5 parameters. Parameters: base' ours' theirs' reader' inserter
Long Parameter List,NGit.Notes,NoteMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMerger.cs,Merge,The method has 5 parameters. Parameters: base' ours' their' reader' inserter
Long Identifier,NGit,ConfigConstants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigConstants.cs,,The length of the parameter CONFIG_KEY_REPO_FORMAT_VERSION is 30.
Long Identifier,NGit,ConfigConstants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigConstants.cs,,The length of the parameter CONFIG_KEY_DELTA_BASE_CACHE_LIMIT is 33.
Long Identifier,NGit,ConfigConstants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigConstants.cs,,The length of the parameter CONFIG_KEY_STREAM_FILE_TRESHOLD is 31.
Long Identifier,NGit,ConfigConstants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigConstants.cs,,The length of the parameter CONFIG_KEY_DEFBRANCHSTARTPOINT is 30.
Long Identifier,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,,The length of the parameter GIT_ALTERNATE_OBJECT_DIRECTORIES_KEY is 36.
Long Identifier,NGit.Storage.Pack,PackConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackConfig.cs,,The length of the parameter DEFAULT_DELTA_SEARCH_WINDOW_SIZE is 32.
Long Identifier,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,,The length of the parameter BYTES_TO_WRITE_BEFORE_CANCEL_CHECK is 34.
Long Identifier,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,,The length of the parameter MAXIMUM_FILE_SIZE_TO_READ_FULLY is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter abbreviationLengthMustBeNonNegative is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter anExceptionOccurredWhileTryingToAddTheIdOfHEAD is 46.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter anSSHSessionHasBeenAlreadyCreated is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter bareRepositoryNoWorkdirAndIndex is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cachedPacksPreventsIndexCreation is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cannotBeRecursiveWhenTreesAreIncluded is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cannotCombineTreeFilterWithRevFilter is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cannotRebaseWithoutCurrentHead is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cannotResolveLocalTrackingRefForUpdating is 40.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cannotWorkWithOtherStagesThanZeroRightNow is 41.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter canOnlyCherryPickCommitsWithOneParent is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter canOnlyRevertCommitsWithOneParent is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter cantFindObjectInReversePackIndexForTheSpecifiedOffset is 53.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter commandWasCalledInTheWrongState is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter commitOnRepoWithoutHEADCurrentlyNotSupported is 44.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter commitAmendOnInitialNotPossible is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter corruptObjectBadStreamCorruptHeader is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter corruptObjectNoTaggerBadHeader is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter corruptObjectPackfileChecksumIncorrect is 38.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter couldNotCheckOutBecauseOfConflicts is 34.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter couldNotDeleteLockFileShouldNotHappen is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter couldNotDeleteTemporaryIndexFileShouldNotHappen is 47.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter couldNotReadObjectWhileParsingCommit is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter couldNotRenameTemporaryIndexFileToIndex is 39.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter createBranchFailedUnknownReason is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter dirCacheDoesNotHaveABackingFile is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter DIRCExtensionNotSupportedByThisVersion is 38.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter downloadCancelledDuringIndexing is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter duplicateRemoteRefUpdateIsIllegal is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter eitherGitDirOrWorkTreeRequired is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter errorInBase64CodeReadingStream is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter errorInvalidProtocolWantedOldNewRef is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter errorOccurredDuringUnpackingOnTheRemoteEnd is 42.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfAddCommand is 42.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfCherryPickCommand is 49.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfCommitCommand is 45.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfFetchCommand is 44.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfLsRemoteCommand is 47.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfMergeCommand is 44.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfPullCommand is 43.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfPushCommand is 43.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfResetCommand is 44.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfRevertCommand is 45.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfRmCommand is 41.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionCaughtDuringExecutionOfTagCommand is 42.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionOccurredDuringAddingOfOptionToALogCommand is 50.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter exceptionOccurredDuringReadingOfGIT_DIR is 39.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter expectedCharacterEncodingGuesses is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter expectedReportForRefNotReceived is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter fileIsTooBigForThisConvenienceMethod is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter hugeIndexesAreNotSupportedByJgitYet is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter hunkHeaderDoesNotMatchBodyLineCountOf is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter isAStaticFlagAndHasNorevWalkInstance is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter lockCountMustBeGreaterOrEqual1 is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter mergeStrategyAlreadyExistsAsDefault is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter mergeStrategyDoesNotSupportHeads is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter mergeUsingStrategyResultedInDescription is 39.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter missingForwardImageInGITBinaryPatch is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter noHEADExistsAndNoExplicitStartingRevisionWasSpecified is 53.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter offsetWrittenDeltaBaseForObjectNotFoundInAPack is 46.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter onlyAlreadyUpToDateAndFastForwardMergesAreAvailable is 51.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter onlyOneOperationCallPerConnectionIsSupported is 44.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter packCorruptedWhileWritingToFilesystem is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter packingCancelledDuringObjectsWriting is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter peerDidNotSupplyACompleteObjectGraph is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter problemWithResolvingPushRefSpecsLocally is 39.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter pullOnRepoWithoutHEADCurrentlyNotSupported is 42.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter pushIsNotSupportedForBundleTransport is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter rawLogMessageDoesNotParseAsLogEntry is 35.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter readingObjectsFromLocalRepositoryFailed is 39.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter remoteConfigHasNoURIAssociated is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter remoteDoesNotSupportSmartHTTPPush is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter renameBranchFailedUnknownReason is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter repositoryState_rebaseInteractive is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter repositoryState_rebaseOrApplyMailbox is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter repositoryState_rebaseWithMerge is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter requiredHashFunctionNotAvailable is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter sequenceTooLargeForDiffAlgorithm is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter shortReadOfOptionalDIRCExtensionExpectedAnotherBytes is 52.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter similarityScoreMustBeWithinBounds is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter sourceRefDoesntResolveToAnyObject is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter sourceRefNotSpecifiedForRefspec is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter startingReadStageWithoutWrittenRequestDataPendingIsNotSupported is 63.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter statelessRPCRequiresOptionToBeEnabled is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter submoduleParentRemoteUrlInvalid is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter symlinkCannotBeWrittenAsTheLinkTarget is 37.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter tagOnRepoWithoutHEADCurrentlyNotSupported is 41.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter transportExceptionMissingAssumed is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter treeIteratorDoesNotSupportRemove is 32.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter treeWalkMustHaveExactlyTwoTrees is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter truncatedHunkLinesMissingForAncestor is 36.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter unknownIndexVersionOrCorruptIndex is 33.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter unsupportedEncryptionAlgorithm is 30.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter unsupportedOperationNotAddAtEnd is 31.
Long Identifier,NGit.Internal,JGitText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Internal\JGitText.cs,,The length of the parameter windowSizeMustBeLesserThanLimit is 31.
Long Statement,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,GetUntrackedFolders,The length of the statement  "			return ((indexDiffFilter == null || indexDiffFilter.GetUntrackedFolders ().Count == 0) ? Sharpen.Collections.EmptySet<string>() : new " is 133.
Long Statement,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,FindNextOffset,The length of the statement  "					throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().cantFindObjectInReversePackIndexForTheSpecifiedOffset" is 122.
Long Statement,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,FindNextOffset,The length of the statement  "					throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().cantFindObjectInReversePackIndexForTheSpecifiedOffset" is 122.
Long Statement,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,FindObjectsToPack,The length of the statement  "			stats.uninterestingObjects = Sharpen.Collections.UnmodifiableSet(new HashSet<ObjectId>(have.UpcastTo<_T1'ObjectId> ()));" is 120.
Long Statement,NGit.Transport,MultiRequestService,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,Execute,The length of the statement  "						throw new TransportException(this._enclosing.uri' JGitText.Get().startingReadStageWithoutWrittenRequestDataPendingIsNotSupported" is 128.
Complex Conditional,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The conditional expression  "typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark"  is complex.
Complex Conditional,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The conditional expression  "typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark"  is complex.
Complex Conditional,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The conditional expression  "added.IsEmpty() && changed.IsEmpty() && removed.IsEmpty() && missing.IsEmpty( 				) && modified.IsEmpty() && untracked.IsEmpty()"  is complex.
Complex Conditional,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The conditional expression  "(dashg + 5) < revstr.Length && 0 <= dashg && IsHex(revstr[dashg + 2]) && IsHex 				(revstr[dashg + 3]) && IsAllHex(revstr' dashg + 4)"  is complex.
Complex Conditional,NGit,TreeEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TreeEntry.cs,SetId,The conditional expression  "(id == null && n != null) || (id != null && n == null) || !id.Equals(n)"  is complex.
Complex Conditional,NGit.Api,CommitCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CommitCommand.cs,CreateTemporaryIndex,The conditional expression  "emptyCommit && (hTree == null || !hTree.IdEqual(fTree) || hTree.EntryRawMode  							!= fTree.EntryRawMode)"  is complex.
Complex Conditional,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,CheckParameters,The conditional expression  "s != RepositoryState.REBASING_INTERACTIVE && s != RepositoryState.REBASING && 					 s != RepositoryState.REBASING_REBASING && s != RepositoryState.REBASING_MERGE"  is complex.
Complex Conditional,NGit.Api,CheckoutCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CheckoutCommand.cs,ProcessOptions,The conditional expression  "(!checkoutAllPaths && paths.IsEmpty()) && (name == null || !Repository.IsValidRefName 				(Constants.R_HEADS + name))"  is complex.
Complex Conditional,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,IsConflict,The conditional expression  "indexDirty && stashIndexIter != null && indexIter != null && !IsEqualEntry(stashIndexIter 				' indexIter)"  is complex.
Complex Conditional,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,IsConflict,The conditional expression  "workingTreeDirty && stashWorkingTreeIter != null && workingTreeIter != null && 				 !IsEqualEntry(stashWorkingTreeIter' workingTreeIter)"  is complex.
Complex Conditional,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,CreateFormatResult,The conditional expression  "aRaw == BINARY || bRaw == BINARY || RawText.IsBinary(aRaw) || RawText.IsBinary 					(bRaw)"  is complex.
Complex Conditional,NGit.Diff,RawTextComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,ReduceCommonStartEnd,The conditional expression  "aPtr < 0 || bPtr < 0 || aEnd > aRaw.Length || bEnd > bRaw.Length"  is complex.
Complex Conditional,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,ProcessEntry,The conditional expression  "((ffMask & unchecked((int)(0x222))) != unchecked((int)(0x000))) && (((ffMask  				& unchecked((int)(0x00F))) == unchecked((int)(0x00D))) || ((ffMask & unchecked(( 				int)(0x0F0))) == unchecked((int)(0x0D0))) || ((ffMask & unchecked((int)(0xF00))) 				 == unchecked((int)(0xD00))))"  is complex.
Complex Conditional,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ProcessEntry,The conditional expression  "((modeO != 0 && !tw.IdEqual(T_BASE' T_OURS)) || (modeT != 0 && !tw.IdEqual(T_BASE 						' T_THEIRS)))"  is complex.
Complex Conditional,NGit.Patch,HunkHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\HunkHeader.cs,ParseBody,The conditional expression  "last < end && nContext + old.nDeleted - 1 == old.lineCount && nContext + old. 				nAdded == newLineCount && RawParseUtils.Match(buf' last' NGit.Patch.Patch.SIG_FOOTER 				) >= 0"  is complex.
Complex Conditional,NGit.Patch,Patch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\Patch.cs,ParseHunks,The conditional expression  "fh.GetHunks().IsEmpty() && BIN_TRAILER.Length < eol - c && RawParseUtils.Match 					(buf' eol - BIN_TRAILER.Length' BIN_TRAILER) >= 0 && MatchAny(buf' c' BIN_HEADERS 					)"  is complex.
Complex Conditional,NGit.Revwalk,RevCommitList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommitList.cs,FillTo,The conditional expression  "walker == null || commitToLoad == null || (highMark > 0 && size > highMark)"  is complex.
Complex Conditional,NGit.Revwalk,RevCommitList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommitList.cs,FillTo,The conditional expression  "(highMark == 0 || size <= highMark) && index < BLOCK_SIZE && !c.Equals(commitToLoad 					)"  is complex.
Complex Conditional,NGit.Storage.File,FileBasedConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileBasedConfig.cs,Load,The conditional expression  "@in.Length >= 3 && @in[0] == unchecked((byte)unchecked((int)(0xEF))) && @in[1 						] == unchecked((byte)unchecked((int)(0xBB))) && @in[2] == unchecked((byte)unchecked( 						(int)(0xBF)))"  is complex.
Complex Conditional,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,FindObjectsToPack,The conditional expression  "obj_1 is RevCommit && obj_1.Has(include) && !obj_1.Has(RevFlag.UNINTERESTING) 								 && !obj_1.Has(added)"  is complex.
Complex Conditional,NGit.Treewalk,NameConflictTreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\NameConflictTreeWalk.cs,FastMin,The conditional expression  "fastMinHasMatch && IsTree(minRef) && !IsTree(t) && NameEqual(minRef' t)"  is complex.
Complex Conditional,NGit.Treewalk,NameConflictTreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\NameConflictTreeWalk.cs,FastMin,The conditional expression  "fastMinHasMatch && IsTree(t) && !IsTree(minRef) && NameEqual(t' minRef)"  is complex.
Complex Conditional,NGit.Util,FS,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS.cs,ReadPipe,The conditional expression  "rc == 0 && r != null && r.Length > 0 && !gooblerFail.Get()"  is complex.
Complex Conditional,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The conditional expression  "emailB >= raw.Length || raw[emailB] == '\n' || (emailE >= raw.Length - 1 && raw 				[emailE - 1] != '>')"  is complex.
Complex Conditional,NGit.Util,StringUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\StringUtils.cs,ToBooleanOrNull,The conditional expression  "EqualsIgnoreCase("yes"' stringValue) || EqualsIgnoreCase("true"' stringValue) 				 || EqualsIgnoreCase("1"' stringValue) || EqualsIgnoreCase("on"' stringValue)"  is complex.
Complex Conditional,NGit.Util,StringUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\StringUtils.cs,ToBooleanOrNull,The conditional expression  "EqualsIgnoreCase("no"' stringValue) || EqualsIgnoreCase("false"' stringValue) 					 || EqualsIgnoreCase("0"' stringValue) || EqualsIgnoreCase("off"' stringValue)"  is complex.
Complex Conditional,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Escape,The conditional expression  "b <= 32 || (encodeNonAscii && b > 127) || b == '%' || (escapeReservedChars && 					 reservedChars.Get(b))"  is complex.
Complex Conditional,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,CleanLeadingSlashes,The conditional expression  "p.Length >= 3 && p[0] == '/' && p[2] == ':' && (p[1] >= 'A' && p[1] <= 'Z' || 				 p[1] >= 'a' && p[1] <= 'z')"  is complex.
Complex Conditional,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,CleanLeadingSlashes,The conditional expression  "s != null && p.Length >= 2 && p[0] == '/' && p[1] == '~'"  is complex.
Complex Conditional,NGit.Transport,_TransportProtocol_64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportBundleFile.cs,CanHandle,The conditional expression  "uri.GetPath() == null || uri.GetPort() > 0 || uri.GetUser() != null || uri.GetPass 					() != null || uri.GetHost() != null || (uri.GetScheme() != null && !this.GetSchemes 					().Contains(uri.GetScheme()))"  is complex.
Complex Conditional,NGit.Transport,_TransportProtocol_96,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,CanHandle,The conditional expression  "uri.GetPath() == null || uri.GetPort() > 0 || uri.GetUser() != null || uri.GetPass 					() != null || uri.GetHost() != null || (uri.GetScheme() != null && !this.GetSchemes 					().Contains(uri.GetScheme()))"  is complex.
Complex Conditional,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,GetSession,The conditional expression  "credentialsProvider != null && e.InnerException == null && e.Message.Equals("Auth fail" 								) && retries < 3"  is complex.
Complex Conditional,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ValidateCommands,The conditional expression  "cmd.GetType() == ReceiveCommand.Type.DELETE && @ref != null && !ObjectId.ZeroId 					.Equals(cmd.GetOldId()) && !@ref.GetObjectId().Equals(cmd.GetOldId())"  is complex.
Virtual Method Call from Constructor,NGit,BlobBasedConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BlobBasedConfig.cs,BlobBasedConfig,The constructor "BlobBasedConfig" calls a virtual method "FromText".
Virtual Method Call from Constructor,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,Constants,The constructor "Constants" calls a virtual method "GetDigestLength".
Virtual Method Call from Constructor,NGit,CoreConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\CoreConfig.cs,CoreConfig,The constructor "CoreConfig" calls a virtual method "GetInt".
Virtual Method Call from Constructor,NGit,CoreConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\CoreConfig.cs,CoreConfig,The constructor "CoreConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit,CoreConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\CoreConfig.cs,CoreConfig,The constructor "CoreConfig" calls a virtual method "GetString".
Virtual Method Call from Constructor,NGit,FileTreeEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\FileTreeEntry.cs,FileTreeEntry,The constructor "FileTreeEntry" calls a virtual method "SetExecutable".
Virtual Method Call from Constructor,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,GitIndex,The constructor "GitIndex" calls a virtual method "GetIndexFile".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetBits".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetBits".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "NewObjectInserter".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Insert".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Close".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Flush".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Release".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetStage".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetBits".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetBits".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "NewObjectInserter".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Insert".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Close".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Flush".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Release".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetStage".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetBits".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetMode".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetSize".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "Open".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetId".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetId".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetFullName".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetStage".
Virtual Method Call from Constructor,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The constructor "Entry" calls a virtual method "GetStage".
Virtual Method Call from Constructor,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,IndexDiff,The constructor "IndexDiff" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,IndexDiff,The constructor "IndexDiff" calls a virtual method "ParseTree".
Virtual Method Call from Constructor,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,IndexDiff,The constructor "IndexDiff" calls a virtual method "ParseTree".
Virtual Method Call from Constructor,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,MutableObjectId,The constructor "MutableObjectId" calls a virtual method "FromObjectId".
Virtual Method Call from Constructor,NGit,SmallStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectStream.cs,SmallStream,The constructor "SmallStream" calls a virtual method "GetType".
Virtual Method Call from Constructor,NGit,SmallStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectStream.cs,SmallStream,The constructor "SmallStream" calls a virtual method "GetCachedBytes".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetEmailAddress".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetCurrentTime".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetEmailAddress".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetEmailAddress".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetEmailAddress".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetTimezone".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetCommitterName".
Virtual Method Call from Constructor,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,PersonIdent,The constructor "PersonIdent" calls a virtual method "GetCommitterEmail".
Virtual Method Call from Constructor,NGit,RefRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,RefRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,RefRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "SetRefLogMessage".
Virtual Method Call from Constructor,NGit,RefRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,RefRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RefRename.cs,RefRename,The constructor "RefRename" calls a virtual method "GetName".
Virtual Method Call from Constructor,NGit,TransferConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TransferConfig.cs,TransferConfig,The constructor "TransferConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Api,MergeCommandResult,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\MergeCommandResult.cs,MergeCommandResult,The constructor "MergeCommandResult" calls a virtual method "AddConflict".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetAdded".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetChanged".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetRemoved".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetMissing".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetModified".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetUntracked".
Virtual Method Call from Constructor,NGit.Api,Status,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseResult.cs,Status,The constructor "Status" calls a virtual method "GetConflicting".
Virtual Method Call from Constructor,NGit.Diff,DiffConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffConfig.cs,DiffConfig,The constructor "DiffConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Diff,DiffConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffConfig.cs,DiffConfig,The constructor "DiffConfig" calls a virtual method "GetString".
Virtual Method Call from Constructor,NGit.Diff,DiffConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffConfig.cs,DiffConfig,The constructor "DiffConfig" calls a virtual method "GetInt".
Virtual Method Call from Constructor,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,RenameDetector,The constructor "RenameDetector" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,RenameDetector,The constructor "RenameDetector" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,RenameDetector,The constructor "RenameDetector" calls a virtual method "GetRenameLimit".
Virtual Method Call from Constructor,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,RenameDetector,The constructor "RenameDetector" calls a virtual method "Reset".
Virtual Method Call from Constructor,NGit.Diff,PatchIdDiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\PatchIdDiffFormatter.cs,PatchIdDiffFormatter,The constructor "PatchIdDiffFormatter" calls a virtual method "GetOutputStream".
Virtual Method Call from Constructor,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,DirCache,The constructor "DirCache" calls a virtual method "Clear".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheBuildIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheBuildIterator.cs,DirCacheBuildIterator,The constructor "DirCacheBuildIterator" calls a virtual method "GetDirCache".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Write".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Read".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Write".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The constructor "DirCacheEntry" calls a virtual method "Update".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheIterator.cs,DirCacheIterator,The constructor "DirCacheIterator" calls a virtual method "GetCacheTree".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheIterator.cs,DirCacheIterator,The constructor "DirCacheIterator" calls a virtual method "GetEntrySpan".
Virtual Method Call from Constructor,NGit.Dircache,DirCacheIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheIterator.cs,DirCacheIterator,The constructor "DirCacheIterator" calls a virtual method "GetEntrySpan".
Virtual Method Call from Constructor,NGit.Errors,CorruptObjectException,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Errors\CorruptObjectException.cs,CorruptObjectException,The constructor "CorruptObjectException" calls a virtual method "ToObjectId".
Virtual Method Call from Constructor,NGit.Errors,LargeObjectException,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Errors\LargeObjectException.cs,LargeObjectException,The constructor "LargeObjectException" calls a virtual method "SetObjectId".
Virtual Method Call from Constructor,NGit.Errors,TransportException,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Errors\TransportException.cs,TransportException,The constructor "TransportException" calls a virtual method "SetPass".
Virtual Method Call from Constructor,NGit.Errors,TransportException,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Errors\TransportException.cs,TransportException,The constructor "TransportException" calls a virtual method "SetPass".
Virtual Method Call from Constructor,NGit.Errors,UnsupportedCredentialItem,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Errors\UnsupportedCredentialItem.cs,UnsupportedCredentialItem,The constructor "UnsupportedCredentialItem" calls a virtual method "SetPass".
Virtual Method Call from Constructor,NGit.Merge,Merger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\Merger.cs,Merger,The constructor "Merger" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ResolveMerger,The constructor "ResolveMerger" calls a virtual method "GetEnum".
Virtual Method Call from Constructor,NGit.Merge,ResolveMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ResolveMerger.cs,ResolveMerger,The constructor "ResolveMerger" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,FileHeader,The constructor "FileHeader" calls a virtual method "ParseGitFileName".
Virtual Method Call from Constructor,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,FileHeader,The constructor "FileHeader" calls a virtual method "ParseGitHeaders".
Virtual Method Call from Constructor,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,FileHeader,The constructor "FileHeader" calls a virtual method "AddHunk".
Virtual Method Call from Constructor,NGit.Revplot,PlotWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotWalk.cs,PlotWalk,The constructor "PlotWalk" calls a virtual method "Sort".
Virtual Method Call from Constructor,NGit.Revplot,PlotWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotWalk.cs,PlotWalk,The constructor "PlotWalk" calls a virtual method "GetAllRefsByPeeledObjectId".
Virtual Method Call from Constructor,NGit.Revwalk,BlockRevQueue,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "OutputType".
Virtual Method Call from Constructor,NGit.Revwalk,BlockRevQueue,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "ShareFreeList".
Virtual Method Call from Constructor,NGit.Revwalk,BlockRevQueue,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "Next".
Virtual Method Call from Constructor,NGit.Revwalk,BlockRevQueue,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BlockRevQueue.cs,BlockRevQueue,The constructor "BlockRevQueue" calls a virtual method "Add".
Virtual Method Call from Constructor,NGit.Revwalk,InitialGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BoundaryGenerator.cs,InitialGenerator,The constructor "InitialGenerator" calls a virtual method "ShareFreeList".
Virtual Method Call from Constructor,NGit.Revwalk,DateRevQueue,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DateRevQueue.cs,DateRevQueue,The constructor "DateRevQueue" calls a virtual method "Next".
Virtual Method Call from Constructor,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk,RewriteTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RewriteTreeFilter.cs,RewriteTreeFilter,The constructor "RewriteTreeFilter" calls a virtual method "ShouldBeRecursive".
Virtual Method Call from Constructor,NGit.Revwalk,TopoSortGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\TopoSortGenerator.cs,TopoSortGenerator,The constructor "TopoSortGenerator" calls a virtual method "OutputType".
Virtual Method Call from Constructor,NGit.Revwalk,TopoSortGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\TopoSortGenerator.cs,TopoSortGenerator,The constructor "TopoSortGenerator" calls a virtual method "ShareFreeList".
Virtual Method Call from Constructor,NGit.Revwalk,TopoSortGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\TopoSortGenerator.cs,TopoSortGenerator,The constructor "TopoSortGenerator" calls a virtual method "Next".
Virtual Method Call from Constructor,NGit.Revwalk,DepthGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthGenerator.cs,DepthGenerator,The constructor "DepthGenerator" calls a virtual method "ShareFreeList".
Virtual Method Call from Constructor,NGit.Revwalk,DepthGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthGenerator.cs,DepthGenerator,The constructor "DepthGenerator" calls a virtual method "Next".
Virtual Method Call from Constructor,NGit.Revwalk,DepthGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthGenerator.cs,DepthGenerator,The constructor "DepthGenerator" calls a virtual method "GetDepth".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,Binary,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Binary,The constructor "Binary" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,Binary,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Binary,The constructor "Binary" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,Binary,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Binary,The constructor "Binary" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,Binary,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Binary,The constructor "Binary" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,List,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,List,The constructor "List" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Revwalk.Filter,List,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,List,The constructor "List" calls a virtual method "RequiresCommitBody".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "OpenSystemConfig".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "OpenUserConfig".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "AddChangeListener".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "GetLong".
Virtual Method Call from Constructor,NGit.Storage.File,FileRepository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileRepository.cs,FileRepository,The constructor "FileRepository" calls a virtual method "GetIndexFile".
Virtual Method Call from Constructor,NGit.Storage.File,ObjectDirectoryInserter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryInserter.cs,ObjectDirectoryInserter,The constructor "ObjectDirectoryInserter" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Storage.File,EntriesIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndex.cs,EntriesIterator,The constructor "EntriesIterator" calls a virtual method "InitEntry".
Virtual Method Call from Constructor,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,PackReverseIndex,The constructor "PackReverseIndex" calls a virtual method "GetObjectCount".
Virtual Method Call from Constructor,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,PackReverseIndex,The constructor "PackReverseIndex" calls a virtual method "GetOffset64Count".
Virtual Method Call from Constructor,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,PackReverseIndex,The constructor "PackReverseIndex" calls a virtual method "GetOffset".
Virtual Method Call from Constructor,NGit.Storage.File,PackReverseIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackReverseIndex.cs,PackReverseIndex,The constructor "PackReverseIndex" calls a virtual method "GetOffset".
Virtual Method Call from Constructor,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,RefDirectory,The constructor "RefDirectory" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,RefDirectory,The constructor "RefDirectory" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The constructor "WindowCache" calls a virtual method "GetPackedGitOpenFiles".
Virtual Method Call from Constructor,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The constructor "WindowCache" calls a virtual method "GetPackedGitLimit".
Virtual Method Call from Constructor,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The constructor "WindowCache" calls a virtual method "IsPackedGitMMAP".
Virtual Method Call from Constructor,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The constructor "WindowCache" calls a virtual method "GetPackedGitWindowSize".
Virtual Method Call from Constructor,NGit.Storage.File,WriteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WriteConfig.cs,WriteConfig,The constructor "WriteConfig" calls a virtual method "GetCompression".
Virtual Method Call from Constructor,NGit.Storage.File,WriteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WriteConfig.cs,WriteConfig,The constructor "WriteConfig" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Storage.File,WriteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WriteConfig.cs,WriteConfig,The constructor "WriteConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Storage.File,WriteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WriteConfig.cs,WriteConfig,The constructor "WriteConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,ObjectDirectoryPackParser,The constructor "ObjectDirectoryPackParser" calls a virtual method "GetPackIndexVersion".
Virtual Method Call from Constructor,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,ObjectDirectoryPackParser,The constructor "ObjectDirectoryPackParser" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,ObjectDirectoryPackParser,The constructor "ObjectDirectoryPackParser" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Storage.File,CheckoutEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\CheckoutEntry.cs,CheckoutEntry,The constructor "CheckoutEntry" calls a virtual method "GetComment".
Virtual Method Call from Constructor,NGit.Storage.File,ReflogWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ReflogWriter.cs,ReflogWriter,The constructor "ReflogWriter" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Storage.File,ReflogWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ReflogWriter.cs,ReflogWriter,The constructor "ReflogWriter" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Storage.Pack,DeltaCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaCache.cs,DeltaCache,The constructor "DeltaCache" calls a virtual method "GetDeltaCacheSize".
Virtual Method Call from Constructor,NGit.Storage.Pack,DeltaCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaCache.cs,DeltaCache,The constructor "DeltaCache" calls a virtual method "GetDeltaCacheLimit".
Virtual Method Call from Constructor,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeltaWindow,The constructor "DeltaWindow" calls a virtual method "GetDeltaSearchWindowSize".
Virtual Method Call from Constructor,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeltaWindow,The constructor "DeltaWindow" calls a virtual method "GetDeltaSearchMemoryLimit".
Virtual Method Call from Constructor,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeltaWindow,The constructor "DeltaWindow" calls a virtual method "GetMaxDeltaDepth".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackConfig.cs,PackConfig,The constructor "PackConfig" calls a virtual method "FromConfig".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackConfig.cs,PackConfig,The constructor "PackConfig" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackConfig.cs,PackConfig,The constructor "PackConfig" calls a virtual method "FromConfig".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,PackWriter,The constructor "PackWriter" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,PackWriter,The constructor "PackWriter" calls a virtual method "IsDeltaBaseAsOffset".
Virtual Method Call from Constructor,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,PackWriter,The constructor "PackWriter" calls a virtual method "IsReuseDeltas".
Virtual Method Call from Constructor,NGit.Storage.Pack,MutableState,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,MutableState,The constructor "MutableState" calls a virtual method "IsDeltaCompress".
Virtual Method Call from Constructor,NGit.Storage.Pack,MutableState,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,MutableState,The constructor "MutableState" calls a virtual method "GetThreads".
Virtual Method Call from Constructor,NGit.Storage.Pack,MutableState,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,MutableState,The constructor "MutableState" calls a virtual method "GetDeltaSearchMemoryLimit".
Virtual Method Call from Constructor,NGit.Storage.Pack,MutableState,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,MutableState,The constructor "MutableState" calls a virtual method "GetBigFileThreshold".
Virtual Method Call from Constructor,NGit.Treewalk,AbstractTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\AbstractTreeIterator.cs,AbstractTreeIterator,The constructor "AbstractTreeIterator" calls a virtual method "GrowPath".
Virtual Method Call from Constructor,NGit.Treewalk,CanonicalTreeParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\CanonicalTreeParser.cs,CanonicalTreeParser,The constructor "CanonicalTreeParser" calls a virtual method "Reset".
Virtual Method Call from Constructor,NGit.Treewalk,CanonicalTreeParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\CanonicalTreeParser.cs,CanonicalTreeParser,The constructor "CanonicalTreeParser" calls a virtual method "Reset".
Virtual Method Call from Constructor,NGit.Treewalk,FileTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileTreeIterator,The constructor "FileTreeIterator" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Treewalk,FileTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileTreeIterator,The constructor "FileTreeIterator" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Treewalk,FileTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileTreeIterator,The constructor "FileTreeIterator" calls a virtual method "InitRootIterator".
Virtual Method Call from Constructor,NGit.Treewalk,FileTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileTreeIterator,The constructor "FileTreeIterator" calls a virtual method "Init".
Virtual Method Call from Constructor,NGit.Treewalk,FileTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileTreeIterator,The constructor "FileTreeIterator" calls a virtual method "Init".
Virtual Method Call from Constructor,NGit.Treewalk,FileEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\FileTreeIterator.cs,FileEntry,The constructor "FileEntry" calls a virtual method "CanExecute".
Virtual Method Call from Constructor,NGit.Treewalk,NameConflictTreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\NameConflictTreeWalk.cs,NameConflictTreeWalk,The constructor "NameConflictTreeWalk" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Treewalk,TreeWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\TreeWalk.cs,TreeWalk,The constructor "TreeWalk" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Treewalk,WorkingTreeOptions,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeOptions.cs,WorkingTreeOptions,The constructor "WorkingTreeOptions" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Treewalk,WorkingTreeOptions,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeOptions.cs,WorkingTreeOptions,The constructor "WorkingTreeOptions" calls a virtual method "GetEnum".
Virtual Method Call from Constructor,NGit.Util,TemporaryBuffer,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\TemporaryBuffer.cs,TemporaryBuffer,The constructor "TemporaryBuffer" calls a virtual method "Reset".
Virtual Method Call from Constructor,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,GitDateFormatter,The constructor "GitDateFormatter" calls a virtual method "GetDateTimeInstance".
Virtual Method Call from Constructor,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,GitDateFormatter,The constructor "GitDateFormatter" calls a virtual method "GetSimpleDateFormat".
Virtual Method Call from Constructor,NGit.Util.IO,MessageWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\MessageWriter.cs,MessageWriter,The constructor "MessageWriter" calls a virtual method "GetRawStream".
Virtual Method Call from Constructor,NGit.Util.IO,UnionInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\UnionInputStream.cs,UnionInputStream,The constructor "UnionInputStream" calls a virtual method "Add".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetString".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetString".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetString".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,RemoteConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteConfig.cs,RemoteConfig,The constructor "RemoteConfig" calls a virtual method "GetInt".
Virtual Method Call from Constructor,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,RefSpec,The constructor "RefSpec" calls a virtual method "IsForceUpdate".
Virtual Method Call from Constructor,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,RefSpec,The constructor "RefSpec" calls a virtual method "IsWildcard".
Virtual Method Call from Constructor,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,RefSpec,The constructor "RefSpec" calls a virtual method "GetSource".
Virtual Method Call from Constructor,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,RefSpec,The constructor "RefSpec" calls a virtual method "GetDestination".
Virtual Method Call from Constructor,NGit.Transport,Transport,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Transport.cs,Transport,The constructor "Transport" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Transport,Transport,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Transport.cs,Transport,The constructor "Transport" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Transport,Transport,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Transport.cs,Transport,The constructor "Transport" calls a virtual method "IsFsckObjects".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "Resolve".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "UpdateRef".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "SetForceUpdate".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "SetRefLogMessage".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "SetNewObjectId".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "GetOldObjectId".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "GetOldObjectId".
Virtual Method Call from Constructor,NGit.Transport,RemoteRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RemoteRefUpdate.cs,RemoteRefUpdate,The constructor "RemoteRefUpdate" calls a virtual method "GetLocalName".
Virtual Method Call from Constructor,NGit.Transport,PushProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PushProcess.cs,PushProcess,The constructor "PushProcess" calls a virtual method "GetRemoteName".
Virtual Method Call from Constructor,NGit.Transport,PushProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PushProcess.cs,PushProcess,The constructor "PushProcess" calls a virtual method "GetRemoteName".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "GetTagOpt".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "IsFetchThin".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "Carry".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "Carry".
Virtual Method Call from Constructor,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,BasePackFetchConnection,The constructor "BasePackFetchConnection" calls a virtual method "Carry".
Virtual Method Call from Constructor,NGit.Transport,FetchConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,FetchConfig,The constructor "FetchConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,BasePackPushConnection,The constructor "BasePackPushConnection" calls a virtual method "IsPushThin".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "SetRetainBody".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,UploadPack,The constructor "UploadPack" calls a virtual method "Carry".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "IsCheckFetchedObjects".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "NewObjectInserter".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "SetRetainBody".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The constructor "WalkFetchConnection" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Transport,WalkPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkPushConnection.cs,WalkPushConnection,The constructor "WalkPushConnection" calls a virtual method "GetURI".
Virtual Method Call from Constructor,NGit.Transport,_DaemonService_143,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,_DaemonService_143,The constructor "_DaemonService_143" calls a virtual method "SetEnabled".
Virtual Method Call from Constructor,NGit.Transport,_DaemonService_158,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,_DaemonService_158,The constructor "_DaemonService_158" calls a virtual method "SetEnabled".
Virtual Method Call from Constructor,NGit.Transport,ServiceConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\DaemonService.cs,ServiceConfig,The constructor "ServiceConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,ServiceConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\DaemonService.cs,ServiceConfig,The constructor "ServiceConfig" calls a virtual method "IsEnabled".
Virtual Method Call from Constructor,NGit.Transport,TcpFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpFetchConnection,The constructor "TcpFetchConnection" calls a virtual method "OpenConnection".
Virtual Method Call from Constructor,NGit.Transport,TcpFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpFetchConnection,The constructor "TcpFetchConnection" calls a virtual method "Service".
Virtual Method Call from Constructor,NGit.Transport,TcpFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpFetchConnection,The constructor "TcpFetchConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,TcpPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpPushConnection,The constructor "TcpPushConnection" calls a virtual method "OpenConnection".
Virtual Method Call from Constructor,NGit.Transport,TcpPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpPushConnection,The constructor "TcpPushConnection" calls a virtual method "Service".
Virtual Method Call from Constructor,NGit.Transport,TcpPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,TcpPushConnection,The constructor "TcpPushConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,TransportHttp,The constructor "TransportHttp" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,TransportHttp,The constructor "TransportHttp" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Transport,HttpConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,HttpConfig,The constructor "HttpConfig" calls a virtual method "GetInt".
Virtual Method Call from Constructor,NGit.Transport,HttpConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,HttpConfig,The constructor "HttpConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,SmartHttpFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,SmartHttpFetchConnection,The constructor "SmartHttpFetchConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,SmartHttpPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,SmartHttpPushConnection,The constructor "SmartHttpPushConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,InternalLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,InternalLocalFetchConnection,The constructor "InternalLocalFetchConnection" calls a virtual method "Close".
Virtual Method Call from Constructor,NGit.Transport,InternalLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,InternalLocalFetchConnection,The constructor "InternalLocalFetchConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "SetMessageWriter".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "Spawn".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "GetOptionUploadPack".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "GetErrorStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "GetRawStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "GetInputStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "GetOutputStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalFetchConnection,The constructor "ForkLocalFetchConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,InternalLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,InternalLocalPushConnection,The constructor "InternalLocalPushConnection" calls a virtual method "Close".
Virtual Method Call from Constructor,NGit.Transport,InternalLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,InternalLocalPushConnection,The constructor "InternalLocalPushConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "SetMessageWriter".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "Spawn".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "GetOptionReceivePack".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "GetErrorStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "GetRawStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "GetInputStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "GetOutputStream".
Virtual Method Call from Constructor,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,ForkLocalPushConnection,The constructor "ForkLocalPushConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,TransportGitSsh,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,TransportGitSsh,The constructor "TransportGitSsh" calls a virtual method "SetSshSessionFactory".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetSession".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "CommandFor".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetOptionUploadPack".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetTimeout".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "SetMessageWriter".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetErrorStream".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetRawStream".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetInputStream".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetOutputStream".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetMessages".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "CheckExecFailure".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "ExitValue".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "GetOptionUploadPack".
Virtual Method Call from Constructor,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshFetchConnection,The constructor "SshFetchConnection" calls a virtual method "CleanNotFound".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetSession".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "CommandFor".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetOptionReceivePack".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetTimeout".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "SetMessageWriter".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetErrorStream".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetRawStream".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetInputStream".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetOutputStream".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "ReadAdvertisedRefs".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetMessages".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "CheckExecFailure".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "ExitValue".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "GetOptionReceivePack".
Virtual Method Call from Constructor,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,SshPushConnection,The constructor "SshPushConnection" calls a virtual method "CleanNotFound".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "NewSftp".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Cd".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Cd".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Pwd".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "NewSftp".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Cd".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Cd".
Virtual Method Call from Constructor,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The constructor "SftpObjectDB" calls a virtual method "Pwd".
Virtual Method Call from Constructor,NGit.Transport,TransferConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransferConfig.cs,TransferConfig,The constructor "TransferConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,PackParser,The constructor "PackParser" calls a virtual method "NewCachedDatabase".
Virtual Method Call from Constructor,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,PackParser,The constructor "PackParser" calls a virtual method "NewReader".
Virtual Method Call from Constructor,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,JschProcess,The constructor "JschProcess" calls a virtual method "OpenChannel".
Virtual Method Call from Constructor,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,JschProcess,The constructor "JschProcess" calls a virtual method "SetCommand".
Virtual Method Call from Constructor,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,JschProcess,The constructor "JschProcess" calls a virtual method "Connect".
Virtual Method Call from Constructor,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,JschProcess,The constructor "JschProcess" calls a virtual method "IsConnected".
Virtual Method Call from Constructor,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,BaseReceivePack,The constructor "BaseReceivePack" calls a virtual method "Get".
Virtual Method Call from Constructor,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,BaseReceivePack,The constructor "BaseReceivePack" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Transport,ReceiveConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceiveConfig,The constructor "ReceiveConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,ReceiveConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceiveConfig,The constructor "ReceiveConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,ReceiveConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceiveConfig,The constructor "ReceiveConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Transport,ReceiveConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceiveConfig,The constructor "ReceiveConfig" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,NoteMapMerger,The constructor "NoteMapMerger" calls a virtual method "NewObjectReader".
Virtual Method Call from Constructor,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,NoteMapMerger,The constructor "NoteMapMerger" calls a virtual method "NewObjectInserter".
Virtual Method Call from Constructor,NGit.Blame,BlameGenerator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\BlameGenerator.cs,BlameGenerator,The constructor "BlameGenerator" calls a virtual method "SetFollowFileRenames".
Virtual Method Call from Constructor,NGit.Submodule,SubmoduleWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Submodule\SubmoduleWalk.cs,SubmoduleWalk,The constructor "SubmoduleWalk" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,RevWalk,The constructor "RevWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Virtual Method Call from Constructor,NGit.Revwalk.Depthwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\DepthWalk.cs,ObjectWalk,The constructor "ObjectWalk" calls a virtual method "NewFlag".
Empty Catch Block,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,FindGitDir,The method has an empty catch block.
Empty Catch Block,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,GetEnum,The method has an empty catch block.
Empty Catch Block,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The method has an empty catch block.
Empty Catch Block,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,GetRepositoryState,The method has an empty catch block.
Empty Catch Block,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,GetRepositoryState,The method has an empty catch block.
Empty Catch Block,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,Format,The method has an empty catch block.
Empty Catch Block,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,Read,The method has an empty catch block.
Empty Catch Block,NGit.Ignore,IgnoreRule,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Ignore\IgnoreRule.cs,Setup,The method has an empty catch block.
Empty Catch Block,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,GetScriptText,The method has an empty catch block.
Empty Catch Block,NGit.Revplot,PlotRefComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotWalk.cs,Compare,The method has an empty catch block.
Empty Catch Block,NGit.Revwalk,RevCommitList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommitList.cs,ClearFlag,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,CachedObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\CachedObjectDirectory.cs,CachedObjectDirectory,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LargePackedDeltaObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,GetType,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LargePackedDeltaObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,GetSize,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LargePackedDeltaObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,GetSize,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,Unlock,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,CopyCurrentContent,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,Unlock,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,Unlock,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,DoClose,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,PackIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndex.cs,Open,The method has an empty catch block.
Empty Catch Block,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,Parse,The method has an empty catch block.
Empty Catch Block,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,SafeClose,The method has an empty catch block.
Empty Catch Block,NGit.Util,FS,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS.cs,ReadPipe,The method has an empty catch block.
Empty Catch Block,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseBase10,The method has an empty catch block.
Empty Catch Block,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseLongBase10,The method has an empty catch block.
Empty Catch Block,NGit.Util,TemporaryBuffer,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\TemporaryBuffer.cs,Destroy,The method has an empty catch block.
Empty Catch Block,NGit.Util,IOUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IOUtil.cs,ReadSome,The method has an empty catch block.
Empty Catch Block,NGit.Util,IOUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IOUtil.cs,ReadFully,The method has an empty catch block.
Empty Catch Block,NGit.Util,FileUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FileUtils.cs,Delete,The method has an empty catch block.
Empty Catch Block,NGit.Util,GitDateParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateParser.cs,Parse,The method has an empty catch block.
Empty Catch Block,NGit.Util.IO,InterruptTimer,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\InterruptTimer.cs,Terminate,The method has an empty catch block.
Empty Catch Block,NGit.Util.IO,AlarmState,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\InterruptTimer.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Util.IO,StreamCopyThread,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\StreamCopyThread.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Util.IO,StreamCopyThread,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\StreamCopyThread.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,PushProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PushProcess.cs,UpdateTrackingRefs,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,EndOut,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,MaxTimeWanted,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,ParseReachable,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,SendWants,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,MarkAdvertised,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,NoRepository,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,NoRepository,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,VerifyPrerequisites,The method has an empty catch block.
Empty Catch Block,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,ReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\ReceivePack.cs,Service,The method has an empty catch block.
Empty Catch Block,NGit.Transport,TransportBundleStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportBundleStream.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Service,The method has an empty catch block.
Empty Catch Block,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ReportErrorDuringNegotiate,The method has an empty catch block.
Empty Catch Block,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ProcessShallow,The method has an empty catch block.
Empty Catch Block,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,OpenIndex,The method has an empty catch block.
Empty Catch Block,NGit.Transport,WalkRemoteObjectDatabase,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkRemoteObjectDatabase.cs,ReadPackedRefs,The method has an empty catch block.
Empty Catch Block,NGit.Transport,WalkPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkPushConnection.cs,SafeDelete,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_289,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_289,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_335,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_335,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_335,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_335,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_335,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\Daemon.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Parse,The method has an empty catch block.
Empty Catch Block,NGit.Transport,TransportGitAnon,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,OpenConnection,The method has an empty catch block.
Empty Catch Block,NGit.Transport,TcpFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,TcpPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,HttpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,GetAlternates,The method has an empty catch block.
Empty Catch Block,NGit.Transport,HttpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,GetAlternates,The method has an empty catch block.
Empty Catch Block,NGit.Transport,InternalLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_233,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_233,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,ForkLocalFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,InternalLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_365,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_365,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_365,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_Thread_365,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Run,The method has an empty catch block.
Empty Catch Block,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,ForkLocalPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportLocal.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,SshFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,SshPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,WriteFile,The method has an empty catch block.
Empty Catch Block,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,VerifySafeObject,The method has an empty catch block.
Empty Catch Block,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,KnownHosts,The method has an empty catch block.
Empty Catch Block,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,KnownHosts,The method has an empty catch block.
Empty Catch Block,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,LoadIdentity,The method has an empty catch block.
Empty Catch Block,NGit.Transport,_PipedOutputStream_173,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,Close,The method has an empty catch block.
Empty Catch Block,NGit.Transport,MessageOutputWrapper,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,Write,The method has an empty catch block.
Empty Catch Block,NGit.Transport,MessageOutputWrapper,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,Write,The method has an empty catch block.
Empty Catch Block,NGit.Transport,MessageOutputWrapper,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,Flush,The method has an empty catch block.
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,IsId,The following statement contains a magic number: id.Length < 2 || Constants.OBJECT_ID_STRING_LENGTH < id.Length
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int b = HexUInt32(bs' ptr + 8' end);
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int c = HexUInt32(bs' ptr + 16' end);
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int d = HexUInt32(bs' ptr + 24' end);
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,FromHexString,The following statement contains a magic number: int e = HexUInt32(bs' ptr + 32' end);
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,HexUInt32,The following statement contains a magic number: 8 <= end - p
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,HexUInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,HexUInt32,The following statement contains a magic number: n < 8 && p < end
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,HexUInt32,The following statement contains a magic number: return r << (8 - n) * 4;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,HexUInt32,The following statement contains a magic number: return r << (8 - n) * 4;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int b = (word - 1) * 8;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: b + 8 <= nibbles
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int s = 32 - (nibbles - b) * 4;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,Mask,The following statement contains a magic number: int s = 32 - (nibbles - b) * 4;
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w2' Mask(2' other.w2));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' Mask(3' other.w3));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' Mask(4' other.w4));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: return NB.CompareUInt32(w5' Mask(5' other.w5));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w2' Mask(2' NB.DecodeInt32(bs' p + 4)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w2' Mask(2' NB.DecodeInt32(bs' p + 4)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' Mask(3' NB.DecodeInt32(bs' p + 8)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' Mask(3' NB.DecodeInt32(bs' p + 8)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' Mask(4' NB.DecodeInt32(bs' p + 12)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' Mask(4' NB.DecodeInt32(bs' p + 12)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: return NB.CompareUInt32(w5' Mask(5' NB.DecodeInt32(bs' p + 16)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: return NB.CompareUInt32(w5' Mask(5' NB.DecodeInt32(bs' p + 16)));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w2' Mask(2' bs[p + 1]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' Mask(3' bs[p + 2]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' Mask(3' bs[p + 2]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' Mask(4' bs[p + 3]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' Mask(4' bs[p + 3]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: return NB.CompareUInt32(w5' Mask(5' bs[p + 4]));
Magic Number,NGit,AbbreviatedObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AbbreviatedObjectId.cs,PrefixCompare,The following statement contains a magic number: return NB.CompareUInt32(w5' Mask(5' bs[p + 4]));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w = w1; 					break; 				}  				case 1: 				{ 					w = w2; 					break; 				}  				case 2: 				{ 					w = w3; 					break; 				}  				case 3: 				{ 					w = w4; 					break; 				}  				case 4: 				{ 					w = w5; 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w = w1; 					break; 				}  				case 1: 				{ 					w = w2; 					break; 				}  				case 2: 				{ 					w = w3; 					break; 				}  				case 3: 				{ 					w = w4; 					break; 				}  				case 4: 				{ 					w = w5; 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w = w1; 					break; 				}  				case 1: 				{ 					w = w2; 					break; 				}  				case 2: 				{ 					w = w3; 					break; 				}  				case 3: 				{ 					w = w4; 					break; 				}  				case 4: 				{ 					w = w5; 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w = w1; 					break; 				}  				case 1: 				{ 					w = w2; 					break; 				}  				case 2: 				{ 					w = w3; 					break; 				}  				case 3: 				{ 					w = w4; 					break; 				}  				case 4: 				{ 					w = w5; 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: return ((int)(((uint)w) >> (8 * (3 - (index & 3))))) & unchecked((int)(0xff));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: return ((int)(((uint)w) >> (8 * (3 - (index & 3))))) & unchecked((int)(0xff));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,GetByte,The following statement contains a magic number: return ((int)(((uint)w) >> (8 * (3 - (index & 3))))) & unchecked((int)(0xff));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(w2' NB.DecodeInt32(bs' p + 4));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' NB.DecodeInt32(bs' p + 8));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' NB.DecodeInt32(bs' p + 12));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: return NB.CompareUInt32(w5' NB.DecodeInt32(bs' p + 16));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(w3' bs[p + 2]);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: cmp = NB.CompareUInt32(w4' bs[p + 3]);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CompareTo,The following statement contains a magic number: return NB.CompareUInt32(w5' bs[p + 4]);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: NB.EncodeInt32(b' o + 4' w2);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: NB.EncodeInt32(b' o + 8' w3);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: NB.EncodeInt32(b' o + 12' w4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: NB.EncodeInt32(b' o + 16' w5);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: b[o + 2] = w3;
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: b[o + 3] = w4;
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyRawTo,The following statement contains a magic number: b[o + 4] = w5;
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,WriteRawInt,The following statement contains a magic number: w.Write((int)(((uint)v) >> 24));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,WriteRawInt,The following statement contains a magic number: w.Write((int)(((uint)v) >> 16));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,WriteRawInt,The following statement contains a magic number: w.Write((int)(((uint)v) >> 8));
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyTo,The following statement contains a magic number: FormatHexByte(b' o + 8' w2);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyTo,The following statement contains a magic number: FormatHexByte(b' o + 16' w3);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyTo,The following statement contains a magic number: FormatHexByte(b' o + 24' w4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,CopyTo,The following statement contains a magic number: FormatHexByte(b' o + 32' w5);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: FormatHexByte(dst' 8' w2);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: FormatHexByte(dst' 16' w3);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: FormatHexByte(dst' 24' w4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexByteArray,The following statement contains a magic number: FormatHexByte(dst' 32' w5);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,FormatHexByte,The following statement contains a magic number: int o = p + 7;
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,FormatHexByte,The following statement contains a magic number: w = (int)(((uint)w) >> 4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: FormatHexChar(dst' 8' w2);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: FormatHexChar(dst' 16' w3);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: FormatHexChar(dst' 24' w4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,ToHexCharArray,The following statement contains a magic number: FormatHexChar(dst' 32' w5);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,FormatHexChar,The following statement contains a magic number: int o = p + 7;
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,FormatHexChar,The following statement contains a magic number: w = (int)(((uint)w) >> 4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int b = AbbreviatedObjectId.Mask(len' 2' w2);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int c = AbbreviatedObjectId.Mask(len' 3' w3);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int d = AbbreviatedObjectId.Mask(len' 4' w4);
Magic Number,NGit,AnyObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\AnyObjectId.cs,Abbreviate,The following statement contains a magic number: int e = AbbreviatedObjectId.Mask(len' 5' w5);
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: @ref.Length < 9
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,IsSymRef,The following statement contains a magic number: return @ref[0] == 'g' && @ref[1] == 'i' && @ref[2] == 't' && @ref[3] == 'd' && @ref 				[4] == 'i' && @ref[5] == 'r' && @ref[6] == ':' && @ref[7] == ' ';
Magic Number,NGit,BaseRepositoryBuilder<B;R>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BaseRepositoryBuilder.cs,GetSymRef,The following statement contains a magic number: int pathStart = 8;
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,DecodeTypeString,The following statement contains a magic number: switch (typeString[position]) 				{ 					case (byte)('b'): 					{ 						if (typeString[position + 1] != 'l' || typeString[position + 2] != 'o' || typeString 							[position + 3] != 'b' || typeString[position + 4] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 5; 						return NGit.Constants.OBJ_BLOB; 					}  					case (byte)('c'): 					{ 						if (typeString[position + 1] != 'o' || typeString[position + 2] != 'm' || typeString 							[position + 3] != 'm' || typeString[position + 4] != 'i' || typeString[position  							+ 5] != 't' || typeString[position + 6] != endMark) 						{ 							throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 						} 						offset.value = position + 7; 						return NGit.Constants.OBJ_COMMIT; 					}  					case (byte)('t'): 					{ 						switch (typeString[position + 1]) 						{ 							case (byte)('a'): 							{ 								if (typeString[position + 2] != 'g' || typeString[position + 3] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 4; 								return NGit.Constants.OBJ_TAG; 							}  							case (byte)('r'): 							{ 								if (typeString[position + 2] != 'e' || typeString[position + 3] != 'e' || typeString 									[position + 4] != endMark) 								{ 									throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 								} 								offset.value = position + 5; 								return NGit.Constants.OBJ_TREE; 							}  							default: 							{ 								throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 							} 						} 						goto default; 					}  					default: 					{ 						throw new CorruptObjectException(id' JGitText.Get().corruptObjectInvalidType); 					} 				}
Magic Number,NGit,Constants,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Constants.cs,EncodeASCII,The following statement contains a magic number: c > 127
Magic Number,NGit,CoreConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\CoreConfig.cs,CoreConfig,The following statement contains a magic number: packIndexVersion = rc.GetInt(ConfigConstants.CONFIG_PACK_SECTION' ConfigConstants 				.CONFIG_KEY_INDEXVERSION' 2);
Magic Number,NGit,FileMode,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\FileMode.cs,FileMode,The following statement contains a magic number: byte[] tmp = new byte[10];
Magic Number,NGit,FileMode,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\FileMode.cs,FileMode,The following statement contains a magic number: mode >>= 3;
Magic Number,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: ByteBuffer buf = ByteBuffer.Allocate(4096);
Magic Number,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: Sharpen.Thread.Sleep(100);
Magic Number,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: i_1 < 10
Magic Number,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,CheckoutEntry,The following statement contains a magic number: e.mtime = file.LastModified() * 1000000L;
Magic Number,NGit,GitIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,SplitDirPath,The following statement contains a magic number: string[] tmp = new string[name.Length / 2 + 1];
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.ctime = f.LastModified() * 1000000L;
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.flags = (short)((stage << 12) | this.name.Length);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.ctime = f.LastModified() * 1000000L;
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.flags = (short)((stage << 12) | this.name.Length);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.flags = (short)((stage << 12) | this.name.Length);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.ctime = b.GetInt() * 1000000000L + (b.GetInt() % 1000000000L);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.ctime = b.GetInt() * 1000000000L + (b.GetInt() % 1000000000L);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.mtime = b.GetInt() * 1000000000L + (b.GetInt() % 1000000000L);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: this.mtime = b.GetInt() * 1000000000L + (b.GetInt() % 1000000000L);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Entry,The following statement contains a magic number: b.Position(startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Update,The following statement contains a magic number: long lm = f.LastModified() * 1000000L;
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: buf.PutInt((int)(this.ctime / 1000000000L));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: buf.PutInt((int)(this.ctime % 1000000000L));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: buf.PutInt((int)(this.mtime / 1000000000L));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: buf.PutInt((int)(this.mtime % 1000000000L));
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Write,The following statement contains a magic number: int end = startposition + ((8 + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 20 + 2 + this.name.Length 					 + 8) & ~7);
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,IsModified,The following statement contains a magic number: long javamtime = this.mtime / 1000000L;
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,IsModified,The following statement contains a magic number: lastm = lastm - lastm % 1000;
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,IsModified,The following statement contains a magic number: javamtime % 1000 == 0
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,ToString,The following statement contains a magic number: return this.GetName() + "/SHA-1(" + this.sha1.Name + ")/M:" + Sharpen.Extensions.CreateDate 					(this.ctime / 1000000L) + "/C:" + Sharpen.Extensions.CreateDate(this.mtime / 1000000L 					) + "/d" + this.dev + "/i" + this.ino + "/m" + Sharpen.Extensions.ToString(this. 					mode' 8) + "/u" + this.uid + "/g" + this.gid + "/s" + this.size + "/f" + this.flags 					 + "/@" + this.GetStage();
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,ToString,The following statement contains a magic number: return this.GetName() + "/SHA-1(" + this.sha1.Name + ")/M:" + Sharpen.Extensions.CreateDate 					(this.ctime / 1000000L) + "/C:" + Sharpen.Extensions.CreateDate(this.mtime / 1000000L 					) + "/d" + this.dev + "/i" + this.ino + "/m" + Sharpen.Extensions.ToString(this. 					mode' 8) + "/u" + this.uid + "/g" + this.gid + "/s" + this.size + "/f" + this.flags 					 + "/@" + this.GetStage();
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,ToString,The following statement contains a magic number: return this.GetName() + "/SHA-1(" + this.sha1.Name + ")/M:" + Sharpen.Extensions.CreateDate 					(this.ctime / 1000000L) + "/C:" + Sharpen.Extensions.CreateDate(this.mtime / 1000000L 					) + "/d" + this.dev + "/i" + this.ino + "/m" + Sharpen.Extensions.ToString(this. 					mode' 8) + "/u" + this.uid + "/g" + this.gid + "/s" + this.size + "/f" + this.flags 					 + "/@" + this.GetStage();
Magic Number,NGit,Entry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,GetStage,The following statement contains a magic number: return (this.flags & unchecked((int)(0x3000))) >> 12;
Magic Number,NGit,Header,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Read,The following statement contains a magic number: version != 2
Magic Number,NGit,Header,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\GitIndex.cs,Header,The following statement contains a magic number: version = 2;
Magic Number,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The following statement contains a magic number: ICollection<TreeFilter> filters = new AList<TreeFilter>(4);
Magic Number,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The following statement contains a magic number: int total = Math.Max(estIndexSize * 10 / 9' estWorkTreeSize * 10 / 9);
Magic Number,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The following statement contains a magic number: int total = Math.Max(estIndexSize * 10 / 9' estWorkTreeSize * 10 / 9);
Magic Number,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The following statement contains a magic number: int total = Math.Max(estIndexSize * 10 / 9' estWorkTreeSize * 10 / 9);
Magic Number,NGit,IndexDiff,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,Diff,The following statement contains a magic number: int total = Math.Max(estIndexSize * 10 / 9' estWorkTreeSize * 10 / 9);
Magic Number,NGit,ProgressReportingFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,ProgressReportingFilter,The following statement contains a magic number: stepSize = total / 100;
Magic Number,NGit,ProgressReportingFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\IndexDiff.cs,ProgressReportingFilter,The following statement contains a magic number: stepSize = 1000;
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,SetByte,The following statement contains a magic number: switch (index >> 2) 			{ 				case 0: 				{ 					w1 = Set(w1' index & 3' value); 					break; 				}  				case 1: 				{ 					w2 = Set(w2' index & 3' value); 					break; 				}  				case 2: 				{ 					w3 = Set(w3' index & 3' value); 					break; 				}  				case 3: 				{ 					w4 = Set(w4' index & 3' value); 					break; 				}  				case 4: 				{ 					w5 = Set(w5' index & 3' value); 					break; 				}  				default: 				{ 					throw Sharpen.Extensions.CreateIndexOutOfRangeException(index); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,Set,The following statement contains a magic number: switch (index) 			{ 				case 0: 				{ 					return (w & unchecked((int)(0x00ffffff))) | (value << 24); 				}  				case 1: 				{ 					return (w & unchecked((int)(0xff00ffff))) | (value << 16); 				}  				case 2: 				{ 					return (w & unchecked((int)(0xffff00ff))) | (value << 8); 				}  				case 3: 				{ 					return (w & unchecked((int)(0xffffff00))) | value; 				}  				default: 				{ 					throw new IndexOutOfRangeException(); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,Set,The following statement contains a magic number: switch (index) 			{ 				case 0: 				{ 					return (w & unchecked((int)(0x00ffffff))) | (value << 24); 				}  				case 1: 				{ 					return (w & unchecked((int)(0xff00ffff))) | (value << 16); 				}  				case 2: 				{ 					return (w & unchecked((int)(0xffff00ff))) | (value << 8); 				}  				case 3: 				{ 					return (w & unchecked((int)(0xffffff00))) | value; 				}  				default: 				{ 					throw new IndexOutOfRangeException(); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,Set,The following statement contains a magic number: switch (index) 			{ 				case 0: 				{ 					return (w & unchecked((int)(0x00ffffff))) | (value << 24); 				}  				case 1: 				{ 					return (w & unchecked((int)(0xff00ffff))) | (value << 16); 				}  				case 2: 				{ 					return (w & unchecked((int)(0xffff00ff))) | (value << 8); 				}  				case 3: 				{ 					return (w & unchecked((int)(0xffffff00))) | value; 				}  				default: 				{ 					throw new IndexOutOfRangeException(); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,Set,The following statement contains a magic number: switch (index) 			{ 				case 0: 				{ 					return (w & unchecked((int)(0x00ffffff))) | (value << 24); 				}  				case 1: 				{ 					return (w & unchecked((int)(0xff00ffff))) | (value << 16); 				}  				case 2: 				{ 					return (w & unchecked((int)(0xffff00ff))) | (value << 8); 				}  				case 3: 				{ 					return (w & unchecked((int)(0xffffff00))) | value; 				}  				default: 				{ 					throw new IndexOutOfRangeException(); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,Set,The following statement contains a magic number: switch (index) 			{ 				case 0: 				{ 					return (w & unchecked((int)(0x00ffffff))) | (value << 24); 				}  				case 1: 				{ 					return (w & unchecked((int)(0xff00ffff))) | (value << 16); 				}  				case 2: 				{ 					return (w & unchecked((int)(0xffff00ff))) | (value << 8); 				}  				case 3: 				{ 					return (w & unchecked((int)(0xffffff00))) | value; 				}  				default: 				{ 					throw new IndexOutOfRangeException(); 				} 			}
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w2 = NB.DecodeInt32(bs' p + 4);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w3 = NB.DecodeInt32(bs' p + 8);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w4 = NB.DecodeInt32(bs' p + 12);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w5 = NB.DecodeInt32(bs' p + 16);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w3 = ints[p + 2];
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w4 = ints[p + 3];
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromRaw,The following statement contains a magic number: w5 = ints[p + 4];
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromHexString,The following statement contains a magic number: w2 = RawParseUtils.ParseHexInt32(bs' p + 8);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromHexString,The following statement contains a magic number: w3 = RawParseUtils.ParseHexInt32(bs' p + 16);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromHexString,The following statement contains a magic number: w4 = RawParseUtils.ParseHexInt32(bs' p + 24);
Magic Number,NGit,MutableObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\MutableObjectId.cs,FromHexString,The following statement contains a magic number: w5 = RawParseUtils.ParseHexInt32(bs' p + 32);
Magic Number,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,DuplicateName,The following statement contains a magic number: nextMode <<= 3;
Magic Number,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,CheckTree,The following statement contains a magic number: thisMode <<= 3;
Magic Number,NGit,ObjectChecker,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectChecker.cs,CheckTree,The following statement contains a magic number: nameLen == 2 && raw[thisNameB + 1] == '.'
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,Equals,The following statement contains a magic number: return firstBuffer[fi] == secondBuffer[si] && firstBuffer[fi + 1] == secondBuffer 				[si + 1] && firstBuffer[fi + 2] == secondBuffer[si + 2] && firstBuffer[fi + 3] == 				 secondBuffer[si + 3] && firstBuffer[fi + 4] == secondBuffer[si + 4] && firstBuffer 				[fi + 5] == secondBuffer[si + 5] && firstBuffer[fi + 6] == secondBuffer[si + 6]  				&& firstBuffer[fi + 7] == secondBuffer[si + 7] && firstBuffer[fi + 8] == secondBuffer 				[si + 8] && firstBuffer[fi + 9] == secondBuffer[si + 9] && firstBuffer[fi + 10]  				== secondBuffer[si + 10] && firstBuffer[fi + 11] == secondBuffer[si + 11] && firstBuffer 				[fi + 12] == secondBuffer[si + 12] && firstBuffer[fi + 13] == secondBuffer[si +  				13] && firstBuffer[fi + 14] == secondBuffer[si + 14] && firstBuffer[fi + 15] ==  				secondBuffer[si + 15] && firstBuffer[fi + 16] == secondBuffer[si + 16] && firstBuffer 				[fi + 17] == secondBuffer[si + 17] && firstBuffer[fi + 18] == secondBuffer[si +  				18] && firstBuffer[fi + 19] == secondBuffer[si + 19];
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: int b = NB.DecodeInt32(bs' p + 4);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: int c = NB.DecodeInt32(bs' p + 8);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: int d = NB.DecodeInt32(bs' p + 12);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: int e = NB.DecodeInt32(bs' p + 16);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: return new NGit.ObjectId(@is[p]' @is[p + 1]' @is[p + 2]' @is[p + 3]' @is[p + 4]);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: return new NGit.ObjectId(@is[p]' @is[p + 1]' @is[p + 2]' @is[p + 3]' @is[p + 4]);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromRaw,The following statement contains a magic number: return new NGit.ObjectId(@is[p]' @is[p + 1]' @is[p + 2]' @is[p + 3]' @is[p + 4]);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromHexString,The following statement contains a magic number: int b = RawParseUtils.ParseHexInt32(bs' p + 8);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromHexString,The following statement contains a magic number: int c = RawParseUtils.ParseHexInt32(bs' p + 16);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromHexString,The following statement contains a magic number: int d = RawParseUtils.ParseHexInt32(bs' p + 24);
Magic Number,NGit,ObjectId,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectId.cs,FromHexString,The following statement contains a magic number: int e = RawParseUtils.ParseHexInt32(bs' p + 32);
Magic Number,NGit,ObjectInserter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectInserter.cs,Buffer,The following statement contains a magic number: tempBuffer = b = new byte[8192];
Magic Number,NGit,ObjectLoader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectLoader.cs,CopyTo,The following statement contains a magic number: byte[] tmp = new byte[8192];
Magic Number,NGit,ObjectReader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectReader.cs,Abbreviate,The following statement contains a magic number: return Abbreviate(objectId' 7);
Magic Number,NGit,ObjectReader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ObjectReader.cs,Abbreviate,The following statement contains a magic number: IList<ObjectId> n = new AList<ObjectId>(8);
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,GetTimeZone,The following statement contains a magic number: StringBuilder tzId = new StringBuilder(8);
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,GetHashCode,The following statement contains a magic number: hc *= 31;
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,GetHashCode,The following statement contains a magic number: hc += (int)(when / 1000L);
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,Equals,The following statement contains a magic number: return GetName().Equals(p.GetName()) && GetEmailAddress().Equals(p.GetEmailAddress 					()) && when / 1000L == p.when / 1000L;
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,Equals,The following statement contains a magic number: return GetName().Equals(p.GetName()) && GetEmailAddress().Equals(p.GetEmailAddress 					()) && when / 1000L == p.when / 1000L;
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,ToExternalString,The following statement contains a magic number: r.Append(when / 1000);
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,AppendTimezone,The following statement contains a magic number: offsetHours = offset / 60;
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,AppendTimezone,The following statement contains a magic number: offsetMins = offset % 60;
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,AppendTimezone,The following statement contains a magic number: offsetHours < 10
Magic Number,NGit,PersonIdent,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\PersonIdent.cs,AppendTimezone,The following statement contains a magic number: offsetMins < 10
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The following statement contains a magic number: switch (revChars[i]) 				{ 					case '^': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						if (i + 1 < revChars.Length) 						{ 							switch (revChars[i + 1]) 							{ 								case '0': 								case '1': 								case '2': 								case '3': 								case '4': 								case '5': 								case '6': 								case '7': 								case '8': 								case '9': 								{ 									int j; 									rev = rw.ParseCommit(rev); 									for (j = i + 1; j < revChars.Length; ++j) 									{ 										if (!char.IsDigit(revChars[j])) 										{ 											break; 										} 									} 									string parentnum = new string(revChars' i + 1' j - i - 1); 									int pnum; 									try 									{ 										pnum = System.Convert.ToInt32(parentnum); 									} 									catch (FormatException) 									{ 										throw new RevisionSyntaxException(JGitText.Get().invalidCommitParentNumber' revstr 											); 									} 									if (pnum != 0) 									{ 										RevCommit commit = (RevCommit)rev; 										if (pnum > commit.ParentCount) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(pnum - 1); 										} 									} 									i = j - 1; 									done = j; 									break; 								}  								case '{': 								{ 									int k; 									string item = null; 									for (k = i + 2; k < revChars.Length; ++k) 									{ 										if (revChars[k] == '}') 										{ 											item = new string(revChars' i + 2' k - i - 2); 											break; 										} 									} 									i = k; 									if (item != null) 									{ 										if (item.Equals("tree")) 										{ 											rev = rw.ParseTree(rev); 										} 										else 										{ 											if (item.Equals("commit")) 											{ 												rev = rw.ParseCommit(rev); 											} 											else 											{ 												if (item.Equals("blob")) 												{ 													rev = rw.Peel(rev); 													if (!(rev is RevBlob)) 													{ 														throw new IncorrectObjectTypeException(rev' Constants.TYPE_BLOB); 													} 												} 												else 												{ 													if (item.Equals(string.Empty)) 													{ 														rev = rw.Peel(rev); 													} 													else 													{ 														throw new RevisionSyntaxException(revstr); 													} 												} 											} 										} 									} 									else 									{ 										throw new RevisionSyntaxException(revstr); 									} 									done = k; 									break; 								}  								default: 								{ 									rev = rw.ParseAny(rev); 									if (rev is RevCommit) 									{ 										RevCommit commit = ((RevCommit)rev); 										if (commit.ParentCount == 0) 										{ 											rev = null; 										} 										else 										{ 											rev = commit.GetParent(0); 										} 									} 									else 									{ 										throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 									} 									break; 								} 							} 						} 						else 						{ 							rev = rw.Peel(rev); 							if (rev is RevCommit) 							{ 								RevCommit commit = ((RevCommit)rev); 								if (commit.ParentCount == 0) 								{ 									rev = null; 								} 								else 								{ 									rev = commit.GetParent(0); 								} 							} 							else 							{ 								throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 							} 						} 						done = i + 1; 						break; 					}  					case '~': 					{ 						if (rev == null) 						{ 							if (name == null) 							{ 								if (done == 0) 								{ 									name = new string(revChars' done' i); 								} 								else 								{ 									done = i + 1; 									break; 								} 							} 							rev = ParseSimple(rw' name); 							name = null; 							if (rev == null) 							{ 								return null; 							} 						} 						rev = rw.Peel(rev); 						if (!(rev is RevCommit)) 						{ 							throw new IncorrectObjectTypeException(rev' Constants.TYPE_COMMIT); 						} 						int l; 						for (l = i + 1; l < revChars.Length; ++l) 						{ 							if (!char.IsDigit(revChars[l])) 							{ 								break; 							} 						} 						int dist; 						if (l - i > 1) 						{ 							string distnum = new string(revChars' i + 1' l - i - 1); 							try 							{ 								dist = System.Convert.ToInt32(distnum); 							} 							catch (FormatException) 							{ 								throw new RevisionSyntaxException(JGitText.Get().invalidAncestryLength' revstr); 							} 						} 						else 						{ 							dist = 1; 						} 						while (dist > 0) 						{ 							RevCommit commit = (RevCommit)rev; 							if (commit.ParentCount == 0) 							{ 								rev = null; 								break; 							} 							commit = commit.GetParent(0); 							rw.ParseHeaders(commit); 							rev = commit; 							--dist; 						} 						i = l - 1; 						done = l; 						break; 					}  					case '@': 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						if (i + 1 < revChars.Length && revChars[i + 1] != '{') 						{ 							continue; 						} 						int m; 						string time = null; 						for (m = i + 2; m < revChars.Length; ++m) 						{ 							if (revChars[m] == '}') 							{ 								time = new string(revChars' i + 2' m - i - 2); 								break; 							} 						} 						if (time != null) 						{ 							if (time.Equals("upstream")) 							{ 								if (name == null) 								{ 									name = new string(revChars' done' i); 								} 								if (name.Equals(string.Empty)) 								{ 									// Currently checked out branch' HEAD if 									// detached 									name = Constants.HEAD; 								} 								if (!NGit.Repository.IsValidRefName("x/" + name)) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								Ref @ref = GetRef(name); 								name = null; 								if (@ref == null) 								{ 									return null; 								} 								if (@ref.IsSymbolic()) 								{ 									@ref = @ref.GetLeaf(); 								} 								name = @ref.GetName(); 								RemoteConfig remoteConfig; 								try 								{ 									remoteConfig = new RemoteConfig(GetConfig()' "origin"); 								} 								catch (URISyntaxException) 								{ 									throw new RevisionSyntaxException(revstr); 								} 								string remoteBranchName = GetConfig().GetString(ConfigConstants.CONFIG_BRANCH_SECTION 									' NGit.Repository.ShortenRefName(@ref.GetName())' ConfigConstants.CONFIG_KEY_MERGE 									); 								IList<RefSpec> fetchRefSpecs = remoteConfig.FetchRefSpecs; 								foreach (RefSpec refSpec in fetchRefSpecs) 								{ 									if (refSpec.MatchSource(remoteBranchName)) 									{ 										RefSpec expandFromSource = refSpec.ExpandFromSource(remoteBranchName); 										name = expandFromSource.GetDestination(); 										break; 									} 								} 								if (name == null) 								{ 									throw new RevisionSyntaxException(revstr); 								} 							} 							else 							{ 								if (time.Matches("^-\\d+$")) 								{ 									if (name != null) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									else 									{ 										string previousCheckout = ResolveReflogCheckout(-System.Convert.ToInt32(time)); 										if (ObjectId.IsId(previousCheckout)) 										{ 											rev = ParseSimple(rw' previousCheckout); 										} 										else 										{ 											name = previousCheckout; 										} 									} 								} 								else 								{ 									if (name == null) 									{ 										name = new string(revChars' done' i); 									} 									if (name.Equals(string.Empty)) 									{ 										name = Constants.HEAD; 									} 									if (!NGit.Repository.IsValidRefName("x/" + name)) 									{ 										throw new RevisionSyntaxException(revstr); 									} 									Ref @ref = GetRef(name); 									name = null; 									if (@ref == null) 									{ 										return null; 									} 									// @{n} means current branch' not HEAD@{1} unless 									// detached 									if (@ref.IsSymbolic()) 									{ 										@ref = @ref.GetLeaf(); 									} 									rev = ResolveReflog(rw' @ref' time); 								} 							} 							i = m; 						} 						else 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					}  					case ':': 					{ 						RevTree tree; 						if (rev == null) 						{ 							if (name == null) 							{ 								name = new string(revChars' done' i); 							} 							if (name.Equals(string.Empty)) 							{ 								name = Constants.HEAD; 							} 							rev = ParseSimple(rw' name); 							name = null; 						} 						if (rev == null) 						{ 							return null; 						} 						tree = rw.ParseTree(rev); 						if (i == revChars.Length - 1) 						{ 							return tree.Copy(); 						} 						TreeWalk tw = TreeWalk.ForPath(rw.GetObjectReader()' new string(revChars' i + 1'  							revChars.Length - i - 1)' tree); 						return tw != null ? tw.GetObjectId(0) : null; 					}  					default: 					{ 						if (rev != null) 						{ 							throw new RevisionSyntaxException(revstr); 						} 						break; 					} 				}
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The following statement contains a magic number: string s = Sharpen.Runtime.Substring(revstr' dashg + 2);
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The following statement contains a magic number: (dashg + 5) < revstr.Length && 0 <= dashg && IsHex(revstr[dashg + 2]) && IsHex 				(revstr[dashg + 3]) && IsAllHex(revstr' dashg + 4)
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The following statement contains a magic number: (dashg + 5) < revstr.Length && 0 <= dashg && IsHex(revstr[dashg + 2]) && IsHex 				(revstr[dashg + 3]) && IsAllHex(revstr' dashg + 4)
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The following statement contains a magic number: (dashg + 5) < revstr.Length && 0 <= dashg && IsHex(revstr[dashg + 2]) && IsHex 				(revstr[dashg + 3]) && IsAllHex(revstr' dashg + 4)
Magic Number,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,ResolveSimple,The following statement contains a magic number: (dashg + 5) < revstr.Length && 0 <= dashg && IsHex(revstr[dashg + 2]) && IsHex 				(revstr[dashg + 3]) && IsAllHex(revstr' dashg + 4)
Magic Number,NGit,RepositoryCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RepositoryCache.cs,RepositoryCache,The following statement contains a magic number: openLocks = new RepositoryCache.Lock[4];
Magic Number,NGit,RepositoryCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RepositoryCache.cs,ClearAll,The following statement contains a magic number: stage < 2
Magic Number,NGit,FileKey,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\RepositoryCache.cs,ReadFirstLine,The following statement contains a magic number: byte[] buf = IOUtil.ReadFully(head' 4096);
Magic Number,NGit,TextProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TextProgressMonitor.cs,Format,The following statement contains a magic number: s.Length < 25
Magic Number,NGit,TextProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TextProgressMonitor.cs,Format,The following statement contains a magic number: s.Length < 25
Magic Number,NGit,TextProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TextProgressMonitor.cs,Format,The following statement contains a magic number: pcnt < 100
Magic Number,NGit,TextProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TextProgressMonitor.cs,Format,The following statement contains a magic number: pcnt < 10
Magic Number,NGit,Tree,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Tree.cs,ReadTree,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit,TreeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\TreeFormatter.cs,EntrySize,The following statement contains a magic number: return mode.CopyToLength() + nameLen + Constants.OBJECT_ID_LENGTH + 2;
Magic Number,NGit,ConfigSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigSnapshot.cs,ConfigSnapshot,The following statement contains a magic number: cache = new ConcurrentHashMap<object' object>(16' 0.75f' 1);
Magic Number,NGit,ConfigSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\ConfigSnapshot.cs,ConfigSnapshot,The following statement contains a magic number: cache = new ConcurrentHashMap<object' object>(16' 0.75f' 1);
Magic Number,NGit.Api,FetchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\FetchCommand.cs,FetchCommand,The following statement contains a magic number: refSpecs = new AList<RefSpec>(3);
Magic Number,NGit.Api,PushCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PushCommand.cs,PushCommand,The following statement contains a magic number: refSpecs = new AList<RefSpec>(3);
Magic Number,NGit.Api,PushCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PushCommand.cs,Call,The following statement contains a magic number: AList<PushResult> pushResults = new AList<PushResult>(3);
Magic Number,NGit.Api,PullCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\PullCommand.cs,Call,The following statement contains a magic number: monitor.BeginTask(JGitText.Get().pullTaskName' 2);
Magic Number,NGit.Api,CreateBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CreateBranchCommand.cs,Call,The following statement contains a magic number: string[] tokens = baseBranch.Split("/"' 4);
Magic Number,NGit.Api,CreateBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CreateBranchCommand.cs,Call,The following statement contains a magic number: string remoteName = tokens[2];
Magic Number,NGit.Api,CreateBranchCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CreateBranchCommand.cs,Call,The following statement contains a magic number: string branchName = tokens[3];
Magic Number,NGit.Api,CherryPickCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\CherryPickCommand.cs,Call,The following statement contains a magic number: string cherryPickName = srcCommit.Id.Abbreviate(7).Name + " " + srcCommit.GetShortMessage 						();
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ToAuthorScript,The following statement contains a magic number: StringBuilder sb = new StringBuilder(100);
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ToAuthorScript,The following statement contains a magic number: sb.Append(Sharpen.Runtime.Substring(externalString' externalString.LastIndexOf('>' 				) + 2));
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,LoadSteps,The following statement contains a magic number: switch (tokenCount) 					{ 						case 0: 						{ 							string actionToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							if (actionToken[0] == '#') 							{ 								tokenCount = 3; 								break; 							} 							RebaseCommand.Action action = RebaseCommand.Action.Parse(actionToken); 							if (action != null) 							{ 								current = new RebaseCommand.Step(RebaseCommand.Action.Parse(actionToken)); 							} 							break; 						}  						case 1: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = RawParseUtils.Next(buf' tokenBegin' ' '); 							string commitToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							current.commit = AbbreviatedObjectId.FromString(commitToken); 							break; 						}  						case 2: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = ptr; 							int length = ptr - tokenBegin; 							current.shortMessage = new byte[length]; 							System.Array.Copy(buf' tokenBegin' current.shortMessage' 0' length); 							r.AddItem(current); 							break; 						} 					}
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,LoadSteps,The following statement contains a magic number: switch (tokenCount) 					{ 						case 0: 						{ 							string actionToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							if (actionToken[0] == '#') 							{ 								tokenCount = 3; 								break; 							} 							RebaseCommand.Action action = RebaseCommand.Action.Parse(actionToken); 							if (action != null) 							{ 								current = new RebaseCommand.Step(RebaseCommand.Action.Parse(actionToken)); 							} 							break; 						}  						case 1: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = RawParseUtils.Next(buf' tokenBegin' ' '); 							string commitToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							current.commit = AbbreviatedObjectId.FromString(commitToken); 							break; 						}  						case 2: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = ptr; 							int length = ptr - tokenBegin; 							current.shortMessage = new byte[length]; 							System.Array.Copy(buf' tokenBegin' current.shortMessage' 0' length); 							r.AddItem(current); 							break; 						} 					}
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,LoadSteps,The following statement contains a magic number: tokenCount < 3 && nextSpace < ptr
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: string value = RawParseUtils.Decode(raw' equalsIndex + 1' end - 2);
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: long when = long.Parse(Sharpen.Runtime.Substring(time' timeStart' time.IndexOf(' ' 				))) * 1000;
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: int hours = System.Convert.ToInt32(Sharpen.Runtime.Substring(tzOffsetString' 1' 3 				));
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: int minutes = System.Convert.ToInt32(Sharpen.Runtime.Substring(tzOffsetString' 3'  				5));
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: int minutes = System.Convert.ToInt32(Sharpen.Runtime.Substring(tzOffsetString' 3'  				5));
Magic Number,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,ParseAuthor,The following statement contains a magic number: int tz = (hours * 60 + minutes) * multiplier;
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,ScanForConflicts,The following statement contains a magic number: AbstractTreeIterator stashWorkingIter = treeWalk.GetTree<AbstractTreeIterator>(2);
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,ScanForConflicts,The following statement contains a magic number: AbstractTreeIterator headIter = treeWalk.GetTree<AbstractTreeIterator>(3);
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,ScanForConflicts,The following statement contains a magic number: AbstractTreeIterator indexIter = treeWalk.GetTree<AbstractTreeIterator>(4);
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,ScanForConflicts,The following statement contains a magic number: AbstractTreeIterator workingIter = treeWalk.GetTree<AbstractTreeIterator>(5);
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,ApplyChanges,The following statement contains a magic number: AbstractTreeIterator stashWorkingIter = treeWalk.GetTree<AbstractTreeIterator>(2);
Magic Number,NGit.Api,StashApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,Call,The following statement contains a magic number: stashCommit.ParentCount != 2
Magic Number,NGit.Api,StashDiffFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,Include,The following statement contains a magic number: walker.GetRawMode(2) != m || !walker.IdEqual(2' 0)
Magic Number,NGit.Api,StashDiffFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashApplyCommand.cs,Include,The following statement contains a magic number: walker.GetRawMode(2) != m || !walker.IdEqual(2' 0)
Magic Number,NGit.Api,StashCreateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashCreateCommand.cs,Call,The following statement contains a magic number: treeWalk.Filter = AndTreeFilter.Create(new SkipWorkTreeFilter(1)' new IndexDiffFilter 						(1' 2));
Magic Number,NGit.Api,StashCreateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashCreateCommand.cs,Call,The following statement contains a magic number: WorkingTreeIterator wtIter = treeWalk.GetTree<WorkingTreeIterator>(2);
Magic Number,NGit.Api,StashCreateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashCreateCommand.cs,Call,The following statement contains a magic number: builder.Message = MessageFormat.Format(indexMessage' branch' headCommit.Abbreviate 						(7).Name' headCommit.GetShortMessage());
Magic Number,NGit.Api,StashCreateCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\StashCreateCommand.cs,Call,The following statement contains a magic number: builder.Message = MessageFormat.Format(workingDirectoryMessage' branch' headCommit 						.Abbreviate(7).Name' headCommit.GetShortMessage());
Magic Number,NGit.Diff,DiffConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffConfig.cs,DiffConfig,The following statement contains a magic number: renameLimit = rc.GetInt("diff"' "renamelimit"' 200);
Magic Number,NGit.Diff,DiffEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffEntry.cs,Scan,The following statement contains a magic number: walk.TreeCount != 2
Magic Number,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,FormatHeader,The following statement contains a magic number: switch (type) 			{ 				case DiffEntry.ChangeType.ADD: 				{ 					o.Write(Constants.EncodeASCII("new file mode ")); 					newMode.CopyTo(o); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.DELETE: 				{ 					o.Write(Constants.EncodeASCII("deleted file mode ")); 					oldMode.CopyTo(o); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.RENAME: 				{ 					o.Write(Constants.EncodeASCII("similarity index " + ent.GetScore() + "%")); 					o.Write('\n'); 					o.Write(Constants.Encode("rename from " + QuotePath(oldp))); 					o.Write('\n'); 					o.Write(Constants.Encode("rename to " + QuotePath(newp))); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.COPY: 				{ 					o.Write(Constants.EncodeASCII("similarity index " + ent.GetScore() + "%")); 					o.Write('\n'); 					o.Write(Constants.Encode("copy from " + QuotePath(oldp))); 					o.Write('\n'); 					o.Write(Constants.Encode("copy to " + QuotePath(newp))); 					o.Write('\n'); 					if (!oldMode.Equals(newMode)) 					{ 						o.Write(Constants.EncodeASCII("new file mode ")); 						newMode.CopyTo(o); 						o.Write('\n'); 					} 					break; 				}  				case DiffEntry.ChangeType.MODIFY: 				{ 					if (0 < ent.GetScore()) 					{ 						o.Write(Constants.EncodeASCII("dissimilarity index " + (100 - ent.GetScore()) + "%" 							)); 						o.Write('\n'); 					} 					break; 				} 			}
Magic Number,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,CombineA,The following statement contains a magic number: return e[i].GetBeginA() - e[i - 1].GetEndA() <= 2 * context;
Magic Number,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,CombineB,The following statement contains a magic number: return e[i].GetBeginB() - e[i - 1].GetEndB() <= 2 * context;
Magic Number,NGit.Diff,MyersDiff<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,Main,The following statement contains a magic number: args.Length != 2
Magic Number,NGit.Diff,EditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,GetIndex,The following statement contains a magic number: ((d + k - this.middleK) % 2) != 0
Magic Number,NGit.Diff,EditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,GetIndex,The following statement contains a magic number: return (d + k - this.middleK) / 2;
Magic Number,NGit.Diff,EditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,NewSnake,The following statement contains a magic number: long ret = ((long)x) << 32;
Magic Number,NGit.Diff,EditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,Snake2x,The following statement contains a magic number: return (int)((long)(((ulong)snake) >> 32));
Magic Number,NGit.Diff,ForwardEditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,Meets,The following statement contains a magic number: ((d - 1 + k - this._enclosing.backward.middleK) % 2) != 0
Magic Number,NGit.Diff,BackwardEditPaths,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\MyersDiff.cs,Meets,The following statement contains a magic number: ((d + k - this._enclosing.forward.middleK) % 2) != 0
Magic Number,NGit.Diff,RawText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawText.cs,Size,The following statement contains a magic number: return lines.Size() - 2;
Magic Number,NGit.Diff,RawText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawText.cs,GetEnd,The following statement contains a magic number: return lines.Get(i + 2);
Magic Number,NGit.Diff,RawText,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawText.cs,GetLineDelimiter,The following statement contains a magic number: content.Length > 1 && content[e - 2] == '\r'
Magic Number,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,SetRenameScore,The following statement contains a magic number: score < 0 || score > 100
Magic Number,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,CalculateModifyScore,The following statement contains a magic number: return src.Score(dst' 100);
Magic Number,NGit.Diff,RenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,PopulateMap,The following statement contains a magic number: AList<DiffEntry> list = new AList<DiffEntry>(2);
Magic Number,NGit.Diff,_IComparer_72,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,SortOf,The following statement contains a magic number: switch (changeType) 				{ 					case DiffEntry.ChangeType.DELETE: 					{ 						// Sort deletes before adds so that a major type change for 						// a file path (such as symlink to regular file) will first 						// remove the path' then add it back with the new type. 						// 						return 1; 					}  					case DiffEntry.ChangeType.ADD: 					{ 						return 2; 					}  					default: 					{ 						return 10; 						break; 					} 				}
Magic Number,NGit.Diff,_IComparer_72,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RenameDetector.cs,SortOf,The following statement contains a magic number: switch (changeType) 				{ 					case DiffEntry.ChangeType.DELETE: 					{ 						// Sort deletes before adds so that a major type change for 						// a file path (such as symlink to regular file) will first 						// remove the path' then add it back with the new type. 						// 						return 1; 					}  					case DiffEntry.ChangeType.ADD: 					{ 						return 2; 					}  					default: 					{ 						return 10; 						break; 					} 				}
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,SimilarityIndex,The following statement contains a magic number: idHashBits = 8;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Hash,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Hash,The following statement contains a magic number: hash = (hash << 5) + hash + c;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Hash,The following statement contains a magic number: byte[] buf = new byte[4096];
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Hash,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Hash,The following statement contains a magic number: hash = (hash << 5) + hash + c;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Slot,The following statement contains a magic number: return (int)(((uint)key) >> (31 - idHashBits));
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,GrowAt,The following statement contains a magic number: return (1 << idHashBits) * (idHashBits - 3) / idHashBits;
Magic Number,NGit.Diff,SimilarityIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityIndex.cs,Grow,The following statement contains a magic number: idHashBits == 30
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,Compute,The following statement contains a magic number: pm.BeginTask(JGitText.Get().renamesFindingByContent' 2 * srcs.Count * dsts.Count);
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The following statement contains a magic number: min * 100 / max < renameScore
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The following statement contains a magic number: int contentScore = s.Score(d' 10000);
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The following statement contains a magic number: int nameScore = NameScore(srcEnt.oldPath' dstEnt.newPath) * 100;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The following statement contains a magic number: int score = (contentScore * 99 + nameScore * 1) / 10000;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,BuildMatrix,The following statement contains a magic number: int score = (contentScore * 99 + nameScore * 1) / 10000;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: dirScoreLtr = 100;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: dirScoreRtl = 100;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: int fileScore = (fileSim * 100) / fileMax;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: return (((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: return (((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100;
Magic Number,NGit.Diff,SimilarityRenameDetector,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\SimilarityRenameDetector.cs,NameScore,The following statement contains a magic number: return (((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100;
Magic Number,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,HistogramDiffIndex,The following statement contains a magic number: keyShift = 32 - tableBits;
Magic Number,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,HistogramDiffIndex,The following statement contains a magic number: recs = new long[Math.Max(4' (int)(((uint)sz) >> 3))];
Magic Number,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,HistogramDiffIndex,The following statement contains a magic number: recs = new long[Math.Max(4' (int)(((uint)sz) >> 3))];
Magic Number,NGit.Diff,HistogramDiffIndex<S>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\HistogramDiffIndex.cs,TableBits,The following statement contains a magic number: int bits = 31 - Sharpen.Extensions.NumberOfLeadingZeros(sz);
Magic Number,NGit.Diff,RawTextComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,Hash,The following statement contains a magic number: int end = seq.lines.Get(lno + 2);
Magic Number,NGit.Diff,RawTextComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,FindForwardLine,The following statement contains a magic number: int end = lines.Size() - 2;
Magic Number,NGit.Diff,RawTextComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,FindForwardLine,The following statement contains a magic number: idx < end && lines.Get(idx + 2) < ptr
Magic Number,NGit.Diff,_RawTextComparator_56,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,_RawTextComparator_56,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: hash = ((hash << 5) + hash) + (raw[ptr] & unchecked((int)(0xff)));
Magic Number,NGit.Diff,_RawTextComparator_87,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,_RawTextComparator_87,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: hash = ((hash << 5) + hash) + (c & unchecked((int)(0xff)));
Magic Number,NGit.Diff,_RawTextComparator_138,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,_RawTextComparator_138,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: hash = ((hash << 5) + hash) + (raw[ptr] & unchecked((int)(0xff)));
Magic Number,NGit.Diff,_RawTextComparator_173,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,_RawTextComparator_173,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: hash = ((hash << 5) + hash) + (raw[ptr] & unchecked((int)(0xff)));
Magic Number,NGit.Diff,_RawTextComparator_208,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: int hash = 5381;
Magic Number,NGit.Diff,_RawTextComparator_208,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\RawTextComparator.cs,HashRegion,The following statement contains a magic number: hash = ((hash << 5) + hash) + (c & unchecked((int)(0xff)));
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: DirCacheEntry[] n = new DirCacheEntry[(entryCnt + 16) * 3 / 2];
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: DirCacheEntry[] n = new DirCacheEntry[(entryCnt + 16) * 3 / 2];
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastAdd,The following statement contains a magic number: DirCacheEntry[] n = new DirCacheEntry[(entryCnt + 16) * 3 / 2];
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (entryCnt + 16) * 3 / 2;
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (entryCnt + 16) * 3 / 2;
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,FastKeep,The following statement contains a magic number: int m1 = (entryCnt + 16) * 3 / 2;
Magic Number,NGit.Dircache,BaseDirCacheEditor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\BaseDirCacheEditor.cs,Replace,The following statement contains a magic number: entryCnt < entries.Length / 2
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,Builder,The following statement contains a magic number: return new DirCacheBuilder(this' entryCnt + 16);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,Editor,The following statement contains a magic number: return new DirCacheEditor(this' entryCnt + 16);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: byte[] hdr = new byte[20];
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: IOUtil.ReadFully(@in' hdr' 0' 12);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: md.Update(hdr' 0' 12);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: int ver = NB.DecodeInt32(hdr' 4);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: ver == 3
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: entryCnt = NB.DecodeInt32(hdr' 8);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: int smudge_s = (int)(snapshot.LastModified() / 1000);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: int smudge_ns = ((int)(snapshot.LastModified() % 1000)) * 1000000;
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: int smudge_ns = ((int)(snapshot.LastModified() % 1000)) * 1000000;
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: @in.Mark(21);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: IOUtil.ReadFully(@in' hdr' 0' 20);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: md.Update(hdr' 0' 8);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: IOUtil.SkipFully(@in' 8);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,ReadFrom,The following statement contains a magic number: long sz = NB.DecodeUInt32(hdr' 4);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,SkipOptionalExtension,The following statement contains a magic number: byte[] b = new byte[4096];
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,FormatExtensionName,The following statement contains a magic number: return "'" + Sharpen.Runtime.GetStringForBytes(hdr' 0' 4' "ISO-8859-1") + "'";
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: byte[] tmp = new byte[128];
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.EncodeInt32(tmp' 4' extended ? 3 : 2);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.EncodeInt32(tmp' 4' extended ? 3 : 2);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.EncodeInt32(tmp' 4' extended ? 3 : 2);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.EncodeInt32(tmp' 8' entryCnt);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: dos.Write(tmp' 0' 12);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: smudge_s = (int)(snapshot.LastModified() / 1000);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: smudge_ns = ((int)(snapshot.LastModified() % 1000)) * 1000000;
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: smudge_ns = ((int)(snapshot.LastModified() % 1000)) * 1000000;
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: NB.EncodeInt32(tmp' 4' (int)bb.Length());
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,WriteTo,The following statement contains a magic number: dos.Write(tmp' 0' 8);
Magic Number,NGit.Dircache,DirCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCache.cs,UpdateSmudgedEntries,The following statement contains a magic number: IList<string> paths = new AList<string>(128);
Magic Number,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,PreScanTwoTrees,The following statement contains a magic number: ProcessEntry(walk.GetTree<CanonicalTreeParser>(0)' walk.GetTree<CanonicalTreeParser 					>(1)' walk.GetTree<DirCacheBuildIterator>(2)' walk.GetTree<WorkingTreeIterator>( 					3));
Magic Number,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,PreScanTwoTrees,The following statement contains a magic number: ProcessEntry(walk.GetTree<CanonicalTreeParser>(0)' walk.GetTree<CanonicalTreeParser 					>(1)' walk.GetTree<DirCacheBuildIterator>(2)' walk.GetTree<WorkingTreeIterator>( 					3));
Magic Number,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,PrescanOneTree,The following statement contains a magic number: ProcessEntry(walk.GetTree<CanonicalTreeParser>(0)' walk.GetTree<DirCacheBuildIterator 					>(1)' walk.GetTree<WorkingTreeIterator>(2));
Magic Number,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,IsValidPathSegment,The following statement contains a magic number: len == 3 || len == 4
Magic Number,NGit.Dircache,DirCacheCheckout,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheCheckout.cs,IsValidPathSegment,The following statement contains a magic number: len == 3 || len == 4
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: stage < 0 || 3 < stage
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DirCacheEntry,The following statement contains a magic number: int flags = ((stage & unchecked((int)(0x3))) << 12);
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,Write,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,Write,The following statement contains a magic number: int expLen = (actLen + 8) & ~7;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,MightBeRacilyClean,The following statement contains a magic number: return smudge_ns <= NB.DecodeInt32(info' @base + 4);
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,SmudgeRacilyClean,The following statement contains a magic number: Arrays.Fill(info' @base' @base + 4' unchecked((byte)0));
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,CopyMetaData,The following statement contains a magic number: int SHIFTED_STAGE_MASK = unchecked((int)(0x3)) << 12;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DecodeTS,The following statement contains a magic number: int ms = NB.DecodeInt32(info' @base + 4) / 1000000;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DecodeTS,The following statement contains a magic number: int ms = NB.DecodeInt32(info' @base + 4) / 1000000;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,DecodeTS,The following statement contains a magic number: return 1000L * sec + ms;
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,EncodeTS,The following statement contains a magic number: NB.EncodeInt32(info' @base' (int)(when / 1000));
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,EncodeTS,The following statement contains a magic number: NB.EncodeInt32(info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,EncodeTS,The following statement contains a magic number: NB.EncodeInt32(info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,EncodeTS,The following statement contains a magic number: NB.EncodeInt32(info' @base + 4' ((int)(when % 1000)) * 1000000);
Magic Number,NGit.Dircache,DirCacheEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Dircache\DirCacheEntry.cs,GetExtendedFlags,The following statement contains a magic number: return NB.DecodeUInt16(info' infoOffset + P_FLAGS2) << 16;
Magic Number,NGit.Fnmatch,FileNameMatcher,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\FileNameMatcher.cs,CreateHeadsStartValues,The following statement contains a magic number: IList<Head> nextHeadsSuggestion = new AList<Head>(2);
Magic Number,NGit.Fnmatch,FileNameMatcher,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: int firstValidEndBracketIndex = indexOfStartBracket + 2;
Magic Number,NGit.Fnmatch,FileNameMatcher,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: int classEndIndex = pattern.IndexOf(classEnd' classStartIndex + 2);
Magic Number,NGit.Fnmatch,FileNameMatcher,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\FileNameMatcher.cs,FindGroupEnd,The following statement contains a magic number: firstValidCharClassIndex = classEndIndex + 2;
Magic Number,NGit.Fnmatch,GroupHead,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\GroupHead.cs,GroupHead,The following statement contains a magic number: char end = characterClass[2];
Magic Number,NGit.Fnmatch,GroupHead,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Fnmatch\GroupHead.cs,GroupHead,The following statement contains a magic number: characterClass.Length == 3 && characterClass[1] == '-'
Magic Number,NGit.Merge,MergeAlgorithm,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeAlgorithm.cs,Merge,The following statement contains a magic number: IList<S> sequences = new AList<S>(3);
Magic Number,NGit.Merge,MergeAlgorithm,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeAlgorithm.cs,Merge,The following statement contains a magic number: result.Add(2' 0' theirs.Size()' MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE);
Magic Number,NGit.Merge,MergeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeFormatter.cs,FormatMerge,The following statement contains a magic number: bool threeWayMerge = (res.GetSequences().Count == 3);
Magic Number,NGit.Merge,MergeFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\MergeFormatter.cs,FormatMerge,The following statement contains a magic number: IList<string> names = new AList<string>(3);
Magic Number,NGit.Merge,ThreeWayMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Merge\ThreeWayMerger.cs,Merge,The following statement contains a magic number: tips.Length != 2
Magic Number,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,ParseGitFileName,The following statement contains a magic number: buf[sp - 2] != '"'
Magic Number,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,ParseFileMode,The following statement contains a magic number: tmp <<= 3;
Magic Number,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,IsHunkHdr,The following statement contains a magic number: ptr - start < 2
Magic Number,NGit.Patch,FileHeader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\FileHeader.cs,IsHunkHdr,The following statement contains a magic number: return (ptr - 3) - start;
Magic Number,NGit.Patch,Patch,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Patch\Patch.cs,ParseFile,The following statement contains a magic number: n - c < 6
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: int ix = cx - LANE_WIDTH / 2;
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: DrawLine(pColor' myLaneX' h / 2' ix' h / 2' LINE_WIDTH);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: DrawLine(pColor' myLaneX' h / 2' ix' h / 2' LINE_WIDTH);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: DrawLine(pColor' ix' h / 2' cx' h' LINE_WIDTH);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: int dotX = myLaneX - dotSize / 2 - 1;
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: int dotY = (h - dotSize) / 2;
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: int textx = Math.Max(maxCenter + LANE_WIDTH / 2' dotX + dotSize) + 8;
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: int textx = Math.Max(maxCenter + LANE_WIDTH / 2' dotX + dotSize) + 8;
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: textx += DrawLabel(textx + dotSize' h / 2' commit.refs[i_1]);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: DrawText(msg' textx + dotSize + n * 2' h / 2);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,PaintCommit,The following statement contains a magic number: DrawText(msg' textx + dotSize + n * 2' h / 2);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,ComputeDotSize,The following statement contains a magic number: int d = (int)(Math.Min(h' LANE_WIDTH) * 0.50f);
Magic Number,NGit.Revplot,AbstractPlotRenderer<TLane;TColor>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\AbstractPlotRenderer.cs,LaneC,The following statement contains a magic number: return LaneX(myLane) + LANE_WIDTH / 2;
Magic Number,NGit.Revplot,PlotCommitList<L>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotCommitList.cs,Enter,The following statement contains a magic number: nChildren == 1 && currCommit.children[0].ParentCount < 2
Magic Number,NGit.Revplot,PlotRefComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotWalk.cs,Kind,The following statement contains a magic number: return 2;
Magic Number,NGit.Revplot,PlotRefComparator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revplot\PlotWalk.cs,Kind,The following statement contains a magic number: return 3;
Magic Number,NGit.Revwalk,Block,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\BlockObjQueue.cs,ResetToMiddle,The following statement contains a magic number: headIndex = tailIndex = BLOCK_SIZE / 2;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ObjectWalk,The following statement contains a magic number: pathBuf = new byte[256];
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,GetPathHashCode,The following statement contains a magic number: ptr = nameEnd - 16;
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,GetPathHashCode,The following statement contains a magic number: 16 <= (nameEnd - tv.namePtr)
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,GetPathHashCode,The following statement contains a magic number: hash = ((int)(((uint)hash) >> 2)) + (c << 24);
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,GetPathHashCode,The following statement contains a magic number: hash = ((int)(((uint)hash) >> 2)) + (c << 24);
Magic Number,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,MarkTreeUninteresting,The following statement contains a magic number: mode <<= 3;
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,ParseCanonical,The following statement contains a magic number: idBuffer.FromString(raw' 5);
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,ParseCanonical,The following statement contains a magic number: int ptr = 46;
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,ParseCanonical,The following statement contains a magic number: idBuffer.FromString(raw' ptr + 7);
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,ParseCanonical,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,GetFooterLines,The following statement contains a magic number: AList<FooterLine> r = new AList<FooterLine>(4);
Magic Number,NGit.Revwalk,RevCommit,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevCommit.cs,GetFooterLines,The following statement contains a magic number: int keyStart = ptr + 2;
Magic Number,NGit.Revwalk,RevObjectList<E>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevObjectList.cs,Get,The following statement contains a magic number: index >> s.shift >= 1024
Magic Number,NGit.Revwalk,RevTag,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevTag.cs,ParseCanonical,The following statement contains a magic number: pos.value = 53;
Magic Number,NGit.Revwalk,RevTag,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevTag.cs,ParseCanonical,The following statement contains a magic number: walk.idBuffer.FromString(rawTag' 7);
Magic Number,NGit.Revwalk,RevTag,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevTag.cs,ParseCanonical,The following statement contains a magic number: int p = pos.value += 4;
Magic Number,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,GetCachedBytes,The following statement contains a magic number: return ldr.GetCachedBytes(5 * MB);
Magic Number,NGit.Revwalk,RevWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalk.cs,AllocFlag,The following statement contains a magic number: throw new ArgumentException(MessageFormat.Format(JGitText.Get().flagsAlreadyCreated 					' Sharpen.Extensions.ValueOf(32 - RESERVED_FLAGS)));
Magic Number,NGit.Revwalk,RevWalkUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalkUtils.cs,FindBranchesReachableFrom,The following statement contains a magic number: int SKEW = 24 * 3600;
Magic Number,NGit.Revwalk,RevWalkUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\RevWalkUtils.cs,FindBranchesReachableFrom,The following statement contains a magic number: int SKEW = 24 * 3600;
Magic Number,NGit.Revwalk.Filter,AndRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Create,The following statement contains a magic number: list.Length == 2
Magic Number,NGit.Revwalk.Filter,AndRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Create,The following statement contains a magic number: list.Length < 2
Magic Number,NGit.Revwalk.Filter,AndRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Create,The following statement contains a magic number: list.Count < 2
Magic Number,NGit.Revwalk.Filter,AndRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\AndRevFilter.cs,Create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,CommitTimeRevFilter,The following statement contains a magic number: when = (int)(ts / 1000);
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilterBefore,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + Sharpen.Extensions.CreateDate(when * 1000L) + ")";
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilterAfter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + Sharpen.Extensions.CreateDate(when * 1000L) + ")";
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilterBetween,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,CommitTimeRevFilterBetween,The following statement contains a magic number: this.until = (int)(until / 1000);
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilterBetween,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + Sharpen.Extensions.CreateDate(when * 1000L) + " - " 				 + Sharpen.Extensions.CreateDate(until * 1000L) + ")";
Magic Number,NGit.Revwalk.Filter,CommitTimeRevFilterBetween,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\CommitTimeRevFilter.cs,ToString,The following statement contains a magic number: return base.ToString() + "(" + Sharpen.Extensions.CreateDate(when * 1000L) + " - " 				 + Sharpen.Extensions.CreateDate(until * 1000L) + ")";
Magic Number,NGit.Revwalk.Filter,OrRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\OrRevFilter.cs,Create,The following statement contains a magic number: list.Length == 2
Magic Number,NGit.Revwalk.Filter,OrRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\OrRevFilter.cs,Create,The following statement contains a magic number: list.Length < 2
Magic Number,NGit.Revwalk.Filter,OrRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\OrRevFilter.cs,Create,The following statement contains a magic number: list.Count < 2
Magic Number,NGit.Revwalk.Filter,OrRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\OrRevFilter.cs,Create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,NGit.Revwalk.Filter,NoMergesFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\RevFilter.cs,Include,The following statement contains a magic number: return c.ParentCount < 2;
Magic Number,NGit.Storage.File,ByteBufferWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ByteBufferWindow.cs,SetInput,The following statement contains a magic number: byte[] tmp = new byte[Math.Min(s.Remaining()' 512)];
Magic Number,NGit.Storage.File,CachedObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\CachedObjectDirectory.cs,CachedObjectDirectory,The following statement contains a magic number: d.Length != 2
Magic Number,NGit.Storage.File,CachedObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\CachedObjectDirectory.cs,CachedObjectDirectory,The following statement contains a magic number: e.Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,NGit.Storage.File,FileObjectDatabase,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileObjectDatabase.cs,FileFor,The following statement contains a magic number: string d = Sharpen.Runtime.Substring(objectName' 0' 2);
Magic Number,NGit.Storage.File,FileObjectDatabase,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileObjectDatabase.cs,FileFor,The following statement contains a magic number: string f = Sharpen.Runtime.Substring(objectName' 2);
Magic Number,NGit.Storage.File,LargePackedDeltaObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedDeltaObject.cs,OpenStream,The following statement contains a magic number: @in = new BufferedInputStream(@in' 8192);
Magic Number,NGit.Storage.File,LargePackedWholeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedWholeObject.cs,OpenStream,The following statement contains a magic number: @in = new BufferedInputStream(new InflaterInputStream(@in' wc.Inflater()' 8192)'  				8192);
Magic Number,NGit.Storage.File,LargePackedWholeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LargePackedWholeObject.cs,OpenStream,The following statement contains a magic number: @in = new BufferedInputStream(new InflaterInputStream(@in' wc.Inflater()' 8192)'  				8192);
Magic Number,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,WaitForStatChange,The following statement contains a magic number: Sharpen.Thread.Sleep(25);
Magic Number,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,DeleteRef,The following statement contains a magic number: Sharpen.Thread.Sleep(100);
Magic Number,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,DeleteRef,The following statement contains a magic number: attempts < 10
Magic Number,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,RenameLock,The following statement contains a magic number: Sharpen.Thread.Sleep(100);
Magic Number,NGit.Storage.File,LockFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\LockFile.cs,RenameLock,The following statement contains a magic number: attempts < 10
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,The following statement contains a magic number: AList<LocalCachedPack> list = new AList<LocalCachedPack>(4);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,The following statement contains a magic number: tips.AddItem(ObjectId.FromString(buf' ptr + 2));
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,The following statement contains a magic number: ptr = RawParseUtils.NextLF(buf' ptr + 2);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,The following statement contains a magic number: IList<string> names = new AList<string>(4);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanCachedPacks,The following statement contains a magic number: names.AddItem(RawParseUtils.Decode(buf' ptr + 2' end));
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,OpenPack,The following statement contains a magic number: p.Length != 50 || !p.StartsWith("pack-") || !p.EndsWith(".pack")
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,OpenPack,The following statement contains a magic number: i.Length != 49 || !i.StartsWith("pack-") || !i.EndsWith(".idx")
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,OpenPack,The following statement contains a magic number: !Sharpen.Runtime.Substring(p' 0' 45).Equals(Sharpen.Runtime.Substring(i' 0' 45 				))
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,OpenPack,The following statement contains a magic number: !Sharpen.Runtime.Substring(p' 0' 45).Equals(Sharpen.Runtime.Substring(i' 0' 45 				))
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,Resolve,The following statement contains a magic number: string fanOut = Sharpen.Runtime.Substring(id.Name' 0' 2);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,Resolve,The following statement contains a magic number: e.Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: IList<PackFile> list = new AList<PackFile>(names.Count >> 2);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: indexName.Length != 49 || !indexName.EndsWith(".idx")
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,ScanPacksImpl,The following statement contains a magic number: string @base = Sharpen.Runtime.Substring(indexName' 0' indexName.Length - 4);
Magic Number,NGit.Storage.File,ObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectory.cs,LoadAlternates,The following statement contains a magic number: IList<FileObjectDatabase.AlternateHandle> l = new AList<FileObjectDatabase.AlternateHandle 				>(4);
Magic Number,NGit.Storage.File,ObjectDirectoryInserter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryInserter.cs,Compress,The following statement contains a magic number: return new DeflaterOutputStream(@out' deflate' 8192);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,PackFile,The following statement contains a magic number: this.packLastModified = (int)(packFile.LastModified() >> 10);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,PackFile,The following statement contains a magic number: hash = Runtime.IdentityHashCode(this) * 31;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: ReadFully(src.offset' buf' 0' 20' curs);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: long inflatedLength = c & 15;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: int shift = 4;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,CopyAsIs2,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: byte[] buf = new byte[20];
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: fd.ReadFully(buf' 0' 12);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: RawParseUtils.Match(buf' 0' Constants.PACK_SIGNATURE) != 4
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: long vers = NB.DecodeUInt32(buf' 4);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: long packCnt = NB.DecodeUInt32(buf' 8);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: fd.Seek(length - 20);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,OnOpenPack,The following statement contains a magic number: fd.ReadFully(buf' 0' 20);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: ReadFully(pos' ib' 0' 20' curs);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: long sz = c & 15;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: int shift = 4;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Load,The following statement contains a magic number: switch (typeCode) 					{ 						case Constants.OBJ_COMMIT: 						case Constants.OBJ_TREE: 						case Constants.OBJ_BLOB: 						case Constants.OBJ_TAG: 						{ 							if (sz < curs.GetStreamFileThreshold()) 							{ 								data = Decompress(pos + p' (int)sz' curs); 							} 							if (delta != null) 							{ 								type = typeCode; 								goto SEARCH_break; 							} 							if (data != null) 							{ 								return new ObjectLoader.SmallObject(typeCode' data); 							} 							else 							{ 								return new LargePackedWholeObject(typeCode' sz' pos' p' this' curs.db); 							} 							goto case Constants.OBJ_OFS_DELTA; 						}  						case Constants.OBJ_OFS_DELTA: 						{ 							c = ib[p++] & unchecked((int)(0xff)); 							long @base = c & 127; 							while ((c & 128) != 0) 							{ 								@base += 1; 								c = ib[p++] & unchecked((int)(0xff)); 								@base <<= 7; 								@base += (c & 127); 							} 							@base = pos - @base; 							delta = new PackFile.Delta(delta' pos' (int)sz' p' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						case Constants.OBJ_REF_DELTA: 						{ 							ReadFully(pos + p' ib' 0' 20' curs); 							long @base = FindDeltaBase(ObjectId.FromRaw(ib)); 							delta = new PackFile.Delta(delta' pos' (int)sz' p + 20' @base); 							if (sz != delta.deltaSize) 							{ 								goto SEARCH_break; 							} 							DeltaBaseCache.Entry e = curs.GetDeltaBaseCache().Get(this' @base); 							if (e != null) 							{ 								type = e.type; 								data = e.data; 								cached = true; 								goto SEARCH_break; 							} 							pos = @base; 							goto SEARCH_continue; 						}  						default: 						{ 							throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 								(typeCode))); 						} 					}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetDeltaHeader,The following statement contains a magic number: byte[] hdr = new byte[18];
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: ReadFully(pos' ib' 0' 20' curs);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: int type = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: int type = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: switch (type) 				{ 					case Constants.OBJ_COMMIT: 					case Constants.OBJ_TREE: 					case Constants.OBJ_BLOB: 					case Constants.OBJ_TAG: 					{ 						return type; 					}  					case Constants.OBJ_OFS_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						c = ib[p++] & unchecked((int)(0xff)); 						long ofs = c & 127; 						while ((c & 128) != 0) 						{ 							ofs += 1; 							c = ib[p++] & unchecked((int)(0xff)); 							ofs <<= 7; 							ofs += (c & 127); 						} 						pos = pos - ofs; 						continue; 						goto case Constants.OBJ_REF_DELTA; 					}  					case Constants.OBJ_REF_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						ReadFully(pos + p' ib' 0' 20' curs); 						pos = FindDeltaBase(ObjectId.FromRaw(ib)); 						continue; 						goto default; 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 							(type))); 					} 				}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: switch (type) 				{ 					case Constants.OBJ_COMMIT: 					case Constants.OBJ_TREE: 					case Constants.OBJ_BLOB: 					case Constants.OBJ_TAG: 					{ 						return type; 					}  					case Constants.OBJ_OFS_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						c = ib[p++] & unchecked((int)(0xff)); 						long ofs = c & 127; 						while ((c & 128) != 0) 						{ 							ofs += 1; 							c = ib[p++] & unchecked((int)(0xff)); 							ofs <<= 7; 							ofs += (c & 127); 						} 						pos = pos - ofs; 						continue; 						goto case Constants.OBJ_REF_DELTA; 					}  					case Constants.OBJ_REF_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						ReadFully(pos + p' ib' 0' 20' curs); 						pos = FindDeltaBase(ObjectId.FromRaw(ib)); 						continue; 						goto default; 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 							(type))); 					} 				}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: switch (type) 				{ 					case Constants.OBJ_COMMIT: 					case Constants.OBJ_TREE: 					case Constants.OBJ_BLOB: 					case Constants.OBJ_TAG: 					{ 						return type; 					}  					case Constants.OBJ_OFS_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						c = ib[p++] & unchecked((int)(0xff)); 						long ofs = c & 127; 						while ((c & 128) != 0) 						{ 							ofs += 1; 							c = ib[p++] & unchecked((int)(0xff)); 							ofs <<= 7; 							ofs += (c & 127); 						} 						pos = pos - ofs; 						continue; 						goto case Constants.OBJ_REF_DELTA; 					}  					case Constants.OBJ_REF_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						ReadFully(pos + p' ib' 0' 20' curs); 						pos = FindDeltaBase(ObjectId.FromRaw(ib)); 						continue; 						goto default; 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 							(type))); 					} 				}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: switch (type) 				{ 					case Constants.OBJ_COMMIT: 					case Constants.OBJ_TREE: 					case Constants.OBJ_BLOB: 					case Constants.OBJ_TAG: 					{ 						return type; 					}  					case Constants.OBJ_OFS_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						c = ib[p++] & unchecked((int)(0xff)); 						long ofs = c & 127; 						while ((c & 128) != 0) 						{ 							ofs += 1; 							c = ib[p++] & unchecked((int)(0xff)); 							ofs <<= 7; 							ofs += (c & 127); 						} 						pos = pos - ofs; 						continue; 						goto case Constants.OBJ_REF_DELTA; 					}  					case Constants.OBJ_REF_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						ReadFully(pos + p' ib' 0' 20' curs); 						pos = FindDeltaBase(ObjectId.FromRaw(ib)); 						continue; 						goto default; 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 							(type))); 					} 				}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectType,The following statement contains a magic number: switch (type) 				{ 					case Constants.OBJ_COMMIT: 					case Constants.OBJ_TREE: 					case Constants.OBJ_BLOB: 					case Constants.OBJ_TAG: 					{ 						return type; 					}  					case Constants.OBJ_OFS_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						c = ib[p++] & unchecked((int)(0xff)); 						long ofs = c & 127; 						while ((c & 128) != 0) 						{ 							ofs += 1; 							c = ib[p++] & unchecked((int)(0xff)); 							ofs <<= 7; 							ofs += (c & 127); 						} 						pos = pos - ofs; 						continue; 						goto case Constants.OBJ_REF_DELTA; 					}  					case Constants.OBJ_REF_DELTA: 					{ 						int p = 1; 						while ((c & unchecked((int)(0x80))) != 0) 						{ 							c = ib[p++] & unchecked((int)(0xff)); 						} 						ReadFully(pos + p' ib' 0' 20' curs); 						pos = FindDeltaBase(ObjectId.FromRaw(ib)); 						continue; 						goto default; 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 							(type))); 					} 				}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: ReadFully(pos' ib' 0' 20' curs);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: int type = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: int type = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: long sz = c & 15;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: int shift = 4;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: switch (type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return sz; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					while ((c & 128) != 0) 					{ 						c = ib[p++] & unchecked((int)(0xff)); 					} 					deltaAt = pos + p; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					deltaAt = pos + p + 20; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(type))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,GetObjectSize,The following statement contains a magic number: switch (type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return sz; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					while ((c & 128) != 0) 					{ 						c = ib[p++] & unchecked((int)(0xff)); 					} 					deltaAt = pos + p; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					deltaAt = pos + p + 20; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(type))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: ReadFully(pos' ib' 0' 20' curs);
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return LocalObjectRepresentation.NewWhole(this' pos' len - p); 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ib[p++] & unchecked((int)(0xff)); 						ofs <<= 7; 						ofs += (c & 127); 					} 					ofs = pos - ofs; 					return LocalObjectRepresentation.NewDelta(this' pos' len - p' ofs); 				}  				case Constants.OBJ_REF_DELTA: 				{ 					len -= p; 					len -= Constants.OBJECT_ID_LENGTH; 					ReadFully(pos + p' ib' 0' 20' curs); 					ObjectId id = ObjectId.FromRaw(ib); 					return LocalObjectRepresentation.NewDelta(this' pos' len' id); 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return LocalObjectRepresentation.NewWhole(this' pos' len - p); 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ib[p++] & unchecked((int)(0xff)); 						ofs <<= 7; 						ofs += (c & 127); 					} 					ofs = pos - ofs; 					return LocalObjectRepresentation.NewDelta(this' pos' len - p' ofs); 				}  				case Constants.OBJ_REF_DELTA: 				{ 					len -= p; 					len -= Constants.OBJECT_ID_LENGTH; 					ReadFully(pos + p' ib' 0' 20' curs); 					ObjectId id = ObjectId.FromRaw(ib); 					return LocalObjectRepresentation.NewDelta(this' pos' len' id); 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return LocalObjectRepresentation.NewWhole(this' pos' len - p); 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ib[p++] & unchecked((int)(0xff)); 						ofs <<= 7; 						ofs += (c & 127); 					} 					ofs = pos - ofs; 					return LocalObjectRepresentation.NewDelta(this' pos' len - p' ofs); 				}  				case Constants.OBJ_REF_DELTA: 				{ 					len -= p; 					len -= Constants.OBJECT_ID_LENGTH; 					ReadFully(pos + p' ib' 0' 20' curs); 					ObjectId id = ObjectId.FromRaw(ib); 					return LocalObjectRepresentation.NewDelta(this' pos' len' id); 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return LocalObjectRepresentation.NewWhole(this' pos' len - p); 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ib[p++] & unchecked((int)(0xff)); 						ofs <<= 7; 						ofs += (c & 127); 					} 					ofs = pos - ofs; 					return LocalObjectRepresentation.NewDelta(this' pos' len - p' ofs); 				}  				case Constants.OBJ_REF_DELTA: 				{ 					len -= p; 					len -= Constants.OBJECT_ID_LENGTH; 					ReadFully(pos + p' ib' 0' 20' curs); 					ObjectId id = ObjectId.FromRaw(ib); 					return LocalObjectRepresentation.NewDelta(this' pos' len' id); 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,Representation,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					return LocalObjectRepresentation.NewWhole(this' pos' len - p); 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ib[p++] & unchecked((int)(0xff)); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ib[p++] & unchecked((int)(0xff)); 						ofs <<= 7; 						ofs += (c & 127); 					} 					ofs = pos - ofs; 					return LocalObjectRepresentation.NewDelta(this' pos' len - p' ofs); 				}  				case Constants.OBJ_REF_DELTA: 				{ 					len -= p; 					len -= Constants.OBJECT_ID_LENGTH; 					ReadFully(pos + p' ib' 0' 20' curs); 					ObjectId id = ObjectId.FromRaw(ib); 					return LocalObjectRepresentation.NewDelta(this' pos' len' id); 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Storage.File,PackFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackFile.cs,FindEndOffset,The following statement contains a magic number: long maxOffset = length - 20;
Magic Number,NGit.Storage.File,PackIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndex.cs,Read,The following statement contains a magic number: byte[] hdr = new byte[8];
Magic Number,NGit.Storage.File,PackIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndex.cs,Read,The following statement contains a magic number: int v = NB.DecodeInt32(hdr' 4);
Magic Number,NGit.Storage.File,PackIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndex.cs,Read,The following statement contains a magic number: switch (v) 				{ 					case 2: 					{ 						return new PackIndexV2(fd); 					}  					default: 					{ 						throw new IOException(MessageFormat.Format(JGitText.Get().unsupportedPackIndexVersion 							' Sharpen.Extensions.ValueOf(v))); 					} 				}
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: idxHeader = new long[256];
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: idxHeader[k] = NB.DecodeUInt32(fanoutTable' k * 4);
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: idxdata[k_1] = new byte[n * (Constants.OBJECT_ID_LENGTH + 4)];
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: objectCnt = idxHeader[255];
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,PackIndexV1,The following statement contains a magic number: packChecksum = new byte[20];
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,FindOffset,The following statement contains a magic number: int high = data.Length / (4 + Constants.OBJECT_ID_LENGTH);
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,Resolve,The following statement contains a magic number: int max = data.Length / (4 + Constants.OBJECT_ID_LENGTH);
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,IdOffset,The following statement contains a magic number: return ((4 + Constants.OBJECT_ID_LENGTH) * mid) + 4;
Magic Number,NGit.Storage.File,PackIndexV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,IdOffset,The following statement contains a magic number: return ((4 + Constants.OBJECT_ID_LENGTH) * mid) + 4;
Magic Number,NGit.Storage.File,IndexV1Iterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV1.cs,Next,The following statement contains a magic number: this.levelTwo += Constants.OBJECT_ID_LENGTH + 4;
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: byte[] fanoutRaw = new byte[4 * FANOUT];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: fanoutTable[k] = NB.DecodeUInt32(fanoutRaw' k * 4);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: int[] bin = new int[(int)(((uint)intNameLen) >> 2)];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: bin[i] = NB.DecodeInt32(raw' i << 2);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: offset32[k_1] = new byte[(int)(bucketCnt * 4)];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: crc32[k_1] = new byte[(int)(bucketCnt * 4)];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: offset64 = new byte[o64cnt * 8];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,PackIndexV2,The following statement contains a magic number: packChecksum = new byte[20];
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,GetOffset64Count,The following statement contains a magic number: return offset64.Length / 8;
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,GetObjectId,The following statement contains a magic number: int p4 = p << 2;
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,FindOffset,The following statement contains a magic number: long p = NB.DecodeUInt32(offset32[levelOne]' levelTwo << 2);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,FindOffset,The following statement contains a magic number: return NB.DecodeUInt64(offset64' (8 * (int)(p & ~IS_O64)));
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,FindCRC32,The following statement contains a magic number: return NB.DecodeUInt32(crc32[levelOne]' levelTwo << 2);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,Resolve,The following statement contains a magic number: int max = (int)(((uint)offset32[id.FirstByte].Length) >> 2);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,IdOffset,The following statement contains a magic number: return (p << 2) + p;
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,BinarySearchLevelTwo,The following statement contains a magic number: int high = (int)(((uint)offset32[levelOne].Length) >> 2);
Magic Number,NGit.Storage.File,PackIndexV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,BinarySearchLevelTwo,The following statement contains a magic number: int mid4 = mid << 2;
Magic Number,NGit.Storage.File,EntriesIteratorV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,Next,The following statement contains a magic number: int idx = this.levelTwo / (Constants.OBJECT_ID_LENGTH / 4) * 4;
Magic Number,NGit.Storage.File,EntriesIteratorV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,Next,The following statement contains a magic number: int idx = this.levelTwo / (Constants.OBJECT_ID_LENGTH / 4) * 4;
Magic Number,NGit.Storage.File,EntriesIteratorV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,Next,The following statement contains a magic number: idx = (8 * (int)(offset & ~PackIndexV2.IS_O64));
Magic Number,NGit.Storage.File,EntriesIteratorV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,Next,The following statement contains a magic number: this.levelTwo += Constants.OBJECT_ID_LENGTH / 4;
Magic Number,NGit.Storage.File,_MutableEntry_291,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexV2.cs,EnsureId,The following statement contains a magic number: this.idBuffer.FromRaw(this._enclosing._enclosing.names[this._enclosing.levelOne]'  						this._enclosing.levelTwo - Constants.OBJECT_ID_LENGTH / 4);
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,CreateOldestPossible,The following statement contains a magic number: switch (version) 				{ 					case 1: 					{ 						if (PackIndexWriterV1.CanStore(oe)) 						{ 							continue; 						} 						version = 2; 						goto case 2; 					}  					case 2: 					{ 						goto LOOP_break; 					} 				}
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,CreateOldestPossible,The following statement contains a magic number: switch (version) 				{ 					case 1: 					{ 						if (PackIndexWriterV1.CanStore(oe)) 						{ 							continue; 						} 						version = 2; 						goto case 2; 					}  					case 2: 					{ 						goto LOOP_break; 					} 				}
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,CreateOldestPossible,The following statement contains a magic number: switch (version) 				{ 					case 1: 					{ 						if (PackIndexWriterV1.CanStore(oe)) 						{ 							continue; 						} 						version = 2; 						goto case 2; 					}  					case 2: 					{ 						goto LOOP_break; 					} 				}
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,CreateVersion,The following statement contains a magic number: switch (version) 			{ 				case 1: 				{ 					return new PackIndexWriterV1(dst); 				}  				case 2: 				{ 					return new PackIndexWriterV2(dst); 				}  				default: 				{ 					throw new ArgumentException(MessageFormat.Format(JGitText.Get().unsupportedPackIndexVersion 						' Sharpen.Extensions.ValueOf(version))); 				} 			}
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,PackIndexWriter,The following statement contains a magic number: tmp = new byte[4 + Constants.OBJECT_ID_LENGTH];
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,WriteTOC,The following statement contains a magic number: @out.Write(tmp' 0' 4);
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: int[] fanout = new int[256];
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: i < 256
Magic Number,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,WriteFanOutTable,The following statement contains a magic number: @out.Write(tmp' 0' 4);
Magic Number,NGit.Storage.File,PackIndexWriterV1,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriterV1.cs,WriteImpl,The following statement contains a magic number: oe.CopyRawTo(tmp' 4);
Magic Number,NGit.Storage.File,PackIndexWriterV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriterV2.cs,WriteImpl,The following statement contains a magic number: WriteTOC(2);
Magic Number,NGit.Storage.File,PackIndexWriterV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriterV2.cs,WriteCRCs,The following statement contains a magic number: @out.Write(tmp' 0' 4);
Magic Number,NGit.Storage.File,PackIndexWriterV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriterV2.cs,WriteOffset32,The following statement contains a magic number: @out.Write(tmp' 0' 4);
Magic Number,NGit.Storage.File,PackIndexWriterV2,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriterV2.cs,WriteOffset64,The following statement contains a magic number: @out.Write(tmp' 0' 8);
Magic Number,NGit.Storage.File,PackLock,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackLock.cs,PackLock,The following statement contains a magic number: keepFile = new FilePath(p' Sharpen.Runtime.Substring(n' 0' n.Length - 5) + ".keep" 				);
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Delete,The following statement contains a magic number: int levels = LevelsIn(name) - 2;
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,Pack,The following statement contains a magic number: int levels = LevelsIn(refName_1) - 2;
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ScanRef,The following statement contains a magic number: int limit = 4096;
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ScanRef,The following statement contains a magic number: n < 6
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,ScanRef,The following statement contains a magic number: string target = RawParseUtils.Decode(buf' 5' n);
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,IsSymRef,The following statement contains a magic number: n < 6
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,IsSymRef,The following statement contains a magic number: return buf[0] == 'r' && buf[1] == 'e' && buf[2] == 'f' && buf[3] == ':' && buf[4] 				 == ' ';
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,IsSymRef,The following statement contains a magic number: return buf[0] == 'r' && buf[1] == 'e' && buf[2] == 'f' && buf[3] == ':' && buf[4] 				 == ' ';
Magic Number,NGit.Storage.File,RefDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectory.cs,IsSymRef,The following statement contains a magic number: return buf[0] == 'r' && buf[1] == 'e' && buf[2] == 'f' && buf[3] == ':' && buf[4] 				 == ' ';
Magic Number,NGit.Storage.File,RefDirectoryRename,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\RefDirectoryRename.cs,RenameLog,The following statement contains a magic number: int levels = RefDirectory.LevelsIn(src.GetName()) - 2;
Magic Number,NGit.Storage.File,ReflogReader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ReflogReader.cs,GetReverseEntry,The following statement contains a magic number: return new ReflogEntry(log' rs < 0 ? 0 : rs + 2);
Magic Number,NGit.Storage.File,ReflogReader,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ReflogReader.cs,GetReverseEntries,The following statement contains a magic number: ReflogEntry entry = new ReflogEntry(log' rs < 0 ? 0 : rs + 2);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The following statement contains a magic number: @in.Mark(20);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The following statement contains a magic number: byte[] hdr = new byte[64];
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The following statement contains a magic number: IOUtil.ReadFully(@in' hdr' 0' 2);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The following statement contains a magic number: int avail = ReadSome(zIn' hdr' 0' 64);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Open,The following statement contains a magic number: avail < 5
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,GetSize,The following statement contains a magic number: @in.Mark(20);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,GetSize,The following statement contains a magic number: byte[] hdr = new byte[64];
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,GetSize,The following statement contains a magic number: IOUtil.ReadFully(@in' hdr' 0' 2);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,GetSize,The following statement contains a magic number: int avail = ReadSome(zIn' hdr' 0' 64);
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,GetSize,The following statement contains a magic number: avail < 5
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,IsStandardFormat,The following statement contains a magic number: return (fb & unchecked((int)(0x8f))) == unchecked((int)(0x08)) && (((fb << 8) | hdr 				[1] & unchecked((int)(0xff))) % 31) == 0;
Magic Number,NGit.Storage.File,UnpackedObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,IsStandardFormat,The following statement contains a magic number: return (fb & unchecked((int)(0x8f))) == unchecked((int)(0x08)) && (((fb << 8) | hdr 				[1] & unchecked((int)(0xff))) % 31) == 0;
Magic Number,NGit.Storage.File,_InflaterInputStream_307,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,Close,The following statement contains a magic number: UnpackedObject.CheckValidEndOfStream(this.@in' this.inf' id' new byte[64]);
Magic Number,NGit.Storage.File,LargeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,OpenStream,The following statement contains a magic number: byte[] hdr = new byte[64];
Magic Number,NGit.Storage.File,LargeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,OpenStream,The following statement contains a magic number: @in.Mark(20);
Magic Number,NGit.Storage.File,LargeObject,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObject.cs,OpenStream,The following statement contains a magic number: IOUtil.ReadFully(@in' hdr' 0' 2);
Magic Number,NGit.Storage.File,Table,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\UnpackedObjectCache.cs,Table,The following statement contains a magic number: this.shift = 32 - bits;
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,Bits,The following statement contains a magic number: newSize < 4096
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The following statement contains a magic number: int eb = (int)(tableSize * .1);
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The following statement contains a magic number: eb = 64;
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,WindowCache,The following statement contains a magic number: 64 < eb
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,TableSize,The following statement contains a magic number: return (int)Math.Min(5 * (limit / wsz) / 2' 2000000000);
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,TableSize,The following statement contains a magic number: return (int)Math.Min(5 * (limit / wsz) / 2' 2000000000);
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,TableSize,The following statement contains a magic number: return (int)Math.Min(5 * (limit / wsz) / 2' 2000000000);
Magic Number,NGit.Storage.File,WindowCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCache.cs,LockCount,The following statement contains a magic number: return Math.Max(cfg.GetPackedGitOpenFiles()' 32);
Magic Number,NGit.Storage.File,WindowCacheConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: packedGitOpenFiles = 128;
Magic Number,NGit.Storage.File,WindowCacheConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: packedGitLimit = 10 * MB;
Magic Number,NGit.Storage.File,WindowCacheConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: packedGitWindowSize = 8 * KB;
Magic Number,NGit.Storage.File,WindowCacheConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCacheConfig.cs,WindowCacheConfig,The following statement contains a magic number: deltaBaseCacheLimit = 10 * MB;
Magic Number,NGit.Storage.File,WindowCacheConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCacheConfig.cs,FromConfig,The following statement contains a magic number: sft = Math.Min(sft' maxMem / 4);
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: window.Copy(0' buf' 0' 12) != 12
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: window.Copy(0' buf' 0' 12) != 12
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: md.Update(buf' 0' 12);
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: long position = 12;
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: long remaining = length - (12 + 20);
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: long remaining = length - (12 + 20);
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: byte[] buf = new byte[20];
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: window.Copy(position' buf' 0' 20) != 20
Magic Number,NGit.Storage.File,WindowCursor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\WindowCursor.cs,CopyPackAsIs,The following statement contains a magic number: window.Copy(position' buf' 0' 20) != 20
Magic Number,NGit.Storage.File,DeltaBaseCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\DeltaBaseCache.cs,Hash,The following statement contains a magic number: return (int)(((uint)(((int)position) << 22)) >> 22);
Magic Number,NGit.Storage.File,DeltaBaseCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\DeltaBaseCache.cs,Hash,The following statement contains a magic number: return (int)(((uint)(((int)position) << 22)) >> 22);
Magic Number,NGit.Storage.File,FileSnapshot,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\FileSnapshot.cs,NotRacyClean,The following statement contains a magic number: return read - lastModified > 2500;
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnAppendBase,The following statement contains a magic number: buf[len++] = unchecked((byte)((typeCode << 4) | sz & 15));
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnAppendBase,The following statement contains a magic number: buf[len++] = unchecked((byte)((typeCode << 4) | sz & 15));
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnAppendBase,The following statement contains a magic number: sz = (int)(((uint)sz) >> 4);
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnAppendBase,The following statement contains a magic number: sz = (int)(((uint)sz) >> 7);
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: @out.ReadFully(buf' 0' 12);
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: origDigest.Update(buf' 0' 12);
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: origRemaining -= 12;
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: NB.EncodeInt32(buf' 8' GetObjectCount());
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: @out.Write(buf' 0' 12);
Magic Number,NGit.Storage.File,ObjectDirectoryPackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\ObjectDirectoryPackParser.cs,OnEndThinPack,The following statement contains a magic number: packDigest.Update(buf' 0' 12);
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Gc,The following statement contains a magic number: pm.Start(6);
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,PrunePacked,The following statement contains a magic number: d.Length != 2
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,PrunePacked,The following statement contains a magic number: e.Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Prune,The following statement contains a magic number: d.Length != 2
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Prune,The following statement contains a magic number: fName.Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,Repack,The following statement contains a magic number: IList<PackFile> ret = new AList<PackFile>(2);
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,GetStatistics,The following statement contains a magic number: d.Length != 2
Magic Number,NGit.Storage.File,GC,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\GC.cs,GetStatistics,The following statement contains a magic number: f_1.GetName().Length != Constants.OBJECT_ID_STRING_LENGTH - 2
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,GetBaseSize,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,GetResultSize,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 24;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Apply,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: copyOffset |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 24;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,BinaryDelta,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\BinaryDelta.cs,Format,The following statement contains a magic number: copySize |= (delta[deltaPtr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,DeltaCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaCache.cs,CanCache,The following statement contains a magic number: length >> 10 < (src.GetWeight() >> 20) + (res.GetWeight() >> 21)
Magic Number,NGit.Storage.Pack,DeltaCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaCache.cs,CanCache,The following statement contains a magic number: length >> 10 < (src.GetWeight() >> 20) + (res.GetWeight() >> 21)
Magic Number,NGit.Storage.Pack,DeltaCache,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaCache.cs,CanCache,The following statement contains a magic number: length >> 10 < (src.GetWeight() >> 20) + (res.GetWeight() >> 21)
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,WriteVarint,The following statement contains a magic number: sz = (long)(((ulong)sz) >> 7);
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: buf[p++] = unchecked((byte)(((long)(((ulong)offset) >> 8)) & unchecked((int)(0xff 					))));
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: (offset & (unchecked((int)(0xff)) << 8)) != 0
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: buf[p++] = unchecked((byte)(((long)(((ulong)offset) >> 16)) & unchecked((int)(0xff 					))));
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: (offset & (unchecked((int)(0xff)) << 16)) != 0
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: buf[p++] = unchecked((byte)(((long)(((ulong)offset) >> 24)) & unchecked((int)(0xff 					))));
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: (offset & (unchecked((int)(0xff)) << 24)) != 0
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: buf[p++] = unchecked((byte)(((int)(((uint)cnt) >> 8)) & unchecked((int)(0xff))));
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: (cnt & (unchecked((int)(0xff)) << 8)) != 0
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: buf[p++] = unchecked((byte)(((int)(((uint)cnt) >> 16)) & unchecked((int)(0xff))));
Magic Number,NGit.Storage.Pack,DeltaEncoder,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaEncoder.cs,EncodeCopy,The following statement contains a magic number: (cnt & (unchecked((int)(0xff)) << 16)) != 0
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,EstimateIndexSize,The following statement contains a magic number: return sourceLength + (sourceLength * 3 / 4);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,EstimateIndexSize,The following statement contains a magic number: return sourceLength + (sourceLength * 3 / 4);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,GetIndexSize,The following statement contains a magic number: long sz = 8;
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,GetIndexSize,The following statement contains a magic number: sz += 4 * 4;
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,GetIndexSize,The following statement contains a magic number: sz += 4 * 4;
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,SizeOf,The following statement contains a magic number: return SizeOfArray(4' b.Length);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,SizeOf,The following statement contains a magic number: return SizeOfArray(8' b.Length);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,SizeOfArray,The following statement contains a magic number: return 12 + (len * entSize);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,ToString,The following statement contains a magic number: int rem = (int)(sz % 1024);
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,ToString,The following statement contains a magic number: sz /= 1024;
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,ToString,The following statement contains a magic number: 1024 <= sz && u < units.Length - 1
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((raw[ptr] & unchecked((int)(0xff))) << 24) | ((raw[ptr + 1] & unchecked(( 				int)(0xff))) << 16) | ((raw[ptr + 2] & unchecked((int)(0xff))) << 8) | (raw[ptr  				+ 3] & unchecked((int)(0xff)));
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((raw[ptr] & unchecked((int)(0xff))) << 24) | ((raw[ptr + 1] & unchecked(( 				int)(0xff))) << 16) | ((raw[ptr + 2] & unchecked((int)(0xff))) << 8) | (raw[ptr  				+ 3] & unchecked((int)(0xff)));
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((raw[ptr] & unchecked((int)(0xff))) << 24) | ((raw[ptr + 1] & unchecked(( 				int)(0xff))) << 16) | ((raw[ptr + 2] & unchecked((int)(0xff))) << 8) | (raw[ptr  				+ 3] & unchecked((int)(0xff)));
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((raw[ptr] & unchecked((int)(0xff))) << 24) | ((raw[ptr + 1] & unchecked(( 				int)(0xff))) << 16) | ((raw[ptr + 2] & unchecked((int)(0xff))) << 8) | (raw[ptr  				+ 3] & unchecked((int)(0xff)));
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((raw[ptr] & unchecked((int)(0xff))) << 24) | ((raw[ptr + 1] & unchecked(( 				int)(0xff))) << 16) | ((raw[ptr + 2] & unchecked((int)(0xff))) << 8) | (raw[ptr  				+ 3] & unchecked((int)(0xff)));
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash ^= T[(int)(((uint)hash) >> 31)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 4] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 4] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 4] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 5] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 5] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 5] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 6] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 6] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 6] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 7] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 7] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 7] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 8] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 8] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 8] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 9] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 9] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 9] & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash 				) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 10] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 10] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 10] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 11] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 11] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 11] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 12] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 12] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 12] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 13] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 13] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 13] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 14] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 14] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 14] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 15] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 15] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,HashBlock,The following statement contains a magic number: hash = ((hash << 8) | (raw[ptr + 15] & unchecked((int)(0xff)))) ^ T[(int)(((uint) 				hash) >> 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,Step,The following statement contains a magic number: return ((hash << 8) | (toAdd & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash) >> 				 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,Step,The following statement contains a magic number: return ((hash << 8) | (toAdd & unchecked((int)(0xff)))) ^ T[(int)(((uint)hash) >> 				 23)];
Magic Number,NGit.Storage.Pack,DeltaIndex,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndex.cs,KeyOf,The following statement contains a magic number: return (int)((long)(((ulong)ent) >> 32));
Magic Number,NGit.Storage.Pack,DeltaIndexScanner,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndexScanner.cs,Scan,The following statement contains a magic number: entries[head] = (((long)key) << 32) | ptr;
Magic Number,NGit.Storage.Pack,DeltaIndexScanner,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaIndexScanner.cs,TableSize,The following statement contains a magic number: int shift = 32 - Sharpen.Extensions.NumberOfLeadingZeros(worstCaseBlockCnt);
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,DeltaStream,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,DeltaStream,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: !Fill(8)
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: copyOffset |= (cmdbuf[cmdptr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: copyOffset |= (cmdbuf[cmdptr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: copyOffset |= ((long)(cmdbuf[cmdptr++] & unchecked((int)(0xff)))) << 24;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: copySize |= (cmdbuf[cmdptr++] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Storage.Pack,DeltaStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaStream.cs,Next,The following statement contains a magic number: copySize |= (cmdbuf[cmdptr++] & unchecked((int)(0xff))) << 16;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,Delta,The following statement contains a magic number: msz <= 8
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,Delta,The following statement contains a magic number: res.Size() < src.Size() / 16
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeflateBound,The following statement contains a magic number: return insz + ((insz + 7) >> 3) + ((insz + 63) >> 6) + 11;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeflateBound,The following statement contains a magic number: return insz + ((insz + 7) >> 3) + ((insz + 63) >> 6) + 11;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeflateBound,The following statement contains a magic number: return insz + ((insz + 7) >> 3) + ((insz + 63) >> 6) + 11;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeflateBound,The following statement contains a magic number: return insz + ((insz + 7) >> 3) + ((insz + 63) >> 6) + 11;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeflateBound,The following statement contains a magic number: return insz + ((insz + 7) >> 3) + ((insz + 63) >> 6) + 11;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeltaSizeLimit,The following statement contains a magic number: int limit = res.Size() / 2 - 20;
Magic Number,NGit.Storage.Pack,DeltaWindow,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\DeltaWindow.cs,DeltaSizeLimit,The following statement contains a magic number: int limit = res.Size() / 2 - 20;
Magic Number,NGit.Storage.Pack,PackConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackConfig.cs,SetDeltaSearchWindowSize,The following statement contains a magic number: objectCount <= 2
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,WriteFileHeader,The following statement contains a magic number: System.Array.Copy(Constants.PACK_SIGNATURE' 0' headerBuffer' 0' 4);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,WriteFileHeader,The following statement contains a magic number: NB.EncodeInt32(headerBuffer' 4' version);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,WriteFileHeader,The following statement contains a magic number: NB.EncodeInt32(headerBuffer' 8' (int)objectCount);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,WriteFileHeader,The following statement contains a magic number: Write(headerBuffer' 0' 12);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,WriteHeader,The following statement contains a magic number: (offsetDiff >>= 7) > 0
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,EncodeTypeSize,The following statement contains a magic number: long nextLength = (long)(((ulong)rawLength) >> 4);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,EncodeTypeSize,The following statement contains a magic number: headerBuffer[0] = unchecked((byte)((nextLength > 0 ? unchecked((int)(0x80)) : unchecked( 				(int)(0x00))) | (type << 4) | (rawLength & unchecked((int)(0x0F)))));
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,EncodeTypeSize,The following statement contains a magic number: nextLength = (long)(((ulong)nextLength) >> 7);
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,GetCopyBuffer,The following statement contains a magic number: copyBuffer = new byte[16 * 1024];
Magic Number,NGit.Storage.Pack,PackOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackOutputStream.cs,GetCopyBuffer,The following statement contains a magic number: copyBuffer = new byte[16 * 1024];
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,WritePack,The following statement contains a magic number: long delay = 1000;
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,WritePack,The following statement contains a magic number: delay = 500;
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForReuse,The following statement contains a magic number: cnt <= 4096
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The following statement contains a magic number: threads <= 1 || cnt <= 2 * config.GetDeltaSearchWindowSize()
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The following statement contains a magic number: int estSize = cnt / (threads * 2);
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The following statement contains a magic number: estSize = 2 * config.GetDeltaSearchWindowSize();
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The following statement contains a magic number: estSize < 2 * config.GetDeltaSearchWindowSize()
Magic Number,NGit.Storage.Pack,PackWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,SearchForDeltas,The following statement contains a magic number: IList<DeltaTask> myTasks = new AList<DeltaTask>(threads * 2);
Magic Number,NGit.Storage.Pack,Statistics,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,GetTransferRate,The following statement contains a magic number: return GetTotalBytes() / (GetTimeWriting() / 1000.0);
Magic Number,NGit.Storage.Pack,Statistics,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\PackWriter.cs,Statistics,The following statement contains a magic number: objectTypes = new PackWriter.Statistics.ObjectType[5];
Magic Number,NGit.Storage.Pack,IntSet,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\IntSet.cs,IntSet,The following statement contains a magic number: set = new int[64];
Magic Number,NGit.Storage.Pack,IntSet,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.Pack\IntSet.cs,Add,The following statement contains a magic number: int[] n = new int[set.Length * 2];
Magic Number,NGit.Treewalk,AbstractTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\AbstractTreeIterator.cs,GetEntryPathHashCode,The following statement contains a magic number: hash = ((int)(((uint)hash) >> 2)) + (c << 24);
Magic Number,NGit.Treewalk,AbstractTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\AbstractTreeIterator.cs,GetEntryPathHashCode,The following statement contains a magic number: hash = ((int)(((uint)hash) >> 2)) + (c << 24);
Magic Number,NGit.Treewalk,CanonicalTreeParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\CanonicalTreeParser.cs,ParseEntry,The following statement contains a magic number: tmp <<= 3;
Magic Number,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,CompareMetadata,The following statement contains a magic number: cacheLastModified = cacheLastModified - cacheLastModified % 1000;
Magic Number,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,CompareMetadata,The following statement contains a magic number: fileLastModified = fileLastModified - fileLastModified % 1000;
Magic Number,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,CompareMetadata,The following statement contains a magic number: cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0
Magic Number,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,CompareMetadata,The following statement contains a magic number: cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0
Magic Number,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,ComputeLength,The following statement contains a magic number: long n = @in.Skip(1 << 20);
Magic Number,NGit.Treewalk,RootIgnoreNode,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,Load,The following statement contains a magic number: excludesfile = fs.Resolve(fs.UserHome()' Sharpen.Runtime.Substring(path' 2));
Magic Number,NGit.Treewalk.Filter,AndTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\AndTreeFilter.cs,Create,The following statement contains a magic number: list.Length == 2
Magic Number,NGit.Treewalk.Filter,AndTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\AndTreeFilter.cs,Create,The following statement contains a magic number: list.Length < 2
Magic Number,NGit.Treewalk.Filter,AndTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\AndTreeFilter.cs,Create,The following statement contains a magic number: list.Count < 2
Magic Number,NGit.Treewalk.Filter,AndTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\AndTreeFilter.cs,Create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,NGit.Treewalk.Filter,OrTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\OrTreeFilter.cs,Create,The following statement contains a magic number: list.Length == 2
Magic Number,NGit.Treewalk.Filter,OrTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\OrTreeFilter.cs,Create,The following statement contains a magic number: list.Length < 2
Magic Number,NGit.Treewalk.Filter,OrTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\OrTreeFilter.cs,Create,The following statement contains a magic number: list.Count < 2
Magic Number,NGit.Treewalk.Filter,OrTreeFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk.Filter\OrTreeFilter.cs,Create,The following statement contains a magic number: subfilters.Length == 2
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Base64,The following statement contains a magic number: DEC = new sbyte[128];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Base64,The following statement contains a magic number: i < 64
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following statement contains a magic number: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: int len43 = len * 4 / 3;
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: int len43 = len * 4 / 3;
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: byte[] outBuff = new byte[len43 + ((len % 3) > 0 ? 4 : 0)];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: byte[] outBuff = new byte[len43 + ((len % 3) > 0 ? 4 : 0)];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: int len2 = len - 2;
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: Encode3to4(source' d + off' 3' outBuff' e);
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,EncodeBytes,The following statement contains a magic number: e += 4;
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Decode4to3,The following statement contains a magic number: int outBuff = ((DEC[source[srcOffset]] & unchecked((int)(0xFF))) << 18) | ((DEC[source 					[srcOffset + 1]] & unchecked((int)(0xFF))) << 12);
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Decode4to3,The following statement contains a magic number: int outBuff = ((DEC[source[srcOffset]] & unchecked((int)(0xFF))) << 18) | ((DEC[source 					[srcOffset + 1]] & unchecked((int)(0xFF))) << 12);
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Decode4to3,The following statement contains a magic number: destination[destOffset] = unchecked((byte)((int)(((uint)outBuff) >> 16)));
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Decode4to3,The following statement contains a magic number: source[srcOffset + 2] == EQUALS_SIGN
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,DecodeBytes,The following statement contains a magic number: byte[] outBuff = new byte[len * 3 / 4];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,DecodeBytes,The following statement contains a magic number: byte[] outBuff = new byte[len * 3 / 4];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,DecodeBytes,The following statement contains a magic number: byte[] b4 = new byte[4];
Magic Number,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,DecodeBytes,The following statement contains a magic number: b4Posn > 3
Magic Number,NGit.Util,ChangeIdUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\ChangeIdUtil.cs,InsertId,The following statement contains a magic number: int i = message.IndexOf(CHANGE_ID) + 10;
Magic Number,NGit.Util,ChangeIdUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\ChangeIdUtil.cs,InsertId,The following statement contains a magic number: string oldId = message.Length == (i + 40) ? Sharpen.Runtime.Substring(message' i) 						 : Sharpen.Runtime.Substring(message' i' i + 41);
Magic Number,NGit.Util,ChangeIdUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\ChangeIdUtil.cs,InsertId,The following statement contains a magic number: string oldId = message.Length == (i + 40) ? Sharpen.Runtime.Substring(message' i) 						 : Sharpen.Runtime.Substring(message' i' i + 41);
Magic Number,NGit.Util,FS_Win32,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS_Win32.cs,RunInShell,The following statement contains a magic number: IList<string> argv = new AList<string>(3 + args.Length);
Magic Number,NGit.Util,FS_Win32_Cygwin,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS_Win32_Cygwin.cs,RunInShell,The following statement contains a magic number: IList<string> argv = new AList<string>(4 + args.Length);
Magic Number,NGit.Util,IntList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IntList.cs,Grow,The following statement contains a magic number: int[] n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,IntList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IntList.cs,Grow,The following statement contains a magic number: int[] n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,IntList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IntList.cs,Grow,The following statement contains a magic number: int[] n = new int[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,LongList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\LongList.cs,Grow,The following statement contains a magic number: long[] n = new long[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,LongList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\LongList.cs,Grow,The following statement contains a magic number: long[] n = new long[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,LongList,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\LongList.cs,Grow,The following statement contains a magic number: long[] n = new long[(entries.Length + 16) * 3 / 2];
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt16,The following statement contains a magic number: int r = (intbuf[offset] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeInt32,The following statement contains a magic number: int r = intbuf[offset] << 8;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeInt32,The following statement contains a magic number: r <<= 8;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeInt32,The following statement contains a magic number: r |= intbuf[offset + 2] & unchecked((int)(0xff));
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeInt32,The following statement contains a magic number: return (r << 8) | (intbuf[offset + 3] & unchecked((int)(0xff)));
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeInt32,The following statement contains a magic number: return (r << 8) | (intbuf[offset + 3] & unchecked((int)(0xff)));
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt32,The following statement contains a magic number: int low = (intbuf[offset + 1] & unchecked((int)(0xff))) << 8;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt32,The following statement contains a magic number: low |= (intbuf[offset + 2] & unchecked((int)(0xff)));
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt32,The following statement contains a magic number: low <<= 8;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt32,The following statement contains a magic number: low |= (intbuf[offset + 3] & unchecked((int)(0xff)));
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt32,The following statement contains a magic number: return ((long)(intbuf[offset] & unchecked((int)(0xff)))) << 24 | low;
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt64,The following statement contains a magic number: return (DecodeUInt32(intbuf' offset) << 32) | DecodeUInt32(intbuf' offset + 4);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,DecodeUInt64,The following statement contains a magic number: return (DecodeUInt32(intbuf' offset) << 32) | DecodeUInt32(intbuf' offset + 4);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt16,The following statement contains a magic number: v = (int)(((uint)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt32,The following statement contains a magic number: intbuf[offset + 3] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt32,The following statement contains a magic number: v = (int)(((uint)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt32,The following statement contains a magic number: intbuf[offset + 2] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt32,The following statement contains a magic number: v = (int)(((uint)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt32,The following statement contains a magic number: v = (int)(((uint)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 7] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 6] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 5] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 4] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 3] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: intbuf[offset + 2] = unchecked((byte)v);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,NB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\NB.cs,EncodeInt64,The following statement contains a magic number: v = (long)(((ulong)v) >> 8);
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,GitPathStyle,The following statement contains a magic number: quote = new byte[128];
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Quote,The following statement contains a magic number: StringBuilder r = new StringBuilder(2 + @in.Length);
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Quote,The following statement contains a magic number: r.Append((char)(((c >> 6) & 0x3) + '0'));
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Quote,The following statement contains a magic number: r.Append((char)(((c >> 3) & 0x7) + '0'));
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Dequote,The following statement contains a magic number: 2 <= inEnd - inPtr && @in[inPtr] == '"' && @in[inEnd - 1] == '"'
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Dq,The following statement contains a magic number: switch (@in[inPtr++]) 					{ 						case (byte)('a'): 						{ 							r[rPtr++] = unchecked((int)(0x07)); 							continue; 							goto case (byte)('b'); 						}  						case (byte)('b'): 						{ 							r[rPtr++] = (byte)('\b'); 							continue; 							goto case (byte)('f'); 						}  						case (byte)('f'): 						{ 							r[rPtr++] = (byte)('\f'); 							continue; 							goto case (byte)('n'); 						}  						case (byte)('n'): 						{ 							r[rPtr++] = (byte)('\n'); 							continue; 							goto case (byte)('r'); 						}  						case (byte)('r'): 						{ 							r[rPtr++] = (byte)('\r'); 							continue; 							goto case (byte)('t'); 						}  						case (byte)('t'): 						{ 							r[rPtr++] = (byte)('\t'); 							continue; 							goto case (byte)('v'); 						}  						case (byte)('v'): 						{ 							r[rPtr++] = unchecked((int)(0x0B)); 							continue; 							goto case (byte)('\\'); 						}  						case (byte)('\\'): 						case (byte)('"'): 						{ 							r[rPtr++] = @in[inPtr - 1]; 							continue; 							goto case (byte)('0'); 						}  						case (byte)('0'): 						case (byte)('1'): 						case (byte)('2'): 						case (byte)('3'): 						{ 							int cp = @in[inPtr - 1] - '0'; 							for (int n = 1; n < 3 && inPtr < inEnd; n++) 							{ 								byte c = @in[inPtr]; 								if ('0' <= c && ((sbyte)c) <= '7') 								{ 									cp <<= 3; 									cp |= c - '0'; 									inPtr++; 								} 								else 								{ 									break; 								} 							} 							r[rPtr++] = unchecked((byte)cp); 							continue; 							goto default; 						}  						default: 						{ 							// Any other code is taken literally. 							// 							r[rPtr++] = (byte)('\\'); 							r[rPtr++] = @in[inPtr - 1]; 							continue; 							break; 						} 					}
Magic Number,NGit.Util,GitPathStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Dq,The following statement contains a magic number: switch (@in[inPtr++]) 					{ 						case (byte)('a'): 						{ 							r[rPtr++] = unchecked((int)(0x07)); 							continue; 							goto case (byte)('b'); 						}  						case (byte)('b'): 						{ 							r[rPtr++] = (byte)('\b'); 							continue; 							goto case (byte)('f'); 						}  						case (byte)('f'): 						{ 							r[rPtr++] = (byte)('\f'); 							continue; 							goto case (byte)('n'); 						}  						case (byte)('n'): 						{ 							r[rPtr++] = (byte)('\n'); 							continue; 							goto case (byte)('r'); 						}  						case (byte)('r'): 						{ 							r[rPtr++] = (byte)('\r'); 							continue; 							goto case (byte)('t'); 						}  						case (byte)('t'): 						{ 							r[rPtr++] = (byte)('\t'); 							continue; 							goto case (byte)('v'); 						}  						case (byte)('v'): 						{ 							r[rPtr++] = unchecked((int)(0x0B)); 							continue; 							goto case (byte)('\\'); 						}  						case (byte)('\\'): 						case (byte)('"'): 						{ 							r[rPtr++] = @in[inPtr - 1]; 							continue; 							goto case (byte)('0'); 						}  						case (byte)('0'): 						case (byte)('1'): 						case (byte)('2'): 						case (byte)('3'): 						{ 							int cp = @in[inPtr - 1] - '0'; 							for (int n = 1; n < 3 && inPtr < inEnd; n++) 							{ 								byte c = @in[inPtr]; 								if ('0' <= c && ((sbyte)c) <= '7') 								{ 									cp <<= 3; 									cp |= c - '0'; 									inPtr++; 								} 								else 								{ 									break; 								} 							} 							r[rPtr++] = unchecked((byte)cp); 							continue; 							goto default; 						}  						default: 						{ 							// Any other code is taken literally. 							// 							r[rPtr++] = (byte)('\\'); 							r[rPtr++] = @in[inPtr - 1]; 							continue; 							break; 						} 					}
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,RawParseUtils,The following statement contains a magic number: digits16[i_2] = (sbyte)((i_2 - (sbyte)('a')) + 10);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,RawParseUtils,The following statement contains a magic number: digits16[i_3] = (sbyte)((i_3 - (sbyte)('A')) + 10);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,FormatBase10,The following statement contains a magic number: b[--o] = base10byte[value % 10];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,FormatBase10,The following statement contains a magic number: value /= 10;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseBase10,The following statement contains a magic number: r = (r * 10) + v;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseLongBase10,The following statement contains a magic number: r = (r * 10) + v;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt16,The following statement contains a magic number: int r = digits16[bs[p]] << 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt16,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt16,The following statement contains a magic number: r |= digits16[bs[p + 2]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt16,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt16,The following statement contains a magic number: r |= digits16[bs[p + 3]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: int r = digits16[bs[p]] << 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r |= digits16[bs[p + 2]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r |= digits16[bs[p + 3]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r |= digits16[bs[p + 4]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r |= digits16[bs[p + 5]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r <<= 4;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: r |= digits16[bs[p + 6]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: int last = digits16[bs[p + 7]];
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseHexInt32,The following statement contains a magic number: return (r << 4) | last;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseTimeZoneOffset,The following statement contains a magic number: int tzMins = v % 100;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseTimeZoneOffset,The following statement contains a magic number: int tzHours = v / 100;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseTimeZoneOffset,The following statement contains a magic number: return tzHours * 60 + tzMins;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,LineMap,The following statement contains a magic number: IntList map = new IntList((end - ptr) / 36);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,Author,The following statement contains a magic number: ptr += 46;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,Author,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,Committer,The following statement contains a magic number: ptr += 46;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,Committer,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,Tagger,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The following statement contains a magic number: int nameEnd = emailB - 2 >= nameB && raw[emailB - 2] == ' ' ? emailB - 2 : emailB 				 - 1;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The following statement contains a magic number: int nameEnd = emailB - 2 >= nameB && raw[emailB - 2] == ' ' ? emailB - 2 : emailB 				 - 1;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The following statement contains a magic number: int nameEnd = emailB - 2 >= nameB && raw[emailB - 2] == ' ' ? emailB - 2 : emailB 				 - 1;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The following statement contains a magic number: int tzBegin = LastIndexOfTrim(raw' ' '' NextLF(raw' emailE - 1) - 2) + 1;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdent,The following statement contains a magic number: return new PersonIdent(name' email' when * 1000L' tz);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdentOnly,The following statement contains a magic number: name = Decode(raw' nameB' emailB - 2);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParsePersonIdentOnly,The following statement contains a magic number: return new PersonIdent(name' email' when * 1000L' tz);
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,CommitMessage,The following statement contains a magic number: ptr += 46;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,CommitMessage,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,TagMessage,The following statement contains a magic number: ptr += 48;
Magic Number,NGit.Util,RefList<T>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RefList.cs,Copy,The following statement contains a magic number: RefListBuilder<T> r = new RefListBuilder<T>(Math.Max(16' n));
Magic Number,NGit.Util,RefListBuilder<T>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RefList.cs,Add,The following statement contains a magic number: Ref[] n = new Ref[size * 2];
Magic Number,NGit.Util,RefListBuilder<T>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RefList.cs,AddAll,The following statement contains a magic number: Ref[] n = new Ref[Math.Max(size * 2' size + cnt)];
Magic Number,NGit.Util,_SystemReader_71,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\SystemReader.cs,GetTimezone,The following statement contains a magic number: return this.GetTimeZone().GetOffset(when) / (60 * 1000);
Magic Number,NGit.Util,_SystemReader_71,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\SystemReader.cs,GetTimezone,The following statement contains a magic number: return this.GetTimeZone().GetOffset(when) / (60 * 1000);
Magic Number,NGit.Util,TemporaryBuffer,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\TemporaryBuffer.cs,WriteTo,The following statement contains a magic number: pm.Update(b.count / 1024);
Magic Number,NGit.Util,LocalFile,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\TemporaryBuffer.cs,WriteTo,The following statement contains a magic number: pm.Update(cnt / 1024);
Magic Number,NGit.Util,IOUtil,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\IOUtil.cs,ReadFully,The following statement contains a magic number: byte[] nb = new byte[Math.Min(buf.Length * 2' max)];
Magic Number,NGit.Util,FileUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FileUtils.cs,Delete,The following statement contains a magic number: Sharpen.Thread.Sleep(100);
Magic Number,NGit.Util,FileUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FileUtils.cs,Delete,The following statement contains a magic number: i < 10
Magic Number,NGit.Util,FS_POSIX,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\FS_POSIX.cs,RunInShell,The following statement contains a magic number: IList<string> argv = new AList<string>(4 + args.Length);
Magic Number,NGit.Util,BlockList<T>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\BlockList.cs,BlockList,The following statement contains a magic number: directory = NGit.Util.BlockList<T>.NewDirectory(256);
Magic Number,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,Format,The following statement contains a magic number: ageMillis < 14 * DAY_IN_MILLIS
Magic Number,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,Format,The following statement contains a magic number: ageMillis < 10 * WEEK_IN_MILLIS
Magic Number,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,Format,The following statement contains a magic number: ageMillis < 5 * YEAR_IN_MILLIS
Magic Number,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,UpperLimit,The following statement contains a magic number: long limit = unit + unit / 2;
Magic Number,NGit.Util,RelativeDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RelativeDateFormatter.cs,Round,The following statement contains a magic number: long rounded = (n + unit / 2) / unit;
Magic Number,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,FormatDate,The following statement contains a magic number: switch (format) 			{ 				case GitDateFormatter.Format.RAW: 				{ 					int offset = ident.GetTimeZoneOffset(); 					string sign = offset < 0 ? "-" : "+"; 					int offset2; 					if (offset < 0) 					{ 						offset2 = -offset; 					} 					else 					{ 						offset2 = offset; 					} 					int hours = offset2 / 60; 					int minutes = offset2 % 60; 					return string.Format("%d %s%02d%02d"' ident.GetWhen().GetTime() / 1000' sign' hours 						' minutes); 				}  				case GitDateFormatter.Format.RELATIVE: 				{ 					return RelativeDateFormatter.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALELOCAL: 				case GitDateFormatter.Format.LOCAL: 				{ 					dateTimeInstance.SetTimeZone(SystemReader.GetInstance().GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALE: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(tz); 					dateTimeInstance2.SetTimeZone(tz); 					return dateTimeInstance.Format(ident.GetWhen()) + " " + dateTimeInstance2.Format( 						ident.GetWhen()); 				}  				default: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(ident.GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 					break; 				} 			}
Magic Number,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,FormatDate,The following statement contains a magic number: switch (format) 			{ 				case GitDateFormatter.Format.RAW: 				{ 					int offset = ident.GetTimeZoneOffset(); 					string sign = offset < 0 ? "-" : "+"; 					int offset2; 					if (offset < 0) 					{ 						offset2 = -offset; 					} 					else 					{ 						offset2 = offset; 					} 					int hours = offset2 / 60; 					int minutes = offset2 % 60; 					return string.Format("%d %s%02d%02d"' ident.GetWhen().GetTime() / 1000' sign' hours 						' minutes); 				}  				case GitDateFormatter.Format.RELATIVE: 				{ 					return RelativeDateFormatter.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALELOCAL: 				case GitDateFormatter.Format.LOCAL: 				{ 					dateTimeInstance.SetTimeZone(SystemReader.GetInstance().GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALE: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(tz); 					dateTimeInstance2.SetTimeZone(tz); 					return dateTimeInstance.Format(ident.GetWhen()) + " " + dateTimeInstance2.Format( 						ident.GetWhen()); 				}  				default: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(ident.GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 					break; 				} 			}
Magic Number,NGit.Util,GitDateFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateFormatter.cs,FormatDate,The following statement contains a magic number: switch (format) 			{ 				case GitDateFormatter.Format.RAW: 				{ 					int offset = ident.GetTimeZoneOffset(); 					string sign = offset < 0 ? "-" : "+"; 					int offset2; 					if (offset < 0) 					{ 						offset2 = -offset; 					} 					else 					{ 						offset2 = offset; 					} 					int hours = offset2 / 60; 					int minutes = offset2 % 60; 					return string.Format("%d %s%02d%02d"' ident.GetWhen().GetTime() / 1000' sign' hours 						' minutes); 				}  				case GitDateFormatter.Format.RELATIVE: 				{ 					return RelativeDateFormatter.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALELOCAL: 				case GitDateFormatter.Format.LOCAL: 				{ 					dateTimeInstance.SetTimeZone(SystemReader.GetInstance().GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 				}  				case GitDateFormatter.Format.LOCALE: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(tz); 					dateTimeInstance2.SetTimeZone(tz); 					return dateTimeInstance.Format(ident.GetWhen()) + " " + dateTimeInstance2.Format( 						ident.GetWhen()); 				}  				default: 				{ 					tz = ident.GetTimeZone(); 					if (tz == null) 					{ 						tz = SystemReader.GetInstance().GetTimeZone(); 					} 					dateTimeInstance.SetTimeZone(ident.GetTimeZone()); 					return dateTimeInstance.Format(ident.GetWhen()); 					break; 				} 			}
Magic Number,NGit.Util,GitDateParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateParser.cs,Parse_relative,The following statement contains a magic number: partsLength < 3 || (partsLength & 1) == 0 || !"ago".Equals(parts[parts.Length 				 - 1])
Magic Number,NGit.Util,GitDateParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\GitDateParser.cs,Parse_relative,The following statement contains a magic number: i < parts.Length - 2
Magic Number,NGit.Util.IO,StreamCopyThread,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\StreamCopyThread.cs,Halt,The following statement contains a magic number: Join(250);
Magic Number,NGit.Util.IO,TeeInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util.IO\TeeInputStream.cs,SkipBuffer,The following statement contains a magic number: skipBuffer = new byte[2048];
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: rawPath = CleanLeadingSlashes(matcher.Group(2)' scheme);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: user = Unescape(matcher.Group(2));
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: pass = Unescape(matcher.Group(3));
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: host = Unescape(matcher.Group(4));
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: port = System.Convert.ToInt32(matcher.Group(5));
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: matcher.Group(5) != null
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: rawPath = CleanLeadingSlashes(N2e(matcher.Group(6)) + N2e(matcher.Group(7))' scheme 					);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: rawPath = CleanLeadingSlashes(N2e(matcher.Group(6)) + N2e(matcher.Group(7))' scheme 					);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: pass = matcher.Group(2);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: host = matcher.Group(3);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: rawPath = matcher.Group(4);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: pass = matcher.Group(2);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: host = matcher.Group(3);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,URIish,The following statement contains a magic number: rawPath = matcher.Group(4);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Unescape,The following statement contains a magic number: i + 2 >= bytes.Length
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Unescape,The following statement contains a magic number: int val = (RawParseUtils.ParseHexInt4(bytes[i + 1]) << 4) | RawParseUtils.ParseHexInt4 						(bytes[i + 2]);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Unescape,The following statement contains a magic number: int val = (RawParseUtils.ParseHexInt4(bytes[i + 1]) << 4) | RawParseUtils.ParseHexInt4 						(bytes[i + 2]);
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Unescape,The following statement contains a magic number: i += 2;
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Escape,The following statement contains a magic number: b <= 32 || (encodeNonAscii && b > 127) || b == '%' || (escapeReservedChars && 					 reservedChars.Get(b))
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,Escape,The following statement contains a magic number: b <= 32 || (encodeNonAscii && b > 127) || b == '%' || (escapeReservedChars && 					 reservedChars.Get(b))
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,CleanLeadingSlashes,The following statement contains a magic number: p.Length >= 3 && p[0] == '/' && p[2] == ':' && (p[1] >= 'A' && p[1] <= 'Z' || 				 p[1] >= 'a' && p[1] <= 'z')
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,CleanLeadingSlashes,The following statement contains a magic number: p.Length >= 3 && p[0] == '/' && p[2] == ':' && (p[1] >= 'A' && p[1] <= 'Z' || 				 p[1] >= 'a' && p[1] <= 'z')
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetScheme().GetHashCode();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetUser().GetHashCode();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetPass().GetHashCode();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetHost().GetHashCode();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetPort();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetPath().GetHashCode();
Magic Number,NGit.Transport,URIish,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\URIish.cs,GetHumanishName,The following statement contains a magic number: result = elements[elements.Length - 2];
Magic Number,NGit.Transport,LongMap<V>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\LongMap.cs,LongMap,The following statement contains a magic number: table = CreateArray<V>(64);
Magic Number,NGit.Transport,LongMap<V>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\LongMap.cs,Index,The following statement contains a magic number: h ^= ((int)(((uint)h) >> 20)) ^ ((int)(((uint)h) >> 12));
Magic Number,NGit.Transport,LongMap<V>,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\LongMap.cs,Index,The following statement contains a magic number: h ^= ((int)(((uint)h) >> 20)) ^ ((int)(((uint)h) >> 12));
Magic Number,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetSource().GetHashCode();
Magic Number,NGit.Transport,RefSpec,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\RefSpec.cs,GetHashCode,The following statement contains a magic number: hc = hc * 31 + GetDestination().GetHashCode();
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,The following statement contains a magic number: returnedId.FromString(Sharpen.Runtime.Substring(line' 4' 44));
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,The following statement contains a magic number: returnedId.FromString(Sharpen.Runtime.Substring(line' 4' 44));
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,The following statement contains a magic number: line.Length == 44
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,The following statement contains a magic number: string arg = Sharpen.Runtime.Substring(line' 44);
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadACK,The following statement contains a magic number: throw new PackProtocolException(Sharpen.Runtime.Substring(line' 4));
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadString,The following statement contains a magic number: len -= 4;
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadStringRaw,The following statement contains a magic number: len -= 4;
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadLength,The following statement contains a magic number: IOUtil.ReadFully(@in' lineBuffer' 0' 4);
Magic Number,NGit.Transport,PacketLineIn,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineIn.cs,ReadLength,The following statement contains a magic number: len != 0 && len < 4
Magic Number,NGit.Transport,SideBandInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandInputStream.cs,DoProgressLine,The following statement contains a magic number: BeginTask(System.Convert.ToInt32(matcher.Group(3)));
Magic Number,NGit.Transport,SideBandInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandInputStream.cs,DoProgressLine,The following statement contains a magic number: int cnt = System.Convert.ToInt32(matcher.Group(2));
Magic Number,NGit.Transport,SideBandInputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandInputStream.cs,DoProgressLine,The following statement contains a magic number: int cnt = System.Convert.ToInt32(matcher.Group(2));
Magic Number,NGit.Transport,SideBandOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandOutputStream.cs,SideBandOutputStream,The following statement contains a magic number: chan <= 0 || chan > 255
Magic Number,NGit.Transport,SideBandOutputStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandOutputStream.cs,SideBandOutputStream,The following statement contains a magic number: buffer[4] = unchecked((byte)chan);
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,PacketLineOut,The following statement contains a magic number: lenbuffer = new byte[5];
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,WritePacket,The following statement contains a magic number: FormatLength(packet.Length + 4);
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,WritePacket,The following statement contains a magic number: @out.Write(lenbuffer' 0' 4);
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,End,The following statement contains a magic number: @out.Write(lenbuffer' 0' 4);
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,FormatLength,The following statement contains a magic number: int o = 3;
Magic Number,NGit.Transport,PacketLineOut,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PacketLineOut.cs,FormatLength,The following statement contains a magic number: w = (int)(((uint)w) >> 4);
Magic Number,NGit.Transport,TrackingRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TrackingRefUpdate.cs,ToString,The following statement contains a magic number: sb.Append(oldObjectId == null ? string.Empty : oldObjectId.Abbreviate(7).Name);
Magic Number,NGit.Transport,TrackingRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TrackingRefUpdate.cs,ToString,The following statement contains a magic number: sb.Append(newObjectId == null ? string.Empty : newObjectId.Abbreviate(7).Name);
Magic Number,NGit.Transport,FetchProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\FetchProcess.cs,ExecuteImp,The following statement contains a magic number: ((BatchingProgressMonitor)monitor).SetDelayStart(250' TimeUnit.MILLISECONDS);
Magic Number,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,Init,The following statement contains a magic number: timeoutIn.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,Init,The following statement contains a magic number: timeoutOut.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,ReadAdvertisedRefsImpl,The following statement contains a magic number: throw new RemoteRepositoryException(uri' Sharpen.Runtime.Substring(line' 4));
Magic Number,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,ReadAdvertisedRefsImpl,The following statement contains a magic number: string name = Sharpen.Runtime.Substring(line' 41' line.Length);
Magic Number,NGit.Transport,BasePackConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackConnection.cs,ReadAdvertisedRefsImpl,The following statement contains a magic number: ObjectId id = ObjectId.FromString(Sharpen.Runtime.Substring(line' 0' 40));
Magic Number,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,MarkReachable,The following statement contains a magic number: DateTime maxWhen = Sharpen.Extensions.CreateDate(maxTime * 1000L);
Magic Number,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,SendWants,The following statement contains a magic number: StringBuilder line = new StringBuilder(46);
Magic Number,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,The following statement contains a magic number: (31 & havesSent) != 0
Magic Number,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,The following statement contains a magic number: havesSent == 32 && !statelessRPC
Magic Number,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,MarkCommon,The following statement contains a magic number: s = new StringBuilder(6 + Constants.OBJECT_ID_STRING_LENGTH);
Magic Number,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,ReadStatusReport,The following statement contains a magic number: string refName = Sharpen.Runtime.Substring(refLine' 3' refNameEnd);
Magic Number,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,ReadStringLongTimeout,The following statement contains a magic number: int sendTime = (int)Math.Min(packTransferTime' 28800000L);
Magic Number,NGit.Transport,BasePackPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackPushConnection.cs,ReadStringLongTimeout,The following statement contains a magic number: timeoutIn.SetTimeout(10 * Math.Max(sendTime' oldTimeout));
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,BundleFetchConnection,The following statement contains a magic number: switch (ReadSignature()) 				{ 					case 2: 					{ 						ReadBundleV2(); 						break; 					}  					default: 					{ 						throw new TransportException(transport.uri' JGitText.Get().notABundle); 					} 				}
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadSignature,The following statement contains a magic number: string rev = ReadLine(new byte[1024]);
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadSignature,The following statement contains a magic number: return 2;
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: byte[] hdrbuf = new byte[1024];
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: ObjectId id = ObjectId.FromString(Sharpen.Runtime.Substring(line' 1' 41));
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: shortDesc = Sharpen.Runtime.Substring(line' 42);
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: line.Length > 42
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: string name = Sharpen.Runtime.Substring(line' 41' line.Length);
Magic Number,NGit.Transport,BundleFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BundleFetchConnection.cs,ReadBundleV2,The following statement contains a magic number: ObjectId id_1 = ObjectId.FromString(Sharpen.Runtime.Substring(line' 0' 40));
Magic Number,NGit.Transport,ReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\ReceivePack.cs,Service,The following statement contains a magic number: Sharpen.Thread.Sleep(500);
Magic Number,NGit.Transport,SideBandProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandProgressMonitor.cs,Format,The following statement contains a magic number: pcnt < 100
Magic Number,NGit.Transport,SideBandProgressMonitor,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SideBandProgressMonitor.cs,Format,The following statement contains a magic number: pcnt < 10
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Upload,The following statement contains a magic number: i.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Upload,The following statement contains a magic number: o.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: depth = System.Convert.ToInt32(Sharpen.Runtime.Substring(line' 7));
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: clientShallowCommits.AddItem(ObjectId.FromString(Sharpen.Runtime.Substring(line'  						8)));
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: !line.StartsWith("want ") || line.Length < 45
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: isFirst && line.Length > 45
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,RecvWants,The following statement contains a magic number: wantIds.AddItem(ObjectId.FromString(Sharpen.Runtime.Substring(line' 5)));
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,Negotiate,The following statement contains a magic number: IList<ObjectId> peerHas = new AList<ObjectId>(64);
Magic Number,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,WantSatisfied,The following statement contains a magic number: walk.SetRevFilter(CommitTimeRevFilter.After(oldestTime * 1000L));
Magic Number,NGit.Transport,FirstLine,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,FirstLine,The following statement contains a magic number: string opt = Sharpen.Runtime.Substring(line' 45);
Magic Number,NGit.Transport,FirstLine,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,FirstLine,The following statement contains a magic number: this.line = Sharpen.Runtime.Substring(line' 0' 45);
Magic Number,NGit.Transport,FirstLine,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,FirstLine,The following statement contains a magic number: line.Length > 45
Magic Number,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,WalkFetchConnection,The following statement contains a magic number: packLocks = new AList<PackLock>(4);
Magic Number,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,DownloadObject,The following statement contains a magic number: string subdir = Sharpen.Runtime.Substring(idStr' 0' 2);
Magic Number,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,DownloadObject,The following statement contains a magic number: string file = Sharpen.Runtime.Substring(idStr' 2);
Magic Number,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,RecordError,The following statement contains a magic number: errors = new AList<Exception>(2);
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: this.idxName = Sharpen.Runtime.Substring(this.packName' 0' this.packName.Length - 					 5) + ".idx";
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: tn = Sharpen.Runtime.Substring(tn' 5);
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,RemotePack,The following statement contains a magic number: tn = Sharpen.Runtime.Substring(tn' 0' tn.Length - 4);
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.BeginTask("Get " + Sharpen.Runtime.Substring(this.idxName' 0' 12) + "..idx"' s 					.length < 0 ? ProgressMonitor.UNKNOWN : (int)(s.length / 1024));
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.BeginTask("Get " + Sharpen.Runtime.Substring(this.idxName' 0' 12) + "..idx"' s 					.length < 0 ? ProgressMonitor.UNKNOWN : (int)(s.length / 1024));
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: byte[] buf = new byte[2048];
Magic Number,NGit.Transport,RemotePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,OpenIndex,The following statement contains a magic number: pm.Update(cnt / 1024);
Magic Number,NGit.Transport,FileStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkRemoteObjectDatabase.cs,ToArray,The following statement contains a magic number: byte[] buf = new byte[2048];
Magic Number,NGit.Transport,WalkPushConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkPushConnection.cs,Sendpack,The following statement contains a magic number: string wt = "Put " + Sharpen.Runtime.Substring(@base' 0' 12);
Magic Number,NGit.Transport,DaemonClient,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\DaemonClient.cs,Execute,The following statement contains a magic number: sock.ReceiveTimeout = daemon.GetTimeout() * 1000;
Magic Number,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Parse,The following statement contains a magic number: IList<OpenSshConfig.Host> current = new AList<OpenSshConfig.Host>(4);
Magic Number,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,Parse,The following statement contains a magic number: string[] parts = line.Split("[ \t]*[= \t]"' 2);
Magic Number,NGit.Transport,OpenSshConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\OpenSshConfig.cs,ToFile,The following statement contains a magic number: return new FilePath(home' Sharpen.Runtime.Substring(path' 2));
Magic Number,NGit.Transport,TransportGitAnon,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitAnon.cs,OpenConnection,The following statement contains a magic number: int tms = GetTimeout() > 0 ? GetTimeout() * 1000 : 0;
Magic Number,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,HttpOpen,The following statement contains a magic number: int effTimeOut = timeOut * 1000;
Magic Number,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,ReadSmartHeaders,The following statement contains a magic number: byte[] magic = new byte[5];
Magic Number,NGit.Transport,TransportHttp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,ReadSmartHeaders,The following statement contains a magic number: magic[4] != '#'
Magic Number,NGit.Transport,_TransportProtocol_137,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,GetDefaultPort,The following statement contains a magic number: return 80;
Magic Number,NGit.Transport,_TransportProtocol_176,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,GetDefaultPort,The following statement contains a magic number: return 21;
Magic Number,NGit.Transport,HttpConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,HttpConfig,The following statement contains a magic number: postBuffer = rc.GetInt("http"' "postbuffer"' 1 * 1024 * 1024);
Magic Number,NGit.Transport,HttpConfig,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,HttpConfig,The following statement contains a magic number: postBuffer = rc.GetInt("http"' "postbuffer"' 1 * 1024 * 1024);
Magic Number,NGit.Transport,HttpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,GetPackNames,The following statement contains a magic number: packs.AddItem(Sharpen.Runtime.Substring(s' 2));
Magic Number,NGit.Transport,HttpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportHttp.cs,ReadAdvertisedImpl,The following statement contains a magic number: name = Sharpen.Runtime.Substring(name' 0' name.Length - 3);
Magic Number,NGit.Transport,SshTransport,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\SshTransport.cs,GetSession,The following statement contains a magic number: int tms = GetTimeout() > 0 ? GetTimeout() * 1000 : 0;
Magic Number,NGit.Transport,TransportGitSsh,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,CheckExecFailure,The following statement contains a magic number: status == 127
Magic Number,NGit.Transport,_TransportProtocol_84,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportGitSsh.cs,GetDefaultPort,The following statement contains a magic number: return 22;
Magic Number,NGit.Transport,TransportSftp,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,NewSftp,The following statement contains a magic number: int tms = GetTimeout() > 0 ? GetTimeout() * 1000 : 0;
Magic Number,NGit.Transport,_TransportProtocol_100,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,GetDefaultPort,The following statement contains a magic number: return 22;
Magic Number,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,SftpObjectDB,The following statement contains a magic number: path = Sharpen.Runtime.Substring(path' 2);
Magic Number,NGit.Transport,SftpObjectDB,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\TransportSftp.cs,GetPackNames,The following statement contains a magic number: string @in = Sharpen.Runtime.Substring(n' 0' n.Length - 5) + ".idx";
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Digest,The following statement contains a magic number: byte[] bin = new byte[8];
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Uri,The following statement contains a magic number: u.Port == 80 && "http".Equals(u.Scheme)
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Lhex,The following statement contains a magic number: StringBuilder r = new StringBuilder(bin.Length * 2);
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Lhex,The following statement contains a magic number: r.Append(LHEX[(b >> 4) & unchecked((int)(0x0f))]);
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Parse,The following statement contains a magic number: int dq = auth.IndexOf('"'' eq + 2);
Magic Number,NGit.Transport,Digest,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\HttpAuthMethod.cs,Parse,The following statement contains a magic number: value = Sharpen.Runtime.Substring(auth' eq + 2' dq);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,PackParser,The following statement contains a magic number: hdrBuf = new byte[64];
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,Parse,The following statement contains a magic number: receiving.Start(2);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,Parse,The following statement contains a magic number: ((BatchingProgressMonitor)resolving).SetDelayStart(1000' TimeUnit.MILLISECONDS);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: info.type = (c >> 4) & 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: info.type = (c >> 4) & 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: long sz = c & 15;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: int shift = 4;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: switch (info.type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.DATABASE); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					while ((c & 128) != 0) 					{ 						c = ReadFrom(PackParser.Source.DATABASE); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 					} 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					System.Array.Copy(buf' Fill(PackParser.Source.DATABASE' 20)' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(info.type))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: switch (info.type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.DATABASE); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					while ((c & 128) != 0) 					{ 						c = ReadFrom(PackParser.Source.DATABASE); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 					} 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					System.Array.Copy(buf' Fill(PackParser.Source.DATABASE' 20)' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(info.type))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: switch (info.type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.DATABASE); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					while ((c & 128) != 0) 					{ 						c = ReadFrom(PackParser.Source.DATABASE); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 					} 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					System.Array.Copy(buf' Fill(PackParser.Source.DATABASE' 20)' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(info.type))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: switch (info.type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.DATABASE); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					while ((c & 128) != 0) 					{ 						c = ReadFrom(PackParser.Source.DATABASE); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 					} 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					System.Array.Copy(buf' Fill(PackParser.Source.DATABASE' 20)' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(info.type))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadObjectHeader,The following statement contains a magic number: switch (info.type) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.DATABASE); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					while ((c & 128) != 0) 					{ 						c = ReadFrom(PackParser.Source.DATABASE); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 					} 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					System.Array.Copy(buf' Fill(PackParser.Source.DATABASE' 20)' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					OnObjectHeader(PackParser.Source.DATABASE' hdrBuf' 0' hdrPtr); 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(info.type))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ResolveDeltasWithExternalBases,The following statement contains a magic number: IList<PackParser.DeltaChain> missing = new AList<PackParser.DeltaChain>(64);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: int hdrln = Constants.PACK_SIGNATURE.Length + 4 + 4;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: int hdrln = Constants.PACK_SIGNATURE.Length + 4 + 4;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: long vers = NB.DecodeUInt32(buf' p + 4);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: vers != 2 && vers != 3
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackHeader,The following statement contains a magic number: objectCount = NB.DecodeUInt32(buf' p + 8);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackFooter,The following statement contains a magic number: int c = Fill(PackParser.Source.INPUT' 20);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackFooter,The following statement contains a magic number: byte[] srcHash = new byte[20];
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackFooter,The following statement contains a magic number: System.Array.Copy(buf' c' srcHash' 0' 20);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,ReadPackFooter,The following statement contains a magic number: Use(20);
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: int typeCode = (c >> 4) & 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: long sz = c & 15;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: int shift = 4;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: shift += 7;
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,IndexOneObject,The following statement contains a magic number: switch (typeCode) 			{ 				case Constants.OBJ_COMMIT: 				case Constants.OBJ_TREE: 				case Constants.OBJ_BLOB: 				case Constants.OBJ_TAG: 				{ 					OnBeginWholeObject(streamPosition' typeCode' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					Whole(streamPosition' typeCode' sz); 					break; 				}  				case Constants.OBJ_OFS_DELTA: 				{ 					c = ReadFrom(PackParser.Source.INPUT); 					hdrBuf[hdrPtr++] = unchecked((byte)c); 					long ofs = c & 127; 					while ((c & 128) != 0) 					{ 						ofs += 1; 						c = ReadFrom(PackParser.Source.INPUT); 						hdrBuf[hdrPtr++] = unchecked((byte)c); 						ofs <<= 7; 						ofs += (c & 127); 					} 					long @base = streamPosition - ofs; 					OnBeginOfsDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					n.next = baseByPos.Put(@base' n); 					deltaCount++; 					break; 				}  				case Constants.OBJ_REF_DELTA: 				{ 					c = Fill(PackParser.Source.INPUT' 20); 					ObjectId @base = ObjectId.FromRaw(buf' c); 					System.Array.Copy(buf' c' hdrBuf' hdrPtr' 20); 					hdrPtr += 20; 					Use(20); 					PackParser.DeltaChain r = baseById.Get(@base); 					if (r == null) 					{ 						r = new PackParser.DeltaChain(@base); 						baseById.Add(r); 					} 					OnBeginRefDelta(streamPosition' @base' sz); 					OnObjectHeader(PackParser.Source.INPUT' hdrBuf' 0' hdrPtr); 					InflateAndSkip(PackParser.Source.INPUT' sz); 					PackParser.UnresolvedDelta n = OnEndDelta(); 					n.position = streamPosition; 					r.Add(n); 					deltaCount++; 					break; 				}  				default: 				{ 					throw new IOException(MessageFormat.Format(JGitText.Get().unknownObjectType' Sharpen.Extensions.ValueOf 						(typeCode))); 				} 			}
Magic Number,NGit.Transport,InflaterStream,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,InflaterStream,The following statement contains a magic number: this.skipBuffer = new byte[512];
Magic Number,NGit.Transport,JschConfigSessionFactory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschConfigSessionFactory.cs,GetSession,The following statement contains a magic number: !session.IsConnected() && retries < 3
Magic Number,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,JschProcess,The following statement contains a magic number: this.channel.Connect(this.timeout > 0 ? this.timeout * 1000 : 0);
Magic Number,NGit.Transport,JschProcess,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,WaitFor,The following statement contains a magic number: Sharpen.Thread.Sleep(100);
Magic Number,NGit.Transport,_PipedOutputStream_173,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\JschSession.cs,Close,The following statement contains a magic number: copier.Join(this._enclosing.timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,Init,The following statement contains a magic number: timeoutIn.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,Init,The following statement contains a magic number: o.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,RecvCommands,The following statement contains a magic number: line.Length < 83
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId oldId = ObjectId.FromString(Sharpen.Runtime.Substring(line' 0' 40));
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId newId = ObjectId.FromString(Sharpen.Runtime.Substring(line' 41' 81));
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,RecvCommands,The following statement contains a magic number: ObjectId newId = ObjectId.FromString(Sharpen.Runtime.Substring(line' 41' 81));
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,RecvCommands,The following statement contains a magic number: string name = Sharpen.Runtime.Substring(line' 82);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceivePack,The following statement contains a magic number: timeoutIn.SetTimeout(10 * timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceivePack,The following statement contains a magic number: timeoutIn.SetTimeout(10 * timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ReceivePack,The following statement contains a magic number: timeoutIn.SetTimeout(timeout * 1000);
Magic Number,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,ExecuteCommands,The following statement contains a magic number: pm.SetDelayStart(250' TimeUnit.MILLISECONDS);
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,FanoutBucket,The following statement contains a magic number: table = new NoteBucket[256];
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,EstimateSize,The following statement contains a magic number: LeafBucket.MAX_SIZE * 3 / 4 <= cnt
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,EstimateSize,The following statement contains a magic number: LeafBucket.MAX_SIZE * 3 / 4 <= cnt
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,EstimateSize,The following statement contains a magic number: cell < 256
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Set,The following statement contains a magic number: LeafBucket n = new LeafBucket(prefixLen + 2);
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Build,The following statement contains a magic number: byte[] nameBuf = new byte[2];
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Build,The following statement contains a magic number: nameBuf[0] = hexchar[(int)(((uint)cell) >> 4)];
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Build,The following statement contains a magic number: e != null && e.PathCompare(nameBuf' 0' 2' FileMode.TREE) < 0
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Build,The following statement contains a magic number: fmt.Append(nameBuf' 0' 2' FileMode.TREE' id);
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Build,The following statement contains a magic number: cell < 256
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,TreeSize,The following statement contains a magic number: int sz = cnt * TreeFormatter.EntrySize(FileMode.TREE' 2);
Magic Number,NGit.Notes,FanoutBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Append,The following statement contains a magic number: LeafBucket n = new LeafBucket(prefixLen + 2);
Magic Number,NGit.Notes,LazyNoteBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\FanoutBucket.cs,Load,The following statement contains a magic number: AbbreviatedObjectId p = prefix.Abbreviate(this._enclosing.prefixLen + 2);
Magic Number,NGit.Notes,LeafBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\LeafBucket.cs,LeafBucket,The following statement contains a magic number: notes = new Note[4];
Magic Number,NGit.Notes,LeafBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\LeafBucket.cs,GrowIfFull,The following statement contains a magic number: Note[] n = new Note[notes.Length * 2];
Magic Number,NGit.Notes,LeafBucket,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\LeafBucket.cs,ShouldSplit,The following statement contains a magic number: return MAX_SIZE <= cnt && prefixLen + 2 < Constants.OBJECT_ID_STRING_LENGTH;
Magic Number,NGit.Notes,NoteParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteParser.cs,ParseFanoutCell,The following statement contains a magic number: return (RawParseUtils.ParseHexInt4(path[pathOffset + 0]) << 4) | RawParseUtils.ParseHexInt4 						(path[pathOffset + 1]);
Magic Number,NGit.Notes,NoteParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteParser.cs,ParseFanoutCell,The following statement contains a magic number: NameLength == 2 && IsTree()
Magic Number,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,MergeFanoutBucket,The following statement contains a magic number: FanoutBucket result = new FanoutBucket(treeDepth * 2);
Magic Number,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,MergeFanoutBucket,The following statement contains a magic number: i < 256
Magic Number,NGit.Notes,NoteMapMerger,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Notes\NoteMapMerger.cs,MergeLeafBucket,The following statement contains a magic number: InMemoryNoteBucket result = new LeafBucket(treeDepth * 2);
Magic Number,NGit.Blame,Candidate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Blame\Candidate.cs,ToString,The following statement contains a magic number: r.Append(" @ ").Append(sourceCommit.Abbreviate(6).Name);
Magic Number,NGit.Submodule,SubmoduleWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Submodule\SubmoduleWalk.cs,GetSubmoduleRemoteUrl,The following statement contains a magic number: submoduleUrl = Sharpen.Runtime.Substring(submoduleUrl' 2);
Duplicate Code,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,Resolve,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 32)' (190' 211))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,FindObjectId,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (10' 29)' (14' 33)' (18' 37)' (22' 41)' (26' 45)' (30' 49)' (34' 53)' (38' 57)' (42' 61)' (46' 65)' (50' 69))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,FindObjectId,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 64)' (10' 68))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,FindObjectId,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (14' 33)' (18' 37)' (22' 41)' (26' 45)' (30' 49)' (34' 53)' (38' 57)' (42' 61)' (46' 65)' (50' 69))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (13' 32)' (20' 39)' (27' 46)' (34' 53))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 45)' (13' 52))
Duplicate Code,NGit.Revwalk,ObjectWalk,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk\ObjectWalk.cs,ParseMode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (20' 39)' (27' 46)' (34' 53))
Missing Default,NGit,Config,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Config.cs,GetLong,The following switch statement is missing a default case: switch (StringUtils.ToLowerCase(n[n.Length - 1])) 			{ 				case 'g': 				{ 					mul = GiB; 					break; 				}  				case 'm': 				{ 					mul = MiB; 					break; 				}  				case 'k': 				{ 					mul = KiB; 					break; 				} 			}
Missing Default,NGit,FileMode,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\FileMode.cs,FromBits,The following switch statement is missing a default case: switch (bits & TYPE_MASK) 			{ 				case TYPE_MISSING: 				{ 					if (bits == 0) 					{ 						return MISSING; 					} 					break; 				}  				case TYPE_TREE: 				{ 					return TREE; 				}  				case TYPE_FILE: 				{ 					if ((bits & 0x49) != 0) 					{ 						return EXECUTABLE_FILE; 					} 					return REGULAR_FILE; 				}  				case TYPE_SYMLINK: 				{ 					return SYMLINK; 				}  				case TYPE_GITLINK: 				{ 					return GITLINK; 				} 			}
Missing Default,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,IsValidRefName,The following switch statement is missing a default case: switch (c) 				{ 					case '.': 					{ 						switch (p) 						{ 							case '\0': 							case '/': 							case '.': 							{ 								return false; 							} 						} 						if (i == len - 1) 						{ 							return false; 						} 						break; 					}  					case '/': 					{ 						if (i == 0 || i == len - 1) 						{ 							return false; 						} 						if (p == '/') 						{ 							return false; 						} 						components++; 						break; 					}  					case '{': 					{ 						if (p == '@') 						{ 							return false; 						} 						break; 					}  					case '~': 					case '^': 					case ':': 					case '?': 					case '[': 					case '*': 					case '\\': 					case '\u007F': 					{ 						return false; 					} 				}
Missing Default,NGit,Repository,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\Repository.cs,IsValidRefName,The following switch statement is missing a default case: switch (p) 						{ 							case '\0': 							case '/': 							case '.': 							{ 								return false; 							} 						}
Missing Default,NGit,BatchRefUpdate,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit\BatchRefUpdate.cs,Execute,The following switch statement is missing a default case: switch (cmd.GetType()) 						{ 							case ReceiveCommand.Type.DELETE: 							{ 								cmd.SetResult(ru.Delete(walk)); 								continue; 								goto case ReceiveCommand.Type.CREATE; 							}  							case ReceiveCommand.Type.CREATE: 							case ReceiveCommand.Type.UPDATE: 							case ReceiveCommand.Type.UPDATE_NONFASTFORWARD: 							{ 								cmd.SetResult(ru.Update(walk)); 								continue; 							} 						}
Missing Default,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,Call,The following switch statement is missing a default case: switch (operation) 				{ 					case RebaseCommand.Operation.ABORT: 					{ 						try 						{ 							return Abort(RebaseResult.ABORTED_RESULT); 						} 						catch (IOException ioe) 						{ 							throw new JGitInternalException(ioe.Message' ioe); 						} 						goto case RebaseCommand.Operation.SKIP; 					}  					case RebaseCommand.Operation.SKIP: 					case RebaseCommand.Operation.CONTINUE: 					{ 						// fall through 						string upstreamCommitId = ReadFile(rebaseDir' ONTO); 						try 						{ 							upstreamCommitName = ReadFile(rebaseDir' ONTO_NAME); 						} 						catch (FileNotFoundException) 						{ 							// Fall back to commit ID if file doesn't exist (e.g. rebase 							// was started by C Git) 							upstreamCommitName = upstreamCommitId; 						} 						this.upstreamCommit = walk.ParseCommit(repo.Resolve(upstreamCommitId)); 						break; 					}  					case RebaseCommand.Operation.BEGIN: 					{ 						RebaseResult res = InitFilesAndRewind(); 						if (res != null) 						{ 							return res; 						} 					break; 					} 				}
Missing Default,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,Call,The following switch statement is missing a default case: switch (cherryPickResult.GetStatus()) 							{ 								case CherryPickResult.CherryPickStatus.FAILED: 								{ 									if (operation == RebaseCommand.Operation.BEGIN) 									{ 										return Abort(new RebaseResult(cherryPickResult.GetFailingPaths())); 									} 									else 									{ 										return Stop(commitToPick); 									} 									goto case CherryPickResult.CherryPickStatus.CONFLICTING; 								}  								case CherryPickResult.CherryPickStatus.CONFLICTING: 								{ 									return Stop(commitToPick); 								}  								case CherryPickResult.CherryPickStatus.OK: 								{ 									newHead = cherryPickResult.GetNewHead(); 									break; 								} 							}
Missing Default,NGit.Api,RebaseCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\RebaseCommand.cs,LoadSteps,The following switch statement is missing a default case: switch (tokenCount) 					{ 						case 0: 						{ 							string actionToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							if (actionToken[0] == '#') 							{ 								tokenCount = 3; 								break; 							} 							RebaseCommand.Action action = RebaseCommand.Action.Parse(actionToken); 							if (action != null) 							{ 								current = new RebaseCommand.Step(RebaseCommand.Action.Parse(actionToken)); 							} 							break; 						}  						case 1: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = RawParseUtils.Next(buf' tokenBegin' ' '); 							string commitToken = Sharpen.Runtime.GetStringForBytes(buf' tokenBegin' nextSpace 								 - tokenBegin - 1); 							tokenBegin = nextSpace; 							current.commit = AbbreviatedObjectId.FromString(commitToken); 							break; 						}  						case 2: 						{ 							if (current == null) 							{ 								break; 							} 							nextSpace = ptr; 							int length = ptr - tokenBegin; 							current.shortMessage = new byte[length]; 							System.Array.Copy(buf' tokenBegin' current.shortMessage' 0' length); 							r.AddItem(current); 							break; 						} 					}
Missing Default,NGit.Api,ResetCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ResetCommand.cs,Call,The following switch statement is missing a default case: switch (mode) 				{ 					case ResetCommand.ResetType.HARD: 					{ 						CheckoutIndex(commit); 						break; 					}  					case ResetCommand.ResetType.MIXED: 					{ 						ResetIndex(commit); 						break; 					}  					case ResetCommand.ResetType.SOFT: 					{ 						// do nothing' only the ref was changed 						break; 					}  					case ResetCommand.ResetType.KEEP: 					case ResetCommand.ResetType.MERGE: 					{ 						// TODO 						// TODO 						throw new NotSupportedException(); 					} 				}
Missing Default,NGit.Api,ApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ApplyCommand.cs,Call,The following switch statement is missing a default case: switch (type) 					{ 						case DiffEntry.ChangeType.ADD: 						{ 							f = GetFile(fh.GetNewPath()' true); 							Apply(f' fh); 							break; 						}  						case DiffEntry.ChangeType.MODIFY: 						{ 							f = GetFile(fh.GetOldPath()' false); 							Apply(f' fh); 							break; 						}  						case DiffEntry.ChangeType.DELETE: 						{ 							f = GetFile(fh.GetOldPath()' false); 							if (!f.Delete()) 							{ 								throw new PatchApplyException(MessageFormat.Format(JGitText.Get().cannotDeleteFile 									' f)); 							} 							break; 						}  						case DiffEntry.ChangeType.RENAME: 						{ 							f = GetFile(fh.GetOldPath()' false); 							FilePath dest = GetFile(fh.GetNewPath()' false); 							if (!f.RenameTo(dest)) 							{ 								throw new PatchApplyException(MessageFormat.Format(JGitText.Get().renameFileFailed 									' f' dest)); 							} 							break; 						}  						case DiffEntry.ChangeType.COPY: 						{ 							f = GetFile(fh.GetOldPath()' false); 							byte[] bs = IOUtil.ReadFully(f); 							FileWriter fw = new FileWriter(GetFile(fh.GetNewPath()' true)); 							fw.Write(Sharpen.Runtime.GetStringForBytes(bs)); 							fw.Close(); 							break; 						} 					}
Missing Default,NGit.Api,ApplyCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Api\ApplyCommand.cs,Apply,The following switch statement is missing a default case: switch (hunkLine[0]) 					{ 						case ' ': 						{ 							if (!newLines[hh.GetNewStartLine() - 1 + pos].Equals(Sharpen.Runtime.Substring(hunkLine 								' 1))) 							{ 								throw new PatchApplyException(MessageFormat.Format(JGitText.Get().patchApplyException 									' hh)); 							} 							pos++; 							break; 						}  						case '-': 						{ 							if (!newLines[hh.GetNewStartLine() - 1 + pos].Equals(Sharpen.Runtime.Substring(hunkLine 								' 1))) 							{ 								throw new PatchApplyException(MessageFormat.Format(JGitText.Get().patchApplyException 									' hh)); 							} 							newLines.Remove(hh.GetNewStartLine() - 1 + pos); 							break; 						}  						case '+': 						{ 							newLines.Add(hh.GetNewStartLine() - 1 + pos' Sharpen.Runtime.Substring(hunkLine'  								1)); 							pos++; 							break; 						} 					}
Missing Default,NGit.Diff,DiffEntry,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffEntry.cs,ToString,The following switch statement is missing a default case: switch (changeType) 			{ 				case DiffEntry.ChangeType.ADD: 				{ 					buf.Append(newPath); 					break; 				}  				case DiffEntry.ChangeType.COPY: 				{ 					buf.Append(oldPath + "->" + newPath); 					break; 				}  				case DiffEntry.ChangeType.DELETE: 				{ 					buf.Append(oldPath); 					break; 				}  				case DiffEntry.ChangeType.MODIFY: 				{ 					buf.Append(oldPath); 					break; 				}  				case DiffEntry.ChangeType.RENAME: 				{ 					buf.Append(oldPath + "->" + newPath); 					break; 				} 			}
Missing Default,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,Open,The following switch statement is missing a default case: switch (side) 					{ 						case DiffEntry.Side.OLD: 						{ 							entry.oldId = id; 							break; 						}  						case DiffEntry.Side.NEW: 						{ 							entry.newId = id; 							break; 						} 					}
Missing Default,NGit.Diff,DiffFormatter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Diff\DiffFormatter.cs,FormatHeader,The following switch statement is missing a default case: switch (type) 			{ 				case DiffEntry.ChangeType.ADD: 				{ 					o.Write(Constants.EncodeASCII("new file mode ")); 					newMode.CopyTo(o); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.DELETE: 				{ 					o.Write(Constants.EncodeASCII("deleted file mode ")); 					oldMode.CopyTo(o); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.RENAME: 				{ 					o.Write(Constants.EncodeASCII("similarity index " + ent.GetScore() + "%")); 					o.Write('\n'); 					o.Write(Constants.Encode("rename from " + QuotePath(oldp))); 					o.Write('\n'); 					o.Write(Constants.Encode("rename to " + QuotePath(newp))); 					o.Write('\n'); 					break; 				}  				case DiffEntry.ChangeType.COPY: 				{ 					o.Write(Constants.EncodeASCII("similarity index " + ent.GetScore() + "%")); 					o.Write('\n'); 					o.Write(Constants.Encode("copy from " + QuotePath(oldp))); 					o.Write('\n'); 					o.Write(Constants.Encode("copy to " + QuotePath(newp))); 					o.Write('\n'); 					if (!oldMode.Equals(newMode)) 					{ 						o.Write(Constants.EncodeASCII("new file mode ")); 						newMode.CopyTo(o); 						o.Write('\n'); 					} 					break; 				}  				case DiffEntry.ChangeType.MODIFY: 				{ 					if (0 < ent.GetScore()) 					{ 						o.Write(Constants.EncodeASCII("dissimilarity index " + (100 - ent.GetScore()) + "%" 							)); 						o.Write('\n'); 					} 					break; 				} 			}
Missing Default,NGit.Revwalk.Filter,SubStringRevFilter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Revwalk.Filter\SubStringRevFilter.cs,Safe,The following switch statement is missing a default case: switch (c) 				{ 					case '.': 					case '?': 					case '*': 					case '+': 					case '{': 					case '}': 					case '(': 					case ')': 					case '[': 					case ']': 					case '\\': 					{ 						return false; 					} 				}
Missing Default,NGit.Storage.File,CachedObjectDirectory,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\CachedObjectDirectory.cs,InsertUnpackedObject,The following switch statement is missing a default case: switch (result) 			{ 				case FileObjectDatabase.InsertLooseObjectResult.INSERTED: 				case FileObjectDatabase.InsertLooseObjectResult.EXISTS_LOOSE: 				{ 					unpackedObjects.AddIfAbsent(new CachedObjectDirectory.UnpackedObjectId(objectId)); 					break; 				}  				case FileObjectDatabase.InsertLooseObjectResult.EXISTS_PACKED: 				case FileObjectDatabase.InsertLooseObjectResult.FAILURE: 				{ 					break; 				} 			}
Missing Default,NGit.Storage.File,PackIndexWriter,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Storage.File\PackIndexWriter.cs,CreateOldestPossible,The following switch statement is missing a default case: switch (version) 				{ 					case 1: 					{ 						if (PackIndexWriterV1.CanStore(oe)) 						{ 							continue; 						} 						version = 2; 						goto case 2; 					}  					case 2: 					{ 						goto LOOP_break; 					} 				}
Missing Default,NGit.Treewalk,WorkingTreeIterator,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Treewalk\WorkingTreeIterator.cs,IsEntryIgnoredInternal,The following switch statement is missing a default case: switch (rules.IsIgnored(p' FileMode.TREE.Equals(mode))) 				{ 					case IgnoreNode.MatchResult.IGNORED: 					{ 						return true; 					}  					case IgnoreNode.MatchResult.NOT_IGNORED: 					{ 						return false; 					}  					case IgnoreNode.MatchResult.CHECK_PARENT: 					{ 						break; 					} 				}
Missing Default,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following switch statement is missing a default case: switch (numSigBytes) 			{ 				case 3: 				{ 					inBuff |= (int)(((uint)(source[srcOffset + 2] << 24)) >> 24); 					goto case 2; 				}  				case 2: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset + 1] << 24)) >> 16); 					goto case 1; 				}  				case 1: 				{ 					//$FALL-THROUGH$ 					inBuff |= (int)(((uint)(source[srcOffset] << 24)) >> 8); 					break; 				} 			}
Missing Default,NGit.Util,Base64,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\Base64.cs,Encode3to4,The following switch statement is missing a default case: switch (numSigBytes) 			{ 				case 3: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = ENC[(inBuff) & unchecked((int)(0x3f))]; 					break; 				}  				case 2: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = ENC[((int)(((uint)inBuff) >> 6)) & unchecked((int)( 						0x3f))]; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				}  				case 1: 				{ 					destination[destOffset] = ENC[((int)(((uint)inBuff) >> 18))]; 					destination[destOffset + 1] = ENC[((int)(((uint)inBuff) >> 12)) & unchecked((int) 						(0x3f))]; 					destination[destOffset + 2] = (byte)EQUALS_SIGN; 					destination[destOffset + 3] = (byte)EQUALS_SIGN; 					break; 				} 			}
Missing Default,NGit.Util,BourneStyle,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\QuotedString.cs,Quote,The following switch statement is missing a default case: switch (@in[i]) 					{ 						case '\'': 						case '!': 						{ 							r.AppendRange(@in' start' i); 							r.Append('\''); 							r.Append('\\'); 							r.Append(@in[i]); 							r.Append('\''); 							start = i + 1; 							break; 						} 					}
Missing Default,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseBase10,The following switch statement is missing a default case: switch (b[ptr]) 				{ 					case (byte)('-'): 					{ 						sign = -1; 						ptr++; 						break; 					}  					case (byte)('+'): 					{ 						ptr++; 						break; 					} 				}
Missing Default,NGit.Util,RawParseUtils,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Util\RawParseUtils.cs,ParseLongBase10,The following switch statement is missing a default case: switch (b[ptr]) 				{ 					case (byte)('-'): 					{ 						sign = -1; 						ptr++; 						break; 					}  					case (byte)('+'): 					{ 						ptr++; 						break; 					} 				}
Missing Default,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,The following switch statement is missing a default case: switch (anr) 					{ 						case PacketLineIn.AckNackResult.NAK: 						{ 							// More have lines are necessary to compute the 							// pack on the remote side. Keep doing that. 							// 							resultsPending--; 							goto READ_RESULT_break; 						}  						case PacketLineIn.AckNackResult.ACK: 						{ 							// The remote side is happy and knows exactly what 							// to send us. There is no further negotiation and 							// we can break out immediately. 							// 							multiAck = BasePackFetchConnection.MultiAck.OFF; 							resultsPending = 0; 							receivedAck = true; 							if (statelessRPC) 							{ 								state.WriteTo(@out' null); 							} 							goto SEND_HAVES_break; 						}  						case PacketLineIn.AckNackResult.ACK_CONTINUE: 						case PacketLineIn.AckNackResult.ACK_COMMON: 						case PacketLineIn.AckNackResult.ACK_READY: 						{ 							// The server knows this commit (ackId). We don't 							// need to send any further along its ancestry' but 							// we need to continue to talk about other parts of 							// our local history. 							// 							MarkCommon(walk.ParseAny(ackId)' anr); 							receivedAck = true; 							receivedContinue = true; 							havesSinceLastContinue = 0; 							if (anr == PacketLineIn.AckNackResult.ACK_READY) 							{ 								receivedReady = true; 							} 							break; 						} 					}
Missing Default,NGit.Transport,BasePackFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BasePackFetchConnection.cs,Negotiate,The following switch statement is missing a default case: switch (anr) 				{ 					case PacketLineIn.AckNackResult.NAK: 					{ 						// A NAK is a response to an end we queued earlier 						// we eat it and look for another ACK/NAK message. 						// 						break; 					}  					case PacketLineIn.AckNackResult.ACK: 					{ 						// A solitary ACK at this point means the remote won't 						// speak anymore' but is going to send us a pack now. 						// 						goto READ_RESULT_break2; 					}  					case PacketLineIn.AckNackResult.ACK_CONTINUE: 					case PacketLineIn.AckNackResult.ACK_COMMON: 					case PacketLineIn.AckNackResult.ACK_READY: 					{ 						// We will expect a normal ACK to break out of the loop. 						// 						multiAck = BasePackFetchConnection.MultiAck.CONTINUE; 						break; 					} 				}
Missing Default,NGit.Transport,ReceiveCommand,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\ReceiveCommand.cs,Execute,The following switch statement is missing a default case: switch (GetType()) 				{ 					case ReceiveCommand.Type.DELETE: 					{ 						if (!ObjectId.ZeroId.Equals(GetOldId())) 						{ 							// We can only do a CAS style delete if the client 							// didn't bork its delete request by sending the 							// wrong zero id rather than the advertised one. 							// 							ru.SetExpectedOldObjectId(GetOldId()); 						} 						ru.SetForceUpdate(true); 						SetResult(ru.Delete(rp.GetRevWalk())); 						break; 					}  					case ReceiveCommand.Type.CREATE: 					case ReceiveCommand.Type.UPDATE: 					case ReceiveCommand.Type.UPDATE_NONFASTFORWARD: 					{ 						ru.SetForceUpdate(rp.IsAllowNonFastForwards()); 						ru.SetExpectedOldObjectId(GetOldId()); 						ru.SetNewObjectId(GetNewId()); 						ru.SetRefLogMessage("push"' true); 						SetResult(ru.Update(rp.GetRevWalk())); 						break; 					} 				}
Missing Default,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ProcessHaveLines,The following switch statement is missing a default case: switch (multiAck) 					{ 						case BasePackFetchConnection.MultiAck.OFF: 						{ 							// If both sides have the same object; let the client know. 							// 							if (commonBase.Count == 1) 							{ 								pckOut.WriteString("ACK " + obj.Name + "\n"); 							} 							break; 						}  						case BasePackFetchConnection.MultiAck.CONTINUE: 						{ 							pckOut.WriteString("ACK " + obj.Name + " continue\n"); 							break; 						}  						case BasePackFetchConnection.MultiAck.DETAILED: 						{ 							pckOut.WriteString("ACK " + obj.Name + " common\n"); 							break; 						} 					}
Missing Default,NGit.Transport,UploadPack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\UploadPack.cs,ProcessHaveLines,The following switch statement is missing a default case: switch (multiAck) 							{ 								case BasePackFetchConnection.MultiAck.OFF: 								{ 									break; 								}  								case BasePackFetchConnection.MultiAck.CONTINUE: 								{ 									pckOut.WriteString("ACK " + id.Name + " continue\n"); 									break; 								}  								case BasePackFetchConnection.MultiAck.DETAILED: 								{ 									pckOut.WriteString("ACK " + id.Name + " ready\n"); 									sentReady = true; 									break; 								} 							}
Missing Default,NGit.Transport,WalkFetchConnection,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\WalkFetchConnection.cs,MarkLocalObjComplete,The following switch statement is missing a default case: switch (obj.Type) 			{ 				case Constants.OBJ_BLOB: 				{ 					obj.Add(COMPLETE); 					break; 				}  				case Constants.OBJ_COMMIT: 				{ 					PushLocalCommit((RevCommit)obj); 					break; 				}  				case Constants.OBJ_TREE: 				{ 					MarkTreeComplete((RevTree)obj); 					break; 				} 			}
Missing Default,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,Fill,The following switch statement is missing a default case: switch (src) 					{ 						case PackParser.Source.INPUT: 						{ 							Sync(); 							break; 						}  						case PackParser.Source.DATABASE: 						{ 							if (bAvail > 0) 							{ 								System.Array.Copy(buf' bOffset' buf' 0' bAvail); 							} 							bOffset = 0; 							break; 						} 					}
Missing Default,NGit.Transport,PackParser,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\PackParser.cs,Fill,The following switch statement is missing a default case: switch (src) 				{ 					case PackParser.Source.INPUT: 					{ 						next = @in.Read(buf' next' free); 						break; 					}  					case PackParser.Source.DATABASE: 					{ 						next = ReadDatabase(buf' next' free); 						break; 					} 				}
Missing Default,NGit.Transport,BaseReceivePack,C:\research\architectureSmells\repos\mono_ngit\NGit\NGit.Transport\BaseReceivePack.cs,SendStatusReport,The following switch statement is missing a default case: switch (cmd_1.GetResult()) 				{ 					case ReceiveCommand.Result.NOT_ATTEMPTED: 					{ 						r.Append("server bug; ref not processed"); 						break; 					}  					case ReceiveCommand.Result.REJECTED_NOCREATE: 					{ 						r.Append("creation prohibited"); 						break; 					}  					case ReceiveCommand.Result.REJECTED_NODELETE: 					{ 						r.Append("deletion prohibited"); 						break; 					}  					case ReceiveCommand.Result.REJECTED_NONFASTFORWARD: 					{ 						r.Append("non-fast forward"); 						break; 					}  					case ReceiveCommand.Result.REJECTED_CURRENT_BRANCH: 					{ 						r.Append("branch is currently checked out"); 						break; 					}  					case ReceiveCommand.Result.REJECTED_MISSING_OBJECT: 					{ 						if (cmd_1.GetMessage() == null) 						{ 							r.Append("missing object(s)"); 						} 						else 						{ 							if (cmd_1.GetMessage().Length == Constants.OBJECT_ID_STRING_LENGTH) 							{ 								r.Append("object " + cmd_1.GetMessage() + " missing"); 							} 							else 							{ 								r.Append(cmd_1.GetMessage()); 							} 						} 						break; 					}  					case ReceiveCommand.Result.REJECTED_OTHER_REASON: 					{ 						if (cmd_1.GetMessage() == null) 						{ 							r.Append("unspecified reason"); 						} 						else 						{ 							r.Append(cmd_1.GetMessage()); 						} 						break; 					}  					case ReceiveCommand.Result.LOCK_FAILURE: 					{ 						r.Append("failed to lock"); 						break; 					}  					case ReceiveCommand.Result.OK: 					{ 						// We shouldn't have reached this case (see 'ok' case above). 						continue; 					} 				}
