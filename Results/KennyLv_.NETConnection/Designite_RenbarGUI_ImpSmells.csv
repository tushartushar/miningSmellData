Implementation smell,Namespace,Class,File,Method,Description
Long Method,RenbarLib.Environment.Forms.Customizations.Service,Communication,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Communication.cs,Package,The method has 119 lines of code.
Long Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The method has 226 lines of code.
Long Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The method has 136 lines of code.
Long Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The method has 240 lines of code.
Long Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The method has 147 lines of code.
Long Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The method has 141 lines of code.
Long Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The method has 178 lines of code.
Long Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The method has 149 lines of code.
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Communication,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Communication.cs,Package,Cyclomatic complexity of the method is 63
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetLocalization,Cyclomatic complexity of the method is 8
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,Cyclomatic complexity of the method is 11
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Member,Cyclomatic complexity of the method is 9
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetWaitFor,Cyclomatic complexity of the method is 8
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,Cyclomatic complexity of the method is 24
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,Cyclomatic complexity of the method is 17
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetJobInfo,Cyclomatic complexity of the method is 9
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataRevise,Cyclomatic complexity of the method is 16
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataComparison,Cyclomatic complexity of the method is 8
Complex Method,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,Cyclomatic complexity of the method is 8
Complex Method,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,Cyclomatic complexity of the method is 14
Complex Method,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Language,Cyclomatic complexity of the method is 18
Complex Method,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,Cyclomatic complexity of the method is 12
Complex Method,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,Cyclomatic complexity of the method is 22
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,Cyclomatic complexity of the method is 66
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Job_Form_Load,Cyclomatic complexity of the method is 12
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,AssignValues,Cyclomatic complexity of the method is 30
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,Cyclomatic complexity of the method is 12
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Mapping,Cyclomatic complexity of the method is 16
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Revise,Cyclomatic complexity of the method is 20
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Connect,Cyclomatic complexity of the method is 14
Complex Method,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,Cyclomatic complexity of the method is 12
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,Cyclomatic complexity of the method is 142
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,Cyclomatic complexity of the method is 14
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,Cyclomatic complexity of the method is 8
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Pause_Job_Click,Cyclomatic complexity of the method is 8
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,Cyclomatic complexity of the method is 8
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,Cyclomatic complexity of the method is 8
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,Cyclomatic complexity of the method is 15
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,Cyclomatic complexity of the method is 14
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,Cyclomatic complexity of the method is 29
Complex Method,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,Cyclomatic complexity of the method is 24
Complex Method,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,Cyclomatic complexity of the method is 28
Complex Method,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,Cyclomatic complexity of the method is 48
Complex Method,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,ChangePoolData,Cyclomatic complexity of the method is 10
Complex Method,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Language,Cyclomatic complexity of the method is 12
Complex Method,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Button_Ok_Click,Cyclomatic complexity of the method is 13
Long Parameter List,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Priority_Form,The method has 5 parameters.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,AllPools,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' new Dictionary<string' object> ()); " is 123.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION' new Dictionary<string' object> ()); " is 134.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Machines,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEINFO' new Dictionary<string' object> ()); " is 126.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Member,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION' new Dictionary<string' object> ()); " is 134.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetWaitFor,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWJOBSTATUS' new Dictionary<string' object> ()); " is 124.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetWaitFor,The length of the statement  "				if (!string.IsNullOrEmpty (canSelect [i] ["Job_Group_Id"].ToString ()) && !string.IsNullOrEmpty (canSelect [i] ["Name"].ToString ())) { " is 135.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "			if (remoteDs.Tables.Contains ("Job_Group") && remoteDs.Tables.Contains ("Job_Attr") && remoteDs.Tables.Contains ("Job") && remoteDs.Tables.Contains ("Machine")) { " is 162.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "						DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key)); " is 130.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "							completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString (); " is 127.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "						row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize); " is 147.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "							////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString(); " is 128.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "							////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString(); " is 130.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "								if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"])) " is 166.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "								srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")); " is 248.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The length of the statement  "								srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString (); " is 163.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWJOBSTATUS' new Dictionary<string' object> ()); " is 124.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The length of the statement  "			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINERENDERINFO' new Dictionary<string' object> ()); " is 132.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The length of the statement  "				if (!string.IsNullOrEmpty (canSelect [i] ["Job_Group_Id"].ToString ()) && !string.IsNullOrEmpty (canSelect [i] ["Name"].ToString ())) { " is 135.
Long Statement,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataComparison,The length of the statement  "	result = _CacheData.Tables [CompareData.TableName].GetChanges (DataRowState.Added | DataRowState.Deleted | DataRowState.Modified | DataRowState.Unchanged); " is 155.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Text = string.Format (EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.ProductInfo); " is 145.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_ProductName.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_ProductName.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.ProductInfo); " is 181.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_Version.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Version.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.VersionInfo); " is 173.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_Copyright.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Copyright.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.CopyrightInfo); " is 179.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Text = string.Format (EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.ProductInfo); " is 145.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_ProductName.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_ProductName.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.ProductInfo); " is 181.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_Version.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Version.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.VersionInfo); " is 173.
Long Statement,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The length of the statement  "		this.Label_Copyright.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Copyright.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.CopyrightInfo); " is 179.
Long Statement,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Language,The length of the statement  "		this.GroupBox_User.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_User.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Language,The length of the statement  "		this.GroupBox_User.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_User.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Button_OK_Click,The length of the statement  "		MessageBox.Show (this' this.SuccessMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 158.
Long Statement,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Button_OK_Click,The length of the statement  "		MessageBox.Show (this' this.FailMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 149.
Long Statement,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,The length of the statement  "		this.GroupBox_Output.Text = EnvCust.GetLocalization (this.Name' this.GroupBox_Output.Name' Customization.Language.En_Us); " is 121.
Long Statement,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,The length of the statement  "		ResumeMessage = this.EnvCust.GetLocalization (this.Name' this.Button_Pause.Name + "_Resume"' Customization.Language.En_Us); " is 123.
Long Statement,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,The length of the statement  "		this.GroupBox_Output.Text = EnvCust.GetLocalization (this.Name' this.GroupBox_Output.Name' Customization.Language.Zh_Tw); " is 121.
Long Statement,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,The length of the statement  "		ResumeMessage = this.EnvCust.GetLocalization (this.Name' this.Button_Pause.Name + "_Resume"' Customization.Language.Zh_Tw); " is 123.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);" is 154.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); " is 156.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200); " is 150.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100); " is 157.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150); " is 157.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100); " is 152.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us); " is 120.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us); " is 141.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);" is 154.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); " is 156.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200); " is 150.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100); " is 152.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw); " is 120.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The length of the statement  "		this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,ListView_History_DoubleClick,The length of the statement  "		IDictionary<string' object> Data = this.EnvCust.GetJobInfo (this.ListView_History.SelectedItems [0].SubItems [0].Text.ToString ()' ref this.EnvComm); " is 149.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.GroupBox_Job_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Job_Properties.Name' Customization.Language.En_Us); " is 142.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Job_Project.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Project.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Job_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Name.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Command.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Command.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Packet_Size.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Packet_Size.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Submit_Type.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Submit_Type.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.RadioButton_Processor.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Processor.Name' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.RadioButton_Client.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Client.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_First_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_First_Pool.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Second_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Second_Pool.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Wait_For.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Wait_For.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.GroupBox_AB_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_AB_Properties.Name' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_AB_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Name.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_AB_Path.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Path.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.CheckBox_Update_Only.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Update_Only.Name' Customization.Language.En_Us); " is 136.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Update.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Clear.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Clear.Name' Customization.Language.En_Us); " is 120.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Submit.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Submit.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.__parse_mulit_error = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.GroupBox_Job_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Job_Properties.Name' Customization.Language.Zh_Tw); " is 142.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Job_Project.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Project.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Job_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Name.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Command.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Command.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Packet_Size.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Packet_Size.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Submit_Type.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Submit_Type.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.RadioButton_Processor.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Processor.Name' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.RadioButton_Client.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Client.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_First_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_First_Pool.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Second_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Second_Pool.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Wait_For.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Wait_For.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.GroupBox_AB_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_AB_Properties.Name' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_AB_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Name.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Label_AB_Path.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Path.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.CheckBox_Update_Only.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Update_Only.Name' Customization.Language.Zh_Tw); " is 136.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Update.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Clear.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Clear.Name' Customization.Language.Zh_Tw); " is 120.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.Button_Submit.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Submit.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The length of the statement  "		this.__parse_mulit_error = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The length of the statement  "			this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The length of the statement  "			this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The length of the statement  "			this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The length of the statement  "			this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Submit_Click,The length of the statement  "	if (string.IsNullOrEmpty (this.TextBox_Job_Project.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Job_Name.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Command.Text.Trim ()) || this.ComboBox_First_Pool.SelectedIndex == -1) { " is 236.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Submit_Click,The length of the statement  "		MessageBox.Show (this' this.__requirement_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Submit_Click,The length of the statement  "				MessageBox.Show (this' this.__sendjob_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 153.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Submit_Click,The length of the statement  "						MessageBox.Show (this' this.__backup_file_warning' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 161.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Update_Click,The length of the statement  "	if (string.IsNullOrEmpty (this.TextBox_Job_Project.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Job_Name.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Command.Text.Trim ()) || this.ComboBox_First_Pool.SelectedIndex == -1) { " is 236.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Update_Click,The length of the statement  "		MessageBox.Show (this' this.__requirement_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Update_Click,The length of the statement  "				MessageBox.Show (this' this.__updatejob_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 155.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,The length of the statement  "			MessageBox.Show (this' this.__parse_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 151.
Long Statement,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,The length of the statement  "			MessageBox.Show (this' this.__parse_mulit_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us); " is 126.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us); " is 134.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us); " is 120.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us); " is 126.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100);" is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100); " is 153.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);" is 142.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);" is 145.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0); " is 142.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); " is 147.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120); " is 145.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100); " is 148.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80); " is 151.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100); " is 155.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100); " is 155.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100);" is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100); " is 148.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us); " is 127.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us); " is 137.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us); " is 134.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us); " is 143.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName); " is 181.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw); " is 126.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw); " is 134.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw); " is 120.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw); " is 126.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100);" is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100); " is 153.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);" is 142.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);" is 145.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0); " is 142.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); " is 147.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120); " is 145.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100); " is 148.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80); " is 151.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100); " is 155.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100); " is 155.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw); " is 122.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100);" is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100); " is 146.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150); " is 150.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100); " is 148.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100); " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw); " is 127.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw); " is 128.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw); " is 137.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw); " is 134.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw); " is 143.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The length of the statement  "		this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName); " is 181.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,DueTimer_Tick,The length of the statement  "		DialogResult result = MessageBox.Show (this' this.DueDateMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 180.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form_FormClosing,The length of the statement  "	DialogResult result = MessageBox.Show (this' AppCloseMessage' this.Text' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 126.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The length of the statement  "				MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The length of the statement  "				MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Settings_ChangeUser_Click,The length of the statement  "			this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + _user; " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Settings_ChangeUser_Click,The length of the statement  "			this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + _user; " is 144.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Process_MouseDown,The length of the statement  "	if (e.Button == MouseButtons.Right && this.ListView_Process.Items.Count > 0 && this.ListView_Process.SelectedItems.Count > 0) " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Update_Job_Click,The length of the statement  "	IDictionary<string' object> Data = this.EnvCust.GetJobInfo (this.ListView_Queue.SelectedItems [0].Text.Trim ()' ref this.EnvComm); " is 130.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,The length of the statement  "			DataRow[] row = this.EnvCust.DataListView.Tables ["Queue"].Select (string.Format ("Queue_Id = '{0}'"' Item.SubItems [0].Text)); " is 127.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,The length of the statement  "			MessageBox.Show (this' this.DeleteJobErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 124.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_SetPriority_Job_Click,The length of the statement  "	Priority_Form priorityForm = new Priority_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting' Jobs' Client2Server.CommunicationType.JOBPRIORITY); " is 152.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Host_MouseDown,The length of the statement  "	if (e.Button == MouseButtons.Right && this.ListView_Host.Items.Count > 0 && this.ListView_Host.SelectedItems.Count > 0) { " is 121.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The length of the statement  "		string message = string.Format ("{0}\r\n\n{1}"' AddMachinesErrMessage' error_machines.Substring (0' (error_machines.Length) - 2)); " is 130.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The length of the statement  "		MessageBox.Show (this' message' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The length of the statement  "		string message = string.Format ("{0}\r\n\n{1}"' RemoveMachinesErrMessage' error_machines.Substring (0' (error_machines.Length) - 2)); " is 133.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The length of the statement  "		MessageBox.Show (this' message' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 140.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Setting_Priority_Click,The length of the statement  "	Priority_Form priorityForm = new Priority_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting' machines' Client2Server.CommunicationType.MACHINEPRIORITY); " is 160.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The length of the statement  "					MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The length of the statement  "					MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListViewItemState,The length of the statement  "	Thread S_Thread = new Thread (new ThreadStart (this.Latest_Thread))' P_Thread = new Thread (new ThreadStart (this.Processing_Thread))' Q_Thread = new Thread (new ThreadStart (this.Queue_Thread))' H_Thread = new Thread (new ThreadStart (this.Host_Thread)); " is 255.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The length of the statement  "				DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey); " is 161.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The length of the statement  "										this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ()); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The length of the statement  "										if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text) " is 225.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The length of the statement  "								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ()); " is 125.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The length of the statement  "			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey); " is 151.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The length of the statement  "									this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ()); " is 121.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The length of the statement  "									if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text) " is 172.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The length of the statement  "							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ()); " is 121.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The length of the statement  "				DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey); " is 149.
Long Statement,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The length of the statement  "										if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text) " is 355.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.Label_Port_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Port_Help.Name' Customization.Language.En_Us); " is 121.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ConnectErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error1_String"' Customization.Language.En_Us); " is 133.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ParseErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error2_String"' Customization.Language.En_Us); " is 131.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ConnectOkMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_String"' Customization.Language.En_Us); " is 125.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.Label_Server_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Server_Help.Name' Customization.Language.En_Us); " is 125.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.Label_Port_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Port_Help.Name' Customization.Language.Zh_Tw); " is 121.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ConnectErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error1_String"' Customization.Language.Zh_Tw); " is 133.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ParseErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error2_String"' Customization.Language.Zh_Tw); " is 131.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.ConnectOkMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_String"' Customization.Language.Zh_Tw); " is 125.
Long Statement,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The length of the statement  "		this.Label_Server_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Server_Help.Name' Customization.Language.Zh_Tw); " is 125.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.GroupBox_Pool_Groups.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Groups.Name' Customization.Language.En_Us); " is 136.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Machine_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Machine_List.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Pool_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pool_Name.Name' Customization.Language.En_Us); " is 126.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Member_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Member_List.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.CheckBox_Sharable.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Sharable.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Add_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Member.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Del_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Del_Member.Name' Customization.Language.En_Us); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.GroupBox_Pool_Controls.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Controls.Name' Customization.Language.En_Us); " is 140.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Add_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name' Customization.Language.En_Us); " is 126.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Delete_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Update_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name' Customization.Language.En_Us); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Repeat_Error = this.EnvCust.GetLocalization (this.Name' this.ComboBox_Pool_Name.Name + "_Repate_Err"' Customization.Language.En_Us); " is 147.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Complete"' Customization.Language.En_Us); " is 138.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Fail"' Customization.Language.En_Us); " is 131.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__DeletePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Complete"' Customization.Language.En_Us); " is 144.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__DeletePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Fail"' Customization.Language.En_Us); " is 137.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__UpdatePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Complete"' Customization.Language.En_Us); " is 144.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__UpdatePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Fail"' Customization.Language.En_Us); " is 137.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__Pool_Member_Error = this.EnvCust.GetLocalization (this.Name' "AddChange_Member_Fail"' Customization.Language.En_Us); " is 123.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		__warning = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Confirm"' Customization.Language.En_Us).Split ('-'); " is 138.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.GroupBox_Pool_Groups.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Groups.Name' Customization.Language.Zh_Tw); " is 136.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Machine_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Machine_List.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Pool_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pool_Name.Name' Customization.Language.Zh_Tw); " is 126.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Label_Member_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Member_List.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.CheckBox_Sharable.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Sharable.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Add_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Member.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Del_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Del_Member.Name' Customization.Language.Zh_Tw); " is 130.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.GroupBox_Pool_Controls.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Controls.Name' Customization.Language.Zh_Tw); " is 140.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Add_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name' Customization.Language.Zh_Tw); " is 126.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Delete_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.Button_Update_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name' Customization.Language.Zh_Tw); " is 132.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Repeat_Error = this.EnvCust.GetLocalization (this.Name' this.ComboBox_Pool_Name.Name + "_Repate_Err"' Customization.Language.Zh_Tw); " is 147.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Complete"' Customization.Language.Zh_Tw); " is 138.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__AddPool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Fail"' Customization.Language.Zh_Tw); " is 131.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__DeletePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Complete"' Customization.Language.Zh_Tw); " is 144.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__DeletePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Fail"' Customization.Language.Zh_Tw); " is 137.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__UpdatePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Complete"' Customization.Language.Zh_Tw); " is 144.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__UpdatePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Fail"' Customization.Language.Zh_Tw); " is 137.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		this.__Pool_Member_Error = this.EnvCust.GetLocalization (this.Name' "AddChange_Member_Fail"' Customization.Language.Zh_Tw); " is 123.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The length of the statement  "		__warning = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Confirm"' Customization.Language.Zh_Tw).Split ('-'); " is 138.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,GetMachines,The length of the statement  "				this.ListBox_Machine.Items.Add (new ItemPair<string' string> (row ["Machine_Id"].ToString ()' row ["Name"].ToString ())); " is 121.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,GetPools,The length of the statement  "			this.ComboBox_Pool_Name.Items.Add (new ItemPair<string' string> (row ["Pool_Id"].ToString ()' row ["Name"].ToString ())); " is 121.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,ComboBox_Pool_Name_SelectedIndexChanged,The length of the statement  "			this.ListBox_Member.Items.Add (new ItemPair<string' string> (row [0] ["Machine_Id"].ToString ()' row [0] ["Name"].ToString ())); " is 128.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "		if (this.pools.Rows.Count != 0 && this.pools.Select (string.Format ("Name = '{0}'"' this.ComboBox_Pool_Name.Text.Trim ())).Length > 0) { " is 136.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "			MessageBox.Show (this' this.__AddPool_Repeat_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 160.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "				MessageBox.Show (this' this.__AddPool_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 153.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "				DataRow[] currentRow = this.pools.Select (string.Format ("Name = '{0}'"' this.ComboBox_Pool_Name.Text.Trim ().ToUpper ())); " is 123.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "						MessageBox.Show (this' this.__Pool_Member_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Add_Pool_Click,The length of the statement  "						MessageBox.Show (this' this.__AddPool_Complete' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 162.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Update_Pool_Click,The length of the statement  "		string id = ((ItemPair<string' string>)this.ComboBox_Pool_Name.SelectedItem).Key' value = ((ItemPair<string' string>)this.ComboBox_Pool_Name.SelectedItem).Value; " is 161.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Update_Pool_Click,The length of the statement  "			MessageBox.Show (this' this.__UpdatePool_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 156.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Update_Pool_Click,The length of the statement  "			DataRow[] currentRow = this.pools.Select (string.Format ("Name = '{0}'"' this.ComboBox_Pool_Name.Text.Trim ().ToUpper ())); " is 123.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Update_Pool_Click,The length of the statement  "					MessageBox.Show (this' this.__Pool_Member_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 157.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Update_Pool_Click,The length of the statement  "					MessageBox.Show (this' this.__UpdatePool_Complete' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 165.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Delete_Pool_Click,The length of the statement  "		DialogResult result = MessageBox.Show (this' this.__DeletePool_Warning' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OKCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 189.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Delete_Pool_Click,The length of the statement  "			string id = ((ItemPair<string' string>)this.ComboBox_Pool_Name.SelectedItem).Key' value = ((ItemPair<string' string>)this.ComboBox_Pool_Name.SelectedItem).Value; " is 161.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Delete_Pool_Click,The length of the statement  "				MessageBox.Show (this' this.__DeletePool_Error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 156.
Long Statement,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Button_Delete_Pool_Click,The length of the statement  "				MessageBox.Show (this' this.__DeletePool_Complete' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 165.
Long Statement,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Language,The length of the statement  "		this.Label_Priority_Value.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority_Value.Name' Customization.Language.En_Us); " is 136.
Long Statement,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Language,The length of the statement  "		this.Label_Priority_Value.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority_Value.Name' Customization.Language.Zh_Tw); " is 136.
Complex Conditional,RenbarLib.Environment.Forms.Customizations.Service,Communication,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Communication.cs,Request,The conditional expression  "Packaged != null && ClientRequest != null && ClientRequest.IsConnected && !running"  is complex.
Complex Conditional,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The conditional expression  "remoteDs.Tables.Contains ("Job_Group") && remoteDs.Tables.Contains ("Job_Attr") && remoteDs.Tables.Contains ("Job") && remoteDs.Tables.Contains ("Machine")"  is complex.
Complex Conditional,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Submit_Click,The conditional expression  "string.IsNullOrEmpty (this.TextBox_Job_Project.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Job_Name.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Command.Text.Trim ()) || this.ComboBox_First_Pool.SelectedIndex == -1"  is complex.
Complex Conditional,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Update_Click,The conditional expression  "string.IsNullOrEmpty (this.TextBox_Job_Project.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Job_Name.Text.Trim ()) || string.IsNullOrEmpty (this.TextBox_Command.Text.Trim ()) || this.ComboBox_First_Pool.SelectedIndex == -1"  is complex.
Complex Conditional,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The conditional expression  "ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text"  is complex.
Complex Conditional,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The conditional expression  "MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text"  is complex.
Empty Catch Block,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,History_Form_Load,The method has an empty catch block.
Empty Catch Block,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Button_Refresh_Click,The method has an empty catch block.
Empty Catch Block,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The method has an empty catch block.
Empty Catch Block,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The method has an empty catch block.
Empty Catch Block,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,PoolMgr_Form,The method has an empty catch block.
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (ParseFile)) {  	FileInfo info = new FileInfo (ParseFile);  	int __doc = 0;  	// parse load file structure ..  	switch (info.Extension.ToLower ()) {  	#region Parse Renbar File Format  	case ".rbr":  		// confirm is batch file ..  		using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  			while (xdr.Read ()) {  				if (xdr.HasAttributes)  					__doc++;  			}  		}  		if (__doc <= 2) {  			if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	#region Parse Smedge File Format  	case ".smr":  		using (StreamReader sdr = new StreamReader (ParseFile)) {  			string line = string.Empty;  			while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  				if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  					__doc++;  			}  		}  		if (__doc == 1) {  			if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (ParseFile)) {  	FileInfo info = new FileInfo (ParseFile);  	int __doc = 0;  	// parse load file structure ..  	switch (info.Extension.ToLower ()) {  	#region Parse Renbar File Format  	case ".rbr":  		// confirm is batch file ..  		using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  			while (xdr.Read ()) {  				if (xdr.HasAttributes)  					__doc++;  			}  		}  		if (__doc <= 2) {  			if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	#region Parse Smedge File Format  	case ".smr":  		using (StreamReader sdr = new StreamReader (ParseFile)) {  			string line = string.Empty;  			while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  				if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  					__doc++;  			}  		}  		if (__doc == 1) {  			if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (ParseFile)) {  	FileInfo info = new FileInfo (ParseFile);  	int __doc = 0;  	// parse load file structure ..  	switch (info.Extension.ToLower ()) {  	#region Parse Renbar File Format  	case ".rbr":  		// confirm is batch file ..  		using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  			while (xdr.Read ()) {  				if (xdr.HasAttributes)  					__doc++;  			}  		}  		if (__doc <= 2) {  			if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	#region Parse Smedge File Format  	case ".smr":  		using (StreamReader sdr = new StreamReader (ParseFile)) {  			string line = string.Empty;  			while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  				if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  					__doc++;  			}  		}  		if (__doc == 1) {  			if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  				result = 0;  		}  		else  			result = 2;  		break;  	#endregion  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: switch (info.Extension.ToLower ()) {  #region Parse Renbar File Format  case ".rbr":  	// confirm is batch file ..  	using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  		while (xdr.Read ()) {  			if (xdr.HasAttributes)  				__doc++;  		}  	}  	if (__doc <= 2) {  		if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  #region Parse Smedge File Format  case ".smr":  	using (StreamReader sdr = new StreamReader (ParseFile)) {  		string line = string.Empty;  		while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  			if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  				__doc++;  		}  	}  	if (__doc == 1) {  		if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: switch (info.Extension.ToLower ()) {  #region Parse Renbar File Format  case ".rbr":  	// confirm is batch file ..  	using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  		while (xdr.Read ()) {  			if (xdr.HasAttributes)  				__doc++;  		}  	}  	if (__doc <= 2) {  		if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  #region Parse Smedge File Format  case ".smr":  	using (StreamReader sdr = new StreamReader (ParseFile)) {  		string line = string.Empty;  		while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  			if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  				__doc++;  		}  	}  	if (__doc == 1) {  		if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: switch (info.Extension.ToLower ()) {  #region Parse Renbar File Format  case ".rbr":  	// confirm is batch file ..  	using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  		while (xdr.Read ()) {  			if (xdr.HasAttributes)  				__doc++;  		}  	}  	if (__doc <= 2) {  		if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  #region Parse Smedge File Format  case ".smr":  	using (StreamReader sdr = new StreamReader (ParseFile)) {  		string line = string.Empty;  		while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  			if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  				__doc++;  		}  	}  	if (__doc == 1) {  		if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (__doc <= 2) {  	if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  		result = 0;  }  else  	result = 2;  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (__doc <= 2) {  	if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  		result = 0;  }  else  	result = 2;  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: result = 2;  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: if (__doc == 1) {  	if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  		result = 0;  }  else  	result = 2;  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following statement contains a magic number: result = 2;  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,AllPools,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,AllPools,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: do {  	// confirm current request status ...  	if (EnvComm.CanRequest) {  		// package sent data ...  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: if (responseObject.Key.Substring (0' 1).Equals ("+")) {  	if (responseObject.Value != null) {  		DataTable pools = (DataTable)responseObject.Value;  		//？？？？？？？？？？？？？？？？？？？？？？？？？？？  		foreach (DataRow row in pools.Rows) {  			// decide pool table has contains this row data ..  			if (!addinList.Contains (row ["Pool_Id"].ToString ())) {  				IDictionary<string' object> poolInfo = new Dictionary<string' object> {  					{  						"Pool_Id"'  						row ["Pool_Id"]  					}  				};  				do {  					// confirm current request status ..  					if (EnvComm.CanRequest) {  						// package sent data ..  						IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' poolInfo);  						// wait for result ..  						responseObject = EnvComm.Request (packaged);  						break;  					}  					Thread.Sleep (1000);  				}  				while (true);  				// confirm correct result ..  				if (responseObject.Key.Substring (0' 1).Equals ("+")) {  					if (responseObject.Value != null) {  						// receive remote data object and copy to pool table ..  						poolTable.Merge (((DataTable)responseObject.Value).Copy ()' true);  						// commit all changes ..  						poolTable.AcceptChanges ();  						// add to temporary data list ..  						addinList.Add (row ["Pool_Id"].ToString ());  					}  				}  				else  					break;  			}  		}  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: if (responseObject.Value != null) {  	DataTable pools = (DataTable)responseObject.Value;  	//？？？？？？？？？？？？？？？？？？？？？？？？？？？  	foreach (DataRow row in pools.Rows) {  		// decide pool table has contains this row data ..  		if (!addinList.Contains (row ["Pool_Id"].ToString ())) {  			IDictionary<string' object> poolInfo = new Dictionary<string' object> {  				{  					"Pool_Id"'  					row ["Pool_Id"]  				}  			};  			do {  				// confirm current request status ..  				if (EnvComm.CanRequest) {  					// package sent data ..  					IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' poolInfo);  					// wait for result ..  					responseObject = EnvComm.Request (packaged);  					break;  				}  				Thread.Sleep (1000);  			}  			while (true);  			// confirm correct result ..  			if (responseObject.Key.Substring (0' 1).Equals ("+")) {  				if (responseObject.Value != null) {  					// receive remote data object and copy to pool table ..  					poolTable.Merge (((DataTable)responseObject.Value).Copy ()' true);  					// commit all changes ..  					poolTable.AcceptChanges ();  					// add to temporary data list ..  					addinList.Add (row ["Pool_Id"].ToString ());  				}  			}  			else  				break;  		}  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: foreach (DataRow row in pools.Rows) {  	// decide pool table has contains this row data ..  	if (!addinList.Contains (row ["Pool_Id"].ToString ())) {  		IDictionary<string' object> poolInfo = new Dictionary<string' object> {  			{  				"Pool_Id"'  				row ["Pool_Id"]  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' poolInfo);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  			Thread.Sleep (1000);  		}  		while (true);  		// confirm correct result ..  		if (responseObject.Key.Substring (0' 1).Equals ("+")) {  			if (responseObject.Value != null) {  				// receive remote data object and copy to pool table ..  				poolTable.Merge (((DataTable)responseObject.Value).Copy ()' true);  				// commit all changes ..  				poolTable.AcceptChanges ();  				// add to temporary data list ..  				addinList.Add (row ["Pool_Id"].ToString ());  			}  		}  		else  			break;  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: if (!addinList.Contains (row ["Pool_Id"].ToString ())) {  	IDictionary<string' object> poolInfo = new Dictionary<string' object> {  		{  			"Pool_Id"'  			row ["Pool_Id"]  		}  	};  	do {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// package sent data ..  			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' poolInfo);  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (1000);  	}  	while (true);  	// confirm correct result ..  	if (responseObject.Key.Substring (0' 1).Equals ("+")) {  		if (responseObject.Value != null) {  			// receive remote data object and copy to pool table ..  			poolTable.Merge (((DataTable)responseObject.Value).Copy ()' true);  			// commit all changes ..  			poolTable.AcceptChanges ();  			// add to temporary data list ..  			addinList.Add (row ["Pool_Id"].ToString ());  		}  	}  	else  		break;  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWPOOLINFO' poolInfo);  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Pools,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Machines,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEINFO' new Dictionary<string' object> ());  		// wait for result ... 發送請求  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Machines,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Member,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Member,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetWaitFor,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWJOBSTATUS' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetWaitFor,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: try {  	#region 定義DataTable，並添加到resultData中 ListView DataTable Define  	// define processing job list ..  	DataTable proc = new DataTable ("Processing");  	proc.Columns.Add (new DataColumn ("Proc_Id"));  	proc.Columns.Add (new DataColumn ("Job"));  	proc.Columns.Add (new DataColumn ("Frames"));  	proc.Columns.Add (new DataColumn ("Host"));  	proc.Columns.Add (new DataColumn ("Elapsed"));  	proc.Columns.Add (new DataColumn ("Log"));  	proc.PrimaryKey = new DataColumn[] {  		proc.Columns ["Proc_Id"]  	};  	// add to dataset ..  	resultData.Tables.Add (proc);  	// define queue job list ..  	DataTable queue = new DataTable ("Queue");  	queue.Columns.Add (new DataColumn ("Queue_Id"));  	queue.Columns.Add (new DataColumn ("Status_Id"));  	queue.Columns.Add (new DataColumn ("Completed"));  	queue.Columns.Add (new DataColumn ("ProcType"));  	queue.Columns.Add (new DataColumn ("Priority"));  	queue.Columns.Add (new DataColumn ("Project"));  	queue.Columns.Add (new DataColumn ("Job"));  	queue.Columns.Add (new DataColumn ("Frames"));  	queue.Columns.Add (new DataColumn ("First_Pool"));  	queue.Columns.Add (new DataColumn ("Second_Pool"));  	queue.Columns.Add (new DataColumn ("Submited_User"));  	queue.Columns.Add (new DataColumn ("Submited_Time"));  	queue.Columns.Add (new DataColumn ("Note"));  	queue.PrimaryKey = new DataColumn[] {  		queue.Columns ["Queue_Id"]  	};  	// add to dataset ..  	resultData.Tables.Add (queue);  	// define host machine list ..  	DataTable host = new DataTable ("Host");  	host.Columns.Add (new DataColumn ("Host_Id"));  	host.Columns.Add (new DataColumn ("Host"));  	host.Columns.Add (new DataColumn ("Status"));  	host.Columns.Add (new DataColumn ("Processors"));  	host.Columns.Add (new DataColumn ("Connected_Time"));  	host.Columns.Add (new DataColumn ("Priority"));  	host.Columns.Add (new DataColumn ("Note"));  	host.Columns.Add (new DataColumn ("Type"));  	host.PrimaryKey = new DataColumn[] {  		host.Columns ["Host_Id"]  	};  	// add to dataset ……  	resultData.Tables.Add (host);  	#endregion  	#region 分析數據 Data Analysis  	if (resultData.Tables.Count > 0) {  		// 獲取遠端服務器的信息 get remote server data state ..？？？？？？？？？？為什么獲取不到機器信息！！  		DataSet remoteDs = this.GetRemoteState (ref EnvComm);  		if (remoteDs.Tables.Contains ("Job_Group") && remoteDs.Tables.Contains ("Job_Attr") && remoteDs.Tables.Contains ("Job") && remoteDs.Tables.Contains ("Machine")) {  			DataTable Machines = this.Machines (ref EnvComm);  			//view amchineinfo  			//DataTable Pools = this.AllPools(ref EnvComm);//view machine pool relate  			IDictionary<string' Attributes> Attr = new Dictionary<string' Attributes> ();  			// 任务属性 job attributes dictionary ..  			#region 數據處理……  			// Job通用属性的數據 common attributes partial ..  			foreach (DataRow row1 in remoteDs.Tables ["Job_Group"].Rows) {  				// create attribute struct instance ……  				Attributes attr = new Attributes ();  				#region Setting Attribute Structure  				string key = row1 ["Job_Group_Id"].ToString ().Trim ();  				// assign attribute ..  				attr.Name = row1 ["Name"].ToString ().Trim ();  				attr.FirstPool = new Guid (row1 ["First_Pool"].ToString ());  				//？？？？？？？？？？？？？？？？？Pool ID？？？？  				attr.Status = (JobStatusFlag)Convert.ToUInt16 (row1 ["Status"]);  				// PROCESSING = 6  				attr.SubmitMachine = new Guid (row1 ["Submit_Machine"].ToString ());  				//？？？？？？？？？？？？Machine ID？？？  				attr.SubmitTime = (DateTime)row1 ["Submit_Time"];  				attr.SubmitAcct = row1 ["Submit_Acct"].ToString ().Trim ();  				if (row1 ["Second_Pool"] != DBNull.Value)  					attr.SecondPool = new Guid (row1 ["Second_Pool"].ToString ());  				//？？？？？？？？？？？？？？Pool ID？？？？？  				if (row1 ["Start_Time"] != DBNull.Value)  					attr.StartTime = (DateTime)row1 ["Start_Time"];  				if (row1 ["Finish_Time"] != DBNull.Value)  					attr.FinishTime = (DateTime)row1 ["Finish_Time"];  				if (row1 ["Note"] != DBNull.Value)  					attr.Note = row1 ["Note"].ToString ().Trim ();  				//篩選數據  				DataRow[] row2 = remoteDs.Tables ["Job_Attr"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  				if (row2.Length == 0)  					continue;  				attr.Project = row2 [0] ["Project"].ToString ().Trim ();  				attr.Start = Convert.ToInt32 (row2 [0] ["Start"]);  				attr.End = Convert.ToInt32 (row2 [0] ["End"]);  				attr.PacketSize = Convert.ToUInt16 (row2 [0] ["Packet_Size"]);  				attr.ProcType = row2 [0] ["Proc_Type"].ToString ().Trim ();  				attr.Priority = Convert.ToUInt16 (row2 [0] ["Priority"]);  				attr.AbUpdateOnly = Convert.ToBoolean (Convert.ToInt32 (row2 [0] ["ABUpdateOnly"].ToString ().Trim ()));  				if (row2 [0] ["WaitFor"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["WaitFor"].ToString ()))  					attr.WaitFor = new Guid (row2 [0] ["WaitFor"].ToString ().Trim ());  				//？？？？？？？？？？？？？？？？？  				if (row2 [0] ["ABName"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABName"].ToString ()))  					attr.AbName = row2 [0] ["ABName"].ToString ().Trim ();  				if (row2 [0] ["ABPath"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABPath"].ToString ()))  					attr.AbPath = row2 [0] ["ABPath"].ToString ().Trim ();  				// add to attribute dictionary ..  				Attr.Add (key' attr);  				#endregion  			}  			//  隊列中Job属性的數據 queue partial ..？？？？？？？？？？？？？？？？？？？？？？？？  			foreach (DataRow dr in remoteDs.Tables ["Job_Group"].Rows) {  				#region Setting Queue List  				string key = dr ["Job_Group_Id"].ToString ().Trim ();  				// get this job attribute ..  				if (Attr.ContainsKey (key)) {  					DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key));  					DataRow[] job_all_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  					// get current job complete progress ..  					string completed = string.Empty;  					if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  						completed = "0";  					else  						//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  						completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  					DataRow row = resultData.Tables ["Queue"].NewRow ();  					row ["Queue_Id"] = dr ["Job_Group_Id"].ToString ().Trim ();  					row ["Status_Id"] = ((Attributes)Attr [key]).Status;  					row ["Completed"] = string.Format ("{0}%"' completed);  					row ["ProcType"] = ((Attributes)Attr [key]).ProcType;  					row ["Priority"] = ((Attributes)Attr [key]).Priority;  					row ["Project"] = ((Attributes)Attr [key]).Project;  					row ["Job"] = ((Attributes)Attr [key]).Name;  					row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize);  					#region F7300290  					try {  						//指定的索引鍵不在字典中(——如果Pool已被删除怎么办？——)  						string F_Pool_Id = string.Format (((Attributes)Attr [key]).FirstPool.ToString ()).ToUpper ();  						row ["First_Pool"] = FormDropList.Pool [F_Pool_Id].ToString ();  						////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString();  					}  					catch {  						row ["First_Pool"] = FormDropList.Pool.ElementAt (0).Value.ToString ();  					}  					finally {  					}  					#endregion  					if (!((Attributes)Attr [key]).SecondPool.Equals (Guid.Empty)) {  						string S_Pool_Id = string.Format (((Attributes)Attr [key]).SecondPool.ToString ()).ToUpper ();  						row ["Second_Pool"] = FormDropList.Pool [S_Pool_Id].ToString ();  						////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString();  					}  					row ["Submited_User"] = ((Attributes)Attr [key]).SubmitAcct;  					row ["Submited_Time"] = ((Attributes)Attr [key]).SubmitTime;  					row ["Note"] = ((Attributes)Attr [key]).Note;  					if (((Attributes)Attr [key]).Status == JobStatusFlag.PROCESSING) {  						// processing partial ..  						DataRow[] procRows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  						for (int i = 0; i < procRows.Length; i++) {  							if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"]))  								continue;  							if (DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && DBNull.Value.Equals (procRows [i] ["Start_Time"]))  								continue;  							#region Settings Processing List  							DataRow srow = resultData.Tables ["Processing"].NewRow ();  							srow ["Proc_Id"] = procRows [i] ["Job_Id"];  							srow ["Job"] = ((Attributes)Attr [key]).Name;  							////無法在已失敗的對應 (Match) 上呼叫結果。Command格式不正確！！！！！！！！！！！！！！  							////結果：  							////""C:\\Program Files\\Autodesk\\Maya2008\\bin\\Render.exe -r mr -proj C:\\alienbrainWork\\UAT20090709\\CGI\\element             							////-s #S -e #E -rd Y:\\ C:\\alienbrainWork\\UAT20090709\\CGI\\element\\data\\ch\\mumu\\ok\\mumu.ma""  							////不符合？？？？？？？？？？  							//string sd = procRows[i]["Command"].ToString();  							srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}"));  							//string Select_Machine_Id = string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim());  							//srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(Select_Machine_Id))[0]["Name"].ToString();  							////srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(  							////    string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim()) ) )[0]["Name"].ToString();  							string macc = procRows [i] ["Proc_Machine"].ToString ().Trim ();  							srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString ();  							srow ["Elapsed"] = procRows [i] ["Start_Time"];  							srow ["Log"] = procRows [i] ["OutputLog"];  							// add to data state ..  							resultData.Tables ["Processing"].Rows.Add (srow);  							#endregion  						}  					}  					// add to data state ..  					resultData.Tables ["Queue"].Rows.Add (row);  				}  				#endregion  			}  			// host partial ..  			foreach (DataRow dr in remoteDs.Tables ["Machine"].Rows) {  				#region Setting Host List  				DataRow row = resultData.Tables ["Host"].NewRow ();  				row ["Host_Id"] = dr ["Machine_Id"].ToString ().Trim ();  				row ["Host"] = dr ["HostName"].ToString ().Trim ();  				if (Convert.ToBoolean (dr ["IsEnable"])) {  					row ["Status"] = "Enabled";  				}  				else {  					row ["Status"] = "Disabled";  				}  				row ["Processors"] = string.Format ("{0} using {1}"' dr ["TCore"]' dr ["UCore"]);  				row ["Connected_Time"] = dr ["Last_Online_Time"].ToString ().Trim ();  				row ["Priority"] = dr ["Machine_Priority"].ToString ().Trim ();  				row ["Note"] = dr ["Note"].ToString ().Trim ();  				row ["Type"] = dr ["Machine_Status"];  				// add to data state ..  				resultData.Tables ["Host"].Rows.Add (row);  				#endregion  			}  			#endregion  		}  	}  	#endregion  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: if (resultData.Tables.Count > 0) {  	// 獲取遠端服務器的信息 get remote server data state ..？？？？？？？？？？為什么獲取不到機器信息！！  	DataSet remoteDs = this.GetRemoteState (ref EnvComm);  	if (remoteDs.Tables.Contains ("Job_Group") && remoteDs.Tables.Contains ("Job_Attr") && remoteDs.Tables.Contains ("Job") && remoteDs.Tables.Contains ("Machine")) {  		DataTable Machines = this.Machines (ref EnvComm);  		//view amchineinfo  		//DataTable Pools = this.AllPools(ref EnvComm);//view machine pool relate  		IDictionary<string' Attributes> Attr = new Dictionary<string' Attributes> ();  		// 任务属性 job attributes dictionary ..  		#region 數據處理……  		// Job通用属性的數據 common attributes partial ..  		foreach (DataRow row1 in remoteDs.Tables ["Job_Group"].Rows) {  			// create attribute struct instance ……  			Attributes attr = new Attributes ();  			#region Setting Attribute Structure  			string key = row1 ["Job_Group_Id"].ToString ().Trim ();  			// assign attribute ..  			attr.Name = row1 ["Name"].ToString ().Trim ();  			attr.FirstPool = new Guid (row1 ["First_Pool"].ToString ());  			//？？？？？？？？？？？？？？？？？Pool ID？？？？  			attr.Status = (JobStatusFlag)Convert.ToUInt16 (row1 ["Status"]);  			// PROCESSING = 6  			attr.SubmitMachine = new Guid (row1 ["Submit_Machine"].ToString ());  			//？？？？？？？？？？？？Machine ID？？？  			attr.SubmitTime = (DateTime)row1 ["Submit_Time"];  			attr.SubmitAcct = row1 ["Submit_Acct"].ToString ().Trim ();  			if (row1 ["Second_Pool"] != DBNull.Value)  				attr.SecondPool = new Guid (row1 ["Second_Pool"].ToString ());  			//？？？？？？？？？？？？？？Pool ID？？？？？  			if (row1 ["Start_Time"] != DBNull.Value)  				attr.StartTime = (DateTime)row1 ["Start_Time"];  			if (row1 ["Finish_Time"] != DBNull.Value)  				attr.FinishTime = (DateTime)row1 ["Finish_Time"];  			if (row1 ["Note"] != DBNull.Value)  				attr.Note = row1 ["Note"].ToString ().Trim ();  			//篩選數據  			DataRow[] row2 = remoteDs.Tables ["Job_Attr"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  			if (row2.Length == 0)  				continue;  			attr.Project = row2 [0] ["Project"].ToString ().Trim ();  			attr.Start = Convert.ToInt32 (row2 [0] ["Start"]);  			attr.End = Convert.ToInt32 (row2 [0] ["End"]);  			attr.PacketSize = Convert.ToUInt16 (row2 [0] ["Packet_Size"]);  			attr.ProcType = row2 [0] ["Proc_Type"].ToString ().Trim ();  			attr.Priority = Convert.ToUInt16 (row2 [0] ["Priority"]);  			attr.AbUpdateOnly = Convert.ToBoolean (Convert.ToInt32 (row2 [0] ["ABUpdateOnly"].ToString ().Trim ()));  			if (row2 [0] ["WaitFor"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["WaitFor"].ToString ()))  				attr.WaitFor = new Guid (row2 [0] ["WaitFor"].ToString ().Trim ());  			//？？？？？？？？？？？？？？？？？  			if (row2 [0] ["ABName"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABName"].ToString ()))  				attr.AbName = row2 [0] ["ABName"].ToString ().Trim ();  			if (row2 [0] ["ABPath"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABPath"].ToString ()))  				attr.AbPath = row2 [0] ["ABPath"].ToString ().Trim ();  			// add to attribute dictionary ..  			Attr.Add (key' attr);  			#endregion  		}  		//  隊列中Job属性的數據 queue partial ..？？？？？？？？？？？？？？？？？？？？？？？？  		foreach (DataRow dr in remoteDs.Tables ["Job_Group"].Rows) {  			#region Setting Queue List  			string key = dr ["Job_Group_Id"].ToString ().Trim ();  			// get this job attribute ..  			if (Attr.ContainsKey (key)) {  				DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key));  				DataRow[] job_all_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  				// get current job complete progress ..  				string completed = string.Empty;  				if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  					completed = "0";  				else  					//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  					completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  				DataRow row = resultData.Tables ["Queue"].NewRow ();  				row ["Queue_Id"] = dr ["Job_Group_Id"].ToString ().Trim ();  				row ["Status_Id"] = ((Attributes)Attr [key]).Status;  				row ["Completed"] = string.Format ("{0}%"' completed);  				row ["ProcType"] = ((Attributes)Attr [key]).ProcType;  				row ["Priority"] = ((Attributes)Attr [key]).Priority;  				row ["Project"] = ((Attributes)Attr [key]).Project;  				row ["Job"] = ((Attributes)Attr [key]).Name;  				row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize);  				#region F7300290  				try {  					//指定的索引鍵不在字典中(——如果Pool已被删除怎么办？——)  					string F_Pool_Id = string.Format (((Attributes)Attr [key]).FirstPool.ToString ()).ToUpper ();  					row ["First_Pool"] = FormDropList.Pool [F_Pool_Id].ToString ();  					////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString();  				}  				catch {  					row ["First_Pool"] = FormDropList.Pool.ElementAt (0).Value.ToString ();  				}  				finally {  				}  				#endregion  				if (!((Attributes)Attr [key]).SecondPool.Equals (Guid.Empty)) {  					string S_Pool_Id = string.Format (((Attributes)Attr [key]).SecondPool.ToString ()).ToUpper ();  					row ["Second_Pool"] = FormDropList.Pool [S_Pool_Id].ToString ();  					////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString();  				}  				row ["Submited_User"] = ((Attributes)Attr [key]).SubmitAcct;  				row ["Submited_Time"] = ((Attributes)Attr [key]).SubmitTime;  				row ["Note"] = ((Attributes)Attr [key]).Note;  				if (((Attributes)Attr [key]).Status == JobStatusFlag.PROCESSING) {  					// processing partial ..  					DataRow[] procRows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  					for (int i = 0; i < procRows.Length; i++) {  						if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"]))  							continue;  						if (DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && DBNull.Value.Equals (procRows [i] ["Start_Time"]))  							continue;  						#region Settings Processing List  						DataRow srow = resultData.Tables ["Processing"].NewRow ();  						srow ["Proc_Id"] = procRows [i] ["Job_Id"];  						srow ["Job"] = ((Attributes)Attr [key]).Name;  						////無法在已失敗的對應 (Match) 上呼叫結果。Command格式不正確！！！！！！！！！！！！！！  						////結果：  						////""C:\\Program Files\\Autodesk\\Maya2008\\bin\\Render.exe -r mr -proj C:\\alienbrainWork\\UAT20090709\\CGI\\element             						////-s #S -e #E -rd Y:\\ C:\\alienbrainWork\\UAT20090709\\CGI\\element\\data\\ch\\mumu\\ok\\mumu.ma""  						////不符合？？？？？？？？？？  						//string sd = procRows[i]["Command"].ToString();  						srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}"));  						//string Select_Machine_Id = string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim());  						//srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(Select_Machine_Id))[0]["Name"].ToString();  						////srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(  						////    string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim()) ) )[0]["Name"].ToString();  						string macc = procRows [i] ["Proc_Machine"].ToString ().Trim ();  						srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString ();  						srow ["Elapsed"] = procRows [i] ["Start_Time"];  						srow ["Log"] = procRows [i] ["OutputLog"];  						// add to data state ..  						resultData.Tables ["Processing"].Rows.Add (srow);  						#endregion  					}  				}  				// add to data state ..  				resultData.Tables ["Queue"].Rows.Add (row);  			}  			#endregion  		}  		// host partial ..  		foreach (DataRow dr in remoteDs.Tables ["Machine"].Rows) {  			#region Setting Host List  			DataRow row = resultData.Tables ["Host"].NewRow ();  			row ["Host_Id"] = dr ["Machine_Id"].ToString ().Trim ();  			row ["Host"] = dr ["HostName"].ToString ().Trim ();  			if (Convert.ToBoolean (dr ["IsEnable"])) {  				row ["Status"] = "Enabled";  			}  			else {  				row ["Status"] = "Disabled";  			}  			row ["Processors"] = string.Format ("{0} using {1}"' dr ["TCore"]' dr ["UCore"]);  			row ["Connected_Time"] = dr ["Last_Online_Time"].ToString ().Trim ();  			row ["Priority"] = dr ["Machine_Priority"].ToString ().Trim ();  			row ["Note"] = dr ["Note"].ToString ().Trim ();  			row ["Type"] = dr ["Machine_Status"];  			// add to data state ..  			resultData.Tables ["Host"].Rows.Add (row);  			#endregion  		}  		#endregion  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: if (remoteDs.Tables.Contains ("Job_Group") && remoteDs.Tables.Contains ("Job_Attr") && remoteDs.Tables.Contains ("Job") && remoteDs.Tables.Contains ("Machine")) {  	DataTable Machines = this.Machines (ref EnvComm);  	//view amchineinfo  	//DataTable Pools = this.AllPools(ref EnvComm);//view machine pool relate  	IDictionary<string' Attributes> Attr = new Dictionary<string' Attributes> ();  	// 任务属性 job attributes dictionary ..  	#region 數據處理……  	// Job通用属性的數據 common attributes partial ..  	foreach (DataRow row1 in remoteDs.Tables ["Job_Group"].Rows) {  		// create attribute struct instance ……  		Attributes attr = new Attributes ();  		#region Setting Attribute Structure  		string key = row1 ["Job_Group_Id"].ToString ().Trim ();  		// assign attribute ..  		attr.Name = row1 ["Name"].ToString ().Trim ();  		attr.FirstPool = new Guid (row1 ["First_Pool"].ToString ());  		//？？？？？？？？？？？？？？？？？Pool ID？？？？  		attr.Status = (JobStatusFlag)Convert.ToUInt16 (row1 ["Status"]);  		// PROCESSING = 6  		attr.SubmitMachine = new Guid (row1 ["Submit_Machine"].ToString ());  		//？？？？？？？？？？？？Machine ID？？？  		attr.SubmitTime = (DateTime)row1 ["Submit_Time"];  		attr.SubmitAcct = row1 ["Submit_Acct"].ToString ().Trim ();  		if (row1 ["Second_Pool"] != DBNull.Value)  			attr.SecondPool = new Guid (row1 ["Second_Pool"].ToString ());  		//？？？？？？？？？？？？？？Pool ID？？？？？  		if (row1 ["Start_Time"] != DBNull.Value)  			attr.StartTime = (DateTime)row1 ["Start_Time"];  		if (row1 ["Finish_Time"] != DBNull.Value)  			attr.FinishTime = (DateTime)row1 ["Finish_Time"];  		if (row1 ["Note"] != DBNull.Value)  			attr.Note = row1 ["Note"].ToString ().Trim ();  		//篩選數據  		DataRow[] row2 = remoteDs.Tables ["Job_Attr"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  		if (row2.Length == 0)  			continue;  		attr.Project = row2 [0] ["Project"].ToString ().Trim ();  		attr.Start = Convert.ToInt32 (row2 [0] ["Start"]);  		attr.End = Convert.ToInt32 (row2 [0] ["End"]);  		attr.PacketSize = Convert.ToUInt16 (row2 [0] ["Packet_Size"]);  		attr.ProcType = row2 [0] ["Proc_Type"].ToString ().Trim ();  		attr.Priority = Convert.ToUInt16 (row2 [0] ["Priority"]);  		attr.AbUpdateOnly = Convert.ToBoolean (Convert.ToInt32 (row2 [0] ["ABUpdateOnly"].ToString ().Trim ()));  		if (row2 [0] ["WaitFor"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["WaitFor"].ToString ()))  			attr.WaitFor = new Guid (row2 [0] ["WaitFor"].ToString ().Trim ());  		//？？？？？？？？？？？？？？？？？  		if (row2 [0] ["ABName"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABName"].ToString ()))  			attr.AbName = row2 [0] ["ABName"].ToString ().Trim ();  		if (row2 [0] ["ABPath"] != DBNull.Value && !string.IsNullOrEmpty (row2 [0] ["ABPath"].ToString ()))  			attr.AbPath = row2 [0] ["ABPath"].ToString ().Trim ();  		// add to attribute dictionary ..  		Attr.Add (key' attr);  		#endregion  	}  	//  隊列中Job属性的數據 queue partial ..？？？？？？？？？？？？？？？？？？？？？？？？  	foreach (DataRow dr in remoteDs.Tables ["Job_Group"].Rows) {  		#region Setting Queue List  		string key = dr ["Job_Group_Id"].ToString ().Trim ();  		// get this job attribute ..  		if (Attr.ContainsKey (key)) {  			DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key));  			DataRow[] job_all_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  			// get current job complete progress ..  			string completed = string.Empty;  			if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  				completed = "0";  			else  				//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  				completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  			DataRow row = resultData.Tables ["Queue"].NewRow ();  			row ["Queue_Id"] = dr ["Job_Group_Id"].ToString ().Trim ();  			row ["Status_Id"] = ((Attributes)Attr [key]).Status;  			row ["Completed"] = string.Format ("{0}%"' completed);  			row ["ProcType"] = ((Attributes)Attr [key]).ProcType;  			row ["Priority"] = ((Attributes)Attr [key]).Priority;  			row ["Project"] = ((Attributes)Attr [key]).Project;  			row ["Job"] = ((Attributes)Attr [key]).Name;  			row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize);  			#region F7300290  			try {  				//指定的索引鍵不在字典中(——如果Pool已被删除怎么办？——)  				string F_Pool_Id = string.Format (((Attributes)Attr [key]).FirstPool.ToString ()).ToUpper ();  				row ["First_Pool"] = FormDropList.Pool [F_Pool_Id].ToString ();  				////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString();  			}  			catch {  				row ["First_Pool"] = FormDropList.Pool.ElementAt (0).Value.ToString ();  			}  			finally {  			}  			#endregion  			if (!((Attributes)Attr [key]).SecondPool.Equals (Guid.Empty)) {  				string S_Pool_Id = string.Format (((Attributes)Attr [key]).SecondPool.ToString ()).ToUpper ();  				row ["Second_Pool"] = FormDropList.Pool [S_Pool_Id].ToString ();  				////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString();  			}  			row ["Submited_User"] = ((Attributes)Attr [key]).SubmitAcct;  			row ["Submited_Time"] = ((Attributes)Attr [key]).SubmitTime;  			row ["Note"] = ((Attributes)Attr [key]).Note;  			if (((Attributes)Attr [key]).Status == JobStatusFlag.PROCESSING) {  				// processing partial ..  				DataRow[] procRows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  				for (int i = 0; i < procRows.Length; i++) {  					if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"]))  						continue;  					if (DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && DBNull.Value.Equals (procRows [i] ["Start_Time"]))  						continue;  					#region Settings Processing List  					DataRow srow = resultData.Tables ["Processing"].NewRow ();  					srow ["Proc_Id"] = procRows [i] ["Job_Id"];  					srow ["Job"] = ((Attributes)Attr [key]).Name;  					////無法在已失敗的對應 (Match) 上呼叫結果。Command格式不正確！！！！！！！！！！！！！！  					////結果：  					////""C:\\Program Files\\Autodesk\\Maya2008\\bin\\Render.exe -r mr -proj C:\\alienbrainWork\\UAT20090709\\CGI\\element             					////-s #S -e #E -rd Y:\\ C:\\alienbrainWork\\UAT20090709\\CGI\\element\\data\\ch\\mumu\\ok\\mumu.ma""  					////不符合？？？？？？？？？？  					//string sd = procRows[i]["Command"].ToString();  					srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}"));  					//string Select_Machine_Id = string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim());  					//srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(Select_Machine_Id))[0]["Name"].ToString();  					////srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(  					////    string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim()) ) )[0]["Name"].ToString();  					string macc = procRows [i] ["Proc_Machine"].ToString ().Trim ();  					srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString ();  					srow ["Elapsed"] = procRows [i] ["Start_Time"];  					srow ["Log"] = procRows [i] ["OutputLog"];  					// add to data state ..  					resultData.Tables ["Processing"].Rows.Add (srow);  					#endregion  				}  			}  			// add to data state ..  			resultData.Tables ["Queue"].Rows.Add (row);  		}  		#endregion  	}  	// host partial ..  	foreach (DataRow dr in remoteDs.Tables ["Machine"].Rows) {  		#region Setting Host List  		DataRow row = resultData.Tables ["Host"].NewRow ();  		row ["Host_Id"] = dr ["Machine_Id"].ToString ().Trim ();  		row ["Host"] = dr ["HostName"].ToString ().Trim ();  		if (Convert.ToBoolean (dr ["IsEnable"])) {  			row ["Status"] = "Enabled";  		}  		else {  			row ["Status"] = "Disabled";  		}  		row ["Processors"] = string.Format ("{0} using {1}"' dr ["TCore"]' dr ["UCore"]);  		row ["Connected_Time"] = dr ["Last_Online_Time"].ToString ().Trim ();  		row ["Priority"] = dr ["Machine_Priority"].ToString ().Trim ();  		row ["Note"] = dr ["Note"].ToString ().Trim ();  		row ["Type"] = dr ["Machine_Status"];  		// add to data state ..  		resultData.Tables ["Host"].Rows.Add (row);  		#endregion  	}  	#endregion  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: foreach (DataRow dr in remoteDs.Tables ["Job_Group"].Rows) {  	#region Setting Queue List  	string key = dr ["Job_Group_Id"].ToString ().Trim ();  	// get this job attribute ..  	if (Attr.ContainsKey (key)) {  		DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key));  		DataRow[] job_all_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  		// get current job complete progress ..  		string completed = string.Empty;  		if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  			completed = "0";  		else  			//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  			completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  		DataRow row = resultData.Tables ["Queue"].NewRow ();  		row ["Queue_Id"] = dr ["Job_Group_Id"].ToString ().Trim ();  		row ["Status_Id"] = ((Attributes)Attr [key]).Status;  		row ["Completed"] = string.Format ("{0}%"' completed);  		row ["ProcType"] = ((Attributes)Attr [key]).ProcType;  		row ["Priority"] = ((Attributes)Attr [key]).Priority;  		row ["Project"] = ((Attributes)Attr [key]).Project;  		row ["Job"] = ((Attributes)Attr [key]).Name;  		row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize);  		#region F7300290  		try {  			//指定的索引鍵不在字典中(——如果Pool已被删除怎么办？——)  			string F_Pool_Id = string.Format (((Attributes)Attr [key]).FirstPool.ToString ()).ToUpper ();  			row ["First_Pool"] = FormDropList.Pool [F_Pool_Id].ToString ();  			////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString();  		}  		catch {  			row ["First_Pool"] = FormDropList.Pool.ElementAt (0).Value.ToString ();  		}  		finally {  		}  		#endregion  		if (!((Attributes)Attr [key]).SecondPool.Equals (Guid.Empty)) {  			string S_Pool_Id = string.Format (((Attributes)Attr [key]).SecondPool.ToString ()).ToUpper ();  			row ["Second_Pool"] = FormDropList.Pool [S_Pool_Id].ToString ();  			////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString();  		}  		row ["Submited_User"] = ((Attributes)Attr [key]).SubmitAcct;  		row ["Submited_Time"] = ((Attributes)Attr [key]).SubmitTime;  		row ["Note"] = ((Attributes)Attr [key]).Note;  		if (((Attributes)Attr [key]).Status == JobStatusFlag.PROCESSING) {  			// processing partial ..  			DataRow[] procRows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  			for (int i = 0; i < procRows.Length; i++) {  				if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"]))  					continue;  				if (DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && DBNull.Value.Equals (procRows [i] ["Start_Time"]))  					continue;  				#region Settings Processing List  				DataRow srow = resultData.Tables ["Processing"].NewRow ();  				srow ["Proc_Id"] = procRows [i] ["Job_Id"];  				srow ["Job"] = ((Attributes)Attr [key]).Name;  				////無法在已失敗的對應 (Match) 上呼叫結果。Command格式不正確！！！！！！！！！！！！！！  				////結果：  				////""C:\\Program Files\\Autodesk\\Maya2008\\bin\\Render.exe -r mr -proj C:\\alienbrainWork\\UAT20090709\\CGI\\element             				////-s #S -e #E -rd Y:\\ C:\\alienbrainWork\\UAT20090709\\CGI\\element\\data\\ch\\mumu\\ok\\mumu.ma""  				////不符合？？？？？？？？？？  				//string sd = procRows[i]["Command"].ToString();  				srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}"));  				//string Select_Machine_Id = string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim());  				//srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(Select_Machine_Id))[0]["Name"].ToString();  				////srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(  				////    string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim()) ) )[0]["Name"].ToString();  				string macc = procRows [i] ["Proc_Machine"].ToString ().Trim ();  				srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString ();  				srow ["Elapsed"] = procRows [i] ["Start_Time"];  				srow ["Log"] = procRows [i] ["OutputLog"];  				// add to data state ..  				resultData.Tables ["Processing"].Rows.Add (srow);  				#endregion  			}  		}  		// add to data state ..  		resultData.Tables ["Queue"].Rows.Add (row);  	}  	#endregion  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: if (Attr.ContainsKey (key)) {  	DataRow[] job_com_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Not Null"' key));  	DataRow[] job_all_rows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  	// get current job complete progress ..  	string completed = string.Empty;  	if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  		completed = "0";  	else  		//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  		completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  	DataRow row = resultData.Tables ["Queue"].NewRow ();  	row ["Queue_Id"] = dr ["Job_Group_Id"].ToString ().Trim ();  	row ["Status_Id"] = ((Attributes)Attr [key]).Status;  	row ["Completed"] = string.Format ("{0}%"' completed);  	row ["ProcType"] = ((Attributes)Attr [key]).ProcType;  	row ["Priority"] = ((Attributes)Attr [key]).Priority;  	row ["Project"] = ((Attributes)Attr [key]).Project;  	row ["Job"] = ((Attributes)Attr [key]).Name;  	row ["Frames"] = string.Format ("{0}-{1}[{2}]"' ((Attributes)Attr [key]).Start' ((Attributes)Attr [key]).End' ((Attributes)Attr [key]).PacketSize);  	#region F7300290  	try {  		//指定的索引鍵不在字典中(——如果Pool已被删除怎么办？——)  		string F_Pool_Id = string.Format (((Attributes)Attr [key]).FirstPool.ToString ()).ToUpper ();  		row ["First_Pool"] = FormDropList.Pool [F_Pool_Id].ToString ();  		////row["First_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).FirstPool))[0]["Name"].ToString();  	}  	catch {  		row ["First_Pool"] = FormDropList.Pool.ElementAt (0).Value.ToString ();  	}  	finally {  	}  	#endregion  	if (!((Attributes)Attr [key]).SecondPool.Equals (Guid.Empty)) {  		string S_Pool_Id = string.Format (((Attributes)Attr [key]).SecondPool.ToString ()).ToUpper ();  		row ["Second_Pool"] = FormDropList.Pool [S_Pool_Id].ToString ();  		////row["Second_Pool"] = Pools.Select(string.Format("Pool_Id = '{0}'"' ((Attributes)Attr[key]).SecondPool))[0]["Name"].ToString();  	}  	row ["Submited_User"] = ((Attributes)Attr [key]).SubmitAcct;  	row ["Submited_Time"] = ((Attributes)Attr [key]).SubmitTime;  	row ["Note"] = ((Attributes)Attr [key]).Note;  	if (((Attributes)Attr [key]).Status == JobStatusFlag.PROCESSING) {  		// processing partial ..  		DataRow[] procRows = remoteDs.Tables ["Job"].Select (string.Format ("Job_Group_Id = '{0}'"' key));  		for (int i = 0; i < procRows.Length; i++) {  			if (!DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && !DBNull.Value.Equals (procRows [i] ["Start_Time"]) && !DBNull.Value.Equals (procRows [i] ["Finish_Time"]))  				continue;  			if (DBNull.Value.Equals (procRows [i] ["Proc_Machine"]) && DBNull.Value.Equals (procRows [i] ["Start_Time"]))  				continue;  			#region Settings Processing List  			DataRow srow = resultData.Tables ["Processing"].NewRow ();  			srow ["Proc_Id"] = procRows [i] ["Job_Id"];  			srow ["Job"] = ((Attributes)Attr [key]).Name;  			////無法在已失敗的對應 (Match) 上呼叫結果。Command格式不正確！！！！！！！！！！！！！！  			////結果：  			////""C:\\Program Files\\Autodesk\\Maya2008\\bin\\Render.exe -r mr -proj C:\\alienbrainWork\\UAT20090709\\CGI\\element             			////-s #S -e #E -rd Y:\\ C:\\alienbrainWork\\UAT20090709\\CGI\\element\\data\\ch\\mumu\\ok\\mumu.ma""  			////不符合？？？？？？？？？？  			//string sd = procRows[i]["Command"].ToString();  			srow ["Frames"] = string.Format ("{0}-{1}"' new Regex (@"-[S-s]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}")' new Regex (@"-[E-e]\s(?<num>[0-9]+)").Match (procRows [i] ["Command"].ToString ()).Result ("${num}"));  			//string Select_Machine_Id = string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim());  			//srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(Select_Machine_Id))[0]["Name"].ToString();  			////srow["Host"] = remoteDs.Tables["Machine"].Select(string.Format(  			////    string.Format("Machine_Id = '{0}'"' procRows[i]["Proc_Machine"].ToString().Trim()) ) )[0]["Name"].ToString();  			string macc = procRows [i] ["Proc_Machine"].ToString ().Trim ();  			srow ["Host"] = Machines.Select (string.Format (string.Format ("Machine_Id = '{0}'"' procRows [i] ["Proc_Machine"].ToString ().Trim ()))) [0] ["Name"].ToString ();  			srow ["Elapsed"] = procRows [i] ["Start_Time"];  			srow ["Log"] = procRows [i] ["OutputLog"];  			// add to data state ..  			resultData.Tables ["Processing"].Rows.Add (srow);  			#endregion  		}  	}  	// add to data state ..  	resultData.Tables ["Queue"].Rows.Add (row);  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: if (job_com_rows.Length == 0 && job_all_rows.Length == 0)  	completed = "0";  else  	//？？？？？？？？？？？？？計算完成百分比？？？？？？？？？？？？？？？？？  	completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,DataState,The following statement contains a magic number: completed = Math.Round (((Convert.ToDouble (job_com_rows.Length) / Convert.ToDouble (job_all_rows.Length)) * 100)).ToString ();  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWJOBSTATUS' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWMACHINERENDERINFO' new Dictionary<string' object> ());  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetRemoteState,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetJobInfo,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.VIEWSINGLEJOBINFO' JobItem);  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (500);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetJobInfo,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: try {  	#region 組合數據  	// check the machine whether has in the machine collection ..  	IDictionary<string' object> Item = new Dictionary<string' object> {  		{  			"Name"'  			Host.LocalHostName  		}'  		{  			"Ip"'  			Host.LocalIpAddress  		}  	};  	// refresh new request item ..  	Item.Add ("Machine_Id"' string.Empty);  	Item.Add ("IsEnable"' true);  	Item.Add ("Last_Online_Time"' DateTime.Now);  	Item.Add ("IsRender"' false);  	Item.Add ("Note"' Description);  	//添加狀態  	if (Disconnect) {  		Item.Add ("IsOffLine"' true);  	}  	//添加描述  	if (Description != null && Description != string.Empty) {  		Item.Add ("Note"' Description);  	}  	#endregion  	#region 發送指令  	// declare remote server response object ..  	KeyValuePair<string' object> responseObject;  	if (Item.Count > 2) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.MACHINEINFO' Item);  		do//？？？？？？？？？？？？？？？？？  		 {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  			Thread.Sleep (1000);  		}  		while (true);  		if (responseObject.Key.Substring (0' 1) == "+") {  			result = true;  		}  		else {  			result = false;  		}  	}  	Item.Clear ();  	#endregion  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	// change result flag ..  	result = false;  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: try {  	#region 組合數據  	// check the machine whether has in the machine collection ..  	IDictionary<string' object> Item = new Dictionary<string' object> {  		{  			"Name"'  			Host.LocalHostName  		}'  		{  			"Ip"'  			Host.LocalIpAddress  		}  	};  	// refresh new request item ..  	Item.Add ("Machine_Id"' string.Empty);  	Item.Add ("IsEnable"' true);  	Item.Add ("Last_Online_Time"' DateTime.Now);  	Item.Add ("IsRender"' false);  	Item.Add ("Note"' Description);  	//添加狀態  	if (Disconnect) {  		Item.Add ("IsOffLine"' true);  	}  	//添加描述  	if (Description != null && Description != string.Empty) {  		Item.Add ("Note"' Description);  	}  	#endregion  	#region 發送指令  	// declare remote server response object ..  	KeyValuePair<string' object> responseObject;  	if (Item.Count > 2) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.MACHINEINFO' Item);  		do//？？？？？？？？？？？？？？？？？  		 {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  			Thread.Sleep (1000);  		}  		while (true);  		if (responseObject.Key.Substring (0' 1) == "+") {  			result = true;  		}  		else {  			result = false;  		}  	}  	Item.Clear ();  	#endregion  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	// change result flag ..  	result = false;  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: if (Item.Count > 2) {  	// package sent data ..  	IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.MACHINEINFO' Item);  	do//？？？？？？？？？？？？？？？？？  	 {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (1000);  	}  	while (true);  	if (responseObject.Key.Substring (0' 1) == "+") {  		result = true;  	}  	else {  		result = false;  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: if (Item.Count > 2) {  	// package sent data ..  	IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.MACHINEINFO' Item);  	do//？？？？？？？？？？？？？？？？？  	 {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (1000);  	}  	while (true);  	if (responseObject.Key.Substring (0' 1) == "+") {  		result = true;  	}  	else {  		result = false;  	}  }  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: do//？？？？？？？？？？？？？？？？？   {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,RegLocalMachine,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Console_Form,The following statement contains a magic number: this.Text += " " + string.Format ("(Name: {0}' Frames: [{1}])"' ItemInfo [1]' ItemInfo [2]);  
Magic Number,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Console_Form,The following statement contains a magic number: this.TextBox_Output.AppendText (ItemInfo [3]);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.En_Us);  	// ToolStripMenuItem  	//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.En_Us);  	// ToolStripMenuItem  	//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.En_Us);  	// ToolStripMenuItem  	//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.En_Us);  	// ToolStripMenuItem  	//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following statement contains a magic number: this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,History_Form_Load,The following statement contains a magic number: this.numericUpDown_RecordNum.Value = 100;  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,GetHistoryInfo,The following statement contains a magic number: do {  	// confirm current request status ...  	if (EnvComm.CanRequest && !this.requeststop) {  		// package sent data ...  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.JOBHISTORYRECORD' Item);  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (500);  }  while (true);  
Magic Number,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,GetHistoryInfo,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: if (this.Size.Height.Equals (439) || this.Size.Height.Equals (440) || this.Size.Height.Equals (441)) {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 625);  }  else {  	switch (EnvSetting.Lang) {  	case Customization.Language.En_Us:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  		break;  	case Customization.Language.Zh_Tw:  		this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  		break;  	}  	// reset drawing form size ..  	this.Size = new global::System.Drawing.Size (630' 440);  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: this.Size = new global::System.Drawing.Size (630' 625);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: this.Size = new global::System.Drawing.Size (630' 625);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: this.Size = new global::System.Drawing.Size (630' 440);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following statement contains a magic number: this.Size = new global::System.Drawing.Size (630' 440);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Connect,The following statement contains a magic number: do {  	// confirm current resquest status ..  	if (this.EnvComm.CanRequest) {  		// declare package sent data type ..  		IList<object> packaged = null;  		switch (Action) {  		case SubmitAction.Add:  			// assign new status ..  			if (!QueueItem.ContainsKey ("Status")) {  				QueueItem.Add ("Status"' (UInt16)JobStatusFlag.QUEUING);  			}  			//  打包物件 package sent data type ..  			packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEADD' QueueItem);  			break;  		case SubmitAction.Update:  			if (!QueueItem.ContainsKey ("Job_Group_Id")) {  				QueueItem.Add ("Job_Group_Id"' this.Update_Job_Group_Id);  			}  			// package sent data type ..  			packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEUPDATE' QueueItem);  			break;  		}  		// 發送數據並等待執行結果 wait for result ..  		responseObject = this.EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (1000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Connect,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,The following statement contains a magic number: if (LoadFile.ShowDialog () == DialogResult.OK) {  	// 解析文件結構 parse file structure ..（0 = Success' 1 = Parse Error' 2 = Multi File Error）  	int _p = this.EnvCust.Parse (LoadFile.FileName' ref this.ItemAttribute);  	switch (_p) {  	//成功：結果存入引用地址中、清空原始數據、顯示新數據  	case 0:  		// clear old data control ..  		this.Button_Clear_Click (null' null);  		// assign backup filename path ..  		this.BackupFilename = LoadFile.FileName;  		//？？？？？？？？？備份？？？？？？？？？？？？？？？？？？？？？？？  		// assign control value ..  		this.AssignValues ();  		break;  	case 1:  		// show parse error message ..  		MessageBox.Show (this' this.__parse_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	case 2:  		// show parse multi error message ..  		MessageBox.Show (this' this.__parse_mulit_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,The following statement contains a magic number: switch (_p) {  //成功：結果存入引用地址中、清空原始數據、顯示新數據  case 0:  	// clear old data control ..  	this.Button_Clear_Click (null' null);  	// assign backup filename path ..  	this.BackupFilename = LoadFile.FileName;  	//？？？？？？？？？備份？？？？？？？？？？？？？？？？？？？？？？？  	// assign control value ..  	this.AssignValues ();  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.__parse_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.__parse_mulit_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Magic Number,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Clear_Click,The following statement contains a magic number: this.NumericUpDown_Priority.Value = 20;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetBackgroundBitmap (Properties.Resources.notifyskin' Color.FromArgb (255' 0' 255));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetBackgroundBitmap (Properties.Resources.notifyskin' Color.FromArgb (255' 0' 255));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetCloseBitmap (Properties.Resources.close' Color.FromArgb (255' 0' 255)' new Point (160' 8));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetCloseBitmap (Properties.Resources.close' Color.FromArgb (255' 0' 255)' new Point (160' 8));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetCloseBitmap (Properties.Resources.close' Color.FromArgb (255' 0' 255)' new Point (160' 8));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.SetCloseBitmap (Properties.Resources.close' Color.FromArgb (255' 0' 255)' new Point (160' 8));  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.TitleRectangle = new Rectangle (10' 5' 170' 20);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.TitleRectangle = new Rectangle (10' 5' 170' 20);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.TitleRectangle = new Rectangle (10' 5' 170' 20);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.TitleRectangle = new Rectangle (10' 5' 170' 20);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.ContentRectangle = new Rectangle (7' 12' 170' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.ContentRectangle = new Rectangle (7' 12' 170' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.ContentRectangle = new Rectangle (7' 12' 170' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.RenbarNotifier.ContentRectangle = new Rectangle (7' 12' 170' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form,The following statement contains a magic number: this.DueTimer.Interval = 5000;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Load,The following statement contains a magic number: this.ListViewText [2] = this.GroupBox_Host.Text.Trim ();  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following statement contains a magic number: this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form_Resize,The following statement contains a magic number: if (this.WindowState == FormWindowState.Minimized) {  	// 掛起 change suspend signal status ..？？？？？？？？？？？？？？？？？？？？？？？？  	this.Suspend.Reset ();  	// change suspend flag ..  	this.__suspend = true;  	this.Hide ();  	//於工作列顯示提示30毫秒  	this.ClientNotify.ShowBalloonTip (30);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Form_Resize,The following statement contains a magic number: this.ClientNotify.ShowBalloonTip (30);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The following statement contains a magic number: if (this.IsConnected) {  	// create job form instance ..  	Job_Form jobForm = new Job_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting) {  		Pool = this.EnvCust.DropDown.Pool'  		//在Customization.cs中獲取並設定EnvCust.DropDown.Pool等数据——  		Pool2 = this.EnvCust.DropDown.Pool2'  		WaitFor = this.EnvCust.DropDown.Waitfor'  		IsExtern = true'  		IsUpdate = false  	};  	// declare parse render file variable ..  	IDictionary<string' object> attributes = new Dictionary<string' object> ();  	// open file dialog ..  	OpenFileDialog LoadFile = this.EnvCust.OpenFileDialog;  	#region 依據加載結果，給不同提示  	if (LoadFile.ShowDialog () == DialogResult.OK) {  		//0 = Success' 1 = Parse Error' 2 = Multi File Error  		int _p = this.EnvCust.Parse (LoadFile.FileName' ref attributes);  		switch (_p) {  		//加載成功，顯示Job_Form  		case 0:  			// assign parse properties ..  			jobForm.BackupFilename = LoadFile.FileName;  			jobForm.ExternItems = attributes;  			// show job form ..  			if (jobForm.ShowDialog (this) == DialogResult.OK) {  				jobForm.Dispose ();  			}  			break;  		case 1:  			// show parse error message ..  			MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  			break;  		case 2:  			// show parse multi error message ..  			MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  			break;  		}  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The following statement contains a magic number: if (LoadFile.ShowDialog () == DialogResult.OK) {  	//0 = Success' 1 = Parse Error' 2 = Multi File Error  	int _p = this.EnvCust.Parse (LoadFile.FileName' ref attributes);  	switch (_p) {  	//加載成功，顯示Job_Form  	case 0:  		// assign parse properties ..  		jobForm.BackupFilename = LoadFile.FileName;  		jobForm.ExternItems = attributes;  		// show job form ..  		if (jobForm.ShowDialog (this) == DialogResult.OK) {  			jobForm.Dispose ();  		}  		break;  	case 1:  		// show parse error message ..  		MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	case 2:  		// show parse multi error message ..  		MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The following statement contains a magic number: switch (_p) {  //加載成功，顯示Job_Form  case 0:  	// assign parse properties ..  	jobForm.BackupFilename = LoadFile.FileName;  	jobForm.ExternItems = attributes;  	// show job form ..  	if (jobForm.ShowDialog (this) == DialogResult.OK) {  		jobForm.Dispose ();  	}  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Proc_View_Output_Click,The following statement contains a magic number: for (int i = 0; i < this.ListView_Process.SelectedItems [0].SubItems.Count - 2; i++) {  	LogInfo [i] = this.ListView_Process.SelectedItems [0].SubItems [i].Text;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Proc_View_Output_Click,The following statement contains a magic number: if (ProcLog.ContainsKey (LogInfo [0])) {  	LogInfo [3] = ProcLog [LogInfo [0]];  	//處理識別碼、名稱、張數、Proclog[“處理識別碼”]  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Proc_View_Output_Click,The following statement contains a magic number: LogInfo [3] = ProcLog [LogInfo [0]];  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,The following statement contains a magic number: if (deleted > 0) {  	// change manual delete flag ..  	//设置为手动删除  	this.manual_Delete = true;  	// commit changes ..  	this.EnvCust.DataListView.AcceptChanges ();  	//？？？？？？？？？？？？？？？？？？？？？？  	//添加“已删除”到发送信息体  	KeyValuePair<string' object> responseObject;  	IDictionary<string' object> SendItem = new Dictionary<string' object> {  		{  			"DeleteList"'  			DeleteList  		}  	};  	// 发送请求 send request to remote server ..  	do {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// package sent data ..  			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEDELETE' SendItem);  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (500);  	}  	while (true);  	//检测响应信息，返回错误资讯（如果有）  	if (responseObject.Key.Substring (0' 1) == "-") {  		// show error message ..  		MessageBox.Show (this' this.DeleteJobErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	else {  		MessageBox.Show ("Delete succeed!");  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEDELETE' SendItem);  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (500);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Delete_Job_Click,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Pause_Job_Click,The following statement contains a magic number: if (this.ListView_Queue.SelectedItems [0].SubItems [1].Text.Trim () != "PAUSE") {  	status = Convert.ToInt16 (JobStatusFlag.PAUSE);  }  else if (this.ListView_Queue.SelectedItems [0].SubItems [2].Text.Trim () != string.Format ("{0}%"' 0)) {  	status = Convert.ToInt16 (JobStatusFlag.PROCESSING);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Pause_Job_Click,The following statement contains a magic number: if (this.ListView_Queue.SelectedItems [0].SubItems [2].Text.Trim () != string.Format ("{0}%"' 0)) {  	status = Convert.ToInt16 (JobStatusFlag.PROCESSING);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Pause_Job_Click,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEPAUSE' SendItem);  		// wait for result ..  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (500);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Pause_Job_Click,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Repeat_Job_Click,The following statement contains a magic number: foreach (ListViewItem Item in this.ListView_Queue.SelectedItems) {  	#region construct data  	//MessageBox.Show(Item.Text);  	IDictionary<string' object> HistoryData = this.EnvCust.GetJobInfo (Item.Text.Trim ()' ref this.EnvComm);  	HistoryData.Remove ("Job_Group_Id");  	HistoryData.Add ("Submit_Machine"' this.EnvNetBase.LocalHostName);  	HistoryData.Add ("Submit_Acct"' Customization.User);  	HistoryData.Add ("Submit_Time"' DateTime.Now);  	#endregion  	#region Send Data  	// declare remote server response object ..  	KeyValuePair<string' object> responseObject;  	// 修訂數據 revise item data ..  	IDictionary<string' object> QueueItem = HistoryData;  	if (QueueItem.Count == 0) {  		return;  	}  	do {  		// confirm current resquest status ..  		if (this.EnvComm.CanRequest) {  			// assign new status ..  			if (!QueueItem.ContainsKey ("Status")) {  				QueueItem.Add ("Status"' (UInt16)JobStatusFlag.QUEUING);  			}  			//  打包物件 package sent data type ..  			IList<object> packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEADD' QueueItem);  			// 發送數據並等待執行結果 wait for result ..  			responseObject = this.EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (100);  	}  	while (true);  	#endregion  	#region Confirm  	// 確認傳輸是否成功 confirm correct result ..  	if (responseObject.Key.Substring (0' 1).Equals ("+")) {  		MessageBox.Show ("Repeat succeed !");  	}  	else {  		MessageBox.Show ("Repeat Failed !");  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Repeat_Job_Click,The following statement contains a magic number: do {  	// confirm current resquest status ..  	if (this.EnvComm.CanRequest) {  		// assign new status ..  		if (!QueueItem.ContainsKey ("Status")) {  			QueueItem.Add ("Status"' (UInt16)JobStatusFlag.QUEUING);  		}  		//  打包物件 package sent data type ..  		IList<object> packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEADD' QueueItem);  		// 發送數據並等待執行結果 wait for result ..  		responseObject = this.EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (100);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Repeat_Job_Click,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“可用”  	if (Info [2].Equals ("Enable")) {  		return;  	}  	else {  		// 發送請求 send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				true  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		//傳回“-Error……”  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“可用”  	if (Info [2].Equals ("Enable")) {  		return;  	}  	else {  		// 發送請求 send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				true  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		//傳回“-Error……”  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“可用”  	if (Info [2].Equals ("Enable")) {  		return;  	}  	else {  		// 發送請求 send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				true  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		//傳回“-Error……”  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  	Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: if (Info [2].Equals ("Enable")) {  	return;  }  else {  	// 發送請求 send request to remote server ..  	KeyValuePair<string' object> responseObject;  	IDictionary<string' object> Item = new Dictionary<string' object> {  		{  			"Machine_Id"'  			Info [0]  		}'  		{  			"IsEnable"'  			true  		}'  		{  			"Last_Online_Time"'  			DateTime.Now  		}  	};  	do {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// package sent data ..  			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  	}  	while (true);  	//傳回“-Error……”  	if (responseObject.Key.Substring (0' 1) == "-")  		error_machines += Info [1] + "' ";  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Add_Machine_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (error_machines)) {  	string message = string.Format ("{0}\r\n\n{1}"' AddMachinesErrMessage' error_machines.Substring (0' (error_machines.Length) - 2));  	MessageBox.Show (this' message' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“不可用”  	if (Info [2].Equals ("Disable")) {  		return;  	}  	else {  		// send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				false  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“不可用”  	if (Info [2].Equals ("Disable")) {  		return;  	}  	else {  		// send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				false  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// declare view job log output info array ..  	string[] Info = new string[3];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	#region  	//判斷其狀態是否為“不可用”  	if (Info [2].Equals ("Disable")) {  		return;  	}  	else {  		// send request to remote server ..  		KeyValuePair<string' object> responseObject;  		IDictionary<string' object> Item = new Dictionary<string' object> {  			{  				"Machine_Id"'  				Info [0]  			}'  			{  				"IsEnable"'  				false  			}'  			{  				"Last_Online_Time"'  				DateTime.Now  			}  		};  		do {  			// confirm current request status ..  			if (EnvComm.CanRequest) {  				// package sent data ..  				IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  				// wait for result ..  				responseObject = EnvComm.Request (packaged);  				break;  			}  		}  		while (true);  		if (responseObject.Key.Substring (0' 1) == "-")  			error_machines += Info [1] + "' ";  	}  	#endregion  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 4; i++) {  	Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: if (Info [2].Equals ("Disable")) {  	return;  }  else {  	// send request to remote server ..  	KeyValuePair<string' object> responseObject;  	IDictionary<string' object> Item = new Dictionary<string' object> {  		{  			"Machine_Id"'  			Info [0]  		}'  		{  			"IsEnable"'  			false  		}'  		{  			"Last_Online_Time"'  			DateTime.Now  		}  	};  	do {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// package sent data ..  			IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.ONOFFMACHINE' Item);  			// wait for result ..  			responseObject = EnvComm.Request (packaged);  			break;  		}  	}  	while (true);  	if (responseObject.Key.Substring (0' 1) == "-")  		error_machines += Info [1] + "' ";  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Remove_Machine_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (error_machines)) {  	string message = string.Format ("{0}\r\n\n{1}"' RemoveMachinesErrMessage' error_machines.Substring (0' (error_machines.Length) - 2));  	MessageBox.Show (this' message' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Setting_Priority_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// 定義臨時變量 declare view job log output info array ..  	string[] Info = new string[7];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 1; i++) {  		//填入單個機器的一些信息  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	if (Convert.ToInt16 (Info [5]) < 1) {  		return;  	}  	else {  		// 寫入信息 write current data to local data ..  		DataRow[] row = this.EnvCust.DataListView.Tables ["Host"].Select (string.Format ("Host_Id = '{0}'"' Info [0]));  		if (row.Length > 0)  			machines.Add (Info [0]);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Setting_Priority_Click,The following statement contains a magic number: for (int s = 0; s < this.ListView_Host.SelectedItems.Count; s++) {  	// 定義臨時變量 declare view job log output info array ..  	string[] Info = new string[7];  	// check mouse click selected item ..  	for (int i = 0; i < this.ListView_Host.SelectedItems [s].SubItems.Count - 1; i++) {  		//填入單個機器的一些信息  		Info [i] = this.ListView_Host.SelectedItems [s].SubItems [i].Text;  	}  	if (Convert.ToInt16 (Info [5]) < 1) {  		return;  	}  	else {  		// 寫入信息 write current data to local data ..  		DataRow[] row = this.EnvCust.DataListView.Tables ["Host"].Select (string.Format ("Host_Id = '{0}'"' Info [0]));  		if (row.Length > 0)  			machines.Add (Info [0]);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Setting_Priority_Click,The following statement contains a magic number: if (Convert.ToInt16 (Info [5]) < 1) {  	return;  }  else {  	// 寫入信息 write current data to local data ..  	DataRow[] row = this.EnvCust.DataListView.Tables ["Host"].Select (string.Format ("Host_Id = '{0}'"' Info [0]));  	if (row.Length > 0)  		machines.Add (Info [0]);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The following statement contains a magic number: do {  	Settings OldSettings = this.EnvSetting;  	// suspend 1 sec ..  	Thread.Sleep (1000);  	if (this.EnvCust.ConvertConnection (ref this.EnvSetting)) {  		if (!fail && OldSettings.ServerIpAddress == this.EnvSetting.ServerIpAddress) {  			continue;  		}  		// change connect fail flag ..  		fail = false;  		this.EnvComm.Disconnect ();  		this.EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort);  		// change connected flag ..  		this.IsConnected = true;  		#region Invoke Enable Controls Delegate Procedure  		try {  			EnableControlsCallBack IsEnableControl = delegate () {  				// enabled controls ..  				this.Menu_Queue_Job.Enabled = true;  				this.Menu_Settings_PoolMgr.Enabled = true;  				if (this.Renbar_StatusBar.Items.Contains (serverLabel)) {  					// remove server state lable ..  					this.Renbar_StatusBar.Items.Remove (serverLabel);  				}  			};  			// invoke object ..  			this.Invoke (IsEnableControl);  		}  		catch {  		}  		#endregion  	}  	else//全鏈接不上  	 {  		if (fail) {  			continue;  		}  		// change connect fail flag ..  		fail = true;  		// change connected flag ..  		this.IsConnected = false;  		//this.EnvComm.Disconnect();  		#region 控制顯示 Invoke Enable Controls Delegate Procedure  		DisableControlsCallBack IsDisableControl = delegate () {  			// disable controls ..  			this.Menu_Queue_Job.Enabled = false;  			this.Menu_Settings_PoolMgr.Enabled = false;  			// 清空列表 clear current all list-view items ..  			this.ListView_Host.Items.Clear ();  			this.ListView_Process.Items.Clear ();  			this.ListView_Queue.Items.Clear ();  			try {  				// 添加狀態提示欄 add connect label to status bar ..  				this.Renbar_StatusBar.Items.Add (serverLabel);  				//設定語言  				switch (this.EnvSetting.Lang) {  				case Customization.Language.En_Us:  					serverLabel.Text = "Server State: Server disconnected";  					break;  				case Customization.Language.Zh_Tw:  					serverLabel.Text = "伺服器狀態: 與伺服器連線中斷";  					break;  				}  			}  			catch {  			}  		};  		// invoke object ..  		this.Invoke (IsDisableControl);  		#endregion  	}  }  while (!requeststop);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The following statement contains a magic number: try {  	// get drop files ..  	string[] files = (string[])e.Data.GetData (DataFormats.FileDrop' false);  	if (files.Length == 1) {  		if (this.IsConnected) {  			// create job form instance ..？？？？？？？？？？？？？兩個Pool的作用？？？？？？？？？？？？？？？  			Job_Form jobForm = new Job_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting) {  				Pool = this.EnvCust.DropDown.Pool'  				Pool2 = this.EnvCust.DropDown.Pool2'  				WaitFor = this.EnvCust.DropDown.Waitfor'  				IsExtern = true  			};  			// declare parse render file variable ..  			IDictionary<string' object> attributes = new Dictionary<string' object> ();  			//解析文件結構，成功則會講數據存入引用地址中，並傳遞數據給Job_Form（0 = Success' 1 = Parse Error' 2 = Multi File Error）  			int _p = this.EnvCust.Parse (files [0]' ref attributes);  			switch (_p) {  			case 0:  				// assign parse properties ..  				jobForm.BackupFilename = files [0];  				jobForm.ExternItems = attributes;  				// 成功則顯示Job_Form  show job form ..  				if (jobForm.ShowDialog (this) == DialogResult.OK)  					jobForm.Dispose ();  				break;  			case 1:  				// show parse error message ..  				MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  				break;  			case 2:  				// show parse multi error message ..  				MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  				break;  			}  		}  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The following statement contains a magic number: if (files.Length == 1) {  	if (this.IsConnected) {  		// create job form instance ..？？？？？？？？？？？？？兩個Pool的作用？？？？？？？？？？？？？？？  		Job_Form jobForm = new Job_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting) {  			Pool = this.EnvCust.DropDown.Pool'  			Pool2 = this.EnvCust.DropDown.Pool2'  			WaitFor = this.EnvCust.DropDown.Waitfor'  			IsExtern = true  		};  		// declare parse render file variable ..  		IDictionary<string' object> attributes = new Dictionary<string' object> ();  		//解析文件結構，成功則會講數據存入引用地址中，並傳遞數據給Job_Form（0 = Success' 1 = Parse Error' 2 = Multi File Error）  		int _p = this.EnvCust.Parse (files [0]' ref attributes);  		switch (_p) {  		case 0:  			// assign parse properties ..  			jobForm.BackupFilename = files [0];  			jobForm.ExternItems = attributes;  			// 成功則顯示Job_Form  show job form ..  			if (jobForm.ShowDialog (this) == DialogResult.OK)  				jobForm.Dispose ();  			break;  		case 1:  			// show parse error message ..  			MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  			break;  		case 2:  			// show parse multi error message ..  			MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The following statement contains a magic number: if (this.IsConnected) {  	// create job form instance ..？？？？？？？？？？？？？兩個Pool的作用？？？？？？？？？？？？？？？  	Job_Form jobForm = new Job_Form (ref this.EnvCust' ref this.EnvComm' this.EnvSetting) {  		Pool = this.EnvCust.DropDown.Pool'  		Pool2 = this.EnvCust.DropDown.Pool2'  		WaitFor = this.EnvCust.DropDown.Waitfor'  		IsExtern = true  	};  	// declare parse render file variable ..  	IDictionary<string' object> attributes = new Dictionary<string' object> ();  	//解析文件結構，成功則會講數據存入引用地址中，並傳遞數據給Job_Form（0 = Success' 1 = Parse Error' 2 = Multi File Error）  	int _p = this.EnvCust.Parse (files [0]' ref attributes);  	switch (_p) {  	case 0:  		// assign parse properties ..  		jobForm.BackupFilename = files [0];  		jobForm.ExternItems = attributes;  		// 成功則顯示Job_Form  show job form ..  		if (jobForm.ShowDialog (this) == DialogResult.OK)  			jobForm.Dispose ();  		break;  	case 1:  		// show parse error message ..  		MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	case 2:  		// show parse multi error message ..  		MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The following statement contains a magic number: switch (_p) {  case 0:  	// assign parse properties ..  	jobForm.BackupFilename = files [0];  	jobForm.ExternItems = attributes;  	// 成功則顯示Job_Form  show job form ..  	if (jobForm.ShowDialog (this) == DialogResult.OK)  		jobForm.Dispose ();  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: do {  	// wait until it is safe to enter ..  	if (!stateNotify.WaitOne (TimeSpan.Zero' true))  		return;  	else {  		//  get current processor idle time ..  		global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  		// setting performance counter category and instance name ...  		performance.CategoryName = "Processor";  		performance.CounterName = "% Idle Time";  		performance.InstanceName = "_Total";  		// get current idle time ..  		if (!this.__suspend) {  			if (50 < performance.NextValue ()) {  				if (70 < performance.NextValue ())  					Thread.Sleep (500);  				if (50 < performance.NextValue ())  					Thread.Sleep (5000);  			}  			else {  				Thread.Sleep (500);  			}  			#region F7300290 Suspend this thread when the WindowState is Minimized!  			if (this.IsConnected) {  				// assign currently status data ..  				this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			else {  				// clear all status data ..  				this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  				this.EnvCust.DataListView.AcceptChanges ();  			}  			#endregion  		}  		else {  			Thread.Sleep (15000);  		}  		////////////if (this.IsConnected)  		////////////{  		////////////    // assign currently status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		////////////else  		////////////{  		////////////    // clear all status data ..  		////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  		////////////    this.EnvCust.DataListView.AcceptChanges();  		////////////}  		//  release the mutex ..  		stateNotify.ReleaseMutex ();  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!stateNotify.WaitOne (TimeSpan.Zero' true))  	return;  else {  	//  get current processor idle time ..  	global::System.Diagnostics.PerformanceCounter performance = new global::System.Diagnostics.PerformanceCounter ();  	// setting performance counter category and instance name ...  	performance.CategoryName = "Processor";  	performance.CounterName = "% Idle Time";  	performance.InstanceName = "_Total";  	// get current idle time ..  	if (!this.__suspend) {  		if (50 < performance.NextValue ()) {  			if (70 < performance.NextValue ())  				Thread.Sleep (500);  			if (50 < performance.NextValue ())  				Thread.Sleep (5000);  		}  		else {  			Thread.Sleep (500);  		}  		#region F7300290 Suspend this thread when the WindowState is Minimized!  		if (this.IsConnected) {  			// assign currently status data ..  			this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		else {  			// clear all status data ..  			this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  			this.EnvCust.DataListView.AcceptChanges ();  		}  		#endregion  	}  	else {  		Thread.Sleep (15000);  	}  	////////////if (this.IsConnected)  	////////////{  	////////////    // assign currently status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataState(ref this.EnvComm).Copy();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	////////////else  	////////////{  	////////////    // clear all status data ..  	////////////    this.EnvCust.DataListView = this.EnvCust.DataListView.Clone();  	////////////    this.EnvCust.DataListView.AcceptChanges();  	////////////}  	//  release the mutex ..  	stateNotify.ReleaseMutex ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (!this.__suspend) {  	if (50 < performance.NextValue ()) {  		if (70 < performance.NextValue ())  			Thread.Sleep (500);  		if (50 < performance.NextValue ())  			Thread.Sleep (5000);  	}  	else {  		Thread.Sleep (500);  	}  	#region F7300290 Suspend this thread when the WindowState is Minimized!  	if (this.IsConnected) {  		// assign currently status data ..  		this.EnvCust.DataListView = this.EnvCust.DataState (ref this.EnvComm).Copy ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	else {  		// clear all status data ..  		this.EnvCust.DataListView = this.EnvCust.DataListView.Clone ();  		this.EnvCust.DataListView.AcceptChanges ();  	}  	#endregion  }  else {  	Thread.Sleep (15000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ()) {  	if (70 < performance.NextValue ())  		Thread.Sleep (500);  	if (50 < performance.NextValue ())  		Thread.Sleep (5000);  }  else {  	Thread.Sleep (500);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (70 < performance.NextValue ())  	Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (70 < performance.NextValue ())  	Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ())  	Thread.Sleep (5000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: if (50 < performance.NextValue ())  	Thread.Sleep (5000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Latest_Thread,The following statement contains a magic number: Thread.Sleep (15000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止  	 {  		if (this.IsConnected) {  			// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  			// 返回所有增删改和未改变的数据  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  			if (InvokeData != null) {  				// 鎖定臨時數據表 try lock object wait for 0 second ..  				if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  				 {  					try {  						#region 定義委托事件 Delegate Event Handler  						ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region 按傳入參數刪除物件 Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  							 {  								for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Process.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Process.Update ();  								}  								return;  							}  							#endregion  							#region 逐行對比，更新物件 Update Item Partial  							foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (ProcItem.Text == Item.Text) {  									if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < ProcItem.SubItems.Count; i++)  										ProcItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									ProcItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Process.Items.Add (Item);  							// 更新計數 calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ..  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  								Application.DoEvents ();  								// add proc log to dictionary ...  								if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  								else  									// update last log texts ..  									ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  								// declare connected column variable ..  								string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  								string[] subitems =  {  									row ["Proc_Id"].ToString ().Trim ()'  									//ID  									row ["Job"].ToString ().Trim ()'  									//任務名  									row ["Frames"].ToString ().Trim ()'  									//張數  									row ["Host"].ToString ().Trim ()'  									//主機名  									Elapsed  								//經過時間  								};  								ListViewItem Item = new ListViewItem (subitems);  								try {  									// 調用委托？？？？？？？？？？？？？？  									// Invoke process list view delegate control ...  									this.Invoke (ProcViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									break;  								}  							}  						}  						#endregion  						#region 已刪除 Deleted State Loop  						// 獲取已刪除的數據 get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// 臨時方法 temporary method ..  							InvokeDeleteRows.RejectChanges ();  							//復原變更  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  									this.Invoke (ProcViewList' new object[] {  										new ListViewItem ()'  										row ["Proc_Id"].ToString ()  									});  									// remove output log ...  									if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  										ProcLog.Remove (row ["Proc_Id"].ToString ());  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// 釋出指定物件的獨佔鎖定 release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ...  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ())// 鎖定，直到目前的WaitHandle收到信號為止   {  	if (this.IsConnected) {  		// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  		// 返回所有增删改和未改变的数据  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  		if (InvokeData != null) {  			// 鎖定臨時數據表 try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  			 {  				try {  					#region 定義委托事件 Delegate Event Handler  					ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region 按傳入參數刪除物件 Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  						 {  							for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Process.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Process.Update ();  							}  							return;  						}  						#endregion  						#region 逐行對比，更新物件 Update Item Partial  						foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (ProcItem.Text == Item.Text) {  								if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < ProcItem.SubItems.Count; i++)  									ProcItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								ProcItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Process.Items.Add (Item);  						// 更新計數 calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  							Application.DoEvents ();  							// add proc log to dictionary ...  							if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  							else  								// update last log texts ..  								ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  							// declare connected column variable ..  							string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  							string[] subitems =  {  								row ["Proc_Id"].ToString ().Trim ()'  								//ID  								row ["Job"].ToString ().Trim ()'  								//任務名  								row ["Frames"].ToString ().Trim ()'  								//張數  								row ["Host"].ToString ().Trim ()'  								//主機名  								Elapsed  							//經過時間  							};  							ListViewItem Item = new ListViewItem (subitems);  							try {  								// 調用委托？？？？？？？？？？？？？？  								// Invoke process list view delegate control ...  								this.Invoke (ProcViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region 已刪除 Deleted State Loop  					// 獲取已刪除的數據 get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// 臨時方法 temporary method ..  						InvokeDeleteRows.RejectChanges ();  						//復原變更  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  								this.Invoke (ProcViewList' new object[] {  									new ListViewItem ()'  									row ["Proc_Id"].ToString ()  								});  								// remove output log ...  								if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  									ProcLog.Remove (row ["Proc_Id"].ToString ());  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// 釋出指定物件的獨佔鎖定 release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ...  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// 依據主鍵作為對比更新數據？？？？？？？？？？？？？？？？？？？？？？？？？？？？  	// 返回所有增删改和未改变的数据  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Processing"]' this.EnvCust.DataListView.Tables ["Processing"].PrimaryKey);  	if (InvokeData != null) {  		// 鎖定臨時數據表 try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  		 {  			try {  				#region 定義委托事件 Delegate Event Handler  				ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region 按傳入參數刪除物件 Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  					 {  						for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Process.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Process.Update ();  						}  						return;  					}  					#endregion  					#region 逐行對比，更新物件 Update Item Partial  					foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (ProcItem.Text == Item.Text) {  							if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < ProcItem.SubItems.Count; i++)  								ProcItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							ProcItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Process.Items.Add (Item);  					// 更新計數 calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  						Application.DoEvents ();  						// add proc log to dictionary ...  						if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  						else  							// update last log texts ..  							ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  						// declare connected column variable ..  						string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  						string[] subitems =  {  							row ["Proc_Id"].ToString ().Trim ()'  							//ID  							row ["Job"].ToString ().Trim ()'  							//任務名  							row ["Frames"].ToString ().Trim ()'  							//張數  							row ["Host"].ToString ().Trim ()'  							//主機名  							Elapsed  						//經過時間  						};  						ListViewItem Item = new ListViewItem (subitems);  						try {  							// 調用委托？？？？？？？？？？？？？？  							// Invoke process list view delegate control ...  							this.Invoke (ProcViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region 已刪除 Deleted State Loop  				// 獲取已刪除的數據 get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// 臨時方法 temporary method ..  					InvokeDeleteRows.RejectChanges ();  					//復原變更  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  							this.Invoke (ProcViewList' new object[] {  								new ListViewItem ()'  								row ["Proc_Id"].ToString ()  							});  							// remove output log ...  							if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  								ProcLog.Remove (row ["Proc_Id"].ToString ());  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// 釋出指定物件的獨佔鎖定 release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ...  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// 鎖定臨時數據表 try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功  	 {  		try {  			#region 定義委托事件 Delegate Event Handler  			ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region 按傳入參數刪除物件 Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  				 {  					for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Process.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Process.Update ();  					}  					return;  				}  				#endregion  				#region 逐行對比，更新物件 Update Item Partial  				foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (ProcItem.Text == Item.Text) {  						if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < ProcItem.SubItems.Count; i++)  							ProcItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						ProcItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Process.Items.Add (Item);  				// 更新計數 calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  					Application.DoEvents ();  					// add proc log to dictionary ...  					if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  					else  						// update last log texts ..  						ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  					// declare connected column variable ..  					string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  					string[] subitems =  {  						row ["Proc_Id"].ToString ().Trim ()'  						//ID  						row ["Job"].ToString ().Trim ()'  						//任務名  						row ["Frames"].ToString ().Trim ()'  						//張數  						row ["Host"].ToString ().Trim ()'  						//主機名  						Elapsed  					//經過時間  					};  					ListViewItem Item = new ListViewItem (subitems);  					try {  						// 調用委托？？？？？？？？？？？？？？  						// Invoke process list view delegate control ...  						this.Invoke (ProcViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region 已刪除 Deleted State Loop  			// 獲取已刪除的數據 get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// 臨時方法 temporary method ..  				InvokeDeleteRows.RejectChanges ();  				//復原變更  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  						this.Invoke (ProcViewList' new object[] {  							new ListViewItem ()'  							row ["Proc_Id"].ToString ()  						});  						// remove output log ...  						if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  							ProcLog.Remove (row ["Proc_Id"].ToString ());  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// 釋出指定物件的獨佔鎖定 release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0))//如果在指定的毫秒數時間內取得指定物件的獨佔鎖定成功   {  	try {  		#region 定義委托事件 Delegate Event Handler  		ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region 按傳入參數刪除物件 Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  			 {  				for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Process.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Process.Update ();  				}  				return;  			}  			#endregion  			#region 逐行對比，更新物件 Update Item Partial  			foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (ProcItem.Text == Item.Text) {  					if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < ProcItem.SubItems.Count; i++)  						ProcItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					ProcItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Process.Items.Add (Item);  			// 更新計數 calculate items ..  			this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Process.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  				Application.DoEvents ();  				// add proc log to dictionary ...  				if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  				else  					// update last log texts ..  					ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  				// declare connected column variable ..  				string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  				string[] subitems =  {  					row ["Proc_Id"].ToString ().Trim ()'  					//ID  					row ["Job"].ToString ().Trim ()'  					//任務名  					row ["Frames"].ToString ().Trim ()'  					//張數  					row ["Host"].ToString ().Trim ()'  					//主機名  					Elapsed  				//經過時間  				};  				ListViewItem Item = new ListViewItem (subitems);  				try {  					// 調用委托？？？？？？？？？？？？？？  					// Invoke process list view delegate control ...  					this.Invoke (ProcViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region 已刪除 Deleted State Loop  		// 獲取已刪除的數據 get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// 臨時方法 temporary method ..  			InvokeDeleteRows.RejectChanges ();  			//復原變更  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  					this.Invoke (ProcViewList' new object[] {  						new ListViewItem ()'  						row ["Proc_Id"].ToString ()  					});  					// remove output log ...  					if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  						ProcLog.Remove (row ["Proc_Id"].ToString ());  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// 釋出指定物件的獨佔鎖定 release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: try {  	#region 定義委托事件 Delegate Event Handler  	ProcListViewCallBack ProcViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region 按傳入參數刪除物件 Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText))//？？？？？？？？？？？？？？？？？  		 {  			for (int i = 0; i < this.ListView_Process.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Process.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Process.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Process.Update ();  			}  			return;  		}  		#endregion  		#region 逐行對比，更新物件 Update Item Partial  		foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (ProcItem.Text == Item.Text) {  				if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < ProcItem.SubItems.Count; i++)  					ProcItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				ProcItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Process.Items.Add (Item);  		// 更新計數 calculate items ..  		this.GroupBox_Process.Text = this.ListViewText [0] + string.Format (" ({0})"' this.ListView_Process.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Process.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// 處理目前在訊息佇列中的所有Windows訊息 processing application all events ..  			Application.DoEvents ();  			// add proc log to dictionary ...  			if (!ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  				ProcLog.Add (row ["Proc_Id"].ToString ()' row ["Log"].ToString ());  			else  				// update last log texts ..  				ProcLog [row ["Proc_Id"].ToString ()] = row ["Log"].ToString ();  			// declare connected column variable ..  			string Elapsed = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Elapsed"]));  			string[] subitems =  {  				row ["Proc_Id"].ToString ().Trim ()'  				//ID  				row ["Job"].ToString ().Trim ()'  				//任務名  				row ["Frames"].ToString ().Trim ()'  				//張數  				row ["Host"].ToString ().Trim ()'  				//主機名  				Elapsed  			//經過時間  			};  			ListViewItem Item = new ListViewItem (subitems);  			try {  				// 調用委托？？？？？？？？？？？？？？  				// Invoke process list view delegate control ...  				this.Invoke (ProcViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region 已刪除 Deleted State Loop  	// 獲取已刪除的數據 get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// 臨時方法 temporary method ..  		InvokeDeleteRows.RejectChanges ();  		//復原變更  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke process list view delegate control ...？？？？？？？？？？？？？？？？  				this.Invoke (ProcViewList' new object[] {  					new ListViewItem ()'  					row ["Proc_Id"].ToString ()  				});  				// remove output log ...  				if (ProcLog.ContainsKey (row ["Proc_Id"].ToString ()))  					ProcLog.Remove (row ["Proc_Id"].ToString ());  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// 釋出指定物件的獨佔鎖定 release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: foreach (ListViewItem ProcItem in this.ListView_Process.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (ProcItem.Text == Item.Text) {  		if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < ProcItem.SubItems.Count; i++)  			ProcItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		ProcItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.Text == Item.Text) {  	if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < ProcItem.SubItems.Count; i++)  		ProcItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	ProcItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: if (ProcItem.SubItems [1].Text == Item.SubItems [1].Text && ProcItem.SubItems [2].Text == Item.SubItems [2].Text && ProcItem.SubItems [3].Text == Item.SubItems [3].Text && ProcItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Processing_Thread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: do {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second ..  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  									if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  										// disabled notification content clickable ..  										this.RenbarNotifier.ContentClickable = false;  										// play notification sound ..  										if (this.nPlayer.IsLoadCompleted) {  											this.nPlayer.Play ();  										}  										// show notification on taskbar ..  										this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  									}  									// remove item ..  									this.ListView_Queue.Items [i].Remove ();  								}  								if (this.manual_Delete)  									// restore manual delete flag ..  									this.manual_Delete = false;  								// calculate items ..  								this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Queue.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (QueueItem.Text == Item.Text) {  								if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < QueueItem.SubItems.Count; i++)  									QueueItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								QueueItem.ForeColor = Item.ForeColor;  								if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = true;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted)  										this.nPlayer.Play ();  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  								}  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Queue.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ..  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							string[] subitems =  {  								row ["Queue_Id"].ToString ().Trim ()'  								row ["Status_Id"].ToString ().Trim ()'  								row ["Completed"].ToString ().Trim ()'  								row ["ProcType"].ToString ().Trim ()'  								row ["Priority"].ToString ().Trim ()'  								row ["Project"].ToString ().Trim ()'  								row ["Job"].ToString ().Trim ()'  								row ["Frames"].ToString ().Trim ()'  								row ["First_Pool"].ToString ().Trim ()'  								row ["Second_Pool"].ToString ().Trim ()'  								row ["Submited_User"].ToString ().Trim ()'  								row ["Submited_Time"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							switch (row ["Status_Id"].ToString ()) {  							case "PROCESSING":  								// green color ..  								Item.ForeColor = Color.FromArgb (0' 159' 0);  								break;  							case "PAUSE":  								// gray color ..  								Item.ForeColor = Color.FromArgb (154' 154' 154);  								break;  							case "UPDATEONLY":  								// pink color ..  								Item.ForeColor = Color.FromArgb (240' 120' 154);  								break;  							case "CHECKING":  								// deep blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 124);  								break;  							case "GETLATEST":  								// blue color ..  								Item.ForeColor = Color.FromArgb (0' 83' 170);  								break;  							case "ERROR":  								// red color ..  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							}  							#endregion  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								break;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke queue list view delegate control ..  								this.Invoke (QueueViewList' new object[] {  									new ListViewItem ()'  									row ["Queue_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	if (!this.__suspend)  		Thread.Sleep (1000);  	else  		Thread.Sleep (10000);  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Queue"]' this.EnvCust.DataListView.Tables ["Queue"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second ..  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  								if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  									// disabled notification content clickable ..  									this.RenbarNotifier.ContentClickable = false;  									// play notification sound ..  									if (this.nPlayer.IsLoadCompleted) {  										this.nPlayer.Play ();  									}  									// show notification on taskbar ..  									this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  								}  								// remove item ..  								this.ListView_Queue.Items [i].Remove ();  							}  							if (this.manual_Delete)  								// restore manual delete flag ..  								this.manual_Delete = false;  							// calculate items ..  							this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Queue.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (QueueItem.Text == Item.Text) {  							if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < QueueItem.SubItems.Count; i++)  								QueueItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							QueueItem.ForeColor = Item.ForeColor;  							if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = true;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted)  									this.nPlayer.Play ();  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  							}  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Queue.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ..  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						string[] subitems =  {  							row ["Queue_Id"].ToString ().Trim ()'  							row ["Status_Id"].ToString ().Trim ()'  							row ["Completed"].ToString ().Trim ()'  							row ["ProcType"].ToString ().Trim ()'  							row ["Priority"].ToString ().Trim ()'  							row ["Project"].ToString ().Trim ()'  							row ["Job"].ToString ().Trim ()'  							row ["Frames"].ToString ().Trim ()'  							row ["First_Pool"].ToString ().Trim ()'  							row ["Second_Pool"].ToString ().Trim ()'  							row ["Submited_User"].ToString ().Trim ()'  							row ["Submited_Time"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						switch (row ["Status_Id"].ToString ()) {  						case "PROCESSING":  							// green color ..  							Item.ForeColor = Color.FromArgb (0' 159' 0);  							break;  						case "PAUSE":  							// gray color ..  							Item.ForeColor = Color.FromArgb (154' 154' 154);  							break;  						case "UPDATEONLY":  							// pink color ..  							Item.ForeColor = Color.FromArgb (240' 120' 154);  							break;  						case "CHECKING":  							// deep blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 124);  							break;  						case "GETLATEST":  							// blue color ..  							Item.ForeColor = Color.FromArgb (0' 83' 170);  							break;  						case "ERROR":  							// red color ..  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						}  						#endregion  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							break;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke queue list view delegate control ..  							this.Invoke (QueueViewList' new object[] {  								new ListViewItem ()'  								row ["Queue_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second ..  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  							if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  								// disabled notification content clickable ..  								this.RenbarNotifier.ContentClickable = false;  								// play notification sound ..  								if (this.nPlayer.IsLoadCompleted) {  									this.nPlayer.Play ();  								}  								// show notification on taskbar ..  								this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  							}  							// remove item ..  							this.ListView_Queue.Items [i].Remove ();  						}  						if (this.manual_Delete)  							// restore manual delete flag ..  							this.manual_Delete = false;  						// calculate items ..  						this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Queue.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (QueueItem.Text == Item.Text) {  						if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < QueueItem.SubItems.Count; i++)  							QueueItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						QueueItem.ForeColor = Item.ForeColor;  						if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = true;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted)  								this.nPlayer.Play ();  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  						}  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Queue.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ..  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					string[] subitems =  {  						row ["Queue_Id"].ToString ().Trim ()'  						row ["Status_Id"].ToString ().Trim ()'  						row ["Completed"].ToString ().Trim ()'  						row ["ProcType"].ToString ().Trim ()'  						row ["Priority"].ToString ().Trim ()'  						row ["Project"].ToString ().Trim ()'  						row ["Job"].ToString ().Trim ()'  						row ["Frames"].ToString ().Trim ()'  						row ["First_Pool"].ToString ().Trim ()'  						row ["Second_Pool"].ToString ().Trim ()'  						row ["Submited_User"].ToString ().Trim ()'  						row ["Submited_Time"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					switch (row ["Status_Id"].ToString ()) {  					case "PROCESSING":  						// green color ..  						Item.ForeColor = Color.FromArgb (0' 159' 0);  						break;  					case "PAUSE":  						// gray color ..  						Item.ForeColor = Color.FromArgb (154' 154' 154);  						break;  					case "UPDATEONLY":  						// pink color ..  						Item.ForeColor = Color.FromArgb (240' 120' 154);  						break;  					case "CHECKING":  						// deep blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 124);  						break;  					case "GETLATEST":  						// blue color ..  						Item.ForeColor = Color.FromArgb (0' 83' 170);  						break;  					case "ERROR":  						// red color ..  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					}  					#endregion  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						break;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke queue list view delegate control ..  						this.Invoke (QueueViewList' new object[] {  							new ListViewItem ()'  							row ["Queue_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  						if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  							// disabled notification content clickable ..  							this.RenbarNotifier.ContentClickable = false;  							// play notification sound ..  							if (this.nPlayer.IsLoadCompleted) {  								this.nPlayer.Play ();  							}  							// show notification on taskbar ..  							this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  						}  						// remove item ..  						this.ListView_Queue.Items [i].Remove ();  					}  					if (this.manual_Delete)  						// restore manual delete flag ..  						this.manual_Delete = false;  					// calculate items ..  					this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Queue.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (QueueItem.Text == Item.Text) {  					if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < QueueItem.SubItems.Count; i++)  						QueueItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					QueueItem.ForeColor = Item.ForeColor;  					if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = true;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted)  							this.nPlayer.Play ();  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  					}  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Queue.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Queue.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ..  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				string[] subitems =  {  					row ["Queue_Id"].ToString ().Trim ()'  					row ["Status_Id"].ToString ().Trim ()'  					row ["Completed"].ToString ().Trim ()'  					row ["ProcType"].ToString ().Trim ()'  					row ["Priority"].ToString ().Trim ()'  					row ["Project"].ToString ().Trim ()'  					row ["Job"].ToString ().Trim ()'  					row ["Frames"].ToString ().Trim ()'  					row ["First_Pool"].ToString ().Trim ()'  					row ["Second_Pool"].ToString ().Trim ()'  					row ["Submited_User"].ToString ().Trim ()'  					row ["Submited_Time"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				switch (row ["Status_Id"].ToString ()) {  				case "PROCESSING":  					// green color ..  					Item.ForeColor = Color.FromArgb (0' 159' 0);  					break;  				case "PAUSE":  					// gray color ..  					Item.ForeColor = Color.FromArgb (154' 154' 154);  					break;  				case "UPDATEONLY":  					// pink color ..  					Item.ForeColor = Color.FromArgb (240' 120' 154);  					break;  				case "CHECKING":  					// deep blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 124);  					break;  				case "GETLATEST":  					// blue color ..  					Item.ForeColor = Color.FromArgb (0' 83' 170);  					break;  				case "ERROR":  					// red color ..  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				}  				#endregion  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					break;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke queue list view delegate control ..  					this.Invoke (QueueViewList' new object[] {  						new ListViewItem ()'  						row ["Queue_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	QueueListViewCallBack QueueViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  					if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  						// disabled notification content clickable ..  						this.RenbarNotifier.ContentClickable = false;  						// play notification sound ..  						if (this.nPlayer.IsLoadCompleted) {  							this.nPlayer.Play ();  						}  						// show notification on taskbar ..  						this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  					}  					// remove item ..  					this.ListView_Queue.Items [i].Remove ();  				}  				if (this.manual_Delete)  					// restore manual delete flag ..  					this.manual_Delete = false;  				// calculate items ..  				this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Queue.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (QueueItem.Text == Item.Text) {  				if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < QueueItem.SubItems.Count; i++)  					QueueItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				QueueItem.ForeColor = Item.ForeColor;  				if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  					// disabled notification content clickable ..  					this.RenbarNotifier.ContentClickable = true;  					// play notification sound ..  					if (this.nPlayer.IsLoadCompleted)  						this.nPlayer.Play ();  					// show notification on taskbar ..  					this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  				}  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Queue.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ..  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			string[] subitems =  {  				row ["Queue_Id"].ToString ().Trim ()'  				row ["Status_Id"].ToString ().Trim ()'  				row ["Completed"].ToString ().Trim ()'  				row ["ProcType"].ToString ().Trim ()'  				row ["Priority"].ToString ().Trim ()'  				row ["Project"].ToString ().Trim ()'  				row ["Job"].ToString ().Trim ()'  				row ["Frames"].ToString ().Trim ()'  				row ["First_Pool"].ToString ().Trim ()'  				row ["Second_Pool"].ToString ().Trim ()'  				row ["Submited_User"].ToString ().Trim ()'  				row ["Submited_Time"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			switch (row ["Status_Id"].ToString ()) {  			case "PROCESSING":  				// green color ..  				Item.ForeColor = Color.FromArgb (0' 159' 0);  				break;  			case "PAUSE":  				// gray color ..  				Item.ForeColor = Color.FromArgb (154' 154' 154);  				break;  			case "UPDATEONLY":  				// pink color ..  				Item.ForeColor = Color.FromArgb (240' 120' 154);  				break;  			case "CHECKING":  				// deep blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 124);  				break;  			case "GETLATEST":  				// blue color ..  				Item.ForeColor = Color.FromArgb (0' 83' 170);  				break;  			case "ERROR":  				// red color ..  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			}  			#endregion  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				break;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke queue list view delegate control ..  				this.Invoke (QueueViewList' new object[] {  					new ListViewItem ()'  					row ["Queue_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  			if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  				// disabled notification content clickable ..  				this.RenbarNotifier.ContentClickable = false;  				// play notification sound ..  				if (this.nPlayer.IsLoadCompleted) {  					this.nPlayer.Play ();  				}  				// show notification on taskbar ..  				this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  			}  			// remove item ..  			this.ListView_Queue.Items [i].Remove ();  		}  		if (this.manual_Delete)  			// restore manual delete flag ..  			this.manual_Delete = false;  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  			if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  				// disabled notification content clickable ..  				this.RenbarNotifier.ContentClickable = false;  				// play notification sound ..  				if (this.nPlayer.IsLoadCompleted) {  					this.nPlayer.Play ();  				}  				// show notification on taskbar ..  				this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  			}  			// remove item ..  			this.ListView_Queue.Items [i].Remove ();  		}  		if (this.manual_Delete)  			// restore manual delete flag ..  			this.manual_Delete = false;  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  			if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  				// disabled notification content clickable ..  				this.RenbarNotifier.ContentClickable = false;  				// play notification sound ..  				if (this.nPlayer.IsLoadCompleted) {  					this.nPlayer.Play ();  				}  				// show notification on taskbar ..  				this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  			}  			// remove item ..  			this.ListView_Queue.Items [i].Remove ();  		}  		if (this.manual_Delete)  			// restore manual delete flag ..  			this.manual_Delete = false;  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  			if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  				// disabled notification content clickable ..  				this.RenbarNotifier.ContentClickable = false;  				// play notification sound ..  				if (this.nPlayer.IsLoadCompleted) {  					this.nPlayer.Play ();  				}  				// show notification on taskbar ..  				this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  			}  			// remove item ..  			this.ListView_Queue.Items [i].Remove ();  		}  		if (this.manual_Delete)  			// restore manual delete flag ..  			this.manual_Delete = false;  		// calculate items ..  		this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Queue.Update ();  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  		if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = false;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted) {  				this.nPlayer.Play ();  			}  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  		}  		// remove item ..  		this.ListView_Queue.Items [i].Remove ();  	}  	if (this.manual_Delete)  		// restore manual delete flag ..  		this.manual_Delete = false;  	// calculate items ..  	this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  	// refresh control ..  	this.ListView_Queue.Update ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  		if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = false;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted) {  				this.nPlayer.Play ();  			}  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  		}  		// remove item ..  		this.ListView_Queue.Items [i].Remove ();  	}  	if (this.manual_Delete)  		// restore manual delete flag ..  		this.manual_Delete = false;  	// calculate items ..  	this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  	// refresh control ..  	this.ListView_Queue.Update ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  		if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = false;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted) {  				this.nPlayer.Play ();  			}  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  		}  		// remove item ..  		this.ListView_Queue.Items [i].Remove ();  	}  	if (this.manual_Delete)  		// restore manual delete flag ..  		this.manual_Delete = false;  	// calculate items ..  	this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  	// refresh control ..  	this.ListView_Queue.Update ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: for (int i = 0; i < this.ListView_Queue.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  		if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = false;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted) {  				this.nPlayer.Play ();  			}  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  		}  		// remove item ..  		this.ListView_Queue.Items [i].Remove ();  	}  	if (this.manual_Delete)  		// restore manual delete flag ..  		this.manual_Delete = false;  	// calculate items ..  	this.GroupBox_Queue.Text = this.ListViewText [1] + string.Format (" ({0})"' this.ListView_Queue.Items.Count.ToString ());  	// refresh control ..  	this.ListView_Queue.Update ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  	if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = false;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted) {  			this.nPlayer.Play ();  		}  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  	}  	// remove item ..  	this.ListView_Queue.Items [i].Remove ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  	if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = false;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted) {  			this.nPlayer.Play ();  		}  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  	}  	// remove item ..  	this.ListView_Queue.Items [i].Remove ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  	if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = false;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted) {  			this.nPlayer.Play ();  		}  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  	}  	// remove item ..  	this.ListView_Queue.Items [i].Remove ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [0].Text == DeleteItemText) {  	if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = false;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted) {  			this.nPlayer.Play ();  		}  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  	}  	// remove item ..  	this.ListView_Queue.Items [i].Remove ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = false;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted) {  		this.nPlayer.Play ();  	}  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = false;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted) {  		this.nPlayer.Play ();  	}  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = false;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted) {  		this.nPlayer.Play ();  	}  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (this.ListView_Queue.Items [i].SubItems [10].Text == Customization.User && !this.manual_Delete) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = false;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted) {  		this.nPlayer.Play ();  	}  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Completed' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (ListViewItem QueueItem in this.ListView_Queue.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (QueueItem.Text == Item.Text) {  		if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < QueueItem.SubItems.Count; i++)  			QueueItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		QueueItem.ForeColor = Item.ForeColor;  		if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  			// disabled notification content clickable ..  			this.RenbarNotifier.ContentClickable = true;  			// play notification sound ..  			if (this.nPlayer.IsLoadCompleted)  				this.nPlayer.Play ();  			// show notification on taskbar ..  			this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  		}  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.Text == Item.Text) {  	if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < QueueItem.SubItems.Count; i++)  		QueueItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	QueueItem.ForeColor = Item.ForeColor;  	if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  		// disabled notification content clickable ..  		this.RenbarNotifier.ContentClickable = true;  		// play notification sound ..  		if (this.nPlayer.IsLoadCompleted)  			this.nPlayer.Play ();  		// show notification on taskbar ..  		this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == Item.SubItems [1].Text && QueueItem.SubItems [2].Text == Item.SubItems [2].Text && QueueItem.SubItems [4].Text == Item.SubItems [4].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = true;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted)  		this.nPlayer.Play ();  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = true;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted)  		this.nPlayer.Play ();  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (QueueItem.SubItems [1].Text == JobStatusFlag.ERROR.ToString ()) {  	// disabled notification content clickable ..  	this.RenbarNotifier.ContentClickable = true;  	// play notification sound ..  	if (this.nPlayer.IsLoadCompleted)  		this.nPlayer.Play ();  	// show notification on taskbar ..  	this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: this.RenbarNotifier.Show (this.Notification_Title' this.Notification_Error' 350' 10000' 350);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		string[] subitems =  {  			row ["Queue_Id"].ToString ().Trim ()'  			row ["Status_Id"].ToString ().Trim ()'  			row ["Completed"].ToString ().Trim ()'  			row ["ProcType"].ToString ().Trim ()'  			row ["Priority"].ToString ().Trim ()'  			row ["Project"].ToString ().Trim ()'  			row ["Job"].ToString ().Trim ()'  			row ["Frames"].ToString ().Trim ()'  			row ["First_Pool"].ToString ().Trim ()'  			row ["Second_Pool"].ToString ().Trim ()'  			row ["Submited_User"].ToString ().Trim ()'  			row ["Submited_Time"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		switch (row ["Status_Id"].ToString ()) {  		case "PROCESSING":  			// green color ..  			Item.ForeColor = Color.FromArgb (0' 159' 0);  			break;  		case "PAUSE":  			// gray color ..  			Item.ForeColor = Color.FromArgb (154' 154' 154);  			break;  		case "UPDATEONLY":  			// pink color ..  			Item.ForeColor = Color.FromArgb (240' 120' 154);  			break;  		case "CHECKING":  			// deep blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 124);  			break;  		case "GETLATEST":  			// blue color ..  			Item.ForeColor = Color.FromArgb (0' 83' 170);  			break;  		case "ERROR":  			// red color ..  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		}  		#endregion  		try {  			// invoke queue list view delegate control ..  			this.Invoke (QueueViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			break;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	string[] subitems =  {  		row ["Queue_Id"].ToString ().Trim ()'  		row ["Status_Id"].ToString ().Trim ()'  		row ["Completed"].ToString ().Trim ()'  		row ["ProcType"].ToString ().Trim ()'  		row ["Priority"].ToString ().Trim ()'  		row ["Project"].ToString ().Trim ()'  		row ["Job"].ToString ().Trim ()'  		row ["Frames"].ToString ().Trim ()'  		row ["First_Pool"].ToString ().Trim ()'  		row ["Second_Pool"].ToString ().Trim ()'  		row ["Submited_User"].ToString ().Trim ()'  		row ["Submited_Time"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	switch (row ["Status_Id"].ToString ()) {  	case "PROCESSING":  		// green color ..  		Item.ForeColor = Color.FromArgb (0' 159' 0);  		break;  	case "PAUSE":  		// gray color ..  		Item.ForeColor = Color.FromArgb (154' 154' 154);  		break;  	case "UPDATEONLY":  		// pink color ..  		Item.ForeColor = Color.FromArgb (240' 120' 154);  		break;  	case "CHECKING":  		// deep blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 124);  		break;  	case "GETLATEST":  		// blue color ..  		Item.ForeColor = Color.FromArgb (0' 83' 170);  		break;  	case "ERROR":  		// red color ..  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	}  	#endregion  	try {  		// invoke queue list view delegate control ..  		this.Invoke (QueueViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		break;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (0' 159' 0);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (154' 154' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (154' 154' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (154' 154' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (240' 120' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (240' 120' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (240' 120' 154);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (0' 83' 124);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (0' 83' 124);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (0' 83' 170);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (0' 83' 170);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (255' 0' 0);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!this.__suspend)  	Thread.Sleep (1000);  else  	Thread.Sleep (10000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: if (!this.__suspend)  	Thread.Sleep (1000);  else  	Thread.Sleep (10000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: do {  	if (this.Suspend.WaitOne ()) {  		if (this.IsConnected) {  			// refresh latest data ..  			DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  			if (InvokeData != null) {  				// try lock object wait for 0 second …  				if (Monitor.TryEnter (InvokeData' 0)) {  					try {  						#region Delegate Event Handler  						HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  							#region Delete Item Partial  							if (!string.IsNullOrEmpty (DeleteItemText)) {  								for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  									// processing application all events ..  									Application.DoEvents ();  									if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  										// remove item ..  										this.ListView_Host.Items [i].Remove ();  									// calculate items ..  									this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  									// refresh control ..  									this.ListView_Host.Update ();  								}  								return;  							}  							#endregion  							#region Update Item Partial  							foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  								// processing application all events ..  								Application.DoEvents ();  								if (MachineItem.Text == Item.Text) {  									if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  										return;  									// update the item of sub items ..  									for (int i = 1; i < MachineItem.SubItems.Count; i++)  										MachineItem.SubItems [i] = Item.SubItems [i];  									// apply fore color ..  									MachineItem.ForeColor = Item.ForeColor;  									return;  								}  							}  							#endregion  							// add new items to the listview control ..  							this.ListView_Host.Items.Add (Item);  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						};  						#endregion  						#region Added' Modified And Unchanged State Loop  						// get add' modified and unchanged row(s) ……  						DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  						if (InvokeRows != null) {  							foreach (DataRow row in InvokeRows.Rows) {  								// processing application all events ..  								Application.DoEvents ();  								// convert connected column value ..  								string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  								if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  									Connected = string.Empty;  								}  								string[] subitems =  {  									row ["Host_Id"].ToString ().Trim ()'  									row ["Host"].ToString ().Trim ()'  									row ["Status"].ToString ().Trim ()'  									row ["Processors"].ToString ().Trim ()'  									Connected'  									row ["Priority"].ToString ().Trim ()'  									row ["Note"].ToString ().Trim ()  								};  								ListViewItem Item = new ListViewItem (subitems);  								#region Change Item Force Color  								if (row ["Status"].ToString ().Equals ("Enabled")) {  									Item.ForeColor = Color.FromArgb (30' 144' 255);  								}  								else {  									Item.ForeColor = Color.FromArgb (254' 106' 147);  								}  								switch (row ["Type"].ToString ()) {  								case "CLIENT":  									// deep gray color ..  									Item.ForeColor = Color.FromArgb (100' 100' 100);  									break;  								case "MAINTENANCE":  									// red color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (255' 0' 0);  									break;  								case "OFFLINE":  									// gray color ..  									Item.SubItems [4].Text = string.Empty;  									Item.ForeColor = Color.FromArgb (150' 150' 150);  									break;  								}  								#endregion  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										Item'  										null  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  						#region Deleted State Loop  						// get delete row(s) ..  						DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  						if (InvokeDeleteRows != null) {  							// temporary method ..  							InvokeDeleteRows.RejectChanges ();  							foreach (DataRow row in InvokeDeleteRows.Rows) {  								try {  									// invoke machine(host) list view delegate control ..  									this.Invoke (HostViewList' new object[] {  										new ListViewItem ()'  										row ["Host_Id"].ToString ()  									});  								}  								catch (InvalidOperationException) {  									// if delegate object already clean' exit loop ..  									return;  								}  							}  						}  						#endregion  					}  					finally {  						// release locked object ..  						Monitor.Exit (InvokeData);  					}  				}  			}  			// processing application all events ..  			Application.DoEvents ();  		}  		// set access state timespan ..  		Thread.Sleep (1000);  	}  }  while (true);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.Suspend.WaitOne ()) {  	if (this.IsConnected) {  		// refresh latest data ..  		DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  		if (InvokeData != null) {  			// try lock object wait for 0 second …  			if (Monitor.TryEnter (InvokeData' 0)) {  				try {  					#region Delegate Event Handler  					HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  						#region Delete Item Partial  						if (!string.IsNullOrEmpty (DeleteItemText)) {  							for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  								// processing application all events ..  								Application.DoEvents ();  								if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  									// remove item ..  									this.ListView_Host.Items [i].Remove ();  								// calculate items ..  								this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  								// refresh control ..  								this.ListView_Host.Update ();  							}  							return;  						}  						#endregion  						#region Update Item Partial  						foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  							// processing application all events ..  							Application.DoEvents ();  							if (MachineItem.Text == Item.Text) {  								if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  									return;  								// update the item of sub items ..  								for (int i = 1; i < MachineItem.SubItems.Count; i++)  									MachineItem.SubItems [i] = Item.SubItems [i];  								// apply fore color ..  								MachineItem.ForeColor = Item.ForeColor;  								return;  							}  						}  						#endregion  						// add new items to the listview control ..  						this.ListView_Host.Items.Add (Item);  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					};  					#endregion  					#region Added' Modified And Unchanged State Loop  					// get add' modified and unchanged row(s) ……  					DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  					if (InvokeRows != null) {  						foreach (DataRow row in InvokeRows.Rows) {  							// processing application all events ..  							Application.DoEvents ();  							// convert connected column value ..  							string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  							if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  								Connected = string.Empty;  							}  							string[] subitems =  {  								row ["Host_Id"].ToString ().Trim ()'  								row ["Host"].ToString ().Trim ()'  								row ["Status"].ToString ().Trim ()'  								row ["Processors"].ToString ().Trim ()'  								Connected'  								row ["Priority"].ToString ().Trim ()'  								row ["Note"].ToString ().Trim ()  							};  							ListViewItem Item = new ListViewItem (subitems);  							#region Change Item Force Color  							if (row ["Status"].ToString ().Equals ("Enabled")) {  								Item.ForeColor = Color.FromArgb (30' 144' 255);  							}  							else {  								Item.ForeColor = Color.FromArgb (254' 106' 147);  							}  							switch (row ["Type"].ToString ()) {  							case "CLIENT":  								// deep gray color ..  								Item.ForeColor = Color.FromArgb (100' 100' 100);  								break;  							case "MAINTENANCE":  								// red color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (255' 0' 0);  								break;  							case "OFFLINE":  								// gray color ..  								Item.SubItems [4].Text = string.Empty;  								Item.ForeColor = Color.FromArgb (150' 150' 150);  								break;  							}  							#endregion  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									Item'  									null  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  					#region Deleted State Loop  					// get delete row(s) ..  					DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  					if (InvokeDeleteRows != null) {  						// temporary method ..  						InvokeDeleteRows.RejectChanges ();  						foreach (DataRow row in InvokeDeleteRows.Rows) {  							try {  								// invoke machine(host) list view delegate control ..  								this.Invoke (HostViewList' new object[] {  									new ListViewItem ()'  									row ["Host_Id"].ToString ()  								});  							}  							catch (InvalidOperationException) {  								// if delegate object already clean' exit loop ..  								return;  							}  						}  					}  					#endregion  				}  				finally {  					// release locked object ..  					Monitor.Exit (InvokeData);  				}  			}  		}  		// processing application all events ..  		Application.DoEvents ();  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (this.IsConnected) {  	// refresh latest data ..  	DataTable InvokeData = this.EnvCust.DataComparison (this.EnvCust.DataListView.Tables ["Host"]' this.EnvCust.DataListView.Tables ["Host"].PrimaryKey);  	if (InvokeData != null) {  		// try lock object wait for 0 second …  		if (Monitor.TryEnter (InvokeData' 0)) {  			try {  				#region Delegate Event Handler  				HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  					#region Delete Item Partial  					if (!string.IsNullOrEmpty (DeleteItemText)) {  						for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  							// processing application all events ..  							Application.DoEvents ();  							if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  								// remove item ..  								this.ListView_Host.Items [i].Remove ();  							// calculate items ..  							this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  							// refresh control ..  							this.ListView_Host.Update ();  						}  						return;  					}  					#endregion  					#region Update Item Partial  					foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  						// processing application all events ..  						Application.DoEvents ();  						if (MachineItem.Text == Item.Text) {  							if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  								return;  							// update the item of sub items ..  							for (int i = 1; i < MachineItem.SubItems.Count; i++)  								MachineItem.SubItems [i] = Item.SubItems [i];  							// apply fore color ..  							MachineItem.ForeColor = Item.ForeColor;  							return;  						}  					}  					#endregion  					// add new items to the listview control ..  					this.ListView_Host.Items.Add (Item);  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				};  				#endregion  				#region Added' Modified And Unchanged State Loop  				// get add' modified and unchanged row(s) ……  				DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  				if (InvokeRows != null) {  					foreach (DataRow row in InvokeRows.Rows) {  						// processing application all events ..  						Application.DoEvents ();  						// convert connected column value ..  						string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  						if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  							Connected = string.Empty;  						}  						string[] subitems =  {  							row ["Host_Id"].ToString ().Trim ()'  							row ["Host"].ToString ().Trim ()'  							row ["Status"].ToString ().Trim ()'  							row ["Processors"].ToString ().Trim ()'  							Connected'  							row ["Priority"].ToString ().Trim ()'  							row ["Note"].ToString ().Trim ()  						};  						ListViewItem Item = new ListViewItem (subitems);  						#region Change Item Force Color  						if (row ["Status"].ToString ().Equals ("Enabled")) {  							Item.ForeColor = Color.FromArgb (30' 144' 255);  						}  						else {  							Item.ForeColor = Color.FromArgb (254' 106' 147);  						}  						switch (row ["Type"].ToString ()) {  						case "CLIENT":  							// deep gray color ..  							Item.ForeColor = Color.FromArgb (100' 100' 100);  							break;  						case "MAINTENANCE":  							// red color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (255' 0' 0);  							break;  						case "OFFLINE":  							// gray color ..  							Item.SubItems [4].Text = string.Empty;  							Item.ForeColor = Color.FromArgb (150' 150' 150);  							break;  						}  						#endregion  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								Item'  								null  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  				#region Deleted State Loop  				// get delete row(s) ..  				DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  				if (InvokeDeleteRows != null) {  					// temporary method ..  					InvokeDeleteRows.RejectChanges ();  					foreach (DataRow row in InvokeDeleteRows.Rows) {  						try {  							// invoke machine(host) list view delegate control ..  							this.Invoke (HostViewList' new object[] {  								new ListViewItem ()'  								row ["Host_Id"].ToString ()  							});  						}  						catch (InvalidOperationException) {  							// if delegate object already clean' exit loop ..  							return;  						}  					}  				}  				#endregion  			}  			finally {  				// release locked object ..  				Monitor.Exit (InvokeData);  			}  		}  	}  	// processing application all events ..  	Application.DoEvents ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeData != null) {  	// try lock object wait for 0 second …  	if (Monitor.TryEnter (InvokeData' 0)) {  		try {  			#region Delegate Event Handler  			HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  				#region Delete Item Partial  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  						// processing application all events ..  						Application.DoEvents ();  						if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..  							this.ListView_Host.Items [i].Remove ();  						// calculate items ..  						this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  						// refresh control ..  						this.ListView_Host.Update ();  					}  					return;  				}  				#endregion  				#region Update Item Partial  				foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  					// processing application all events ..  					Application.DoEvents ();  					if (MachineItem.Text == Item.Text) {  						if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  							return;  						// update the item of sub items ..  						for (int i = 1; i < MachineItem.SubItems.Count; i++)  							MachineItem.SubItems [i] = Item.SubItems [i];  						// apply fore color ..  						MachineItem.ForeColor = Item.ForeColor;  						return;  					}  				}  				#endregion  				// add new items to the listview control ..  				this.ListView_Host.Items.Add (Item);  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			};  			#endregion  			#region Added' Modified And Unchanged State Loop  			// get add' modified and unchanged row(s) ……  			DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  			if (InvokeRows != null) {  				foreach (DataRow row in InvokeRows.Rows) {  					// processing application all events ..  					Application.DoEvents ();  					// convert connected column value ..  					string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  					if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  						Connected = string.Empty;  					}  					string[] subitems =  {  						row ["Host_Id"].ToString ().Trim ()'  						row ["Host"].ToString ().Trim ()'  						row ["Status"].ToString ().Trim ()'  						row ["Processors"].ToString ().Trim ()'  						Connected'  						row ["Priority"].ToString ().Trim ()'  						row ["Note"].ToString ().Trim ()  					};  					ListViewItem Item = new ListViewItem (subitems);  					#region Change Item Force Color  					if (row ["Status"].ToString ().Equals ("Enabled")) {  						Item.ForeColor = Color.FromArgb (30' 144' 255);  					}  					else {  						Item.ForeColor = Color.FromArgb (254' 106' 147);  					}  					switch (row ["Type"].ToString ()) {  					case "CLIENT":  						// deep gray color ..  						Item.ForeColor = Color.FromArgb (100' 100' 100);  						break;  					case "MAINTENANCE":  						// red color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (255' 0' 0);  						break;  					case "OFFLINE":  						// gray color ..  						Item.SubItems [4].Text = string.Empty;  						Item.ForeColor = Color.FromArgb (150' 150' 150);  						break;  					}  					#endregion  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							Item'  							null  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  			#region Deleted State Loop  			// get delete row(s) ..  			DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  			if (InvokeDeleteRows != null) {  				// temporary method ..  				InvokeDeleteRows.RejectChanges ();  				foreach (DataRow row in InvokeDeleteRows.Rows) {  					try {  						// invoke machine(host) list view delegate control ..  						this.Invoke (HostViewList' new object[] {  							new ListViewItem ()'  							row ["Host_Id"].ToString ()  						});  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..  						return;  					}  				}  			}  			#endregion  		}  		finally {  			// release locked object ..  			Monitor.Exit (InvokeData);  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (Monitor.TryEnter (InvokeData' 0)) {  	try {  		#region Delegate Event Handler  		HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Host.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  					// refresh control ..  					this.ListView_Host.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  				// processing application all events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// apply fore color ..  					MachineItem.ForeColor = Item.ForeColor;  					return;  				}  			}  			#endregion  			// add new items to the listview control ..  			this.ListView_Host.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  			// refresh control ..  			this.ListView_Host.Update ();  		};  		#endregion  		#region Added' Modified And Unchanged State Loop  		// get add' modified and unchanged row(s) ……  		DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  		if (InvokeRows != null) {  			foreach (DataRow row in InvokeRows.Rows) {  				// processing application all events ..  				Application.DoEvents ();  				// convert connected column value ..  				string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  				if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  					Connected = string.Empty;  				}  				string[] subitems =  {  					row ["Host_Id"].ToString ().Trim ()'  					row ["Host"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Processors"].ToString ().Trim ()'  					Connected'  					row ["Priority"].ToString ().Trim ()'  					row ["Note"].ToString ().Trim ()  				};  				ListViewItem Item = new ListViewItem (subitems);  				#region Change Item Force Color  				if (row ["Status"].ToString ().Equals ("Enabled")) {  					Item.ForeColor = Color.FromArgb (30' 144' 255);  				}  				else {  					Item.ForeColor = Color.FromArgb (254' 106' 147);  				}  				switch (row ["Type"].ToString ()) {  				case "CLIENT":  					// deep gray color ..  					Item.ForeColor = Color.FromArgb (100' 100' 100);  					break;  				case "MAINTENANCE":  					// red color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (255' 0' 0);  					break;  				case "OFFLINE":  					// gray color ..  					Item.SubItems [4].Text = string.Empty;  					Item.ForeColor = Color.FromArgb (150' 150' 150);  					break;  				}  				#endregion  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						Item'  						null  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  		#region Deleted State Loop  		// get delete row(s) ..  		DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  		if (InvokeDeleteRows != null) {  			// temporary method ..  			InvokeDeleteRows.RejectChanges ();  			foreach (DataRow row in InvokeDeleteRows.Rows) {  				try {  					// invoke machine(host) list view delegate control ..  					this.Invoke (HostViewList' new object[] {  						new ListViewItem ()'  						row ["Host_Id"].ToString ()  					});  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..  					return;  				}  			}  		}  		#endregion  	}  	finally {  		// release locked object ..  		Monitor.Exit (InvokeData);  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: try {  	#region Delegate Event Handler  	HostListViewCallBack HostViewList = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Host.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  				// refresh control ..  				this.ListView_Host.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  			// processing application all events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// apply fore color ..  				MachineItem.ForeColor = Item.ForeColor;  				return;  			}  		}  		#endregion  		// add new items to the listview control ..  		this.ListView_Host.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	};  	#endregion  	#region Added' Modified And Unchanged State Loop  	// get add' modified and unchanged row(s) ……  	DataTable InvokeRows = InvokeData.GetChanges (DataRowState.Added | DataRowState.Modified | DataRowState.Unchanged);  	if (InvokeRows != null) {  		foreach (DataRow row in InvokeRows.Rows) {  			// processing application all events ..  			Application.DoEvents ();  			// convert connected column value ..  			string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  			if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  				Connected = string.Empty;  			}  			string[] subitems =  {  				row ["Host_Id"].ToString ().Trim ()'  				row ["Host"].ToString ().Trim ()'  				row ["Status"].ToString ().Trim ()'  				row ["Processors"].ToString ().Trim ()'  				Connected'  				row ["Priority"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()  			};  			ListViewItem Item = new ListViewItem (subitems);  			#region Change Item Force Color  			if (row ["Status"].ToString ().Equals ("Enabled")) {  				Item.ForeColor = Color.FromArgb (30' 144' 255);  			}  			else {  				Item.ForeColor = Color.FromArgb (254' 106' 147);  			}  			switch (row ["Type"].ToString ()) {  			case "CLIENT":  				// deep gray color ..  				Item.ForeColor = Color.FromArgb (100' 100' 100);  				break;  			case "MAINTENANCE":  				// red color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (255' 0' 0);  				break;  			case "OFFLINE":  				// gray color ..  				Item.SubItems [4].Text = string.Empty;  				Item.ForeColor = Color.FromArgb (150' 150' 150);  				break;  			}  			#endregion  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					Item'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  	#region Deleted State Loop  	// get delete row(s) ..  	DataTable InvokeDeleteRows = InvokeData.GetChanges (DataRowState.Deleted);  	if (InvokeDeleteRows != null) {  		// temporary method ..  		InvokeDeleteRows.RejectChanges ();  		foreach (DataRow row in InvokeDeleteRows.Rows) {  			try {  				// invoke machine(host) list view delegate control ..  				this.Invoke (HostViewList' new object[] {  					new ListViewItem ()'  					row ["Host_Id"].ToString ()  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already clean' exit loop ..  				return;  			}  		}  	}  	#endregion  }  finally {  	// release locked object ..  	Monitor.Exit (InvokeData);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  			// remove item ..  			this.ListView_Host.Items [i].Remove ();  		// calculate items ..  		this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  		// refresh control ..  		this.ListView_Host.Update ();  	}  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: for (int i = 0; i < this.ListView_Host.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Host.Items [i].SubItems [0].Text == DeleteItemText)  		// remove item ..  		this.ListView_Host.Items [i].Remove ();  	// calculate items ..  	this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  	// refresh control ..  	this.ListView_Host.Update ();  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Host.Items) {  	// processing application all events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// apply fore color ..  		MachineItem.ForeColor = Item.ForeColor;  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// apply fore color ..  	MachineItem.ForeColor = Item.ForeColor;  	return;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (MachineItem.SubItems [1].Text == Item.SubItems [1].Text && MachineItem.SubItems [2].Text == Item.SubItems [2].Text && MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text)  	return;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: this.GroupBox_Host.Text = this.ListViewText [2] + string.Format (" ({0})"' this.ListView_Host.Items.Count.ToString ());  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (InvokeRows != null) {  	foreach (DataRow row in InvokeRows.Rows) {  		// processing application all events ..  		Application.DoEvents ();  		// convert connected column value ..  		string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  		if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  			Connected = string.Empty;  		}  		string[] subitems =  {  			row ["Host_Id"].ToString ().Trim ()'  			row ["Host"].ToString ().Trim ()'  			row ["Status"].ToString ().Trim ()'  			row ["Processors"].ToString ().Trim ()'  			Connected'  			row ["Priority"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()  		};  		ListViewItem Item = new ListViewItem (subitems);  		#region Change Item Force Color  		if (row ["Status"].ToString ().Equals ("Enabled")) {  			Item.ForeColor = Color.FromArgb (30' 144' 255);  		}  		else {  			Item.ForeColor = Color.FromArgb (254' 106' 147);  		}  		switch (row ["Type"].ToString ()) {  		case "CLIENT":  			// deep gray color ..  			Item.ForeColor = Color.FromArgb (100' 100' 100);  			break;  		case "MAINTENANCE":  			// red color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (255' 0' 0);  			break;  		case "OFFLINE":  			// gray color ..  			Item.SubItems [4].Text = string.Empty;  			Item.ForeColor = Color.FromArgb (150' 150' 150);  			break;  		}  		#endregion  		try {  			// invoke machine(host) list view delegate control ..  			this.Invoke (HostViewList' new object[] {  				Item'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already clean' exit loop ..  			return;  		}  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: foreach (DataRow row in InvokeRows.Rows) {  	// processing application all events ..  	Application.DoEvents ();  	// convert connected column value ..  	string Connected = this.EnvSvr.DateTimeInterval (DateTime.Now' Convert.ToDateTime (row ["Connected_Time"]));  	if (row ["Status"].ToString ().Trim ().Equals ("Disabled")) {  		Connected = string.Empty;  	}  	string[] subitems =  {  		row ["Host_Id"].ToString ().Trim ()'  		row ["Host"].ToString ().Trim ()'  		row ["Status"].ToString ().Trim ()'  		row ["Processors"].ToString ().Trim ()'  		Connected'  		row ["Priority"].ToString ().Trim ()'  		row ["Note"].ToString ().Trim ()  	};  	ListViewItem Item = new ListViewItem (subitems);  	#region Change Item Force Color  	if (row ["Status"].ToString ().Equals ("Enabled")) {  		Item.ForeColor = Color.FromArgb (30' 144' 255);  	}  	else {  		Item.ForeColor = Color.FromArgb (254' 106' 147);  	}  	switch (row ["Type"].ToString ()) {  	case "CLIENT":  		// deep gray color ..  		Item.ForeColor = Color.FromArgb (100' 100' 100);  		break;  	case "MAINTENANCE":  		// red color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (255' 0' 0);  		break;  	case "OFFLINE":  		// gray color ..  		Item.SubItems [4].Text = string.Empty;  		Item.ForeColor = Color.FromArgb (150' 150' 150);  		break;  	}  	#endregion  	try {  		// invoke machine(host) list view delegate control ..  		this.Invoke (HostViewList' new object[] {  			Item'  			null  		});  	}  	catch (InvalidOperationException) {  		// if delegate object already clean' exit loop ..  		return;  	}  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: if (row ["Status"].ToString ().Equals ("Enabled")) {  	Item.ForeColor = Color.FromArgb (30' 144' 255);  }  else {  	Item.ForeColor = Color.FromArgb (254' 106' 147);  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (30' 144' 255);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (30' 144' 255);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (30' 144' 255);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (254' 106' 147);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (254' 106' 147);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (254' 106' 147);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (100' 100' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (100' 100' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (100' 100' 100);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.SubItems [4].Text = string.Empty;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (255' 0' 0);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.SubItems [4].Text = string.Empty;  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (150' 150' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (150' 150' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Item.ForeColor = Color.FromArgb (150' 150' 150);  
Magic Number,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Button_Ok_Click,The following statement contains a magic number: foreach (string s in this.DataList)//可批量設定？？？？？？？？   {  	// send request to remote server ..  	KeyValuePair<string' object> responseObject;  	//  	IDictionary<string' object> Item = new Dictionary<string' object> ();  	//  	switch (this.CommType) {  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		//Item.Add("Machine_Id"' s);  		Item.Add ("Machine_Id"' s);  		Item.Add ("Priority"' this.Numeric_Priority_Value.Value);  		break;  	case Client2Server.CommunicationType.JOBPRIORITY:  		//Item.Add("Job_Group_Id"' s);  		Item.Add ("Job_Group_Id"' s);  		Item.Add ("Priority"' this.Numeric_Priority_Value.Value);  		break;  	}  	//設定優先級  	do {  		// confirm current request status ..  		if (EnvComm.CanRequest) {  			// package sent data ..  			IList<object> packaged = EnvComm.Package (this.CommType' Item);  			// wait for result ...  			responseObject = EnvComm.Request (packaged);  			break;  		}  		Thread.Sleep (500);  	}  	while (true);  	if (responseObject.Key.Substring (0' 1) == "+") {  		result = true;  	}  	else {  		result = false;  	}  }  
Magic Number,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Button_Ok_Click,The following statement contains a magic number: do {  	// confirm current request status ..  	if (EnvComm.CanRequest) {  		// package sent data ..  		IList<object> packaged = EnvComm.Package (this.CommType' Item);  		// wait for result ...  		responseObject = EnvComm.Request (packaged);  		break;  	}  	Thread.Sleep (500);  }  while (true);  
Magic Number,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Button_Ok_Click,The following statement contains a magic number: Thread.Sleep (500);  
Missing Default,RenbarLib.Environment.Forms.Customizations.Service,Communication,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Communication.cs,Package,The following switch statement is missing a default case: switch (Type) {  #region Machine Info Cases Workflow  // add' update machine data ..  case Client2Server.CommunicationType.MACHINEINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.MACHINEINFO' Data);  	break;  // setting enable or disable machine status ..  case Client2Server.CommunicationType.ONOFFMACHINE:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.ONOFFMACHINE' Data);  	break;  // setting machine priority ..  case Client2Server.CommunicationType.MACHINEPRIORITY:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.MACHINEPRIORITY' Data);  	break;  // delete machine data ..  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.DELETEMACHINEINFO' Data);  	break;  // get current machine status information ..  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWMACHINEINFO' Data);  	break;  // get current machine render status information ..  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWMACHINERENDERINFO' Data);  	break;  #endregion  #region Machine Pool Relation Workflow  // setting machine pool relation ..  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.MACHINEPOOLRELATION' Data);  	break;  // get currently machine pool relation ..  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION' Data);  	break;  #endregion  #region Pool Info Cases Workflow  // add' update pool data ..  case Client2Server.CommunicationType.POOLINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.POOLINFO' Data);  	break;  // delete pool data ..  case Client2Server.CommunicationType.DELETEPOOLINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.DELETEPOOLINFO' Data);  	break;  // get current pool status information ..  case Client2Server.CommunicationType.VIEWPOOLINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWPOOLINFO' Data);  	break;  #endregion  #region Job Info Cases Workflow  // add' update pool data ..  case Client2Server.CommunicationType.JOBPRIORITY:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBPRIORITY' Data);  	break;  // add job data ..  case Client2Server.CommunicationType.JOBQUEUEADD:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBQUEUEADD' Data);  	break;  // delete job data ..  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBQUEUEDELETE' Data);  	break;  // pause current queue jobs ..  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBQUEUEPAUSE' Data);  	break;  // repeat job data ..  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBQUEUEREPEAT' Data);  	break;  // update job data ..  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBQUEUEUPDATE' Data);  	break;  // get current processing job output ..  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWJOBOUTPUT' Data);  	break;  // get current job status information ..  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWJOBSTATUS' Data);  	break;  // get job info by id  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.VIEWSINGLEJOBINFO' Data);  	break;  // update job data ..  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	// package communication type data ..  	result = ClientObject.Package (Client2Server.CommunicationType.JOBHISTORYRECORD' Data);  	break;  #endregion  }  
Missing Default,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,GetLocalization,The following switch statement is missing a default case: switch (Lang) {  case Language.En_Us:  	langresource = "en_us__" + FormName + "_" + ResourceName;  	//ResourceManager取得指定之文化特性或隱含之目前 UI 文化特性的指定 String 資源  	result = global::RenbarGUI.Properties.Resources.ResourceManager.GetString (langresource);  	break;  case Language.Zh_Tw:  	langresource = "zh_tw__" + FormName + "_" + ResourceName;  	result = global::RenbarGUI.Properties.Resources.ResourceManager.GetString (langresource);  	break;  }  
Missing Default,RenbarLib.Environment.Forms.Customizations.Service,Customization,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Customization.cs,Parse,The following switch statement is missing a default case: switch (info.Extension.ToLower ()) {  #region Parse Renbar File Format  case ".rbr":  	// confirm is batch file ..  	using (XmlReader xdr = XmlTextReader.Create (ParseFile)) {  		while (xdr.Read ()) {  			if (xdr.HasAttributes)  				__doc++;  		}  	}  	if (__doc <= 2) {  		if (fs.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  #region Parse Smedge File Format  case ".smr":  	using (StreamReader sdr = new StreamReader (ParseFile)) {  		string line = string.Empty;  		while (!string.IsNullOrEmpty (line = sdr.ReadLine ())) {  			if (line.IndexOf ('[') > -1 && line.IndexOf (']') > -1)  				__doc++;  		}  	}  	if (__doc == 1) {  		if (fs.Convert (FileSystem.RenderFileType.Smr' FileSystem.RenderMethod.Gui' ParseFile' ref Items))  			result = 0;  	}  	else  		result = 2;  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,About_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\About_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// About Form ..  	this.Text = string.Format (EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.ProductInfo);  	// Product Label ..  	this.Label_ProductName.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_ProductName.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.ProductInfo);  	// Version Label ..  	this.Label_Version.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Version.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.VersionInfo);  	// Copyright Label ..  	this.Label_Copyright.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Copyright.Name' Customization.Language.En_Us) + " {0}"' AssemblyInfoClass.CopyrightInfo);  	// Link Label ..  	this.LinkLabel_Help.Text = EnvCust.GetLocalization (this.Name' this.LinkLabel_Help.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// About Form ..  	this.Text = string.Format (EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.ProductInfo);  	// Product Label ..  	this.Label_ProductName.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_ProductName.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.ProductInfo);  	// Version Label ..  	this.Label_Version.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Version.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.VersionInfo);  	// Copyright Label ..  	this.Label_Copyright.Text = String.Format (EnvCust.GetLocalization (this.Name' this.Label_Copyright.Name' Customization.Language.Zh_Tw) + " {0}"' AssemblyInfoClass.CopyrightInfo);  	// Link Label ..  	this.LinkLabel_Help.Text = EnvCust.GetLocalization (this.Name' this.LinkLabel_Help.Name' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,ChangeUser_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\ChangeUser_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// ChangeUser Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// User Group Box ..  	this.GroupBox_User.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_User.Name' Customization.Language.En_Us);  	// Id Label ..  	this.Label_Id.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Id.Name' Customization.Language.En_Us);  	// Password Label ..  	this.Label_Pwd.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pwd.Name' Customization.Language.En_Us);  	// OK Button ..  	this.Button_OK.Text = this.EnvCust.GetLocalization (this.Name' this.Button_OK.Name' Customization.Language.En_Us);  	// Success Changed String ..  	SuccessMessage = this.EnvCust.GetLocalization (this.Name' "Success_String"' Customization.Language.En_Us);  	// Fail Changed String ..  	FailMessage = this.EnvCust.GetLocalization (this.Name' "Fail_String"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// ChangeUser Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// User Group Box ..  	this.GroupBox_User.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_User.Name' Customization.Language.Zh_Tw);  	// Id Label ..  	this.Label_Id.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Id.Name' Customization.Language.Zh_Tw);  	// Password Label ..  	this.Label_Pwd.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pwd.Name' Customization.Language.Zh_Tw);  	// OK Button ..  	this.Button_OK.Text = this.EnvCust.GetLocalization (this.Name' this.Button_OK.Name' Customization.Language.Zh_Tw);  	// Success Changed String ..  	SuccessMessage = this.EnvCust.GetLocalization (this.Name' "Success_String"' Customization.Language.Zh_Tw);  	// Fail Changed String ..  	FailMessage = this.EnvCust.GetLocalization (this.Name' "Fail_String"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Console_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Console_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// Console Form ..  	this.Text = EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// Output GroupBox ..  	this.GroupBox_Output.Text = EnvCust.GetLocalization (this.Name' this.GroupBox_Output.Name' Customization.Language.En_Us);  	// Pause Button ..  	this.Button_Pause.Text = EnvCust.GetLocalization (this.Name' this.Button_Pause.Name' Customization.Language.En_Us);  	// Resume Text Message ..  	ResumeMessage = this.EnvCust.GetLocalization (this.Name' this.Button_Pause.Name + "_Resume"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// Console Form ..  	this.Text = EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// Output GroupBox ..  	this.GroupBox_Output.Text = EnvCust.GetLocalization (this.Name' this.GroupBox_Output.Name' Customization.Language.Zh_Tw);  	// Pause Button ..  	this.Button_Pause.Text = EnvCust.GetLocalization (this.Name' this.Button_Pause.Name' Customization.Language.Zh_Tw);  	// Resume Text Message ..  	ResumeMessage = this.EnvCust.GetLocalization (this.Name' this.Button_Pause.Name + "_Resume"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,HistoryForm,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\HistoryForm.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.En_Us)' 200);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Acct"' Customization.Language.En_Us)' 100);  	//this.ListView_History.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_History.Name + "_Submit_Time"' Customization.Language.En_Us)' 150);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.En_Us)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.En_Us);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.En_Us);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.En_Us);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.En_Us);  	// ToolStripMenuItem  	//this.MenuItem_ViewJobDetail.Text = this.EnvCust.GetLocalization(this.Name' this.MenuItem_ViewJobDetail.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// List View   	this.ListView_History.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0); #else  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Job_Group_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Name"' Customization.Language.Zh_Tw)' 200);  	this.ListView_History.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_History.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	// Button  	this.Button_Refresh.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Refresh.Name' Customization.Language.Zh_Tw);  	this.Button_Close.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Close.Name' Customization.Language.Zh_Tw);  	// Lables  	this.label_MaxRecords.Text = this.EnvCust.GetLocalization (this.Name' this.label_MaxRecords.Name' Customization.Language.Zh_Tw);  	this.DataDeletedError = this.EnvCust.GetLocalization (this.Name' "Data_Deleted_Err"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// Job Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// Job Properties GroupBox ..  	this.GroupBox_Job_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Job_Properties.Name' Customization.Language.En_Us);  	// Job Project Label ..  	this.Label_Job_Project.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Project.Name' Customization.Language.En_Us);  	// Job Name Label ..  	this.Label_Job_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Name.Name' Customization.Language.En_Us);  	// Command Label ..  	this.Label_Command.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Command.Name' Customization.Language.En_Us);  	// Start Label ..  	this.Label_Start.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Start.Name' Customization.Language.En_Us);  	// End Label ..  	this.Label_End.Text = this.EnvCust.GetLocalization (this.Name' this.Label_End.Name' Customization.Language.En_Us);  	// Packet Size Label ..  	this.Label_Packet_Size.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Packet_Size.Name' Customization.Language.En_Us);  	// Submit Type Label ..  	this.Label_Submit_Type.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Submit_Type.Name' Customization.Language.En_Us);  	// Processor RadioButton ..  	this.RadioButton_Processor.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Processor.Name' Customization.Language.En_Us);  	// Client RadioButton ..  	this.RadioButton_Client.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Client.Name' Customization.Language.En_Us);  	// First Pool Label ..  	this.Label_First_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_First_Pool.Name' Customization.Language.En_Us);  	// Second Pool Label ..  	this.Label_Second_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Second_Pool.Name' Customization.Language.En_Us);  	// Wait For Label ..  	this.Label_Wait_For.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Wait_For.Name' Customization.Language.En_Us);  	// Note Label ..  	this.Label_Note.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Note.Name' Customization.Language.En_Us);  	// Priority Label ..  	this.Label_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority.Name' Customization.Language.En_Us);  	// Display Linklabel ..  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  	// Alienbrain Properties GorupBox ..  	this.GroupBox_AB_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_AB_Properties.Name' Customization.Language.En_Us);  	// Alienbrain Name Label ..  	this.Label_AB_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Name.Name' Customization.Language.En_Us);  	// Alienbrain Node Path Lable ..  	this.Label_AB_Path.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Path.Name' Customization.Language.En_Us);  	// Update Files Only CheckBox ..  	this.CheckBox_Update_Only.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Update_Only.Name' Customization.Language.En_Us);  	// Load Button ..  	this.Button_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Load.Name' Customization.Language.En_Us);  	// Update Button…  	this.Button_Update.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update.Name' Customization.Language.En_Us);  	// Reset Button ..  	this.Button_Clear.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Clear.Name' Customization.Language.En_Us);  	// Submit Button ..  	this.Button_Submit.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Submit.Name' Customization.Language.En_Us);  	// Submit Job Error Message String ..  	this.__sendjob_error = this.EnvCust.GetLocalization (this.Name' "Submit_Err"' Customization.Language.En_Us);  	// Load Init data Error Message String……   	this.__Init_error = this.EnvCust.GetLocalization (this.Name' "Init_Err"' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.__parse_error = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Requirement Error Message ..  	this.__requirement_error = this.EnvCust.GetLocalization (this.Name' "Requirement_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.__parse_mulit_error = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	// Backup File Warning Message ..  	this.__backup_file_warning = this.EnvCust.GetLocalization (this.Name' "Backup_Warning"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// Job Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// Job Properties GroupBox ..  	this.GroupBox_Job_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Job_Properties.Name' Customization.Language.Zh_Tw);  	// Job Project Label ..  	this.Label_Job_Project.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Project.Name' Customization.Language.Zh_Tw);  	// Job Name Label ..  	this.Label_Job_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Job_Name.Name' Customization.Language.Zh_Tw);  	// Command Label ..  	this.Label_Command.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Command.Name' Customization.Language.Zh_Tw);  	// Start Label ..  	this.Label_Start.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Start.Name' Customization.Language.Zh_Tw);  	// End Label ..  	this.Label_End.Text = this.EnvCust.GetLocalization (this.Name' this.Label_End.Name' Customization.Language.Zh_Tw);  	// Packet Size Label ..  	this.Label_Packet_Size.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Packet_Size.Name' Customization.Language.Zh_Tw);  	// Submit Type Label ..  	this.Label_Submit_Type.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Submit_Type.Name' Customization.Language.Zh_Tw);  	// Processor RadioButton ..  	this.RadioButton_Processor.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Processor.Name' Customization.Language.Zh_Tw);  	// Client RadioButton ..  	this.RadioButton_Client.Text = this.EnvCust.GetLocalization (this.Name' this.RadioButton_Client.Name' Customization.Language.Zh_Tw);  	// First Pool Label ..  	this.Label_First_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_First_Pool.Name' Customization.Language.Zh_Tw);  	// Second Pool Label ..  	this.Label_Second_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Second_Pool.Name' Customization.Language.Zh_Tw);  	// Wait For Label ..  	this.Label_Wait_For.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Wait_For.Name' Customization.Language.Zh_Tw);  	// Note Label ..  	this.Label_Note.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Note.Name' Customization.Language.Zh_Tw);  	// Priority Label ..  	this.Label_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority.Name' Customization.Language.Zh_Tw);  	// Display Linklabel ..  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  	// Alienbrain Properties GorupBox ..  	this.GroupBox_AB_Properties.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_AB_Properties.Name' Customization.Language.Zh_Tw);  	// Alienbrain Name Label ..  	this.Label_AB_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Name.Name' Customization.Language.Zh_Tw);  	// Alienbrain Node Path Lable ..  	this.Label_AB_Path.Text = this.EnvCust.GetLocalization (this.Name' this.Label_AB_Path.Name' Customization.Language.Zh_Tw);  	// Update Files Only CheckBox ..  	this.CheckBox_Update_Only.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Update_Only.Name' Customization.Language.Zh_Tw);  	// Load Button ..  	this.Button_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Load.Name' Customization.Language.Zh_Tw);  	// Update Button…  	this.Button_Update.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update.Name' Customization.Language.Zh_Tw);  	// Reset Button ..  	this.Button_Clear.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Clear.Name' Customization.Language.Zh_Tw);  	// Submit Button ..  	this.Button_Submit.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Submit.Name' Customization.Language.Zh_Tw);  	// Submit Job Error Message String ..  	this.__sendjob_error = this.EnvCust.GetLocalization (this.Name' "Submit_Err"' Customization.Language.Zh_Tw);  	// Load Init data Error Message String……   	this.__Init_error = this.EnvCust.GetLocalization (this.Name' "Init_Err"' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.__parse_error = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Requirement Error Message ..  	this.__requirement_error = this.EnvCust.GetLocalization (this.Name' "Requirement_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.__parse_mulit_error = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	// Backup File Warning Message ..  	this.__backup_file_warning = this.EnvCust.GetLocalization (this.Name' "Backup_Warning"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following switch statement is missing a default case: switch (EnvSetting.Lang) {  case Customization.Language.En_Us:  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.En_Us);  	break;  case Customization.Language.Zh_Tw:  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Hide"' Customization.Language.Zh_Tw);  	break;  }  
Missing Default,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,LinkLabel_Display_LinkClicked,The following switch statement is missing a default case: switch (EnvSetting.Lang) {  case Customization.Language.En_Us:  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.En_Us);  	break;  case Customization.Language.Zh_Tw:  	this.LinkLabel_Display.Text = this.EnvCust.GetLocalization (this.Name' this.LinkLabel_Display.Name + "_Show"' Customization.Language.Zh_Tw);  	break;  }  
Missing Default,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Connect,The following switch statement is missing a default case: switch (Action) {  case SubmitAction.Add:  	// assign new status ..  	if (!QueueItem.ContainsKey ("Status")) {  		QueueItem.Add ("Status"' (UInt16)JobStatusFlag.QUEUING);  	}  	//  打包物件 package sent data type ..  	packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEADD' QueueItem);  	break;  case SubmitAction.Update:  	if (!QueueItem.ContainsKey ("Job_Group_Id")) {  		QueueItem.Add ("Job_Group_Id"' this.Update_Job_Group_Id);  	}  	// package sent data type ..  	packaged = this.EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEUPDATE' QueueItem);  	break;  }  
Missing Default,RenbarGUI.Forms,Job_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Job_Form.cs,Button_Load_Click,The following switch statement is missing a default case: switch (_p) {  //成功：結果存入引用地址中、清空原始數據、顯示新數據  case 0:  	// clear old data control ..  	this.Button_Clear_Click (null' null);  	// assign backup filename path ..  	this.BackupFilename = LoadFile.FileName;  	//？？？？？？？？？備份？？？？？？？？？？？？？？？？？？？？？？？  	// assign control value ..  	this.AssignValues ();  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.__parse_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.__parse_mulit_error' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Main_Load,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	this.Menu_Settings_Lang_Eng.Checked = true;  	break;  case Customization.Language.Zh_Tw:  	this.Menu_Settings_Lang_Cht.Checked = true;  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Language,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	this.Queue_Job_Pause = "Pause Job ";  	this.Queue_Job_Resume = "Resume Job ";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.En_Us);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.En_Us);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.En_Us);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.En_Us);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.En_Us);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.En_Us);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.En_Us);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.En_Us);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.En_Us);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.En_Us);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.En_Us);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.En_Us);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.En_Us);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.En_Us);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.En_Us);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.En_Us);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.En_Us);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.En_Us);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.En_Us);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.En_Us);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.En_Us)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.En_Us)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.En_Us)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.En_Us);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.En_Us);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.En_Us)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.En_Us)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.En_Us)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.En_Us)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.En_Us)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.En_Us);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.En_Us);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.En_Us);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.En_Us);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.En_Us);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.En_Us);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.En_Us)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.En_Us)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.En_Us)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.En_Us)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.En_Us);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.En_Us);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.En_Us);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.En_Us);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.En_Us);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.En_Us);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.En_Us);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	this.Queue_Job_Pause = "暫停工作";  	this.Queue_Job_Resume = "啟動工作";  	// Form Close Text String ..  	this.AppCloseMessage = this.EnvCust.GetLocalization (this.Name' this.Name + "_Closing_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Title ..  	this.ClientNotify.BalloonTipTitle = this.EnvCust.GetLocalization (this.Name' "Notify_Title_String"' Customization.Language.Zh_Tw);  	// Balloon Tip Text ..  	this.ClientNotify.BalloonTipText = this.EnvCust.GetLocalization (this.Name' "Notify_Text_String"' Customization.Language.Zh_Tw);  	// Menu Bar About ..  	this.Menu_About.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_About.Name' Customization.Language.Zh_Tw);  	// Menu Bar Queue ..  	this.Menu_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Exit.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Exit.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Queue ..  	this.Menu_Queue_Job_History.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_History.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_Load.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_Load.Name' Customization.Language.Zh_Tw);  	this.Menu_Queue_Job_New.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Queue_Job_New.Name' Customization.Language.Zh_Tw);  	// Parse Job File Error Message ..  	this.ParseFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "Parse_FileFormat_Err"' Customization.Language.Zh_Tw);  	// Parse Mulit File Error Message ..  	this.MulitFileErrMessage = this.EnvCust.GetLocalization (string.Empty' "ParseFile_Multi_Err"' Customization.Language.Zh_Tw);  	//the connect status message  	//this.ServerConnectingMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectingMes"' Customization.Language.Zh_Tw);  	//this.ServerConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerConnectedMes"' Customization.Language.Zh_Tw);  	//this.ServerDisConnectedMes = this.EnvCust.GetLocalization(this.Name' "ServerDisConnectedMes"' Customization.Language.Zh_Tw);  	// Menu Bar Settings ..  	this.Menu_Settings.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings.Name' Customization.Language.Zh_Tw);  	// Menu Bar Sub-Settings ..  	this.Menu_Settings_ChangeUser.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_ChangeUser.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_PoolMgr.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_PoolMgr.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Record_Option.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Record_Option.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Network.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Network.Name' Customization.Language.Zh_Tw);  	// Menu Bar Language Sub-Settings ..  	this.Menu_Settings_Lang.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Cht.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Cht.Name' Customization.Language.Zh_Tw);  	this.Menu_Settings_Lang_Eng.Text = this.EnvCust.GetLocalization (this.Name' this.Menu_Settings_Lang_Eng.Name' Customization.Language.Zh_Tw);  	// Group Box Process ..  	this.GroupBox_Process.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Process.Name' Customization.Language.Zh_Tw);  	// List View Process ..  	this.ListView_Process.Columns.Clear ();  	#if Debug  	                    this.ListView_Process.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Job"' Customization.Language.Zh_Tw)' 200);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Host"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Process.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Process.Name + "_Elpased"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Process ..  	this.Proc_View_Output.Text = this.EnvCust.GetLocalization (this.Name' this.Proc_View_Output.Name' Customization.Language.Zh_Tw);  	// Group Box Queue ..  	this.GroupBox_Queue.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Queue.Name' Customization.Language.Zh_Tw);  	// List View Queue ..  	this.ListView_Queue.Columns.Clear ();  	#if Debug  	                    this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 100);                     this.ListView_Queue.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80); #else  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Status"' Customization.Language.Zh_Tw)' 80);  	#endif  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Progress"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_ProcessType"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Project"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Job"' Customization.Language.Zh_Tw)' 120);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Frames"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_First_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Second_Pool"' Customization.Language.Zh_Tw)' 80);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_User"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Submited_Time"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Queue.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Queue.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Context Menu Queue ..  	this.Queue_Update_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Update_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Delete_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Delete_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_Repeat_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_Repeat_Job.Name' Customization.Language.Zh_Tw);  	this.Queue_SetPriority_Job.Text = this.EnvCust.GetLocalization (this.Name' this.Queue_SetPriority_Job.Name' Customization.Language.Zh_Tw);  	// Delete Job Error Message ..  	this.DeleteJobErrMessage = this.EnvCust.GetLocalization (this.Name' "Delete_Job_Err"' Customization.Language.Zh_Tw);  	// Group Box Host ..  	this.GroupBox_Host.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Host.Name' Customization.Language.Zh_Tw);  	// List View Host ..  	this.ListView_Host.Columns.Clear ();  	#if Debug  	                    this.ListView_Host.Columns.Add(this.EnvCust.GetLocalization(this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 100); #else  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Id"' Customization.Language.Zh_Tw)' 0);  	#endif  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Host"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Status"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Processors"' Customization.Language.Zh_Tw)' 150);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Connected"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Priority"' Customization.Language.Zh_Tw)' 100);  	this.ListView_Host.Columns.Add (this.EnvCust.GetLocalization (this.Name' this.ListView_Host.Name + "_Note"' Customization.Language.Zh_Tw)' 100);  	// Notification ..  	this.Notification_Title = this.EnvCust.GetLocalization (this.Name' "Notification"' Customization.Language.Zh_Tw);  	this.Notification_Completed = this.EnvCust.GetLocalization (this.Name' "Notification_Completed"' Customization.Language.Zh_Tw);  	this.Notification_Error = this.EnvCust.GetLocalization (this.Name' "Notification_Error"' Customization.Language.Zh_Tw);  	// Context Menu Host ..  	this.Host_Add_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name' Customization.Language.Zh_Tw);  	this.AddMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Add_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Remove_Machine.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name' Customization.Language.Zh_Tw);  	this.RemoveMachinesErrMessage = this.EnvCust.GetLocalization (this.Name' this.Host_Remove_Machine.Name + "_Err"' Customization.Language.Zh_Tw);  	this.Host_Setting_Priority.Text = this.EnvCust.GetLocalization (this.Name' this.Host_Setting_Priority.Name' Customization.Language.Zh_Tw);  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + txtInfo.ToTitleCase (Environment.UserName);  	// Due Date ..  	this.DueDateMessage = this.EnvCust.GetLocalization (this.Name' "DueDate_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Queue_Job_Load_Click,The following switch statement is missing a default case: switch (_p) {  //加載成功，顯示Job_Form  case 0:  	// assign parse properties ..  	jobForm.BackupFilename = LoadFile.FileName;  	jobForm.ExternItems = attributes;  	// show job form ..  	if (jobForm.ShowDialog (this) == DialogResult.OK) {  		jobForm.Dispose ();  	}  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Menu_Settings_ChangeUser_Click,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.En_Us) + " " + _user;  	break;  case Customization.Language.Zh_Tw:  	// Status Bar Current User ..  	this.Status_Label_User.Text = this.EnvCust.GetLocalization (this.Name' this.Status_Label_User.Name' Customization.Language.Zh_Tw) + " " + _user;  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Connect,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	serverLabel.Text = "Server State: Connecting ..";  	break;  case Customization.Language.Zh_Tw:  	serverLabel.Text = "伺服器狀態: 連接中 ..";  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Connect,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	serverLabel.Text = "Server State: Connected";  	break;  case Customization.Language.Zh_Tw:  	serverLabel.Text = "伺服器狀態: 已連接";  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Connect,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	serverLabel.Text = "Server State: Can't Connect";  	break;  case Customization.Language.Zh_Tw:  	serverLabel.Text = "伺服器狀態: 無法連接";  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Detection,The following switch statement is missing a default case: switch (this.EnvSetting.Lang) {  case Customization.Language.En_Us:  	serverLabel.Text = "Server State: Server disconnected";  	break;  case Customization.Language.Zh_Tw:  	serverLabel.Text = "伺服器狀態: 與伺服器連線中斷";  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,ListView_Queue_DragDrop,The following switch statement is missing a default case: switch (_p) {  case 0:  	// assign parse properties ..  	jobForm.BackupFilename = files [0];  	jobForm.ExternItems = attributes;  	// 成功則顯示Job_Form  show job form ..  	if (jobForm.ShowDialog (this) == DialogResult.OK)  		jobForm.Dispose ();  	break;  case 1:  	// show parse error message ..  	MessageBox.Show (this' this.ParseFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  case 2:  	// show parse multi error message ..  	MessageBox.Show (this' this.MulitFileErrMessage' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Queue_Thread,The following switch statement is missing a default case: switch (row ["Status_Id"].ToString ()) {  case "PROCESSING":  	// green color ..  	Item.ForeColor = Color.FromArgb (0' 159' 0);  	break;  case "PAUSE":  	// gray color ..  	Item.ForeColor = Color.FromArgb (154' 154' 154);  	break;  case "UPDATEONLY":  	// pink color ..  	Item.ForeColor = Color.FromArgb (240' 120' 154);  	break;  case "CHECKING":  	// deep blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 124);  	break;  case "GETLATEST":  	// blue color ..  	Item.ForeColor = Color.FromArgb (0' 83' 170);  	break;  case "ERROR":  	// red color ..  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  }  
Missing Default,RenbarGUI.Forms,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Main_Form.cs,Host_Thread,The following switch statement is missing a default case: switch (row ["Type"].ToString ()) {  case "CLIENT":  	// deep gray color ..  	Item.ForeColor = Color.FromArgb (100' 100' 100);  	break;  case "MAINTENANCE":  	// red color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (255' 0' 0);  	break;  case "OFFLINE":  	// gray color ..  	Item.SubItems [4].Text = string.Empty;  	Item.ForeColor = Color.FromArgb (150' 150' 150);  	break;  }  
Missing Default,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// Net Form ..  	this.Text = EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// Port Label ..  	this.Label_Port.Text = EnvCust.GetLocalization (this.Name' this.Label_Port.Name' Customization.Language.En_Us);  	// Port Help Port Label ..  	this.Label_Port_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Port_Help.Name' Customization.Language.En_Us);  	// Server Label ..  	this.Label_Server.Text = EnvCust.GetLocalization (this.Name' this.Label_Server.Name' Customization.Language.En_Us);  	// Server Message String TextBox ..  	this.ConnectErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error1_String"' Customization.Language.En_Us);  	this.ParseErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error2_String"' Customization.Language.En_Us);  	this.ConnectOkMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_String"' Customization.Language.En_Us);  	// Server Help Label ..  	this.Label_Server_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Server_Help.Name' Customization.Language.En_Us);  	// Connect Label ..  	this.Label_Connect.Text = EnvCust.GetLocalization (this.Name' this.Label_Connect.Name' Customization.Language.En_Us);  	// Test Connect Button ..  	this.Button_AU.Text = EnvCust.GetLocalization (this.Name' this.Button_AU.Name' Customization.Language.En_Us);  	this.Button_Delete.Text = EnvCust.GetLocalization (this.Name' this.Button_Delete.Name' Customization.Language.En_Us);  	this.Button_Save.Text = EnvCust.GetLocalization (this.Name' this.Button_Save.Name' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// Net Form ..  	this.Text = EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// Port Label ..  	this.Label_Port.Text = EnvCust.GetLocalization (this.Name' this.Label_Port.Name' Customization.Language.Zh_Tw);  	// Port Help Port Label ..  	this.Label_Port_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Port_Help.Name' Customization.Language.Zh_Tw);  	// Server Label ..  	this.Label_Server.Text = EnvCust.GetLocalization (this.Name' this.Label_Server.Name' Customization.Language.Zh_Tw);  	// Server Message String TextBox ..  	this.ConnectErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error1_String"' Customization.Language.Zh_Tw);  	this.ParseErrMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_Error2_String"' Customization.Language.Zh_Tw);  	this.ConnectOkMsg = EnvCust.GetLocalization (this.Name' this.comboBox_Server.Name + "_String"' Customization.Language.Zh_Tw);  	// Server Help Label ..  	this.Label_Server_Help.Text = EnvCust.GetLocalization (this.Name' this.Label_Server_Help.Name' Customization.Language.Zh_Tw);  	// Connect Label ..  	this.Label_Connect.Text = EnvCust.GetLocalization (this.Name' this.Label_Connect.Name' Customization.Language.Zh_Tw);  	// Test Connect Button ..  	this.Button_AU.Text = EnvCust.GetLocalization (this.Name' this.Button_AU.Name' Customization.Language.Zh_Tw);  	this.Button_Delete.Text = EnvCust.GetLocalization (this.Name' this.Button_Delete.Name' Customization.Language.Zh_Tw);  	this.Button_Save.Text = EnvCust.GetLocalization (this.Name' this.Button_Save.Name' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Net_Form.cs,FormControls,The following switch statement is missing a default case: switch (resultVar) {  case ConnectResult.SUCCESS:  	MessageBox.Show (this.ConnectOkMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  case ConnectResult.FAILCONNECT:  	MessageBox.Show (this.ConnectErrMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  }  
Missing Default,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// Pool Management Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// Pool Groups GroupBox ..  	this.GroupBox_Pool_Groups.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Groups.Name' Customization.Language.En_Us);  	// Machine List Label ..  	this.Label_Machine_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Machine_List.Name' Customization.Language.En_Us);  	// Pool Name Label ..  	this.Label_Pool_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pool_Name.Name' Customization.Language.En_Us);  	// Member List Label ..  	this.Label_Member_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Member_List.Name' Customization.Language.En_Us);  	// Sharable CheckBox ..  	this.CheckBox_Sharable.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Sharable.Name' Customization.Language.En_Us);  	// Add Member Button ..  	this.Button_Add_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Member.Name' Customization.Language.En_Us);  	// Del Member Button ..  	this.Button_Del_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Del_Member.Name' Customization.Language.En_Us);  	// Pool Control GroupBox ..  	this.GroupBox_Pool_Controls.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Controls.Name' Customization.Language.En_Us);  	// Add Pool Button ..  	this.Button_Add_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name' Customization.Language.En_Us);  	// Delete Pool Button ..  	this.Button_Delete_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name' Customization.Language.En_Us);  	// Update Pool Button ..  	this.Button_Update_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name' Customization.Language.En_Us);  	// Get Pool Action Message ..  	this.__AddPool_Repeat_Error = this.EnvCust.GetLocalization (this.Name' this.ComboBox_Pool_Name.Name + "_Repate_Err"' Customization.Language.En_Us);  	this.__AddPool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Complete"' Customization.Language.En_Us);  	this.__AddPool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Fail"' Customization.Language.En_Us);  	this.__DeletePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Complete"' Customization.Language.En_Us);  	this.__DeletePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Fail"' Customization.Language.En_Us);  	this.__UpdatePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Complete"' Customization.Language.En_Us);  	this.__UpdatePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Fail"' Customization.Language.En_Us);  	this.__Pool_Member_Error = this.EnvCust.GetLocalization (this.Name' "AddChange_Member_Fail"' Customization.Language.En_Us);  	// process delete pool warning string ..  	__warning = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Confirm"' Customization.Language.En_Us).Split ('-');  	this.__DeletePool_Warning = string.Format ("{0}\r\n\n{1}"' __warning [0]' __warning [1]);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// Pool Management Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// Pool Groups GroupBox ..  	this.GroupBox_Pool_Groups.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Groups.Name' Customization.Language.Zh_Tw);  	// Machine List Label ..  	this.Label_Machine_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Machine_List.Name' Customization.Language.Zh_Tw);  	// Pool Name Label ..  	this.Label_Pool_Name.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Pool_Name.Name' Customization.Language.Zh_Tw);  	// Member List Label ..  	this.Label_Member_List.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Member_List.Name' Customization.Language.Zh_Tw);  	// Sharable CheckBox ..  	this.CheckBox_Sharable.Text = this.EnvCust.GetLocalization (this.Name' this.CheckBox_Sharable.Name' Customization.Language.Zh_Tw);  	// Add Member Button ..  	this.Button_Add_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Member.Name' Customization.Language.Zh_Tw);  	// Del Member Button ..  	this.Button_Del_Member.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Del_Member.Name' Customization.Language.Zh_Tw);  	// Pool Control GroupBox ..  	this.GroupBox_Pool_Controls.Text = this.EnvCust.GetLocalization (this.Name' this.GroupBox_Pool_Controls.Name' Customization.Language.Zh_Tw);  	// Add Pool Button ..  	this.Button_Add_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name' Customization.Language.Zh_Tw);  	// Delete Pool Button ..  	this.Button_Delete_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name' Customization.Language.Zh_Tw);  	// Update Pool Button ..  	this.Button_Update_Pool.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name' Customization.Language.Zh_Tw);  	// Get Pool Action Message ..  	this.__AddPool_Repeat_Error = this.EnvCust.GetLocalization (this.Name' this.ComboBox_Pool_Name.Name + "_Repate_Err"' Customization.Language.Zh_Tw);  	this.__AddPool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Complete"' Customization.Language.Zh_Tw);  	this.__AddPool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Add_Pool.Name + "_Fail"' Customization.Language.Zh_Tw);  	this.__DeletePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Complete"' Customization.Language.Zh_Tw);  	this.__DeletePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Fail"' Customization.Language.Zh_Tw);  	this.__UpdatePool_Complete = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Complete"' Customization.Language.Zh_Tw);  	this.__UpdatePool_Error = this.EnvCust.GetLocalization (this.Name' this.Button_Update_Pool.Name + "_Fail"' Customization.Language.Zh_Tw);  	this.__Pool_Member_Error = this.EnvCust.GetLocalization (this.Name' "AddChange_Member_Fail"' Customization.Language.Zh_Tw);  	// process delete pool warning string ..  	__warning = this.EnvCust.GetLocalization (this.Name' this.Button_Delete_Pool.Name + "_Confirm"' Customization.Language.Zh_Tw).Split ('-');  	this.__DeletePool_Warning = string.Format ("{0}\r\n\n{1}"' __warning [0]' __warning [1]);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,PoolMgr_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\PoolMgr_Form.cs,ChangePoolData,The following switch statement is missing a default case: switch (Action) {  case PoolAction.Add:  case PoolAction.Update:  	// package sent data ..  	packaged = EnvComm.Package (Client2Server.CommunicationType.POOLINFO' Items);  	break;  case PoolAction.Delete:  	// package sent data ..  	packaged = EnvComm.Package (Client2Server.CommunicationType.DELETEPOOLINFO' Items);  	break;  }  
Missing Default,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Language,The following switch statement is missing a default case: switch (Lang) {  #region English (United-State)  case Customization.Language.En_Us:  	// Priority Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.En_Us);  	// Priority Label ..  	this.Label_Priority_Value.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority_Value.Name' Customization.Language.En_Us);  	// Ok Button ..  	this.Button_Ok.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Ok.Name' Customization.Language.En_Us);  	// Error Message ..  	this.SetFailMessage = this.EnvCust.GetLocalization (this.Name' "Fail_Msg"' Customization.Language.En_Us);  	break;  #endregion  #region Traditional Chinese  case Customization.Language.Zh_Tw:  	// Priority Form ..  	this.Text = this.EnvCust.GetLocalization (this.Name' this.Name' Customization.Language.Zh_Tw);  	// Priority Label ..  	this.Label_Priority_Value.Text = this.EnvCust.GetLocalization (this.Name' this.Label_Priority_Value.Name' Customization.Language.Zh_Tw);  	// Ok Button ..  	this.Button_Ok.Text = this.EnvCust.GetLocalization (this.Name' this.Button_Ok.Name' Customization.Language.Zh_Tw);  	// Error Message ..  	this.SetFailMessage = this.EnvCust.GetLocalization (this.Name' "Fail_Msg"' Customization.Language.Zh_Tw);  	break;  #endregion  }  
Missing Default,RenbarGUI.Forms,Priority_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarGUI\Forms\Priority_Form.cs,Button_Ok_Click,The following switch statement is missing a default case: switch (this.CommType) {  case Client2Server.CommunicationType.MACHINEPRIORITY:  	//Item.Add("Machine_Id"' s);  	Item.Add ("Machine_Id"' s);  	Item.Add ("Priority"' this.Numeric_Priority_Value.Value);  	break;  case Client2Server.CommunicationType.JOBPRIORITY:  	//Item.Add("Job_Group_Id"' s);  	Item.Add ("Job_Group_Id"' s);  	Item.Add ("Priority"' this.Numeric_Priority_Value.Value);  	break;  }  
