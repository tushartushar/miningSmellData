Implementation smell,Namespace,Class,File,Method,Description
Long Method,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The method has 142 lines of code.
Long Method,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The method has 100 lines of code.
Long Method,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The method has 115 lines of code.
Long Method,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The method has 118 lines of code.
Long Method,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The method has 1468 lines of code.
Long Method,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The method has 253 lines of code.
Long Method,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The method has 411 lines of code.
Complex Method,RenbarServerGUI,AlienbrainBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\ABExtension.cs,DoWork,Cyclomatic complexity of the method is 10
Complex Method,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,Cyclomatic complexity of the method is 21
Complex Method,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,Cyclomatic complexity of the method is 12
Complex Method,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,Cyclomatic complexity of the method is 12
Complex Method,RenbarServerGUI,ServerBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Base.cs,ViewChangeSettings,Cyclomatic complexity of the method is 15
Complex Method,RenbarServerGUI,ServerBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Base.cs,SlaveThread,Cyclomatic complexity of the method is 10
Complex Method,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,Cyclomatic complexity of the method is 10
Complex Method,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,Cyclomatic complexity of the method is 255
Complex Method,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,Cyclomatic complexity of the method is 28
Complex Method,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,Cyclomatic complexity of the method is 80
Long Parameter List,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The method has 5 parameters.
Long Statement,RenbarServerGUI,AlienbrainBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\ABExtension.cs,DoWork,The length of the statement  "			DataTable primary_view = this.EnvData.FindData ("Job_Group"' expression1' string.Empty' DataViewRowState.Unchanged).ToTable (); " is 127.
Long Statement,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The length of the statement  "		DataTable Job_Group = this.EnvData.ReadData ("Job_Group")' Job_Attr = this.EnvData.ReadData ("Job_Attr")' Job = this.EnvData.ReadData ("Job"); " is 142.
Long Statement,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The length of the statement  "					DataRow[] row_attr = Job_Attr.Select (string.Format ("Job_Group_Id = '{0}'"' key))' row_jobs = Job.Select (string.Format ("Job_Group_Id = '{0}'"' key)); " is 152.
Long Statement,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,GenerateMachineData,The length of the statement  "		DataTable view_machine_data = this.EnvData.FindData ("Machine"' null' "Last_Online_Time Desc"' DataViewRowState.CurrentRows).ToTable (); " is 136.
Long Statement,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Job_Update,The length of the statement  "					DataRow[] attr_row = this.Job_TempData.Tables ["Job_Attr"].Select (string.Format ("Job_Group_Id = '{0}'"' row ["Job_Group_Id"])); " is 129.
Long Statement,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The length of the statement  "							DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])); " is 192.
Long Statement,RenbarServerGUI,Init_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Init_Form.cs,Initialize,The length of the statement  "		MessageBox.Show (this' ex.Message' global::RenbarLib.Environment.AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1); " is 173.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,Main_Form_Load,The length of the statement  "			Thread JobstateThread = new Thread (new ThreadStart (this.JobsData))' MachinestateThread = new Thread (new ThreadStart (this.MachinesData)); " is 140.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The length of the statement  "						if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text) " is 166.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The length of the statement  "						this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ()); " is 121.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The length of the statement  "						if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text) " is 414.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The length of the statement  "				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ()); " is 121.
Long Statement,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,Main_Form_FormClosing,The length of the statement  "	DialogResult result = MessageBox.Show (this' AppCloseMessage' this.Text' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 126.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,DeleteFunc,The length of the statement  "					MachineServiceSocket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.DELETEJOB' Item))); " is 123.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] { " is 142.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] { " is 147.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] { " is 126.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged); " is 164.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged); " is 164.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable (); " is 144.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] { " is 121.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] { " is 123.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] { " is 123.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) { " is 153.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) { " is 191.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "										row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper (); " is 126.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper (); " is 126.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "								DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job"); " is 152.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "								DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp); " is 123.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "								DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged); " is 158.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "									DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable (); " is 218.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged); " is 177.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable (); " is 120.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable (); " is 126.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "						DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged); " is 180.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged); " is 153.
Long Statement,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The length of the statement  "							DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged); " is 143.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The length of the statement  "		DataView ConnectList = this.EnvData.FindData ("Machine"' "Status Not In (0' 3) And IsRender = 1 And IsEnable = 1"' "Priority Desc"' DataViewRowState.Unchanged); " is 160.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY"); " is 207.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "							DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged); " is 129.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "										if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) { " is 125.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "											string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH"); " is 197.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "												string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY"); " is 207.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "								if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) { " is 128.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS"); " is 212.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "								if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) { " is 130.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS"); " is 214.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "						DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged); " is 153.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "							DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged); " is 129.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "							DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable (); " is 147.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The length of the statement  "								string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]); " is 132.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = {0} And Finish_Time Is Null"' sid); " is 214.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' all_jobs = this.EnvData.FindData ("Job"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable (); " is 290.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "			if (InputObject.ContainsKey ("Machine_Id") && InputObject.ContainsKey ("FreeCore") && InputObject.ContainsKey ("HasZero")) { " is 124.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "				DataTable job_group_data = this.EnvData.FindData ("Job_Group"' "Status In (1' 6)"' null' DataViewRowState.Unchanged).ToTable (); " is 128.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					machine_pool_data1 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["First_Pool"])' null' DataViewRowState.Unchanged).ToTable (); " is 161.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "						machine_pool_data2 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["Second_Pool"])' null' DataViewRowState.Unchanged).ToTable (); " is 162.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					DataTable waitfor_data = this.EnvData.FindData ("Job_Attr"' string.Format ("WaitFor Is Not Null And Job_Group_Id = '{1}'"' DBNull.Value' wrow ["Job_Group_Id"])' null' DataViewRowState.Unchanged).ToTable (); " is 206.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "						DataRow[] validrow = job_group_data.Select (string.Format ("Status = {0} And Job_Group_Id = '{1}'"' Convert.ToUInt16 (JobStatusFlag.QUEUING)' waitfor_data.Rows [0] ["WaitFor"])); " is 178.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "						if (this.PoolMachine_Info.ContainsKey (first) && !this.PoolMachine_Info [first].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ())) { " is 148.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					DataView __attr = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' grow ["Job_Group_Id"])' null' DataViewRowState.Unchanged); " is 150.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key); " is 147.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = '{0}'"' sid); " is 192.
Long Statement,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The length of the statement  "					DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable (); " is 197.
Long Statement,RenbarLib.Extension.Alienbrain,AbLib,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Alienbrain.cs,DependencyGet,The length of the statement  "	global::NXN.Alienbrain.SDK.Commands.DependencyGet dependencyGet = new global::NXN.Alienbrain.SDK.Commands.DependencyGet (); " is 123.
Long Statement,RenbarLib.Extension.Alienbrain,AbLib,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Alienbrain.cs,DependencyStore,The length of the statement  "	global::NXN.Alienbrain.SDK.Commands.DependencyStore dependencyStore = new global::NXN.Alienbrain.SDK.Commands.DependencyStore (); " is 129.
Complex Conditional,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The conditional expression  "MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text"  is complex.
Complex Conditional,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The conditional expression  "QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")"  is complex.
Complex Conditional,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The conditional expression  "QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())"  is complex.
Empty Catch Block,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The method has an empty catch block.
Magic Number,RenbarServerGUI,AlienbrainBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\ABExtension.cs,DoWork,The following statement contains a magic number: do {  	try {  		// declare filter conditions ..//CHECKING = 3'  		string expression1 = string.Format ("Status = '{0}'"' Convert.ToUInt16 (JobStatusFlag.CHECKING));  		// find update status jobs ...從Job_Group中篩選Checking的Unchanged數據  		DataTable primary_view = this.EnvData.FindData ("Job_Group"' expression1' string.Empty' DataViewRowState.Unchanged).ToTable ();  		foreach (DataRow row in primary_view.Rows) {  			string expression2 = string.Format ("Job_Group_Id = '{0}'"' row ["Job_Group_Id"]);  			// find high priority jobs ...從Job_Attr中篩選於上次篩選ID相同的數據  			DataView second_view = this.EnvData.FindData ("Job_Attr"' expression2' "Priority Desc"' DataViewRowState.Unchanged);  			if (second_view.Count > 0) {  				if (!WorkData.Rows.Contains (row ["Job_Group_Id"])) {  					DataRow _row = WorkData.NewRow ();  					_row ["Id"] = row ["Job_Group_Id"];  					_row ["Name"] = second_view [0] ["ABName"];  					_row ["Path"] = second_view [0] ["ABPath"];  					_row ["IsUpdateOnly"] = Convert.ToBoolean (second_view [0] ["ABUpdateOnly"]);  					_row ["Priority"] = second_view [0] ["Priority"];  					WorkData.Rows.Add (_row);  				}  			}  		}  		// add to alienbrain work list ..  		foreach (DataRow row in WorkData.AsEnumerable ().OrderByDescending (pri => pri.Field<int> ("Priority")))//按Priority降序  		 {  			// analysis connect object ..  			AlienbrainInfo info = (AlienbrainInfo)parameters;  			// confirm the project whether exist in project list ..  			if (!this.ProjectList.Contains (row ["Name"].ToString ())) {  				this.ProjectList.Add (row ["Name"].ToString ());  				// login project ..  				AbLib.Instance.Login (info.Server' row ["Name"].ToString ()' info.User' info.Password);  				// set working path ..  				AbLib.Instance.SetWorkingPath (string.Format (@"{0}\{1}"' info.WorkPath' row ["Name"].ToString ()));  			}  			// dependency and get latest ..  			this.GetLatest (row ["Path"].ToString ()' row ["Id"].ToString ());  			// update status ..  			string exp = string.Format ("Job_Group_Id = '{0}'"' row ["Id"]);  			DataRow[] memory_row = this.EnvData.ReadData ("Job_Group").Select (exp);  			if (memory_row.Length > 0) {  				if (Convert.ToBoolean (row ["IsUpdateOnly"]))  					memory_row [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.UPDATEONLY);  				else  					memory_row [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.QUEUING);  				// sync data to database ..  				this.SyncData (memory_row [0]);  			}  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		if (WorkData.Rows.Count > 0)  			WorkData.Rows.Clear ();  	}  	Thread.Sleep (5000);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,AlienbrainBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\ABExtension.cs,DoWork,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,RenbarServerGUI,AlienbrainBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\ABExtension.cs,SyncData,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: do {  	// delay 10 min to next confirm ..  	Thread.Sleep (600000);  	// confirm data status ..  	if (DisplayBase.IsLock)  		continue;  	// define tables collection ..  	DataSet refreshData = new DataSet ();  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region 檢驗任務 Check Job Partial  	// read original job data ..  	DataTable Job_Group = this.EnvData.ReadData ("Job_Group")' Job_Attr = this.EnvData.ReadData ("Job_Attr")' Job = this.EnvData.ReadData ("Job");  	// declare job key list ..  	IList<string> JKeys = new List<string> ();  	// cleanup job partial ..  	for (int i = 0; i < Job_Group.Rows.Count; i++) {  		// confirm completed status ..  		if (Convert.ToUInt16 (Job_Group.Rows [i] ["Status"]) == Convert.ToUInt16 (JobStatusFlag.COMPLETED)) {  			DateTime canDeleted = Convert.ToDateTime (Job_Group.Rows [i] ["Finish_Time"]);  			TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  			// check whether the machine had been locked more than 30 minutes ..  			if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _JobMaxTime) {  				string key = Job_Group.Rows [i] ["Job_Group_Id"].ToString ();  				// add to list ..  				JKeys.Add (key);  				// get relation data ..  				DataRow[] row_attr = Job_Attr.Select (string.Format ("Job_Group_Id = '{0}'"' key))' row_jobs = Job.Select (string.Format ("Job_Group_Id = '{0}'"' key));  				if (row_attr.Length > 0 && row_jobs.Length > 0) {  					// delete relation data row ..  					for (int j = 0; j < row_jobs.Length; j++)  						row_jobs [j].Delete ();  					row_attr [0].Delete ();  					Job_Group.Rows [i].Delete ();  				}  			}  		}  	}  	#endregion  	#region 確認任務更新狀況 Confirm Job Update Data  	if (JKeys.Count > 0) {  		// bind job database text command ..  		string index = null;  		foreach (string s in JKeys)  			index += "'" + s + "'' ";  		string JobGroupId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd = " Select count(*) From Job ";  		cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Where Job_Group.Job_Group_Id In (" + JobGroupId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' JobGroupId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Job Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Attr Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Group Where Job_Group_Id In (" + JobGroupId + "); ";  		}  		else {  			cmd = string.Empty;  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Job_Group);  		refreshData.Tables.Add (Job_Attr);  		refreshData.Tables.Add (Job);  		command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' index.Substring(0' (index.Length - 2)));  		TextCommands.Add (Job.TableName' command);  		TextCommands.Add (Job_Group.TableName' command);  		TextCommands.Add (Job_Attr.TableName' command);  	}  	#endregion  	#region 檢驗Machine狀態 Check Machine Partial  	// read original job data ..  	DataTable Machine = this.EnvData.ReadData ("Machine")' Machine_Pool = this.EnvData.ReadData ("Machine_Pool");  	// declare job key list ..  	IList<string> MKeys = new List<string> ();  	// cleanup machine partial ..  	for (int i = 0; i < Machine.Rows.Count; i++) {  		DateTime canDeleted = Convert.ToDateTime (Machine.Rows [i] ["Last_Online_Time"]);  		TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  		// check whether the machine had been locked more than 7 days ..  		if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _MachineMaxTime) {  			string key = Machine.Rows [i] ["Machine_Id"].ToString ();  			// add to list ..  			MKeys.Add (key);  			DataRow[] row_pool = Machine_Pool.Select (string.Format ("Machine_Id = '{0}'"' key));  			// confirm the machine has in pool ..  			if (row_pool.Length > 0)  				// delete relation data row ..  				row_pool [0].Delete ();  			// delete primary data ..  			Machine.Rows [i].Delete ();  		}  	}  	#endregion  	#region 確認Machine更新數據 Confirm Machine Update Data  	if (MKeys.Count > 0) {  		// bind machine database text command ..  		string index = null;  		foreach (string s in MKeys)  			index += "'" + s + "'' ";  		string MachineId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd += " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id ";  		cmd += " Where Machine.Machine_Id In (" + MachineId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Machine_Pool Where Machine_Id In  (" + MachineId + "); ";  			cmd += " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		else {  			cmd = " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Machine);  		refreshData.Tables.Add (Machine_Pool);  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		TextCommands.Add (Machine.TableName' command);  		TextCommands.Add (Machine_Pool.TableName' command);  	}  	#endregion  	if (JKeys.Count > 0 || MKeys.Count > 0) {  		// execute database changes ..  		this.EnvData.WriteData (refreshData' TextCommands);  		// wait for write data to finish ..  		Thread.Sleep (1000);  		// refresh user interface status ..  		DisplayBase.CanJobUpdate = true;  		DisplayBase.CanMachineUpdate = true;  		// cleanup key list ..  		JKeys.Clear ();  		MKeys.Clear ();  	}  }  while (!requestStop);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: do {  	// delay 10 min to next confirm ..  	Thread.Sleep (600000);  	// confirm data status ..  	if (DisplayBase.IsLock)  		continue;  	// define tables collection ..  	DataSet refreshData = new DataSet ();  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region 檢驗任務 Check Job Partial  	// read original job data ..  	DataTable Job_Group = this.EnvData.ReadData ("Job_Group")' Job_Attr = this.EnvData.ReadData ("Job_Attr")' Job = this.EnvData.ReadData ("Job");  	// declare job key list ..  	IList<string> JKeys = new List<string> ();  	// cleanup job partial ..  	for (int i = 0; i < Job_Group.Rows.Count; i++) {  		// confirm completed status ..  		if (Convert.ToUInt16 (Job_Group.Rows [i] ["Status"]) == Convert.ToUInt16 (JobStatusFlag.COMPLETED)) {  			DateTime canDeleted = Convert.ToDateTime (Job_Group.Rows [i] ["Finish_Time"]);  			TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  			// check whether the machine had been locked more than 30 minutes ..  			if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _JobMaxTime) {  				string key = Job_Group.Rows [i] ["Job_Group_Id"].ToString ();  				// add to list ..  				JKeys.Add (key);  				// get relation data ..  				DataRow[] row_attr = Job_Attr.Select (string.Format ("Job_Group_Id = '{0}'"' key))' row_jobs = Job.Select (string.Format ("Job_Group_Id = '{0}'"' key));  				if (row_attr.Length > 0 && row_jobs.Length > 0) {  					// delete relation data row ..  					for (int j = 0; j < row_jobs.Length; j++)  						row_jobs [j].Delete ();  					row_attr [0].Delete ();  					Job_Group.Rows [i].Delete ();  				}  			}  		}  	}  	#endregion  	#region 確認任務更新狀況 Confirm Job Update Data  	if (JKeys.Count > 0) {  		// bind job database text command ..  		string index = null;  		foreach (string s in JKeys)  			index += "'" + s + "'' ";  		string JobGroupId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd = " Select count(*) From Job ";  		cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Where Job_Group.Job_Group_Id In (" + JobGroupId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' JobGroupId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Job Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Attr Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Group Where Job_Group_Id In (" + JobGroupId + "); ";  		}  		else {  			cmd = string.Empty;  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Job_Group);  		refreshData.Tables.Add (Job_Attr);  		refreshData.Tables.Add (Job);  		command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' index.Substring(0' (index.Length - 2)));  		TextCommands.Add (Job.TableName' command);  		TextCommands.Add (Job_Group.TableName' command);  		TextCommands.Add (Job_Attr.TableName' command);  	}  	#endregion  	#region 檢驗Machine狀態 Check Machine Partial  	// read original job data ..  	DataTable Machine = this.EnvData.ReadData ("Machine")' Machine_Pool = this.EnvData.ReadData ("Machine_Pool");  	// declare job key list ..  	IList<string> MKeys = new List<string> ();  	// cleanup machine partial ..  	for (int i = 0; i < Machine.Rows.Count; i++) {  		DateTime canDeleted = Convert.ToDateTime (Machine.Rows [i] ["Last_Online_Time"]);  		TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  		// check whether the machine had been locked more than 7 days ..  		if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _MachineMaxTime) {  			string key = Machine.Rows [i] ["Machine_Id"].ToString ();  			// add to list ..  			MKeys.Add (key);  			DataRow[] row_pool = Machine_Pool.Select (string.Format ("Machine_Id = '{0}'"' key));  			// confirm the machine has in pool ..  			if (row_pool.Length > 0)  				// delete relation data row ..  				row_pool [0].Delete ();  			// delete primary data ..  			Machine.Rows [i].Delete ();  		}  	}  	#endregion  	#region 確認Machine更新數據 Confirm Machine Update Data  	if (MKeys.Count > 0) {  		// bind machine database text command ..  		string index = null;  		foreach (string s in MKeys)  			index += "'" + s + "'' ";  		string MachineId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd += " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id ";  		cmd += " Where Machine.Machine_Id In (" + MachineId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Machine_Pool Where Machine_Id In  (" + MachineId + "); ";  			cmd += " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		else {  			cmd = " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Machine);  		refreshData.Tables.Add (Machine_Pool);  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		TextCommands.Add (Machine.TableName' command);  		TextCommands.Add (Machine_Pool.TableName' command);  	}  	#endregion  	if (JKeys.Count > 0 || MKeys.Count > 0) {  		// execute database changes ..  		this.EnvData.WriteData (refreshData' TextCommands);  		// wait for write data to finish ..  		Thread.Sleep (1000);  		// refresh user interface status ..  		DisplayBase.CanJobUpdate = true;  		DisplayBase.CanMachineUpdate = true;  		// cleanup key list ..  		JKeys.Clear ();  		MKeys.Clear ();  	}  }  while (!requestStop);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: do {  	// delay 10 min to next confirm ..  	Thread.Sleep (600000);  	// confirm data status ..  	if (DisplayBase.IsLock)  		continue;  	// define tables collection ..  	DataSet refreshData = new DataSet ();  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region 檢驗任務 Check Job Partial  	// read original job data ..  	DataTable Job_Group = this.EnvData.ReadData ("Job_Group")' Job_Attr = this.EnvData.ReadData ("Job_Attr")' Job = this.EnvData.ReadData ("Job");  	// declare job key list ..  	IList<string> JKeys = new List<string> ();  	// cleanup job partial ..  	for (int i = 0; i < Job_Group.Rows.Count; i++) {  		// confirm completed status ..  		if (Convert.ToUInt16 (Job_Group.Rows [i] ["Status"]) == Convert.ToUInt16 (JobStatusFlag.COMPLETED)) {  			DateTime canDeleted = Convert.ToDateTime (Job_Group.Rows [i] ["Finish_Time"]);  			TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  			// check whether the machine had been locked more than 30 minutes ..  			if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _JobMaxTime) {  				string key = Job_Group.Rows [i] ["Job_Group_Id"].ToString ();  				// add to list ..  				JKeys.Add (key);  				// get relation data ..  				DataRow[] row_attr = Job_Attr.Select (string.Format ("Job_Group_Id = '{0}'"' key))' row_jobs = Job.Select (string.Format ("Job_Group_Id = '{0}'"' key));  				if (row_attr.Length > 0 && row_jobs.Length > 0) {  					// delete relation data row ..  					for (int j = 0; j < row_jobs.Length; j++)  						row_jobs [j].Delete ();  					row_attr [0].Delete ();  					Job_Group.Rows [i].Delete ();  				}  			}  		}  	}  	#endregion  	#region 確認任務更新狀況 Confirm Job Update Data  	if (JKeys.Count > 0) {  		// bind job database text command ..  		string index = null;  		foreach (string s in JKeys)  			index += "'" + s + "'' ";  		string JobGroupId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd = " Select count(*) From Job ";  		cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Where Job_Group.Job_Group_Id In (" + JobGroupId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' JobGroupId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Job Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Attr Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Group Where Job_Group_Id In (" + JobGroupId + "); ";  		}  		else {  			cmd = string.Empty;  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Job_Group);  		refreshData.Tables.Add (Job_Attr);  		refreshData.Tables.Add (Job);  		command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' index.Substring(0' (index.Length - 2)));  		TextCommands.Add (Job.TableName' command);  		TextCommands.Add (Job_Group.TableName' command);  		TextCommands.Add (Job_Attr.TableName' command);  	}  	#endregion  	#region 檢驗Machine狀態 Check Machine Partial  	// read original job data ..  	DataTable Machine = this.EnvData.ReadData ("Machine")' Machine_Pool = this.EnvData.ReadData ("Machine_Pool");  	// declare job key list ..  	IList<string> MKeys = new List<string> ();  	// cleanup machine partial ..  	for (int i = 0; i < Machine.Rows.Count; i++) {  		DateTime canDeleted = Convert.ToDateTime (Machine.Rows [i] ["Last_Online_Time"]);  		TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  		// check whether the machine had been locked more than 7 days ..  		if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _MachineMaxTime) {  			string key = Machine.Rows [i] ["Machine_Id"].ToString ();  			// add to list ..  			MKeys.Add (key);  			DataRow[] row_pool = Machine_Pool.Select (string.Format ("Machine_Id = '{0}'"' key));  			// confirm the machine has in pool ..  			if (row_pool.Length > 0)  				// delete relation data row ..  				row_pool [0].Delete ();  			// delete primary data ..  			Machine.Rows [i].Delete ();  		}  	}  	#endregion  	#region 確認Machine更新數據 Confirm Machine Update Data  	if (MKeys.Count > 0) {  		// bind machine database text command ..  		string index = null;  		foreach (string s in MKeys)  			index += "'" + s + "'' ";  		string MachineId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd += " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id ";  		cmd += " Where Machine.Machine_Id In (" + MachineId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Machine_Pool Where Machine_Id In  (" + MachineId + "); ";  			cmd += " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		else {  			cmd = " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Machine);  		refreshData.Tables.Add (Machine_Pool);  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		TextCommands.Add (Machine.TableName' command);  		TextCommands.Add (Machine_Pool.TableName' command);  	}  	#endregion  	if (JKeys.Count > 0 || MKeys.Count > 0) {  		// execute database changes ..  		this.EnvData.WriteData (refreshData' TextCommands);  		// wait for write data to finish ..  		Thread.Sleep (1000);  		// refresh user interface status ..  		DisplayBase.CanJobUpdate = true;  		DisplayBase.CanMachineUpdate = true;  		// cleanup key list ..  		JKeys.Clear ();  		MKeys.Clear ();  	}  }  while (!requestStop);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: do {  	// delay 10 min to next confirm ..  	Thread.Sleep (600000);  	// confirm data status ..  	if (DisplayBase.IsLock)  		continue;  	// define tables collection ..  	DataSet refreshData = new DataSet ();  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region 檢驗任務 Check Job Partial  	// read original job data ..  	DataTable Job_Group = this.EnvData.ReadData ("Job_Group")' Job_Attr = this.EnvData.ReadData ("Job_Attr")' Job = this.EnvData.ReadData ("Job");  	// declare job key list ..  	IList<string> JKeys = new List<string> ();  	// cleanup job partial ..  	for (int i = 0; i < Job_Group.Rows.Count; i++) {  		// confirm completed status ..  		if (Convert.ToUInt16 (Job_Group.Rows [i] ["Status"]) == Convert.ToUInt16 (JobStatusFlag.COMPLETED)) {  			DateTime canDeleted = Convert.ToDateTime (Job_Group.Rows [i] ["Finish_Time"]);  			TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  			// check whether the machine had been locked more than 30 minutes ..  			if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _JobMaxTime) {  				string key = Job_Group.Rows [i] ["Job_Group_Id"].ToString ();  				// add to list ..  				JKeys.Add (key);  				// get relation data ..  				DataRow[] row_attr = Job_Attr.Select (string.Format ("Job_Group_Id = '{0}'"' key))' row_jobs = Job.Select (string.Format ("Job_Group_Id = '{0}'"' key));  				if (row_attr.Length > 0 && row_jobs.Length > 0) {  					// delete relation data row ..  					for (int j = 0; j < row_jobs.Length; j++)  						row_jobs [j].Delete ();  					row_attr [0].Delete ();  					Job_Group.Rows [i].Delete ();  				}  			}  		}  	}  	#endregion  	#region 確認任務更新狀況 Confirm Job Update Data  	if (JKeys.Count > 0) {  		// bind job database text command ..  		string index = null;  		foreach (string s in JKeys)  			index += "'" + s + "'' ";  		string JobGroupId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd = " Select count(*) From Job ";  		cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Where Job_Group.Job_Group_Id In (" + JobGroupId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' JobGroupId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Job Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Attr Where Job_Group_Id In (" + JobGroupId + "); ";  			cmd += " Delete From Job_Group Where Job_Group_Id In (" + JobGroupId + "); ";  		}  		else {  			cmd = string.Empty;  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Job_Group);  		refreshData.Tables.Add (Job_Attr);  		refreshData.Tables.Add (Job);  		command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Job_Group_Id"' index.Substring(0' (index.Length - 2)));  		TextCommands.Add (Job.TableName' command);  		TextCommands.Add (Job_Group.TableName' command);  		TextCommands.Add (Job_Attr.TableName' command);  	}  	#endregion  	#region 檢驗Machine狀態 Check Machine Partial  	// read original job data ..  	DataTable Machine = this.EnvData.ReadData ("Machine")' Machine_Pool = this.EnvData.ReadData ("Machine_Pool");  	// declare job key list ..  	IList<string> MKeys = new List<string> ();  	// cleanup machine partial ..  	for (int i = 0; i < Machine.Rows.Count; i++) {  		DateTime canDeleted = Convert.ToDateTime (Machine.Rows [i] ["Last_Online_Time"]);  		TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  		// check whether the machine had been locked more than 7 days ..  		if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= _MachineMaxTime) {  			string key = Machine.Rows [i] ["Machine_Id"].ToString ();  			// add to list ..  			MKeys.Add (key);  			DataRow[] row_pool = Machine_Pool.Select (string.Format ("Machine_Id = '{0}'"' key));  			// confirm the machine has in pool ..  			if (row_pool.Length > 0)  				// delete relation data row ..  				row_pool [0].Delete ();  			// delete primary data ..  			Machine.Rows [i].Delete ();  		}  	}  	#endregion  	#region 確認Machine更新數據 Confirm Machine Update Data  	if (MKeys.Count > 0) {  		// bind machine database text command ..  		string index = null;  		foreach (string s in MKeys)  			index += "'" + s + "'' ";  		string MachineId = index.Substring (0' (index.Length - 2));  		string cmd = string.Empty;  		cmd += " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id ";  		cmd += " Where Machine.Machine_Id In (" + MachineId + ") ";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Machine_Pool Where Machine_Id In  (" + MachineId + "); ";  			cmd += " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		else {  			cmd = " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  		}  		// add to refresh dataset ..  		refreshData.Tables.Add (Machine);  		refreshData.Tables.Add (Machine_Pool);  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  		TextCommands.Add (Machine.TableName' command);  		TextCommands.Add (Machine_Pool.TableName' command);  	}  	#endregion  	if (JKeys.Count > 0 || MKeys.Count > 0) {  		// execute database changes ..  		this.EnvData.WriteData (refreshData' TextCommands);  		// wait for write data to finish ..  		Thread.Sleep (1000);  		// refresh user interface status ..  		DisplayBase.CanJobUpdate = true;  		DisplayBase.CanMachineUpdate = true;  		// cleanup key list ..  		JKeys.Clear ();  		MKeys.Clear ();  	}  }  while (!requestStop);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: Thread.Sleep (600000);  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: if (JKeys.Count > 0) {  	// bind job database text command ..  	string index = null;  	foreach (string s in JKeys)  		index += "'" + s + "'' ";  	string JobGroupId = index.Substring (0' (index.Length - 2));  	string cmd = string.Empty;  	cmd = " Select count(*) From Job ";  	cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  	cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  	cmd += " Where Job_Group.Job_Group_Id In (" + JobGroupId + ") ";  	MySqlCommand command = new MySqlCommand (cmd);  	//command.Parameters.AddWithValue("?Job_Group_Id"' JobGroupId);  	if (this.EnvData.IsExistJobMachineId (command) > 0) {  		cmd = " Delete From Job Where Job_Group_Id In (" + JobGroupId + "); ";  		cmd += " Delete From Job_Attr Where Job_Group_Id In (" + JobGroupId + "); ";  		cmd += " Delete From Job_Group Where Job_Group_Id In (" + JobGroupId + "); ";  	}  	else {  		cmd = string.Empty;  	}  	// add to refresh dataset ..  	refreshData.Tables.Add (Job_Group);  	refreshData.Tables.Add (Job_Attr);  	refreshData.Tables.Add (Job);  	command = new MySqlCommand (cmd);  	//command.Parameters.AddWithValue("?Job_Group_Id"' index.Substring(0' (index.Length - 2)));  	TextCommands.Add (Job.TableName' command);  	TextCommands.Add (Job_Group.TableName' command);  	TextCommands.Add (Job_Attr.TableName' command);  }  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: if (MKeys.Count > 0) {  	// bind machine database text command ..  	string index = null;  	foreach (string s in MKeys)  		index += "'" + s + "'' ";  	string MachineId = index.Substring (0' (index.Length - 2));  	string cmd = string.Empty;  	cmd += " Select count(*) From Machine_Pool ";  	cmd += " Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id ";  	cmd += " Where Machine.Machine_Id In (" + MachineId + ") ";  	MySqlCommand command = new MySqlCommand (cmd);  	//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  	if (this.EnvData.IsExistJobMachineId (command) > 0) {  		cmd = " Delete From Machine_Pool Where Machine_Id In  (" + MachineId + "); ";  		cmd += " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  	}  	else {  		cmd = " Delete From Machine Where Machine_Id In  (" + MachineId + "); ";  	}  	// add to refresh dataset ..  	refreshData.Tables.Add (Machine);  	refreshData.Tables.Add (Machine_Pool);  	command = new MySqlCommand (cmd);  	// add commands ..  	//command.Parameters.AddWithValue("?Machine_Id"' MachineId);  	TextCommands.Add (Machine.TableName' command);  	TextCommands.Add (Machine_Pool.TableName' command);  }  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: if (JKeys.Count > 0 || MKeys.Count > 0) {  	// execute database changes ..  	this.EnvData.WriteData (refreshData' TextCommands);  	// wait for write data to finish ..  	Thread.Sleep (1000);  	// refresh user interface status ..  	DisplayBase.CanJobUpdate = true;  	DisplayBase.CanMachineUpdate = true;  	// cleanup key list ..  	JKeys.Clear ();  	MKeys.Clear ();  }  
Magic Number,RenbarServerGUI,Cleanup,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Cleanup.cs,CleanupTick,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Job_Update,The following statement contains a magic number: do {  	try {  		lock (this.JobDisplay) {  			if (this.Job_TempData != null)  				// clear old data ..  				this.Job_TempData.Clear ();  			// change lock flag ..  			IsLock = true;  			// reload data ..  			this.Job_TempData = this.GenerateJobData ("JobCache");  			// add' update items ..  			foreach (DataRow row in this.Job_TempData.Tables ["Job_Group"].Rows) {  				// mapping refresh display columns ..  				#region Mapping Job Data Displayer  				DataRow[] attr_row = this.Job_TempData.Tables ["Job_Attr"].Select (string.Format ("Job_Group_Id = '{0}'"' row ["Job_Group_Id"]));  				if (!this.JobDisplay.Rows.Contains (row ["Job_Group_Id"]) && attr_row.Length > 0) {  					DataRow drow = JobDisplay.NewRow ();  					drow ["Job_Group_Id"] = row ["Job_Group_Id"];  					drow ["WaitFor"] = attr_row [0] ["WaitFor"];  					drow ["Job_Priority"] = attr_row [0] ["Priority"];  					drow ["Job_Status"] = (JobStatusFlag)Convert.ToUInt16 (row ["Status"]);  					drow ["Start_Time"] = row ["Start_Time"];  					drow ["Finish_Time"] = row ["Finish_Time"];  					drow ["Submit_Acct"] = row ["Submit_Acct"];  					drow ["Submit_Time"] = row ["Submit_Time"];  					// add to job data display collection ..  					this.JobDisplay.Rows.Add (drow);  				}  				else {  					DataRow[] rows = this.JobDisplay.Select (string.Format ("Job_Group_Id = '{0}'"' row ["Job_Group_Id"]));  					if (rows.Length > 0 && attr_row.Length > 0) {  						// update row data ..  						rows [0] ["WaitFor"] = attr_row [0] ["WaitFor"];  						rows [0] ["Job_Priority"] = attr_row [0] ["Priority"];  						rows [0] ["Job_Status"] = (JobStatusFlag)Convert.ToUInt16 (row ["Status"]);  						rows [0] ["Start_Time"] = row ["Start_Time"];  						rows [0] ["Finish_Time"] = row ["Finish_Time"];  						rows [0] ["Submit_Acct"] = row ["Submit_Acct"];  						rows [0] ["Submit_Time"] = row ["Submit_Time"];  					}  				}  				#endregion  			}  			// delete items ..  			foreach (DataRow row in this.JobDisplay.Rows) {  				if (this.Job_TempData.Tables ["Job_Group"].Rows.Find (row ["Job_Group_Id"]) == null) {  					row.Delete ();  				}  			}  			// commit data changes ..  			this.JobDisplay.AcceptChanges ();  			// change lock flag ..  			IsLock = false;  			// release thread object locked ..  			this.runEvents [0].Set ();  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	Thread.Sleep (200);  }  while (!requestStop && updateEvents [0].WaitOne ());  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Job_Update,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: do {  	try {  		lock (this.MachineDisplay) {  			if (this.Machine_TempData != null)  				// clear old data ..  				this.Machine_TempData.Clear ();  			// change lock flag ..  			IsLock = true;  			// reload data ..  			this.Machine_TempData = this.GenerateMachineData ("MachineCache");  			// add' update items ..  			foreach (DataRow row in this.Machine_TempData.Rows) {  				// mapping refresh display columns ..  				#region Mapping Machine Data Display  				if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  					DataRow drow = this.MachineDisplay.NewRow ();  					drow ["Machine_Id"] = row ["Machine_Id"];  					drow ["HostName"] = row ["HostName"];  					drow ["Ip"] = row ["Ip"];  					drow ["IsEnable"] = row ["IsEnable"];  					drow ["Last_Online_Time"] = row ["Last_Online_Time"];  					drow ["Machine_Status"] = row ["Machine_Status"];  					drow ["Machine_Priority"] = row ["Machine_Priority"];  					drow ["TCore"] = 0;  					drow ["UCore"] = 0;  					drow ["Note"] = row ["Note"];  					// add to machine data displayer collection ..  					this.MachineDisplay.Rows.Add (drow);  				}  				else {  					if (RenderStatus != null) {  						DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  						if (rows.Length > 0 && renders.Length > 0) {  							// update row data ..  							rows [0] ["HostName"] = row ["HostName"];  							rows [0] ["Ip"] = row ["Ip"];  							rows [0] ["IsEnable"] = row ["IsEnable"];  							rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  							if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  								rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  							else  								rows [0] ["Machine_Status"] = row ["Machine_Status"];  							rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  							rows [0] ["TCore"] = renders [0] ["TCore"];  							rows [0] ["UCore"] = renders [0] ["UCore"];  							rows [0] ["Note"] = row ["Note"];  						}  					}  					else {  						DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  						if (rows.Length > 0) {  							// update row data ..  							rows [0] ["HostName"] = row ["HostName"];  							rows [0] ["Ip"] = row ["Ip"];  							rows [0] ["IsEnable"] = row ["IsEnable"];  							rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  							rows [0] ["Machine_Status"] = row ["Machine_Status"];  							rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  							rows [0] ["Note"] = row ["Note"];  						}  					}  				}  				#endregion  			}  			// delete items ..  			foreach (DataRow row in this.MachineDisplay.Rows) {  				if (this.Machine_TempData.Rows.Find (row ["Machine_Id"]) == null)  					row.Delete ();  			}  			// commit data changes ..  			this.MachineDisplay.AcceptChanges ();  			// change lock flag ..  			IsLock = false;  			#region Process Render Machine Status For Client  			if (MachineStatus == null)  				// create machine table schema ..  				MachineStatus = this.MachineDisplay.Clone ();  			// clear all row(s) ..  			MachineStatus.Rows.Clear ();  			// declare filiter condition ..  			string expression = string.Format ("Machine_Status = '{0}'"' MachineStatusFlag.RENDER);  			// copy selected row(s) to machine status property ..  			this.MachineDisplay.Select (expression).CopyToDataTable (MachineStatus' LoadOption.PreserveChanges);  			#endregion  			// release thread object locked ..  			this.runEvents [1].Set ();  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	Thread.Sleep (200);  }  while (!requestStop && updateEvents [1].WaitOne ());  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: do {  	try {  		lock (this.MachineDisplay) {  			if (this.Machine_TempData != null)  				// clear old data ..  				this.Machine_TempData.Clear ();  			// change lock flag ..  			IsLock = true;  			// reload data ..  			this.Machine_TempData = this.GenerateMachineData ("MachineCache");  			// add' update items ..  			foreach (DataRow row in this.Machine_TempData.Rows) {  				// mapping refresh display columns ..  				#region Mapping Machine Data Display  				if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  					DataRow drow = this.MachineDisplay.NewRow ();  					drow ["Machine_Id"] = row ["Machine_Id"];  					drow ["HostName"] = row ["HostName"];  					drow ["Ip"] = row ["Ip"];  					drow ["IsEnable"] = row ["IsEnable"];  					drow ["Last_Online_Time"] = row ["Last_Online_Time"];  					drow ["Machine_Status"] = row ["Machine_Status"];  					drow ["Machine_Priority"] = row ["Machine_Priority"];  					drow ["TCore"] = 0;  					drow ["UCore"] = 0;  					drow ["Note"] = row ["Note"];  					// add to machine data displayer collection ..  					this.MachineDisplay.Rows.Add (drow);  				}  				else {  					if (RenderStatus != null) {  						DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  						if (rows.Length > 0 && renders.Length > 0) {  							// update row data ..  							rows [0] ["HostName"] = row ["HostName"];  							rows [0] ["Ip"] = row ["Ip"];  							rows [0] ["IsEnable"] = row ["IsEnable"];  							rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  							if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  								rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  							else  								rows [0] ["Machine_Status"] = row ["Machine_Status"];  							rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  							rows [0] ["TCore"] = renders [0] ["TCore"];  							rows [0] ["UCore"] = renders [0] ["UCore"];  							rows [0] ["Note"] = row ["Note"];  						}  					}  					else {  						DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  						if (rows.Length > 0) {  							// update row data ..  							rows [0] ["HostName"] = row ["HostName"];  							rows [0] ["Ip"] = row ["Ip"];  							rows [0] ["IsEnable"] = row ["IsEnable"];  							rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  							rows [0] ["Machine_Status"] = row ["Machine_Status"];  							rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  							rows [0] ["Note"] = row ["Note"];  						}  					}  				}  				#endregion  			}  			// delete items ..  			foreach (DataRow row in this.MachineDisplay.Rows) {  				if (this.Machine_TempData.Rows.Find (row ["Machine_Id"]) == null)  					row.Delete ();  			}  			// commit data changes ..  			this.MachineDisplay.AcceptChanges ();  			// change lock flag ..  			IsLock = false;  			#region Process Render Machine Status For Client  			if (MachineStatus == null)  				// create machine table schema ..  				MachineStatus = this.MachineDisplay.Clone ();  			// clear all row(s) ..  			MachineStatus.Rows.Clear ();  			// declare filiter condition ..  			string expression = string.Format ("Machine_Status = '{0}'"' MachineStatusFlag.RENDER);  			// copy selected row(s) to machine status property ..  			this.MachineDisplay.Select (expression).CopyToDataTable (MachineStatus' LoadOption.PreserveChanges);  			#endregion  			// release thread object locked ..  			this.runEvents [1].Set ();  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	Thread.Sleep (200);  }  while (!requestStop && updateEvents [1].WaitOne ());  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: try {  	lock (this.MachineDisplay) {  		if (this.Machine_TempData != null)  			// clear old data ..  			this.Machine_TempData.Clear ();  		// change lock flag ..  		IsLock = true;  		// reload data ..  		this.Machine_TempData = this.GenerateMachineData ("MachineCache");  		// add' update items ..  		foreach (DataRow row in this.Machine_TempData.Rows) {  			// mapping refresh display columns ..  			#region Mapping Machine Data Display  			if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  				DataRow drow = this.MachineDisplay.NewRow ();  				drow ["Machine_Id"] = row ["Machine_Id"];  				drow ["HostName"] = row ["HostName"];  				drow ["Ip"] = row ["Ip"];  				drow ["IsEnable"] = row ["IsEnable"];  				drow ["Last_Online_Time"] = row ["Last_Online_Time"];  				drow ["Machine_Status"] = row ["Machine_Status"];  				drow ["Machine_Priority"] = row ["Machine_Priority"];  				drow ["TCore"] = 0;  				drow ["UCore"] = 0;  				drow ["Note"] = row ["Note"];  				// add to machine data displayer collection ..  				this.MachineDisplay.Rows.Add (drow);  			}  			else {  				if (RenderStatus != null) {  					DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  					if (rows.Length > 0 && renders.Length > 0) {  						// update row data ..  						rows [0] ["HostName"] = row ["HostName"];  						rows [0] ["Ip"] = row ["Ip"];  						rows [0] ["IsEnable"] = row ["IsEnable"];  						rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  						if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  							rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  						else  							rows [0] ["Machine_Status"] = row ["Machine_Status"];  						rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  						rows [0] ["TCore"] = renders [0] ["TCore"];  						rows [0] ["UCore"] = renders [0] ["UCore"];  						rows [0] ["Note"] = row ["Note"];  					}  				}  				else {  					DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  					if (rows.Length > 0) {  						// update row data ..  						rows [0] ["HostName"] = row ["HostName"];  						rows [0] ["Ip"] = row ["Ip"];  						rows [0] ["IsEnable"] = row ["IsEnable"];  						rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  						rows [0] ["Machine_Status"] = row ["Machine_Status"];  						rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  						rows [0] ["Note"] = row ["Note"];  					}  				}  			}  			#endregion  		}  		// delete items ..  		foreach (DataRow row in this.MachineDisplay.Rows) {  			if (this.Machine_TempData.Rows.Find (row ["Machine_Id"]) == null)  				row.Delete ();  		}  		// commit data changes ..  		this.MachineDisplay.AcceptChanges ();  		// change lock flag ..  		IsLock = false;  		#region Process Render Machine Status For Client  		if (MachineStatus == null)  			// create machine table schema ..  			MachineStatus = this.MachineDisplay.Clone ();  		// clear all row(s) ..  		MachineStatus.Rows.Clear ();  		// declare filiter condition ..  		string expression = string.Format ("Machine_Status = '{0}'"' MachineStatusFlag.RENDER);  		// copy selected row(s) to machine status property ..  		this.MachineDisplay.Select (expression).CopyToDataTable (MachineStatus' LoadOption.PreserveChanges);  		#endregion  		// release thread object locked ..  		this.runEvents [1].Set ();  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: lock (this.MachineDisplay) {  	if (this.Machine_TempData != null)  		// clear old data ..  		this.Machine_TempData.Clear ();  	// change lock flag ..  	IsLock = true;  	// reload data ..  	this.Machine_TempData = this.GenerateMachineData ("MachineCache");  	// add' update items ..  	foreach (DataRow row in this.Machine_TempData.Rows) {  		// mapping refresh display columns ..  		#region Mapping Machine Data Display  		if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  			DataRow drow = this.MachineDisplay.NewRow ();  			drow ["Machine_Id"] = row ["Machine_Id"];  			drow ["HostName"] = row ["HostName"];  			drow ["Ip"] = row ["Ip"];  			drow ["IsEnable"] = row ["IsEnable"];  			drow ["Last_Online_Time"] = row ["Last_Online_Time"];  			drow ["Machine_Status"] = row ["Machine_Status"];  			drow ["Machine_Priority"] = row ["Machine_Priority"];  			drow ["TCore"] = 0;  			drow ["UCore"] = 0;  			drow ["Note"] = row ["Note"];  			// add to machine data displayer collection ..  			this.MachineDisplay.Rows.Add (drow);  		}  		else {  			if (RenderStatus != null) {  				DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  				if (rows.Length > 0 && renders.Length > 0) {  					// update row data ..  					rows [0] ["HostName"] = row ["HostName"];  					rows [0] ["Ip"] = row ["Ip"];  					rows [0] ["IsEnable"] = row ["IsEnable"];  					rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  					if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  						rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  					else  						rows [0] ["Machine_Status"] = row ["Machine_Status"];  					rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  					rows [0] ["TCore"] = renders [0] ["TCore"];  					rows [0] ["UCore"] = renders [0] ["UCore"];  					rows [0] ["Note"] = row ["Note"];  				}  			}  			else {  				DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  				if (rows.Length > 0) {  					// update row data ..  					rows [0] ["HostName"] = row ["HostName"];  					rows [0] ["Ip"] = row ["Ip"];  					rows [0] ["IsEnable"] = row ["IsEnable"];  					rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  					rows [0] ["Machine_Status"] = row ["Machine_Status"];  					rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  					rows [0] ["TCore"] = 0;  					rows [0] ["UCore"] = 0;  					rows [0] ["Note"] = row ["Note"];  				}  			}  		}  		#endregion  	}  	// delete items ..  	foreach (DataRow row in this.MachineDisplay.Rows) {  		if (this.Machine_TempData.Rows.Find (row ["Machine_Id"]) == null)  			row.Delete ();  	}  	// commit data changes ..  	this.MachineDisplay.AcceptChanges ();  	// change lock flag ..  	IsLock = false;  	#region Process Render Machine Status For Client  	if (MachineStatus == null)  		// create machine table schema ..  		MachineStatus = this.MachineDisplay.Clone ();  	// clear all row(s) ..  	MachineStatus.Rows.Clear ();  	// declare filiter condition ..  	string expression = string.Format ("Machine_Status = '{0}'"' MachineStatusFlag.RENDER);  	// copy selected row(s) to machine status property ..  	this.MachineDisplay.Select (expression).CopyToDataTable (MachineStatus' LoadOption.PreserveChanges);  	#endregion  	// release thread object locked ..  	this.runEvents [1].Set ();  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: foreach (DataRow row in this.Machine_TempData.Rows) {  	// mapping refresh display columns ..  	#region Mapping Machine Data Display  	if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  		DataRow drow = this.MachineDisplay.NewRow ();  		drow ["Machine_Id"] = row ["Machine_Id"];  		drow ["HostName"] = row ["HostName"];  		drow ["Ip"] = row ["Ip"];  		drow ["IsEnable"] = row ["IsEnable"];  		drow ["Last_Online_Time"] = row ["Last_Online_Time"];  		drow ["Machine_Status"] = row ["Machine_Status"];  		drow ["Machine_Priority"] = row ["Machine_Priority"];  		drow ["TCore"] = 0;  		drow ["UCore"] = 0;  		drow ["Note"] = row ["Note"];  		// add to machine data displayer collection ..  		this.MachineDisplay.Rows.Add (drow);  	}  	else {  		if (RenderStatus != null) {  			DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  			if (rows.Length > 0 && renders.Length > 0) {  				// update row data ..  				rows [0] ["HostName"] = row ["HostName"];  				rows [0] ["Ip"] = row ["Ip"];  				rows [0] ["IsEnable"] = row ["IsEnable"];  				rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  				if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  					rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  				else  					rows [0] ["Machine_Status"] = row ["Machine_Status"];  				rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  				rows [0] ["TCore"] = renders [0] ["TCore"];  				rows [0] ["UCore"] = renders [0] ["UCore"];  				rows [0] ["Note"] = row ["Note"];  			}  		}  		else {  			DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  			if (rows.Length > 0) {  				// update row data ..  				rows [0] ["HostName"] = row ["HostName"];  				rows [0] ["Ip"] = row ["Ip"];  				rows [0] ["IsEnable"] = row ["IsEnable"];  				rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  				rows [0] ["Machine_Status"] = row ["Machine_Status"];  				rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  				rows [0] ["TCore"] = 0;  				rows [0] ["UCore"] = 0;  				rows [0] ["Note"] = row ["Note"];  			}  		}  	}  	#endregion  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: if (!this.MachineDisplay.Rows.Contains (row ["Machine_Id"])) {  	DataRow drow = this.MachineDisplay.NewRow ();  	drow ["Machine_Id"] = row ["Machine_Id"];  	drow ["HostName"] = row ["HostName"];  	drow ["Ip"] = row ["Ip"];  	drow ["IsEnable"] = row ["IsEnable"];  	drow ["Last_Online_Time"] = row ["Last_Online_Time"];  	drow ["Machine_Status"] = row ["Machine_Status"];  	drow ["Machine_Priority"] = row ["Machine_Priority"];  	drow ["TCore"] = 0;  	drow ["UCore"] = 0;  	drow ["Note"] = row ["Note"];  	// add to machine data displayer collection ..  	this.MachineDisplay.Rows.Add (drow);  }  else {  	if (RenderStatus != null) {  		DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  		if (rows.Length > 0 && renders.Length > 0) {  			// update row data ..  			rows [0] ["HostName"] = row ["HostName"];  			rows [0] ["Ip"] = row ["Ip"];  			rows [0] ["IsEnable"] = row ["IsEnable"];  			rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  			if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  				rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  			else  				rows [0] ["Machine_Status"] = row ["Machine_Status"];  			rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  			rows [0] ["TCore"] = renders [0] ["TCore"];  			rows [0] ["UCore"] = renders [0] ["UCore"];  			rows [0] ["Note"] = row ["Note"];  		}  	}  	else {  		DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  		if (rows.Length > 0) {  			// update row data ..  			rows [0] ["HostName"] = row ["HostName"];  			rows [0] ["Ip"] = row ["Ip"];  			rows [0] ["IsEnable"] = row ["IsEnable"];  			rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  			rows [0] ["Machine_Status"] = row ["Machine_Status"];  			rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  			rows [0] ["TCore"] = 0;  			rows [0] ["UCore"] = 0;  			rows [0] ["Note"] = row ["Note"];  		}  	}  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: if (RenderStatus != null) {  	DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]))' renders = RenderStatus.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"]));  	if (rows.Length > 0 && renders.Length > 0) {  		// update row data ..  		rows [0] ["HostName"] = row ["HostName"];  		rows [0] ["Ip"] = row ["Ip"];  		rows [0] ["IsEnable"] = row ["IsEnable"];  		rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  		if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  			rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  		else  			rows [0] ["Machine_Status"] = row ["Machine_Status"];  		rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  		rows [0] ["TCore"] = renders [0] ["TCore"];  		rows [0] ["UCore"] = renders [0] ["UCore"];  		rows [0] ["Note"] = row ["Note"];  	}  }  else {  	DataRow[] rows = this.MachineDisplay.Select (string.Format ("Machine_Id = '{0}'"' row ["Machine_Id"]));  	if (rows.Length > 0) {  		// update row data ..  		rows [0] ["HostName"] = row ["HostName"];  		rows [0] ["Ip"] = row ["Ip"];  		rows [0] ["IsEnable"] = row ["IsEnable"];  		rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  		rows [0] ["Machine_Status"] = row ["Machine_Status"];  		rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  		rows [0] ["TCore"] = 0;  		rows [0] ["UCore"] = 0;  		rows [0] ["Note"] = row ["Note"];  	}  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: if (rows.Length > 0 && renders.Length > 0) {  	// update row data ..  	rows [0] ["HostName"] = row ["HostName"];  	rows [0] ["Ip"] = row ["Ip"];  	rows [0] ["IsEnable"] = row ["IsEnable"];  	rows [0] ["Last_Online_Time"] = row ["Last_Online_Time"];  	if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  		rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  	else  		rows [0] ["Machine_Status"] = row ["Machine_Status"];  	rows [0] ["Machine_Priority"] = row ["Machine_Priority"];  	rows [0] ["TCore"] = renders [0] ["TCore"];  	rows [0] ["UCore"] = renders [0] ["UCore"];  	rows [0] ["Note"] = row ["Note"];  }  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: if (Convert.ToUInt16 (renders [0] ["ConnectFail"]) >= 5)  	rows [0] ["Machine_Status"] = MachineStatusFlag.OFFLINE;  else  	rows [0] ["Machine_Status"] = row ["Machine_Status"];  
Magic Number,RenbarServerGUI,DisplayBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Display.cs,Machine_Update,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenbarServerGUI,Init_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Init_Form.cs,Init_Form_Load,The following statement contains a magic number: this.Label_Product.Font = new Font (new FontFamily ("Arial Black")' 22' FontStyle.Bold' GraphicsUnit.Pixel);  
Magic Number,RenbarServerGUI,Init_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Init_Form.cs,Initialize,The following statement contains a magic number: try {  	// init server base instance ..  	this.__Base = new ServerBase ();  	// get rows count ..  	uint count = __Base.DataRowsCount;  	for (int i = 0; i < count; i++) {  		this.ProgressBar_Status.Value = Convert.ToInt32 (Convert.ToDouble ((100 / (double)count) * (double)i));  		// refresh progress bar status ..  		this.Refresh ();  	}  }  catch (Exception ex) {  	__HasError = true;  	MessageBox.Show (this' ex.Message' global::RenbarLib.Environment.AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1);  }  finally {  	this.Close ();  }  
Magic Number,RenbarServerGUI,Init_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Init_Form.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	this.ProgressBar_Status.Value = Convert.ToInt32 (Convert.ToDouble ((100 / (double)count) * (double)i));  	// refresh progress bar status ..  	this.Refresh ();  }  
Magic Number,RenbarServerGUI,Init_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Init_Form.cs,Initialize,The following statement contains a magic number: this.ProgressBar_Status.Value = Convert.ToInt32 (Convert.ToDouble ((100 / (double)count) * (double)i));  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: do {  	// read currently job information ..  	DataTable JobTable = Base.JobStatus;  	if (JobTable != null && JobTable.Rows.Count > 0) {  		#region Invoke Job Data Object Delegate Procedure  		JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Job_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					// refresh control ..  					this.ListView_Job_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (JobItem.Text == Item.Text) {  					if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < JobItem.SubItems.Count; i++)  						JobItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.JobListViewSorter.SortColumn = 7;  					this.ListView_Job_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// add new items to the listview control ..  			this.ListView_Job_Status.Items.Add (Item);  			// refresh control ..  			this.ListView_Job_Status.Update ();  			// calculate items ..  			this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  			// sorting ..  			this.JobListViewSorter.SortColumn = 7;  			this.ListView_Job_Status.Sort ();  			// refresh control ..  			this.ListView_Job_Status.Update ();  		};  		foreach (DataRow row in JobTable.Rows) {  			if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Job_Group_Id"].ToString ().Trim ()'  				row ["WaitFor"].ToString ().Trim ()'  				row ["Job_Priority"].ToString ().Trim ()'  				row ["Job_Status"].ToString ().Trim ()'  				row ["Start_Time"].ToString ().Trim ()'  				row ["Finish_Time"].ToString ().Trim ()'  				row ["Submit_Acct"].ToString ().Trim ()'  				row ["Submit_Time"].ToString ().Trim ()  			};  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (JobTable.PrimaryKey.Length == 0)  				break;  			if (!JobTable.Rows.Contains (s)) {  				try {  					// invoke job list view delegate control ..  					this.Invoke (JobData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobTable != null && JobTable.Rows.Count > 0) {  	#region Invoke Job Data Object Delegate Procedure  	JobDataCallBack JobData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Job_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				// refresh control ..  				this.ListView_Job_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (JobItem.Text == Item.Text) {  				if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < JobItem.SubItems.Count; i++)  					JobItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.JobListViewSorter.SortColumn = 7;  				this.ListView_Job_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// add new items to the listview control ..  		this.ListView_Job_Status.Items.Add (Item);  		// refresh control ..  		this.ListView_Job_Status.Update ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	};  	foreach (DataRow row in JobTable.Rows) {  		if (!ItemList.Contains (row ["Job_Group_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Job_Group_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Job_Group_Id"].ToString ().Trim ()'  			row ["WaitFor"].ToString ().Trim ()'  			row ["Job_Priority"].ToString ().Trim ()'  			row ["Job_Status"].ToString ().Trim ()'  			row ["Start_Time"].ToString ().Trim ()'  			row ["Finish_Time"].ToString ().Trim ()'  			row ["Submit_Acct"].ToString ().Trim ()'  			row ["Submit_Time"].ToString ().Trim ()  		};  		try {  			// invoke job list view delegate control ..  			this.Invoke (JobData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (JobTable.PrimaryKey.Length == 0)  			break;  		if (!JobTable.Rows.Contains (s)) {  			try {  				// invoke job list view delegate control ..  				this.Invoke (JobData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  			// remove item ..  			this.ListView_Job_Status.Items [i].Remove ();  		// calculate items ..  		this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		// refresh control ..  		this.ListView_Job_Status.Update ();  	}  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: for (int i = 0; i < ListView_Job_Status.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Job_Status.Items [i].SubItems [0].Text == DeleteItemText)  		// remove item ..  		this.ListView_Job_Status.Items [i].Remove ();  	// calculate items ..  	this.GroupBox_Jobs.Text = "Job" + string.Format (" ({0})"' this.ListView_Job_Status.Items.Count.ToString ());  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	// refresh control ..  	this.ListView_Job_Status.Update ();  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: this.JobListViewSorter.SortColumn = 7;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (JobItem.Text == Item.Text) {  		if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < JobItem.SubItems.Count; i++)  			JobItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (JobItem.Text == Item.Text) {  		if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < JobItem.SubItems.Count; i++)  			JobItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (JobItem.Text == Item.Text) {  		if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < JobItem.SubItems.Count; i++)  			JobItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (JobItem.Text == Item.Text) {  		if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < JobItem.SubItems.Count; i++)  			JobItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: foreach (ListViewItem JobItem in this.ListView_Job_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (JobItem.Text == Item.Text) {  		if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < JobItem.SubItems.Count; i++)  			JobItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.JobListViewSorter.SortColumn = 7;  		this.ListView_Job_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.Text == Item.Text) {  	if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < JobItem.SubItems.Count; i++)  		JobItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.Text == Item.Text) {  	if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < JobItem.SubItems.Count; i++)  		JobItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.Text == Item.Text) {  	if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < JobItem.SubItems.Count; i++)  		JobItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.Text == Item.Text) {  	if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < JobItem.SubItems.Count; i++)  		JobItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.Text == Item.Text) {  	if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < JobItem.SubItems.Count; i++)  		JobItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.JobListViewSorter.SortColumn = 7;  	this.ListView_Job_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: if (JobItem.SubItems [1].Text == Item.SubItems [1].Text && JobItem.SubItems [2].Text == Item.SubItems [2].Text && JobItem.SubItems [3].Text == Item.SubItems [3].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: this.JobListViewSorter.SortColumn = 7;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: this.JobListViewSorter.SortColumn = 7;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,JobsData,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: do {  	// read currently machine information ..  	DataTable MachineTable = Base.MachineStatus;  	if (MachineTable != null && MachineTable.Rows.Count > 0) {  		#region Invoke Machine Data Object Delegate Procedure  		MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  			#region Delete Item Partial  			if (!string.IsNullOrEmpty (DeleteItemText)) {  				for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  					// processing application all events ..  					Application.DoEvents ();  					if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  						// remove item ..  						this.ListView_Machine_Status.Items [i].Remove ();  					// calculate items ..  					this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					// refresh control ..  					this.ListView_Machine_Status.Update ();  				}  				return;  			}  			#endregion  			#region Update Item Partial  			foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  				// process other events ..  				Application.DoEvents ();  				if (MachineItem.Text == Item.Text) {  					if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  						return;  					// update the item of sub items ..  					for (int i = 1; i < MachineItem.SubItems.Count; i++)  						MachineItem.SubItems [i] = Item.SubItems [i];  					// sorting ..  					this.MachineListViewSorter.SortColumn = 4;  					this.ListView_Machine_Status.Sort ();  					return;  				}  			}  			#endregion  			// process other events ..  			Application.DoEvents ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  			// add new items to the listview control ..  			this.ListView_Machine_Status.Items.Add (Item);  			// calculate items ..  			this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  			// sorting ..  			this.MachineListViewSorter.SortColumn = 4;  			this.ListView_Machine_Status.Sort ();  			// refresh control ..  			this.ListView_Machine_Status.Update ();  		};  		foreach (DataRow row in MachineTable.Rows) {  			if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  				ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  			string[] subitems =  {  				row ["Machine_Id"].ToString ().Trim ()'  				row ["HostName"].ToString ().Trim ()'  				row ["Ip"].ToString ().Trim ()'  				row ["IsEnable"].ToString ().Trim ()'  				row ["Last_Online_Time"].ToString ().Trim ()'  				row ["Machine_Status"].ToString ().Trim ()'  				row ["Machine_Priority"].ToString ().Trim ()'  				row ["TCore"].ToString ().Trim ()'  				row ["UCore"].ToString ().Trim ()'  				row ["Note"].ToString ().Trim ()'  			};  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem (subitems)'  					null  				});  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  		// search deleted items ..  		foreach (string s in ItemList) {  			if (MachineTable.PrimaryKey.Length == 0)  				break;  			if (!MachineTable.Rows.Contains (s)) {  				try {  					// invoke machine list view delegate control ..  					this.Invoke (MachineData' new object[] {  						new ListViewItem ()'  						s  					});  					// add to remove list ..  					DeleteList.Add (s);  				}  				catch (InvalidOperationException) {  					// if delegate object already cleanup' exit loop ..  					return;  				}  			}  		}  		// remove item list record ..  		foreach (string s in DeleteList)  			// remove data record ..  			ItemList.Remove (s);  		// clear all delete list ..  		DeleteList.Clear ();  		#endregion  	}  	// set access state timespan ..  	Thread.Sleep (1000);  }  while (!requeststop);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineTable != null && MachineTable.Rows.Count > 0) {  	#region Invoke Machine Data Object Delegate Procedure  	MachineDataCallBack MachineData = delegate (ListViewItem Item' string DeleteItemText) {  		#region Delete Item Partial  		if (!string.IsNullOrEmpty (DeleteItemText)) {  			for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  				// processing application all events ..  				Application.DoEvents ();  				if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  					// remove item ..  					this.ListView_Machine_Status.Items [i].Remove ();  				// calculate items ..  				this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				// refresh control ..  				this.ListView_Machine_Status.Update ();  			}  			return;  		}  		#endregion  		#region Update Item Partial  		foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  			// process other events ..  			Application.DoEvents ();  			if (MachineItem.Text == Item.Text) {  				if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  					return;  				// update the item of sub items ..  				for (int i = 1; i < MachineItem.SubItems.Count; i++)  					MachineItem.SubItems [i] = Item.SubItems [i];  				// sorting ..  				this.MachineListViewSorter.SortColumn = 4;  				this.ListView_Machine_Status.Sort ();  				return;  			}  		}  		#endregion  		// process other events ..  		Application.DoEvents ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  		// add new items to the listview control ..  		this.ListView_Machine_Status.Items.Add (Item);  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	};  	foreach (DataRow row in MachineTable.Rows) {  		if (!ItemList.Contains (row ["Machine_Id"].ToString ().Trim ()))  			ItemList.Add (row ["Machine_Id"].ToString ().Trim ());  		string[] subitems =  {  			row ["Machine_Id"].ToString ().Trim ()'  			row ["HostName"].ToString ().Trim ()'  			row ["Ip"].ToString ().Trim ()'  			row ["IsEnable"].ToString ().Trim ()'  			row ["Last_Online_Time"].ToString ().Trim ()'  			row ["Machine_Status"].ToString ().Trim ()'  			row ["Machine_Priority"].ToString ().Trim ()'  			row ["TCore"].ToString ().Trim ()'  			row ["UCore"].ToString ().Trim ()'  			row ["Note"].ToString ().Trim ()'  		};  		try {  			// invoke machine list view delegate control ..  			this.Invoke (MachineData' new object[] {  				new ListViewItem (subitems)'  				null  			});  		}  		catch (InvalidOperationException) {  			// if delegate object already cleanup' exit loop ..  			return;  		}  	}  	// search deleted items ..  	foreach (string s in ItemList) {  		if (MachineTable.PrimaryKey.Length == 0)  			break;  		if (!MachineTable.Rows.Contains (s)) {  			try {  				// invoke machine list view delegate control ..  				this.Invoke (MachineData' new object[] {  					new ListViewItem ()'  					s  				});  				// add to remove list ..  				DeleteList.Add (s);  			}  			catch (InvalidOperationException) {  				// if delegate object already cleanup' exit loop ..  				return;  			}  		}  	}  	// remove item list record ..  	foreach (string s in DeleteList)  		// remove data record ..  		ItemList.Remove (s);  	// clear all delete list ..  	DeleteList.Clear ();  	#endregion  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (!string.IsNullOrEmpty (DeleteItemText)) {  	for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  		// processing application all events ..  		Application.DoEvents ();  		if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  			// remove item ..  			this.ListView_Machine_Status.Items [i].Remove ();  		// calculate items ..  		this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		// refresh control ..  		this.ListView_Machine_Status.Update ();  	}  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: for (int i = 0; i < ListView_Machine_Status.Items.Count; i++) {  	// processing application all events ..  	Application.DoEvents ();  	if (this.ListView_Machine_Status.Items [i].SubItems [0].Text == DeleteItemText)  		// remove item ..  		this.ListView_Machine_Status.Items [i].Remove ();  	// calculate items ..  	this.GroupBox_Machines.Text = "Machine" + string.Format (" ({0})"' this.ListView_Machine_Status.Items.Count.ToString ());  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	// refresh control ..  	this.ListView_Machine_Status.Update ();  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: this.MachineListViewSorter.SortColumn = 4;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: foreach (ListViewItem MachineItem in this.ListView_Machine_Status.Items) {  	// process other events ..  	Application.DoEvents ();  	if (MachineItem.Text == Item.Text) {  		if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  			return;  		// update the item of sub items ..  		for (int i = 1; i < MachineItem.SubItems.Count; i++)  			MachineItem.SubItems [i] = Item.SubItems [i];  		// sorting ..  		this.MachineListViewSorter.SortColumn = 4;  		this.ListView_Machine_Status.Sort ();  		return;  	}  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.Text == Item.Text) {  	if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  		return;  	// update the item of sub items ..  	for (int i = 1; i < MachineItem.SubItems.Count; i++)  		MachineItem.SubItems [i] = Item.SubItems [i];  	// sorting ..  	this.MachineListViewSorter.SortColumn = 4;  	this.ListView_Machine_Status.Sort ();  	return;  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: if (MachineItem.SubItems [3].Text == Item.SubItems [3].Text && MachineItem.SubItems [4].Text == Item.SubItems [4].Text && MachineItem.SubItems [5].Text == Item.SubItems [5].Text && MachineItem.SubItems [6].Text == Item.SubItems [6].Text && MachineItem.SubItems [7].Text == Item.SubItems [7].Text && MachineItem.SubItems [8].Text == Item.SubItems [8].Text && MachineItem.SubItems [9].Text == Item.SubItems [9].Text)  	return;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: this.MachineListViewSorter.SortColumn = 4;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: this.MachineListViewSorter.SortColumn = 4;  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,MachinesData,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,Main_Form_Resize,The following statement contains a magic number: if (!this.IsInitFlag && this.WindowState == FormWindowState.Minimized) {  	this.Hide ();  	this.ServerNotify.ShowBalloonTip (30);  }  
Magic Number,RenbarServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Main_Form.cs,Main_Form_Resize,The following statement contains a magic number: this.ServerNotify.ShowBalloonTip (30);  
Magic Number,RenbarServerGUI,ServerBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Base.cs,SlaveThread,The following statement contains a magic number: try {  	// create object instance ..  	runConnect = new ScanPort ();  	do {  		//新增備援機制 是否是主機，如果不是建立連接測試類，如果可以連接主機，則不啟動備援，如果連接主機不通，則啟動備援機制  		#region 本機是主機  		if (EnvHostBase.LocalIpAddress.ToString () == Settings.Default.MasterServer) {  			if (NoProtocol) {  				this.OperationBase = new RenderBase (this.EnvData' this.EnvLog) {  					ConnectPort = this.__ListenRenderPort  				};  				this.PortalBase = new ProtocolBase (this.EnvData' this.EnvLog) {  					ConnectPort = this.__ListenRenderPort'  					ListenPort = this.__ListenClientPort'  					MaxHistory = this.__JobHistoryMaxRecord  				};  				//開啟監聽端口6601  				this.MasterBase = new SlaveBase (this.EnvLog) {  					_listenSlavePort = this.__ServerSyncPort  				};  				NoProtocol = false;  			}  		}  		#endregion  		#region 本機非主機  		else {  			//主機未啟動  			if (!runConnect.Scan (System.Net.IPAddress.Parse (Settings.Default.MasterServer)' this.__ServerSyncPort)) {  				if (this.OperationBase == null) {  					this.OperationBase = new RenderBase (this.EnvData' this.EnvLog) {  						ConnectPort = this.__ListenRenderPort  					};  				}  				if (this.PortalBase == null) {  					this.PortalBase = new ProtocolBase (this.EnvData' this.EnvLog) {  						ConnectPort = this.__ListenRenderPort'  						ListenPort = this.__ListenClientPort'  						MaxHistory = this.__JobHistoryMaxRecord  					};  				}  			}  			//主機已啟動  			else {  				//取消与客户端以及render端沟通的线程  				if (this.OperationBase != null) {  					this.OperationBase.Dispose ();  					this.OperationBase = null;  				}  				if (this.PortalBase != null) {  					this.PortalBase.Dispose ();  					this.PortalBase = null;  				}  			}  		}  		#endregion  		Thread.Sleep (1000);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + "Master to Slave!";  	// write to log file ..  	//EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ServerBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Base.cs,SlaveThread,The following statement contains a magic number: do {  	//新增備援機制 是否是主機，如果不是建立連接測試類，如果可以連接主機，則不啟動備援，如果連接主機不通，則啟動備援機制  	#region 本機是主機  	if (EnvHostBase.LocalIpAddress.ToString () == Settings.Default.MasterServer) {  		if (NoProtocol) {  			this.OperationBase = new RenderBase (this.EnvData' this.EnvLog) {  				ConnectPort = this.__ListenRenderPort  			};  			this.PortalBase = new ProtocolBase (this.EnvData' this.EnvLog) {  				ConnectPort = this.__ListenRenderPort'  				ListenPort = this.__ListenClientPort'  				MaxHistory = this.__JobHistoryMaxRecord  			};  			//開啟監聽端口6601  			this.MasterBase = new SlaveBase (this.EnvLog) {  				_listenSlavePort = this.__ServerSyncPort  			};  			NoProtocol = false;  		}  	}  	#endregion  	#region 本機非主機  	else {  		//主機未啟動  		if (!runConnect.Scan (System.Net.IPAddress.Parse (Settings.Default.MasterServer)' this.__ServerSyncPort)) {  			if (this.OperationBase == null) {  				this.OperationBase = new RenderBase (this.EnvData' this.EnvLog) {  					ConnectPort = this.__ListenRenderPort  				};  			}  			if (this.PortalBase == null) {  				this.PortalBase = new ProtocolBase (this.EnvData' this.EnvLog) {  					ConnectPort = this.__ListenRenderPort'  					ListenPort = this.__ListenClientPort'  					MaxHistory = this.__JobHistoryMaxRecord  				};  			}  		}  		//主機已啟動  		else {  			//取消与客户端以及render端沟通的线程  			if (this.OperationBase != null) {  				this.OperationBase.Dispose ();  				this.OperationBase = null;  			}  			if (this.PortalBase != null) {  				this.PortalBase.Dispose ();  				this.PortalBase = null;  			}  		}  	}  	#endregion  	Thread.Sleep (1000);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ServerBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Base.cs,SlaveThread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,ProtocolBase,The following statement contains a magic number: while (ListenPort > 0)  	Thread.Sleep (500);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,ProtocolBase,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: try {  	// create object instance ..  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.ListenPort);  	//update  offline machine stauts(F7300253)防止非正常离线情况发生  	//Thread isNotOffline = new Thread(new ThreadStart(judge));  	//isNotOffline.Start();  	do {  		// confirm connect requests ..  		if (ClientServiceSocket.Pending ()) {  			int k = 0;  			// accept a new connect request ..  			global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  			//***************************************************************************(F7300253)  			//限制同一个IP的isconnect次数(Max is 6)  			IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  			Newadd = IP.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (Newadd == address [i]) {  					k++;  					if (k > 6) {  						i = -1;  					}  				}  			}  			if (k < 6) {  				address [m] = Newadd;  				if (m == 0) {  					for (int i = n - 1; i >= 0; i--) {  						address [i] = null;  					}  					m = 99;  				}  				else {  					m--;  				}  				//***************************************************************************  				handle.ReceiveTimeout = 10000;  				handle.SendTimeout = 10000;  				ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			}  		}  		// delay 0.2 second to next listening ..  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: do {  	// confirm connect requests ..  	if (ClientServiceSocket.Pending ()) {  		int k = 0;  		// accept a new connect request ..  		global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  		//***************************************************************************(F7300253)  		//限制同一个IP的isconnect次数(Max is 6)  		IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  		Newadd = IP.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (Newadd == address [i]) {  				k++;  				if (k > 6) {  					i = -1;  				}  			}  		}  		if (k < 6) {  			address [m] = Newadd;  			if (m == 0) {  				for (int i = n - 1; i >= 0; i--) {  					address [i] = null;  				}  				m = 99;  			}  			else {  				m--;  			}  			//***************************************************************************  			handle.ReceiveTimeout = 10000;  			handle.SendTimeout = 10000;  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  		}  	}  	// delay 0.2 second to next listening ..  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (ClientServiceSocket.Pending ()) {  	int k = 0;  	// accept a new connect request ..  	global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  	//***************************************************************************(F7300253)  	//限制同一个IP的isconnect次数(Max is 6)  	IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  	Newadd = IP.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (Newadd == address [i]) {  			k++;  			if (k > 6) {  				i = -1;  			}  		}  	}  	if (k < 6) {  		address [m] = Newadd;  		if (m == 0) {  			for (int i = n - 1; i >= 0; i--) {  				address [i] = null;  			}  			m = 99;  		}  		else {  			m--;  		}  		//***************************************************************************  		handle.ReceiveTimeout = 10000;  		handle.SendTimeout = 10000;  		ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (ClientServiceSocket.Pending ()) {  	int k = 0;  	// accept a new connect request ..  	global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  	//***************************************************************************(F7300253)  	//限制同一个IP的isconnect次数(Max is 6)  	IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  	Newadd = IP.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (Newadd == address [i]) {  			k++;  			if (k > 6) {  				i = -1;  			}  		}  	}  	if (k < 6) {  		address [m] = Newadd;  		if (m == 0) {  			for (int i = n - 1; i >= 0; i--) {  				address [i] = null;  			}  			m = 99;  		}  		else {  			m--;  		}  		//***************************************************************************  		handle.ReceiveTimeout = 10000;  		handle.SendTimeout = 10000;  		ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (ClientServiceSocket.Pending ()) {  	int k = 0;  	// accept a new connect request ..  	global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  	//***************************************************************************(F7300253)  	//限制同一个IP的isconnect次数(Max is 6)  	IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  	Newadd = IP.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (Newadd == address [i]) {  			k++;  			if (k > 6) {  				i = -1;  			}  		}  	}  	if (k < 6) {  		address [m] = Newadd;  		if (m == 0) {  			for (int i = n - 1; i >= 0; i--) {  				address [i] = null;  			}  			m = 99;  		}  		else {  			m--;  		}  		//***************************************************************************  		handle.ReceiveTimeout = 10000;  		handle.SendTimeout = 10000;  		ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (ClientServiceSocket.Pending ()) {  	int k = 0;  	// accept a new connect request ..  	global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  	//***************************************************************************(F7300253)  	//限制同一个IP的isconnect次数(Max is 6)  	IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  	Newadd = IP.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (Newadd == address [i]) {  			k++;  			if (k > 6) {  				i = -1;  			}  		}  	}  	if (k < 6) {  		address [m] = Newadd;  		if (m == 0) {  			for (int i = n - 1; i >= 0; i--) {  				address [i] = null;  			}  			m = 99;  		}  		else {  			m--;  		}  		//***************************************************************************  		handle.ReceiveTimeout = 10000;  		handle.SendTimeout = 10000;  		ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (ClientServiceSocket.Pending ()) {  	int k = 0;  	// accept a new connect request ..  	global::System.Net.Sockets.TcpClient handle = ClientServiceSocket.AcceptListen ();  	//***************************************************************************(F7300253)  	//限制同一个IP的isconnect次数(Max is 6)  	IPEndPoint IP = (IPEndPoint)handle.Client.RemoteEndPoint;  	Newadd = IP.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (Newadd == address [i]) {  			k++;  			if (k > 6) {  				i = -1;  			}  		}  	}  	if (k < 6) {  		address [m] = Newadd;  		if (m == 0) {  			for (int i = n - 1; i >= 0; i--) {  				address [i] = null;  			}  			m = 99;  		}  		else {  			m--;  		}  		//***************************************************************************  		handle.ReceiveTimeout = 10000;  		handle.SendTimeout = 10000;  		ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: for (int i = n - 1; i >= 0; i--) {  	if (Newadd == address [i]) {  		k++;  		if (k > 6) {  			i = -1;  		}  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (Newadd == address [i]) {  	k++;  	if (k > 6) {  		i = -1;  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (k > 6) {  	i = -1;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (k < 6) {  	address [m] = Newadd;  	if (m == 0) {  		for (int i = n - 1; i >= 0; i--) {  			address [i] = null;  		}  		m = 99;  	}  	else {  		m--;  	}  	//***************************************************************************  	handle.ReceiveTimeout = 10000;  	handle.SendTimeout = 10000;  	ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (k < 6) {  	address [m] = Newadd;  	if (m == 0) {  		for (int i = n - 1; i >= 0; i--) {  			address [i] = null;  		}  		m = 99;  	}  	else {  		m--;  	}  	//***************************************************************************  	handle.ReceiveTimeout = 10000;  	handle.SendTimeout = 10000;  	ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (k < 6) {  	address [m] = Newadd;  	if (m == 0) {  		for (int i = n - 1; i >= 0; i--) {  			address [i] = null;  		}  		m = 99;  	}  	else {  		m--;  	}  	//***************************************************************************  	handle.ReceiveTimeout = 10000;  	handle.SendTimeout = 10000;  	ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (k < 6) {  	address [m] = Newadd;  	if (m == 0) {  		for (int i = n - 1; i >= 0; i--) {  			address [i] = null;  		}  		m = 99;  	}  	else {  		m--;  	}  	//***************************************************************************  	handle.ReceiveTimeout = 10000;  	handle.SendTimeout = 10000;  	ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: if (m == 0) {  	for (int i = n - 1; i >= 0; i--) {  		address [i] = null;  	}  	m = 99;  }  else {  	m--;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: m = 99;  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: handle.ReceiveTimeout = 10000;  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: handle.SendTimeout = 10000;  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Request,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// define default communication enumeration ..  	Client2Server.CommunicationType ActionHeader = Client2Server.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	while (!requestStop) {  		#region  		received = this.EnvSvr.Deserialize (client.Receive ());  		if (received != null) {  			// unpackage remote object data ..  			this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			// declare server response object list interface ..  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// clear before receive data ..  			received = null;  			#region All GUI Work……  			switch (ActionHeader) {  			#region --F7300290--OK-- A/U:Machine Info Case Workflow  			case Client2Server.CommunicationType.MACHINEINFO:  				try {  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  					})' "Name' Ip"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					#region 填充數據  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key)) {  							mrow [kv.Key] = kv.Value;  						}  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#region 設定機器狀態值  					// decision machine type ..  					if (QueueItems.ContainsKey ("IsRender")) {  						if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 0;  							}  						}  						else {  							mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  							if (DBNull.Value == mrow ["Priority"]) {  								mrow ["Priority"] = 20;  							}  						}  					}  					// decision the dictionary exist maintenance flag ..  					if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  					// decision the dictionary exist offline flag ..  					if (QueueItems.ContainsKey ("IsOffLine")) {  						if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  							mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  							//***********************************************************(F7300253)  							global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  							IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  							string NetIP = IPClear.Address.ToString ();  							for (int i = n - 1; i >= 0; i--) {  								if (NetIP == address [i]) {  									address [i] = null;  								}  							}  							//************************************************************  						}  					}  					#endregion  					#endregion  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Refresh Machine Data 更新/插入Machine數據！  					// update machine data ..  					if (view_machine_data.Count > 0) {  						// get machine id column ..  						mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Update Machine Set ";  						cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  						cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  					}  					// add new machine data ..  					else {  						// create new machine id ..  						mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						cmd = " Insert Into Machine ";  						cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  						cmd += " Values ";  						cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  					}  					#endregion  					MySqlCommand command = new MySqlCommand ();  					command.CommandText = cmd;  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					//  					mtable.Dispose ();  					view_machine_data.Dispose ();  					mds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region Delete Machine Info Case Workflow ！！！！未使用！！！！  			case Client2Server.CommunicationType.DELETEMACHINEINFO:  				try {  					// read machine table data ..  					DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Ip"]'  						QueueItems ["Machine_Id"]  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// get machine id ..  					string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  						id  					})' "Machine_Id"' DataViewRowState.Unchanged);  					// delete data from pool table and machine pool table ..  					while (delete_machine_pool_data.Count != 0)  						delete_machine_pool_data.Delete (0);  					while (delete_machine_data.Count != 0)  						delete_machine_data.Delete (0);  					// bind database command ..  					string cmd = " select count(*)  From Machine_Pool";  					cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  					cmd += " Where Machine.Machine_Id In (" + id + ")";  					MySqlCommand command = new MySqlCommand (cmd);  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  						cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					else {  						cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (delete_machine_data.ToTable ());  					pds.Tables.Add (delete_machine_pool_data.ToTable ());  					command = new MySqlCommand (cmd);  					// add commands ..  					//command.Parameters.AddWithValue("?Machine_Id"' id);  					TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  					TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					delete_machine_data.Dispose ();  					delete_machine_pool_data.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEINFO:  				try {  					// find match data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_data.Count > 0)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  					else  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					view_machine_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  				try {  					// find match data ..  					DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_machine_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_machine_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Machine Render Info Case Workflow  			case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  				try {  					DataTable MachineData = DisplayBase.MachineStatus.Copy ();  					// response result ..  					if (MachineData != null) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					MachineData.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  			case Client2Server.CommunicationType.ONOFFMACHINE:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  						if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  							QueueItems ["IsEnable"] = 1;  						}  						else {  							QueueItems ["IsEnable"] = 0;  						}  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						// mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						// bind database command ..  						string cmd = " Update Machine Set ";  						//cmd += "Name = ?Name' Ip = ?Ip'";  						cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  						//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--Set Machine Priority Case Workflow  			case Client2Server.CommunicationType.MACHINEPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet mds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  						// create new row ..  						DataRow mrow = mtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (mtable.Columns.Contains (kv.Key))  								mrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						#endregion  						// complete added ..  						mtable.Rows.Add (mrow);  						// add to table collection ..  						mds.Tables.Add (mtable);  						//// bind database command ..  						string cmd = " Update Machine Set ";  						cmd += " Priority = ?Priority";  						cmd += " Where Machine_Id = ?Machine_Id ";  						// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (mtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanMachineUpdate = true;  						view_machine_data.Dispose ();  						mtable.Dispose ();  						mds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  			case Client2Server.CommunicationType.MACHINEPOOLRELATION:  				try {  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  					DataTable fkpool = this.EnvData.ReadData ("Pool");  					if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  						fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  						foreach (string s in (string[])QueueItems ["Machines"]) {  							// create new row ..  							DataRow mprow = mptable.NewRow ();  							if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  								// assign pool id key ..  								mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  							}  							if (mptable.Columns.Contains ("Machine_Id")) {  								// assign machine id ..  								mprow ["Machine_Id"] = s;  							}  							// complete added ..  							mptable.Rows.Add (mprow);  						}  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						if (fkpool.Rows.Count > 0) {  							// bind database delete command ..  							// 先刪除該POOL的所有Machine，再逐一添加  							string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  							// add delete data table ..  							mds.Tables.Add (fkpool);  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (fkpool.TableName' command);  						}  						// bind database insert command ..  						string icmd = " Insert Into Machine_Pool ";  						icmd += " (Machine_Id' Pool_Id) ";  						icmd += " Values ";  						icmd += " (?Machine_Id' ?Pool_Id) ";  						MySqlCommand icommand = new MySqlCommand (icmd);  						icommand.CommandType = CommandType.Text;  						// add insert data table ..  						mds.Tables.Add (mptable);  						// refresh commands ..  						TextCommands.Add (mptable.TableName' icommand);  						// sync data ..  						this.EnvData.WriteData (mds' TextCommands);  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else {  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					mptable.Dispose ();  					mds.Dispose ();  					fkpool.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- S:View Pool Info Case Workflow  			case Client2Server.CommunicationType.VIEWPOOLINFO:  				try {  					// find match data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_pool_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Pool Info Case Workflow  			case Client2Server.CommunicationType.POOLINFO:  				try {  					// read pool table data ..  					DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Name"' DataViewRowState.Unchanged);  					// define table collection ..  					DataSet pds = new DataSet ();  					// define temporary data structure ..  					DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  					// create new row ..  					DataRow prow = ptable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (ptable.Columns.Contains (kv.Key))  							prow [kv.Key] = kv.Value;  					}  					// create text command dictionary ..  					string cmd = string.Empty;  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region 更新  					// update pool data ..  					if (view_pool_data.Count > 0) {  						// get pool id column ..  						prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Update Pool Set ";  						cmd += " Name = ?Name' Sharable = ?Sharable ";  						cmd += " Where Pool_Id = ?Pool_Id ";  					}  					#endregion  					#region 插入  					// add new pool data ..  					else {  						// create new pool id ..  						prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  						// complete added ..  						ptable.Rows.Add (prow);  						// add to table collection ..  						pds.Tables.Add (ptable);  						// bind database command ..  						cmd = " Insert Into Pool ";  						cmd += " (Pool_Id' Name' Sharable) ";  						cmd += " Values ";  						cmd += " (?Pool_Id' ?Name' ?Sharable) ";  					}  					#endregion  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (ptable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					view_pool_data.Dispose ();  					ptable.Dispose ();  					pds.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- D:Delete Pool Info Case Workflow  			case Client2Server.CommunicationType.DELETEPOOLINFO:  				try {  					// read pool table data ..  					DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Pool_Id"]  					})' "Pool_Id"' DataViewRowState.Unchanged);  					// get pool id ..  					string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  					// read machine pool table data ..  					DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  						id  					})' "Pool_Id"' DataViewRowState.Unchanged);  					DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  					//DataRow[]  					//           JobGroupRows = JobGroupInfo.Select(exp)'  					// 先刪除MachinePool，再操作Pool  					// bind database command ..  					string cmd = " Select count(*) From Machine_Pool ";  					cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  					cmd += " Where Pool.Pool_Id = ?Pool_Id";  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  						cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					else {  						cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  					}  					// define table collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// add to table collection ..  					pds.Tables.Add (machinepooltable);  					pds.Tables.Add (pooltable);  					// add commands ..  					command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Pool_Id"' id);  					TextCommands.Add (machinepooltable.TableName' command);  					TextCommands.Add (pooltable.TableName' command);  					// sync data ..  					this.EnvData.WriteDataPool (pds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					machinepooltable.Dispose ();  					pooltable.Dispose ();  					pds.Dispose ();  					delete_machine_pool_data.Dispose ();  					delete_pool_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  			case Client2Server.CommunicationType.JOBQUEUEADD:  			case Client2Server.CommunicationType.JOBQUEUEUPDATE:  				try {  					// declare error flag ..  					bool HasError = false;  					#region 获取原有数据/结构  					// create filter conditions string ..  					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  							QueueItems ["Name"]'  							QueueItems ["Job_Group_Id"]  						});  					}  					else {  						filter = string.Format ("Name = '{0}'"' new object[] {  							QueueItems ["Name"]  						});  					}  					DataView view_job_group_data = null;  					// job queue update action ..  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						// read job group table data ..  						view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  					}  					else {  						// job queue add-in action ..  						view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  					}  					// define temporary data structure ..  					IList<DataTable> jtables = new List<DataTable> {  						this.EnvData.ReadDataSchema ("Job_Group")'  						this.EnvData.ReadDataSchema ("Job_Attr")'  						this.EnvData.ReadDataSchema ("Job")'  						this.EnvData.ReadDataSchema ("Job_History")  					};  					#endregion  					#region 添加、加工数据  					// generate new job globally unique identifier ..  					Guid id = Guid.NewGuid ();  					// declare frames and command variable ..  					int start = 0' end = 0' ps = 0;  					string command = string.Empty;  					// assign start' end' packetsize and command attributes ..  					if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  						start = Convert.ToInt32 (QueueItems ["Start"]);  						end = Convert.ToInt32 (QueueItems ["End"]);  						ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  						command = QueueItems ["Command"].ToString ().Trim ();  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					// confirm use alienbrain extension ..  					if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  						QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  					}  					if (QueueItems.ContainsKey ("ABUpdateOnly")) {  						if (QueueItems ["ABUpdateOnly"].ToString () == "True")  							QueueItems ["ABUpdateOnly"] = 1;  						else  							QueueItems ["ABUpdateOnly"] = 0;  					}  					#endregion  					foreach (DataTable table in jtables) {  						// define table collection ..  						DataSet jds = new DataSet ();  						// declare data row variable ..  						DataRow row = null;  						#region JobTable  Process  						if (table.TableName.Equals ("job")) {  							#region Process Job Data Section  							for (int i = start; i <= end; i = i + ps) {  								int _start = -1' _end = -1;  								if ((i + ps) - 1 <= end) {  									_start = i;  									_end = (i + ps) - 1;  								}  								else {  									_start = i;  									_end = end;  								}  								// create new row ..  								row = table.NewRow ();  								//   								row ["Job_Id"] = i;  								if (view_job_group_data.Count > 0) {  									// get the job group id ..  									row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  								}  								else {  									// assign the job group id ..  									row ["Job_Group_Id"] = id.ToString ().ToUpper ();  								}  								// 替換字符串，這樣Maya才能接受command ..  								row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  								// complete added ..  								table.Rows.Add (row);  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						#region  						else {  							// create new row ..  							row = table.NewRow ();  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							#region Process History Frames Column  							if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  								row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  							}  							#endregion  							#region mapping column ..  							foreach (KeyValuePair<string' object> kv in QueueItems) {  								if (table.Columns.Contains (kv.Key)) {  									#region Mapping Machine Foreign Key  									if (kv.Key.IndexOf ("Machine") > 0) {  										// read machine table data ..  										DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  											kv.Value  										})' "Machine_Id"' DataViewRowState.Unchanged);  										if (view_machine_data.ToTable ().Rows.Count > 0)  											// get machine id ..  											row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  										continue;  									}  									#endregion  									// mapping other columns ..  									row [kv.Key] = kv.Value;  								}  							}  							#endregion  							// complete added ..  							table.Rows.Add (row);  							// add to table collection ..  							jds.Tables.Add (table);  						}  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						#region Read Job Relation Tables Data  						// job attribute table ..  						DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// job table ..  						DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  							row ["Job_Group_Id"]  						})' "Job_Group_Id"' DataViewRowState.Unchanged);  						// create job relation data row count ..  						IDictionary<string' int> DataRecords = new Dictionary<string' int> {  							{  								view_job_group_data.Table.TableName'  								view_job_group_data.Count  							}'  							{  								view_job_attr_data.Table.TableName'  								view_job_attr_data.Count  							}'  							{  								view_job_data.Table.TableName'  								view_job_data.Count  							}'  						};  						#endregion  						#region Process History Data Section  						if (table.TableName == "job_history") {  							//DataView view_jobhistory_data = this.EnvData.FindData(  							//"job_history"'  							//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  							//"Submit_Time"'  							//DataViewRowState.Unchanged);  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  							//{  							//    cmd += " Update Job_History Set ";  							//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  							//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  							//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  							//    cmd += " And Submit_Acct = @Submit_Acct ";  							//}  							//else  							//{  							cmd += " Insert Into Job_History ";  							cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  							//}  							// add commands ..  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							continue;  						}  						#endregion  						#region update job data ..  						if (DataRecords [table.TableName] > 0) {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand comm = new MySqlCommand ();  							#region Update_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Update Job_Group Set ";  								cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  								cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  								cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job_attr":  								cmd = " Update Job_Attr Set ";  								cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  								cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  								cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  								cmd += " Where ";  								cmd += " Job_Group_Id = ?Job_Group_Id ";  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							case "job":  								cmd = " Select count(*)  From Job ";  								cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  								cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  								comm = new MySqlCommand (cmd);  								comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  								if (this.EnvData.IsExistJobMachineId (comm) > 0) {  									cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  									cmd += " Insert Into Job ";  									cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  									cmd += " Values ";  									cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  								}  								comm.CommandText = cmd;  								comm.CommandType = CommandType.Text;  								// add commands ..  								TextCommands.Add (table.TableName' comm);  								// sync data ..  								this.EnvData.WriteData (jds' TextCommands);  								break;  							}  							#endregion  						}  						#endregion  						#region add new job data ..  						else {  							if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  								HasError = true;  								break;  							}  							string cmd = string.Empty;  							MySqlCommand Jcommand = new MySqlCommand ();  							#region Insert_Bind DataBase Command  							switch (table.TableName) {  							case "job_group":  								cmd = " Insert Into Job_Group ";  								cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  								cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  								cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  								break;  							case "job_attr":  								cmd = " Insert Into Job_Attr ";  								cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  								cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  								cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  								break;  							case "job":  								cmd = " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  								break;  							}  							#endregion  							Jcommand.CommandText = cmd;  							Jcommand.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  						}  						#endregion  					}  					#region 記錄新增任務的Job_Group_Id  					IList<string> NewJobID = new List<string> ();  					foreach (DataRow dr in jtables [0].Rows) {  						NewJobID.Add (dr ["Job_Group_Id"].ToString ());  					}  					#endregion  					if (HasError) {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					}  					else {  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh job data list ..  						DisplayBase.CanJobUpdate = true;  					}  					view_job_group_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK-- Delete Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEDELETE:  				try {  					if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  						// enumerable delete job for list ..  						foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  							// define filter expression ..  							string exp = string.Format ("Job_Group_Id = '{0}'"' job);  							// read job data ..  							DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  							DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  							#region Get Process Machine Group  							// create send to machine of delete list ..  							Hashtable __machine = new Hashtable ();  							// get machine processing info ..  							var machine_query = from mq in JobRows.AsEnumerable ()  							group mq by mq.Field<string> ("Proc_Machine") into signle_machine  							select signle_machine.ToList ();  							// regroup job list ..  							foreach (var group in machine_query) {  								if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  									IList<uint> list = new List<uint> ();  									foreach (DataRow row in group) {  										list.Add (Convert.ToUInt32 (row ["Job_Id"]));  									}  									__machine.Add (group [0] ["Proc_Machine"]' list);  								}  							}  							// send to processing render farm ..  							if (__machine.Count > 0) {  								// 發送指令到算圖機  								this.DeleteFunc (__machine);  							}  							#endregion  							// delete relation data ..  							for (int i = 0; i < JobGroupRows.Length; i++)  								JobGroupRows [i].Delete ();  							for (int i = 0; i < JobAttrRows.Length; i++)  								JobAttrRows [i].Delete ();  							for (int i = 0; i < JobRows.Length; i++)  								JobRows [i].Delete ();  							// bind database command ..  							string cmd = " Select count(*) From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  							cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  							//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  							MySqlCommand command = new MySqlCommand (cmd);  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							if (this.EnvData.IsExistJobMachineId (command) > 0) {  								cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  							}  							else {  								cmd = string.Empty;  							}  							// define tables collection ..  							DataSet pds = new DataSet ();  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							command = new MySqlCommand (cmd);  							// add to table collection ..  							pds.Tables.Add (JobGroupInfo);  							pds.Tables.Add (JobAttrInfo);  							pds.Tables.Add (JobInfo);  							// add commands ..  							command.Parameters.AddWithValue ("?Job_Group_Id"' job);  							TextCommands.Add (JobGroupInfo.TableName' command);  							TextCommands.Add (JobAttrInfo.TableName' command);  							TextCommands.Add (JobInfo.TableName' command);  							// sync data ..  							this.EnvData.WriteData (pds' TextCommands);  							pds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// pause all have not yet sent of job ..  			#region --F7300290--OK--  Pause Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEPAUSE:  				try {  					if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  						foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  							DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  							#region 暂停或重启 更新Job_Group表  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  							// define table collection ..  							DataSet jds = new DataSet ();  							// define temporary data structure ..  							DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  							DataRow jrow = jtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jrow ["Job_Group_Id"] = Ids;  							jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  							foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  								if (!dc.AllowDBNull) {  									//查詢數據中不存在的數據行（保證所有不許空的數據）  									if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  										jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  									}  								}  							}  							// complete added ..  							jtable.Rows.Add (jrow);  							#endregion  							#region 重启时清空job的proc_machine等信息，以便重新算图  							if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  								DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  								if (Job_attr_data.Rows.Count > 0) {  									// define table collection ..  									DataSet jobds = new DataSet ();  									// define temporary data structure ..  									DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  									foreach (DataRow dr in Job_attr_data.Rows) {  										// create new row ..  										DataRow jobrow = jobtable.NewRow ();  										//添加更新後的數據 mapping column ..  										jobrow ["Proc_Machine"] = null;  										jobrow ["Start_Time"] = DBNull.Value;  										jobrow ["Finish_Time"] = DBNull.Value;  										// 填充未更新數據 check the data column is allow DbNull type ..  										foreach (DataColumn dc in Job_attr_data.Columns) {  											if (!dc.AllowDBNull) {  												jobrow [dc.ColumnName] = dr [dc.ColumnName];  											}  										}  										jobtable.Rows.Add (jobrow);  									}  									jobds.Tables.Add (jobtable);  									string jcmd = " Update Job Set  ";  									jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  									jcmd += "  Where  ";  									jcmd += "  Job_Id = ?Job_Id ";  									// create text command dictionary ..  									IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  									MySqlCommand Jcommand = new MySqlCommand (jcmd);  									Jcommand.CommandType = CommandType.Text;  									//// add commands ..  									JobCommand.Add (jobtable.TableName' Jcommand);  									// sync data ..  									this.EnvData.WriteData (jobds' JobCommand);  									Job_attr_data.Dispose ();  									jobds.Dispose ();  								}  							}  							#endregion  							// add to table collection ..  							jds.Tables.Add (jtable);  							string cmd = " Update Job_Group Set  ";  							cmd += "  Status = ?Status   ";  							cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  							MySqlCommand command = new MySqlCommand (cmd);  							command.CommandType = CommandType.Text;  							//// add commands ..  							TextCommands.Add (jtable.TableName' command);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							view_Job_data.Dispose ();  							jds.Dispose ();  						}  						// response result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// current empty ..  			#region --F7300290--OK-- Repeat Job Queue Case Workflow  			case Client2Server.CommunicationType.JOBQUEUEREPEAT:  				try {  				}  				catch {  				}  				break;  			#endregion  			// Set Jobs Priority ..  			#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  			case Client2Server.CommunicationType.JOBPRIORITY:  				try {  					if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  						#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  						DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  						#endregion  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						#region 獲取數據結構，並組合新數據  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  						// create new row ..  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (jtable.Columns.Contains (kv.Key))  								jrow [kv.Key] = kv.Value;  						}  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Attr Set ";  						cmd += "  Priority = ?Priority";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						//// add commands ..  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						// response error result ..  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  						// wait for write data finish ..  						Thread.Sleep (100);  						// refresh machine data list ..  						DisplayBase.CanJobUpdate = true;  						view_machine_data.Dispose ();  						jtable.Dispose ();  						jds.Dispose ();  					}  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--  View Job History Record Case Workflow  			case Client2Server.CommunicationType.JOBHISTORYRECORD:  				try {  					int SeleectNum = 100;  					if (QueueItems.ContainsKey ("Num")) {  						SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  					}  					DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  					var JobRecord = (from records in Job_History.AsEnumerable ()  					orderby records.Field<DateTime> ("Submit_Time") descending  					select records).Take (SeleectNum);  					DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  					foreach (var record in JobRecord) {  						DataRow dr = JobHistory.NewRow ();  						for (int i = 0; i < JobHistory.Columns.Count; i++) {  							// assign machine ..  							dr [i] = record [i].ToString ();  						}  						JobHistory.Rows.Add (dr);  					}  					JobHistory.Columns.Remove ("Submit_Acct");  					JobHistory.Columns.Remove ("Submit_Time");  					// response result ..  					if (JobHistory.Rows.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_History.Dispose ();  					JobHistory.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			// Get Detail through HistoryForm  			#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  			case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  				try {  					// create filter conditions string   					string filter = string.Empty;  					if (QueueItems.ContainsKey ("Job_Group_Id")) {  						filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  					}  					DataSet Job_Info = new DataSet ();  					DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  					//數據不完整  					if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  						break;  					}  					#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  					DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  					Job_Group_Info.Columns.Remove ("Submit_Acct");  					Job_Group_Info.Columns.Remove ("Submit_Machine");  					Job_Group_Info.Columns.Remove ("Submit_Time");  					Job_Group_Info.Columns.Remove ("Status");  					Job_Group_Info.Columns.Remove ("Start_Time");  					Job_Group_Info.Columns.Remove ("Finish_Time");  					Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  					DataRow JobRow = Job_Group_Info.NewRow ();  					foreach (DataColumn dc in view_Job_Group.Columns) {  						//查詢數據中存在的數據行  						if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  							JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  						}  					}  					string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  					JobRow ["Command"] = CommandText;  					Job_Group_Info.Rows.Add (JobRow);  					#endregion  					//合并Job_Attr與Job_Group_Info數據  					Job_Info.Tables.Add (Job_Attr_Info);  					Job_Info.Tables.Add (Job_Group_Info);  					if (Job_Info.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					Job_Attr_Info.Dispose ();  					Job_Command_Info.Dispose ();  					view_Job_Group.Dispose ();  					Job_Group_Info.Dispose ();  					Job_Info.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region --F7300290--OK--View Job Status Case Workflow  			case Client2Server.CommunicationType.VIEWJOBSTATUS:  				try {  					// read all match data (filter job status completed and error flag) ..  					DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  					// create empty object data table' include the data schema ..  					DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow row in view_job_group_data.Table.Rows) {  						// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  						string id = row ["Job_Group_Id"].ToString ();  						// read and custom match data tbale' add to dataset ..  						DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the attributes to table ..  						job_attr_table.Merge (view_job_attr_data.ToTable ());  						DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  						// merge the job to table ..  						job_table.Merge (view_job_data.ToTable ());  					}  					// create job dataset viewer object ..  					DataSet JobDatas = new DataSet ("JobViewer");  					JobDatas.Tables.Add (view_job_group_data.ToTable ());  					JobDatas.Tables.Add (job_attr_table);  					JobDatas.Tables.Add (job_table);  					// commit changes ..  					JobDatas.AcceptChanges ();  					// response result ..  					if (JobDatas.Tables.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_group_data.Dispose ();  					job_attr_table.Dispose ();  					job_table.Dispose ();  					JobDatas.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  			case Client2Server.CommunicationType.VIEWJOBOUTPUT:  				try {  					// find match data ..  					DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  					// response result ..  					if (view_job_data.Count > 0) {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  					}  					else {  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  					}  					view_job_data.Dispose ();  				}  				catch (Exception ex) {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				break;  			#endregion  			}  			#endregion  			// response object ..  			client.Send (this.EnvSvr.Serialize (__returnObject));  			QueueItems.Clear ();  			ActionHeader = Client2Server.CommunicationType.NONE;  		}  		#endregion  		// delay 0.2 second to next execute ..  		Thread.Sleep (200);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..  	client.Close ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	#region  	received = this.EnvSvr.Deserialize (client.Receive ());  	if (received != null) {  		// unpackage remote object data ..  		this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		// declare server response object list interface ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// clear before receive data ..  		received = null;  		#region All GUI Work……  		switch (ActionHeader) {  		#region --F7300290--OK-- A/U:Machine Info Case Workflow  		case Client2Server.CommunicationType.MACHINEINFO:  			try {  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  				})' "Name' Ip"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				#region 填充數據  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key)) {  						mrow [kv.Key] = kv.Value;  					}  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#region 設定機器狀態值  				// decision machine type ..  				if (QueueItems.ContainsKey ("IsRender")) {  					if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 0;  						}  					}  					else {  						mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  						if (DBNull.Value == mrow ["Priority"]) {  							mrow ["Priority"] = 20;  						}  					}  				}  				// decision the dictionary exist maintenance flag ..  				if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  				// decision the dictionary exist offline flag ..  				if (QueueItems.ContainsKey ("IsOffLine")) {  					if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  						mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  						//***********************************************************(F7300253)  						global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  						IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  						string NetIP = IPClear.Address.ToString ();  						for (int i = n - 1; i >= 0; i--) {  							if (NetIP == address [i]) {  								address [i] = null;  							}  						}  						//************************************************************  					}  				}  				#endregion  				#endregion  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Refresh Machine Data 更新/插入Machine數據！  				// update machine data ..  				if (view_machine_data.Count > 0) {  					// get machine id column ..  					mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Update Machine Set ";  					cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  					cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  				}  				// add new machine data ..  				else {  					// create new machine id ..  					mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					cmd = " Insert Into Machine ";  					cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  					cmd += " Values ";  					cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  				}  				#endregion  				MySqlCommand command = new MySqlCommand ();  				command.CommandText = cmd;  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				//  				mtable.Dispose ();  				view_machine_data.Dispose ();  				mds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region Delete Machine Info Case Workflow ！！！！未使用！！！！  		case Client2Server.CommunicationType.DELETEMACHINEINFO:  			try {  				// read machine table data ..  				DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Ip"]'  					QueueItems ["Machine_Id"]  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// get machine id ..  				string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  					id  				})' "Machine_Id"' DataViewRowState.Unchanged);  				// delete data from pool table and machine pool table ..  				while (delete_machine_pool_data.Count != 0)  					delete_machine_pool_data.Delete (0);  				while (delete_machine_data.Count != 0)  					delete_machine_data.Delete (0);  				// bind database command ..  				string cmd = " select count(*)  From Machine_Pool";  				cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  				cmd += " Where Machine.Machine_Id In (" + id + ")";  				MySqlCommand command = new MySqlCommand (cmd);  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  					cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				else {  					cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (delete_machine_data.ToTable ());  				pds.Tables.Add (delete_machine_pool_data.ToTable ());  				command = new MySqlCommand (cmd);  				// add commands ..  				//command.Parameters.AddWithValue("?Machine_Id"' id);  				TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  				TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				delete_machine_data.Dispose ();  				delete_machine_pool_data.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEINFO:  			try {  				// find match data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_data.Count > 0)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  				else  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				view_machine_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  			try {  				// find match data ..  				DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_machine_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_machine_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Machine Render Info Case Workflow  		case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  			try {  				DataTable MachineData = DisplayBase.MachineStatus.Copy ();  				// response result ..  				if (MachineData != null) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				MachineData.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  		case Client2Server.CommunicationType.ONOFFMACHINE:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  					if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  						QueueItems ["IsEnable"] = 1;  					}  					else {  						QueueItems ["IsEnable"] = 0;  					}  					// read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					// mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					// bind database command ..  					string cmd = " Update Machine Set ";  					//cmd += "Name = ?Name' Ip = ?Ip'";  					cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  					//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--Set Machine Priority Case Workflow  		case Client2Server.CommunicationType.MACHINEPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read machine table data ..  					DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet mds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  					// create new row ..  					DataRow mrow = mtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (mtable.Columns.Contains (kv.Key))  							mrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					#endregion  					// complete added ..  					mtable.Rows.Add (mrow);  					// add to table collection ..  					mds.Tables.Add (mtable);  					//// bind database command ..  					string cmd = " Update Machine Set ";  					cmd += " Priority = ?Priority";  					cmd += " Where Machine_Id = ?Machine_Id ";  					// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (mtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanMachineUpdate = true;  					view_machine_data.Dispose ();  					mtable.Dispose ();  					mds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  		case Client2Server.CommunicationType.MACHINEPOOLRELATION:  			try {  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  				DataTable fkpool = this.EnvData.ReadData ("Pool");  				if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  					fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  					foreach (string s in (string[])QueueItems ["Machines"]) {  						// create new row ..  						DataRow mprow = mptable.NewRow ();  						if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  							// assign pool id key ..  							mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  						}  						if (mptable.Columns.Contains ("Machine_Id")) {  							// assign machine id ..  							mprow ["Machine_Id"] = s;  						}  						// complete added ..  						mptable.Rows.Add (mprow);  					}  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					if (fkpool.Rows.Count > 0) {  						// bind database delete command ..  						// 先刪除該POOL的所有Machine，再逐一添加  						string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  						// add delete data table ..  						mds.Tables.Add (fkpool);  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (fkpool.TableName' command);  					}  					// bind database insert command ..  					string icmd = " Insert Into Machine_Pool ";  					icmd += " (Machine_Id' Pool_Id) ";  					icmd += " Values ";  					icmd += " (?Machine_Id' ?Pool_Id) ";  					MySqlCommand icommand = new MySqlCommand (icmd);  					icommand.CommandType = CommandType.Text;  					// add insert data table ..  					mds.Tables.Add (mptable);  					// refresh commands ..  					TextCommands.Add (mptable.TableName' icommand);  					// sync data ..  					this.EnvData.WriteData (mds' TextCommands);  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else {  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				mptable.Dispose ();  				mds.Dispose ();  				fkpool.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- S:View Pool Info Case Workflow  		case Client2Server.CommunicationType.VIEWPOOLINFO:  			try {  				// find match data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_pool_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Pool Info Case Workflow  		case Client2Server.CommunicationType.POOLINFO:  			try {  				// read pool table data ..  				DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Name"' DataViewRowState.Unchanged);  				// define table collection ..  				DataSet pds = new DataSet ();  				// define temporary data structure ..  				DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  				// create new row ..  				DataRow prow = ptable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (ptable.Columns.Contains (kv.Key))  						prow [kv.Key] = kv.Value;  				}  				// create text command dictionary ..  				string cmd = string.Empty;  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region 更新  				// update pool data ..  				if (view_pool_data.Count > 0) {  					// get pool id column ..  					prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Update Pool Set ";  					cmd += " Name = ?Name' Sharable = ?Sharable ";  					cmd += " Where Pool_Id = ?Pool_Id ";  				}  				#endregion  				#region 插入  				// add new pool data ..  				else {  					// create new pool id ..  					prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  					// complete added ..  					ptable.Rows.Add (prow);  					// add to table collection ..  					pds.Tables.Add (ptable);  					// bind database command ..  					cmd = " Insert Into Pool ";  					cmd += " (Pool_Id' Name' Sharable) ";  					cmd += " Values ";  					cmd += " (?Pool_Id' ?Name' ?Sharable) ";  				}  				#endregion  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (ptable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				view_pool_data.Dispose ();  				ptable.Dispose ();  				pds.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- D:Delete Pool Info Case Workflow  		case Client2Server.CommunicationType.DELETEPOOLINFO:  			try {  				// read pool table data ..  				DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Pool_Id"]  				})' "Pool_Id"' DataViewRowState.Unchanged);  				// get pool id ..  				string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  				// read machine pool table data ..  				DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  					id  				})' "Pool_Id"' DataViewRowState.Unchanged);  				DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  				//DataRow[]  				//           JobGroupRows = JobGroupInfo.Select(exp)'  				// 先刪除MachinePool，再操作Pool  				// bind database command ..  				string cmd = " Select count(*) From Machine_Pool ";  				cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  				cmd += " Where Pool.Pool_Id = ?Pool_Id";  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  					cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				else {  					cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  				}  				// define table collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// add to table collection ..  				pds.Tables.Add (machinepooltable);  				pds.Tables.Add (pooltable);  				// add commands ..  				command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Pool_Id"' id);  				TextCommands.Add (machinepooltable.TableName' command);  				TextCommands.Add (pooltable.TableName' command);  				// sync data ..  				this.EnvData.WriteDataPool (pds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				machinepooltable.Dispose ();  				pooltable.Dispose ();  				pds.Dispose ();  				delete_machine_pool_data.Dispose ();  				delete_pool_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  		case Client2Server.CommunicationType.JOBQUEUEADD:  		case Client2Server.CommunicationType.JOBQUEUEUPDATE:  			try {  				// declare error flag ..  				bool HasError = false;  				#region 获取原有数据/结构  				// create filter conditions string ..  				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  						QueueItems ["Name"]'  						QueueItems ["Job_Group_Id"]  					});  				}  				else {  					filter = string.Format ("Name = '{0}'"' new object[] {  						QueueItems ["Name"]  					});  				}  				DataView view_job_group_data = null;  				// job queue update action ..  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					// read job group table data ..  					view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  				}  				else {  					// job queue add-in action ..  					view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  				}  				// define temporary data structure ..  				IList<DataTable> jtables = new List<DataTable> {  					this.EnvData.ReadDataSchema ("Job_Group")'  					this.EnvData.ReadDataSchema ("Job_Attr")'  					this.EnvData.ReadDataSchema ("Job")'  					this.EnvData.ReadDataSchema ("Job_History")  				};  				#endregion  				#region 添加、加工数据  				// generate new job globally unique identifier ..  				Guid id = Guid.NewGuid ();  				// declare frames and command variable ..  				int start = 0' end = 0' ps = 0;  				string command = string.Empty;  				// assign start' end' packetsize and command attributes ..  				if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  					start = Convert.ToInt32 (QueueItems ["Start"]);  					end = Convert.ToInt32 (QueueItems ["End"]);  					ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  					command = QueueItems ["Command"].ToString ().Trim ();  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				// confirm use alienbrain extension ..  				if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  					QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  				}  				if (QueueItems.ContainsKey ("ABUpdateOnly")) {  					if (QueueItems ["ABUpdateOnly"].ToString () == "True")  						QueueItems ["ABUpdateOnly"] = 1;  					else  						QueueItems ["ABUpdateOnly"] = 0;  				}  				#endregion  				foreach (DataTable table in jtables) {  					// define table collection ..  					DataSet jds = new DataSet ();  					// declare data row variable ..  					DataRow row = null;  					#region JobTable  Process  					if (table.TableName.Equals ("job")) {  						#region Process Job Data Section  						for (int i = start; i <= end; i = i + ps) {  							int _start = -1' _end = -1;  							if ((i + ps) - 1 <= end) {  								_start = i;  								_end = (i + ps) - 1;  							}  							else {  								_start = i;  								_end = end;  							}  							// create new row ..  							row = table.NewRow ();  							//   							row ["Job_Id"] = i;  							if (view_job_group_data.Count > 0) {  								// get the job group id ..  								row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  							}  							else {  								// assign the job group id ..  								row ["Job_Group_Id"] = id.ToString ().ToUpper ();  							}  							// 替換字符串，這樣Maya才能接受command ..  							row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  							// complete added ..  							table.Rows.Add (row);  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					#region  					else {  						// create new row ..  						row = table.NewRow ();  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						#region Process History Frames Column  						if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  							row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  						}  						#endregion  						#region mapping column ..  						foreach (KeyValuePair<string' object> kv in QueueItems) {  							if (table.Columns.Contains (kv.Key)) {  								#region Mapping Machine Foreign Key  								if (kv.Key.IndexOf ("Machine") > 0) {  									// read machine table data ..  									DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  										kv.Value  									})' "Machine_Id"' DataViewRowState.Unchanged);  									if (view_machine_data.ToTable ().Rows.Count > 0)  										// get machine id ..  										row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  									continue;  								}  								#endregion  								// mapping other columns ..  								row [kv.Key] = kv.Value;  							}  						}  						#endregion  						// complete added ..  						table.Rows.Add (row);  						// add to table collection ..  						jds.Tables.Add (table);  					}  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					#region Read Job Relation Tables Data  					// job attribute table ..  					DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// job table ..  					DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  						row ["Job_Group_Id"]  					})' "Job_Group_Id"' DataViewRowState.Unchanged);  					// create job relation data row count ..  					IDictionary<string' int> DataRecords = new Dictionary<string' int> {  						{  							view_job_group_data.Table.TableName'  							view_job_group_data.Count  						}'  						{  							view_job_attr_data.Table.TableName'  							view_job_attr_data.Count  						}'  						{  							view_job_data.Table.TableName'  							view_job_data.Count  						}'  					};  					#endregion  					#region Process History Data Section  					if (table.TableName == "job_history") {  						//DataView view_jobhistory_data = this.EnvData.FindData(  						//"job_history"'  						//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  						//"Submit_Time"'  						//DataViewRowState.Unchanged);  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  						//{  						//    cmd += " Update Job_History Set ";  						//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  						//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  						//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  						//    cmd += " And Submit_Acct = @Submit_Acct ";  						//}  						//else  						//{  						cmd += " Insert Into Job_History ";  						cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  						//}  						// add commands ..  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						continue;  					}  					#endregion  					#region update job data ..  					if (DataRecords [table.TableName] > 0) {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand comm = new MySqlCommand ();  						#region Update_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Update Job_Group Set ";  							cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  							cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  							cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job_attr":  							cmd = " Update Job_Attr Set ";  							cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  							cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  							cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  							cmd += " Where ";  							cmd += " Job_Group_Id = ?Job_Group_Id ";  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						case "job":  							cmd = " Select count(*)  From Job ";  							cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  							cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  							comm = new MySqlCommand (cmd);  							comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  							if (this.EnvData.IsExistJobMachineId (comm) > 0) {  								cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  								cmd += " Insert Into Job ";  								cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  								cmd += " Values ";  								cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  							}  							comm.CommandText = cmd;  							comm.CommandType = CommandType.Text;  							// add commands ..  							TextCommands.Add (table.TableName' comm);  							// sync data ..  							this.EnvData.WriteData (jds' TextCommands);  							break;  						}  						#endregion  					}  					#endregion  					#region add new job data ..  					else {  						if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  							HasError = true;  							break;  						}  						string cmd = string.Empty;  						MySqlCommand Jcommand = new MySqlCommand ();  						#region Insert_Bind DataBase Command  						switch (table.TableName) {  						case "job_group":  							cmd = " Insert Into Job_Group ";  							cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  							cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  							cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  							break;  						case "job_attr":  							cmd = " Insert Into Job_Attr ";  							cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  							cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  							cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  							break;  						case "job":  							cmd = " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  							break;  						}  						#endregion  						Jcommand.CommandText = cmd;  						Jcommand.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  					}  					#endregion  				}  				#region 記錄新增任務的Job_Group_Id  				IList<string> NewJobID = new List<string> ();  				foreach (DataRow dr in jtables [0].Rows) {  					NewJobID.Add (dr ["Job_Group_Id"].ToString ());  				}  				#endregion  				if (HasError) {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				else {  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh job data list ..  					DisplayBase.CanJobUpdate = true;  				}  				view_job_group_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK-- Delete Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEDELETE:  			try {  				if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  					// enumerable delete job for list ..  					foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  						// define filter expression ..  						string exp = string.Format ("Job_Group_Id = '{0}'"' job);  						// read job data ..  						DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  						DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  						#region Get Process Machine Group  						// create send to machine of delete list ..  						Hashtable __machine = new Hashtable ();  						// get machine processing info ..  						var machine_query = from mq in JobRows.AsEnumerable ()  						group mq by mq.Field<string> ("Proc_Machine") into signle_machine  						select signle_machine.ToList ();  						// regroup job list ..  						foreach (var group in machine_query) {  							if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  								IList<uint> list = new List<uint> ();  								foreach (DataRow row in group) {  									list.Add (Convert.ToUInt32 (row ["Job_Id"]));  								}  								__machine.Add (group [0] ["Proc_Machine"]' list);  							}  						}  						// send to processing render farm ..  						if (__machine.Count > 0) {  							// 發送指令到算圖機  							this.DeleteFunc (__machine);  						}  						#endregion  						// delete relation data ..  						for (int i = 0; i < JobGroupRows.Length; i++)  							JobGroupRows [i].Delete ();  						for (int i = 0; i < JobAttrRows.Length; i++)  							JobAttrRows [i].Delete ();  						for (int i = 0; i < JobRows.Length; i++)  							JobRows [i].Delete ();  						// bind database command ..  						string cmd = " Select count(*) From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  						cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  						//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  						MySqlCommand command = new MySqlCommand (cmd);  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						if (this.EnvData.IsExistJobMachineId (command) > 0) {  							cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  						}  						else {  							cmd = string.Empty;  						}  						// define tables collection ..  						DataSet pds = new DataSet ();  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						command = new MySqlCommand (cmd);  						// add to table collection ..  						pds.Tables.Add (JobGroupInfo);  						pds.Tables.Add (JobAttrInfo);  						pds.Tables.Add (JobInfo);  						// add commands ..  						command.Parameters.AddWithValue ("?Job_Group_Id"' job);  						TextCommands.Add (JobGroupInfo.TableName' command);  						TextCommands.Add (JobAttrInfo.TableName' command);  						TextCommands.Add (JobInfo.TableName' command);  						// sync data ..  						this.EnvData.WriteData (pds' TextCommands);  						pds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// pause all have not yet sent of job ..  		#region --F7300290--OK--  Pause Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEPAUSE:  			try {  				if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  					foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  						DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  						#region 暂停或重启 更新Job_Group表  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  						// define table collection ..  						DataSet jds = new DataSet ();  						// define temporary data structure ..  						DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  						DataRow jrow = jtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jrow ["Job_Group_Id"] = Ids;  						jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  						foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  							if (!dc.AllowDBNull) {  								//查詢數據中不存在的數據行（保證所有不許空的數據）  								if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  									jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  								}  							}  						}  						// complete added ..  						jtable.Rows.Add (jrow);  						#endregion  						#region 重启时清空job的proc_machine等信息，以便重新算图  						if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  							DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  							if (Job_attr_data.Rows.Count > 0) {  								// define table collection ..  								DataSet jobds = new DataSet ();  								// define temporary data structure ..  								DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  								foreach (DataRow dr in Job_attr_data.Rows) {  									// create new row ..  									DataRow jobrow = jobtable.NewRow ();  									//添加更新後的數據 mapping column ..  									jobrow ["Proc_Machine"] = null;  									jobrow ["Start_Time"] = DBNull.Value;  									jobrow ["Finish_Time"] = DBNull.Value;  									// 填充未更新數據 check the data column is allow DbNull type ..  									foreach (DataColumn dc in Job_attr_data.Columns) {  										if (!dc.AllowDBNull) {  											jobrow [dc.ColumnName] = dr [dc.ColumnName];  										}  									}  									jobtable.Rows.Add (jobrow);  								}  								jobds.Tables.Add (jobtable);  								string jcmd = " Update Job Set  ";  								jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  								jcmd += "  Where  ";  								jcmd += "  Job_Id = ?Job_Id ";  								// create text command dictionary ..  								IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  								MySqlCommand Jcommand = new MySqlCommand (jcmd);  								Jcommand.CommandType = CommandType.Text;  								//// add commands ..  								JobCommand.Add (jobtable.TableName' Jcommand);  								// sync data ..  								this.EnvData.WriteData (jobds' JobCommand);  								Job_attr_data.Dispose ();  								jobds.Dispose ();  							}  						}  						#endregion  						// add to table collection ..  						jds.Tables.Add (jtable);  						string cmd = " Update Job_Group Set  ";  						cmd += "  Status = ?Status   ";  						cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  						MySqlCommand command = new MySqlCommand (cmd);  						command.CommandType = CommandType.Text;  						//// add commands ..  						TextCommands.Add (jtable.TableName' command);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						view_Job_data.Dispose ();  						jds.Dispose ();  					}  					// response result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// current empty ..  		#region --F7300290--OK-- Repeat Job Queue Case Workflow  		case Client2Server.CommunicationType.JOBQUEUEREPEAT:  			try {  			}  			catch {  			}  			break;  		#endregion  		// Set Jobs Priority ..  		#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  		case Client2Server.CommunicationType.JOBPRIORITY:  			try {  				if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  					#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  					DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  					#endregion  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					#region 獲取數據結構，並組合新數據  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  					// create new row ..  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (jtable.Columns.Contains (kv.Key))  							jrow [kv.Key] = kv.Value;  					}  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Attr Set ";  					cmd += "  Priority = ?Priority";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					//// add commands ..  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					// response error result ..  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					// wait for write data finish ..  					Thread.Sleep (100);  					// refresh machine data list ..  					DisplayBase.CanJobUpdate = true;  					view_machine_data.Dispose ();  					jtable.Dispose ();  					jds.Dispose ();  				}  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--  View Job History Record Case Workflow  		case Client2Server.CommunicationType.JOBHISTORYRECORD:  			try {  				int SeleectNum = 100;  				if (QueueItems.ContainsKey ("Num")) {  					SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  				}  				DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  				var JobRecord = (from records in Job_History.AsEnumerable ()  				orderby records.Field<DateTime> ("Submit_Time") descending  				select records).Take (SeleectNum);  				DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  				foreach (var record in JobRecord) {  					DataRow dr = JobHistory.NewRow ();  					for (int i = 0; i < JobHistory.Columns.Count; i++) {  						// assign machine ..  						dr [i] = record [i].ToString ();  					}  					JobHistory.Rows.Add (dr);  				}  				JobHistory.Columns.Remove ("Submit_Acct");  				JobHistory.Columns.Remove ("Submit_Time");  				// response result ..  				if (JobHistory.Rows.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_History.Dispose ();  				JobHistory.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		// Get Detail through HistoryForm  		#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  		case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  			try {  				// create filter conditions string   				string filter = string.Empty;  				if (QueueItems.ContainsKey ("Job_Group_Id")) {  					filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  				}  				DataSet Job_Info = new DataSet ();  				DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  				//數據不完整  				if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  					break;  				}  				#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  				DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  				Job_Group_Info.Columns.Remove ("Submit_Acct");  				Job_Group_Info.Columns.Remove ("Submit_Machine");  				Job_Group_Info.Columns.Remove ("Submit_Time");  				Job_Group_Info.Columns.Remove ("Status");  				Job_Group_Info.Columns.Remove ("Start_Time");  				Job_Group_Info.Columns.Remove ("Finish_Time");  				Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  				DataRow JobRow = Job_Group_Info.NewRow ();  				foreach (DataColumn dc in view_Job_Group.Columns) {  					//查詢數據中存在的數據行  					if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  						JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  					}  				}  				string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  				JobRow ["Command"] = CommandText;  				Job_Group_Info.Rows.Add (JobRow);  				#endregion  				//合并Job_Attr與Job_Group_Info數據  				Job_Info.Tables.Add (Job_Attr_Info);  				Job_Info.Tables.Add (Job_Group_Info);  				if (Job_Info.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				Job_Attr_Info.Dispose ();  				Job_Command_Info.Dispose ();  				view_Job_Group.Dispose ();  				Job_Group_Info.Dispose ();  				Job_Info.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region --F7300290--OK--View Job Status Case Workflow  		case Client2Server.CommunicationType.VIEWJOBSTATUS:  			try {  				// read all match data (filter job status completed and error flag) ..  				DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  				// create empty object data table' include the data schema ..  				DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow row in view_job_group_data.Table.Rows) {  					// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  					string id = row ["Job_Group_Id"].ToString ();  					// read and custom match data tbale' add to dataset ..  					DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the attributes to table ..  					job_attr_table.Merge (view_job_attr_data.ToTable ());  					DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  					// merge the job to table ..  					job_table.Merge (view_job_data.ToTable ());  				}  				// create job dataset viewer object ..  				DataSet JobDatas = new DataSet ("JobViewer");  				JobDatas.Tables.Add (view_job_group_data.ToTable ());  				JobDatas.Tables.Add (job_attr_table);  				JobDatas.Tables.Add (job_table);  				// commit changes ..  				JobDatas.AcceptChanges ();  				// response result ..  				if (JobDatas.Tables.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_group_data.Dispose ();  				job_attr_table.Dispose ();  				job_table.Dispose ();  				JobDatas.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  		case Client2Server.CommunicationType.VIEWJOBOUTPUT:  			try {  				// find match data ..  				DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  				// response result ..  				if (view_job_data.Count > 0) {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  				}  				else {  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  				}  				view_job_data.Dispose ();  			}  			catch (Exception ex) {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			break;  		#endregion  		}  		#endregion  		// response object ..  		client.Send (this.EnvSvr.Serialize (__returnObject));  		QueueItems.Clear ();  		ActionHeader = Client2Server.CommunicationType.NONE;  	}  	#endregion  	// delay 0.2 second to next execute ..  	Thread.Sleep (200);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (received != null) {  	// unpackage remote object data ..  	this.ClientObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	// declare server response object list interface ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// clear before receive data ..  	received = null;  	#region All GUI Work……  	switch (ActionHeader) {  	#region --F7300290--OK-- A/U:Machine Info Case Workflow  	case Client2Server.CommunicationType.MACHINEINFO:  		try {  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  			})' "Name' Ip"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			#region 填充數據  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key)) {  					mrow [kv.Key] = kv.Value;  				}  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#region 設定機器狀態值  			// decision machine type ..  			if (QueueItems.ContainsKey ("IsRender")) {  				if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 0;  					}  				}  				else {  					mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  					if (DBNull.Value == mrow ["Priority"]) {  						mrow ["Priority"] = 20;  					}  				}  			}  			// decision the dictionary exist maintenance flag ..  			if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  			// decision the dictionary exist offline flag ..  			if (QueueItems.ContainsKey ("IsOffLine")) {  				if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  					mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  					//***********************************************************(F7300253)  					global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  					IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  					string NetIP = IPClear.Address.ToString ();  					for (int i = n - 1; i >= 0; i--) {  						if (NetIP == address [i]) {  							address [i] = null;  						}  					}  					//************************************************************  				}  			}  			#endregion  			#endregion  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Refresh Machine Data 更新/插入Machine數據！  			// update machine data ..  			if (view_machine_data.Count > 0) {  				// get machine id column ..  				mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Update Machine Set ";  				cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  				cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  			}  			// add new machine data ..  			else {  				// create new machine id ..  				mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				cmd = " Insert Into Machine ";  				cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  				cmd += " Values ";  				cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  			}  			#endregion  			MySqlCommand command = new MySqlCommand ();  			command.CommandText = cmd;  			command.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			//  			mtable.Dispose ();  			view_machine_data.Dispose ();  			mds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region Delete Machine Info Case Workflow ！！！！未使用！！！！  	case Client2Server.CommunicationType.DELETEMACHINEINFO:  		try {  			// read machine table data ..  			DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Ip"]'  				QueueItems ["Machine_Id"]  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// get machine id ..  			string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  				id  			})' "Machine_Id"' DataViewRowState.Unchanged);  			// delete data from pool table and machine pool table ..  			while (delete_machine_pool_data.Count != 0)  				delete_machine_pool_data.Delete (0);  			while (delete_machine_data.Count != 0)  				delete_machine_data.Delete (0);  			// bind database command ..  			string cmd = " select count(*)  From Machine_Pool";  			cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  			cmd += " Where Machine.Machine_Id In (" + id + ")";  			MySqlCommand command = new MySqlCommand (cmd);  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  				cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			else {  				cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (delete_machine_data.ToTable ());  			pds.Tables.Add (delete_machine_pool_data.ToTable ());  			command = new MySqlCommand (cmd);  			// add commands ..  			//command.Parameters.AddWithValue("?Machine_Id"' id);  			TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  			TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			delete_machine_data.Dispose ();  			delete_machine_pool_data.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEINFO:  		try {  			// find match data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_data.Count > 0)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  			else  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			view_machine_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  		try {  			// find match data ..  			DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_machine_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_machine_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Machine Render Info Case Workflow  	case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  		try {  			DataTable MachineData = DisplayBase.MachineStatus.Copy ();  			// response result ..  			if (MachineData != null) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			MachineData.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Enable Or Disable Machine Case Workflow  	case Client2Server.CommunicationType.ONOFFMACHINE:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  				if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  					QueueItems ["IsEnable"] = 1;  				}  				else {  					QueueItems ["IsEnable"] = 0;  				}  				// read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				// mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				// bind database command ..  				string cmd = " Update Machine Set ";  				//cmd += "Name = ?Name' Ip = ?Ip'";  				cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  				//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--Set Machine Priority Case Workflow  	case Client2Server.CommunicationType.MACHINEPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read machine table data ..  				DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet mds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  				// create new row ..  				DataRow mrow = mtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (mtable.Columns.Contains (kv.Key))  						mrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				#endregion  				// complete added ..  				mtable.Rows.Add (mrow);  				// add to table collection ..  				mds.Tables.Add (mtable);  				//// bind database command ..  				string cmd = " Update Machine Set ";  				cmd += " Priority = ?Priority";  				cmd += " Where Machine_Id = ?Machine_Id ";  				// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (mtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanMachineUpdate = true;  				view_machine_data.Dispose ();  				mtable.Dispose ();  				mds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  	case Client2Server.CommunicationType.MACHINEPOOLRELATION:  		try {  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  			DataTable fkpool = this.EnvData.ReadData ("Pool");  			if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  				fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				foreach (string s in (string[])QueueItems ["Machines"]) {  					// create new row ..  					DataRow mprow = mptable.NewRow ();  					if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  						// assign pool id key ..  						mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  					}  					if (mptable.Columns.Contains ("Machine_Id")) {  						// assign machine id ..  						mprow ["Machine_Id"] = s;  					}  					// complete added ..  					mptable.Rows.Add (mprow);  				}  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				if (fkpool.Rows.Count > 0) {  					// bind database delete command ..  					// 先刪除該POOL的所有Machine，再逐一添加  					string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  					// add delete data table ..  					mds.Tables.Add (fkpool);  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (fkpool.TableName' command);  				}  				// bind database insert command ..  				string icmd = " Insert Into Machine_Pool ";  				icmd += " (Machine_Id' Pool_Id) ";  				icmd += " Values ";  				icmd += " (?Machine_Id' ?Pool_Id) ";  				MySqlCommand icommand = new MySqlCommand (icmd);  				icommand.CommandType = CommandType.Text;  				// add insert data table ..  				mds.Tables.Add (mptable);  				// refresh commands ..  				TextCommands.Add (mptable.TableName' icommand);  				// sync data ..  				this.EnvData.WriteData (mds' TextCommands);  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else {  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			mptable.Dispose ();  			mds.Dispose ();  			fkpool.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- S:View Pool Info Case Workflow  	case Client2Server.CommunicationType.VIEWPOOLINFO:  		try {  			// find match data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_pool_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Pool Info Case Workflow  	case Client2Server.CommunicationType.POOLINFO:  		try {  			// read pool table data ..  			DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Name"' DataViewRowState.Unchanged);  			// define table collection ..  			DataSet pds = new DataSet ();  			// define temporary data structure ..  			DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  			// create new row ..  			DataRow prow = ptable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (ptable.Columns.Contains (kv.Key))  					prow [kv.Key] = kv.Value;  			}  			// create text command dictionary ..  			string cmd = string.Empty;  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region 更新  			// update pool data ..  			if (view_pool_data.Count > 0) {  				// get pool id column ..  				prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Update Pool Set ";  				cmd += " Name = ?Name' Sharable = ?Sharable ";  				cmd += " Where Pool_Id = ?Pool_Id ";  			}  			#endregion  			#region 插入  			// add new pool data ..  			else {  				// create new pool id ..  				prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  				// complete added ..  				ptable.Rows.Add (prow);  				// add to table collection ..  				pds.Tables.Add (ptable);  				// bind database command ..  				cmd = " Insert Into Pool ";  				cmd += " (Pool_Id' Name' Sharable) ";  				cmd += " Values ";  				cmd += " (?Pool_Id' ?Name' ?Sharable) ";  			}  			#endregion  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (ptable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			view_pool_data.Dispose ();  			ptable.Dispose ();  			pds.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- D:Delete Pool Info Case Workflow  	case Client2Server.CommunicationType.DELETEPOOLINFO:  		try {  			// read pool table data ..  			DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Pool_Id"]  			})' "Pool_Id"' DataViewRowState.Unchanged);  			// get pool id ..  			string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  			// read machine pool table data ..  			DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  				id  			})' "Pool_Id"' DataViewRowState.Unchanged);  			DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  			//DataRow[]  			//           JobGroupRows = JobGroupInfo.Select(exp)'  			// 先刪除MachinePool，再操作Pool  			// bind database command ..  			string cmd = " Select count(*) From Machine_Pool ";  			cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  			cmd += " Where Pool.Pool_Id = ?Pool_Id";  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  				cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			else {  				cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  			}  			// define table collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// add to table collection ..  			pds.Tables.Add (machinepooltable);  			pds.Tables.Add (pooltable);  			// add commands ..  			command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Pool_Id"' id);  			TextCommands.Add (machinepooltable.TableName' command);  			TextCommands.Add (pooltable.TableName' command);  			// sync data ..  			this.EnvData.WriteDataPool (pds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			machinepooltable.Dispose ();  			pooltable.Dispose ();  			pds.Dispose ();  			delete_machine_pool_data.Dispose ();  			delete_pool_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  	case Client2Server.CommunicationType.JOBQUEUEADD:  	case Client2Server.CommunicationType.JOBQUEUEUPDATE:  		try {  			// declare error flag ..  			bool HasError = false;  			#region 获取原有数据/结构  			// create filter conditions string ..  			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  					QueueItems ["Name"]'  					QueueItems ["Job_Group_Id"]  				});  			}  			else {  				filter = string.Format ("Name = '{0}'"' new object[] {  					QueueItems ["Name"]  				});  			}  			DataView view_job_group_data = null;  			// job queue update action ..  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				// read job group table data ..  				view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  			}  			else {  				// job queue add-in action ..  				view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  			}  			// define temporary data structure ..  			IList<DataTable> jtables = new List<DataTable> {  				this.EnvData.ReadDataSchema ("Job_Group")'  				this.EnvData.ReadDataSchema ("Job_Attr")'  				this.EnvData.ReadDataSchema ("Job")'  				this.EnvData.ReadDataSchema ("Job_History")  			};  			#endregion  			#region 添加、加工数据  			// generate new job globally unique identifier ..  			Guid id = Guid.NewGuid ();  			// declare frames and command variable ..  			int start = 0' end = 0' ps = 0;  			string command = string.Empty;  			// assign start' end' packetsize and command attributes ..  			if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  				start = Convert.ToInt32 (QueueItems ["Start"]);  				end = Convert.ToInt32 (QueueItems ["End"]);  				ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  				command = QueueItems ["Command"].ToString ().Trim ();  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			// confirm use alienbrain extension ..  			if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  				QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  			}  			if (QueueItems.ContainsKey ("ABUpdateOnly")) {  				if (QueueItems ["ABUpdateOnly"].ToString () == "True")  					QueueItems ["ABUpdateOnly"] = 1;  				else  					QueueItems ["ABUpdateOnly"] = 0;  			}  			#endregion  			foreach (DataTable table in jtables) {  				// define table collection ..  				DataSet jds = new DataSet ();  				// declare data row variable ..  				DataRow row = null;  				#region JobTable  Process  				if (table.TableName.Equals ("job")) {  					#region Process Job Data Section  					for (int i = start; i <= end; i = i + ps) {  						int _start = -1' _end = -1;  						if ((i + ps) - 1 <= end) {  							_start = i;  							_end = (i + ps) - 1;  						}  						else {  							_start = i;  							_end = end;  						}  						// create new row ..  						row = table.NewRow ();  						//   						row ["Job_Id"] = i;  						if (view_job_group_data.Count > 0) {  							// get the job group id ..  							row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  						}  						else {  							// assign the job group id ..  							row ["Job_Group_Id"] = id.ToString ().ToUpper ();  						}  						// 替換字符串，這樣Maya才能接受command ..  						row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  						// complete added ..  						table.Rows.Add (row);  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				#region  				else {  					// create new row ..  					row = table.NewRow ();  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					#region Process History Frames Column  					if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  						row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  					}  					#endregion  					#region mapping column ..  					foreach (KeyValuePair<string' object> kv in QueueItems) {  						if (table.Columns.Contains (kv.Key)) {  							#region Mapping Machine Foreign Key  							if (kv.Key.IndexOf ("Machine") > 0) {  								// read machine table data ..  								DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  									kv.Value  								})' "Machine_Id"' DataViewRowState.Unchanged);  								if (view_machine_data.ToTable ().Rows.Count > 0)  									// get machine id ..  									row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  								continue;  							}  							#endregion  							// mapping other columns ..  							row [kv.Key] = kv.Value;  						}  					}  					#endregion  					// complete added ..  					table.Rows.Add (row);  					// add to table collection ..  					jds.Tables.Add (table);  				}  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				#region Read Job Relation Tables Data  				// job attribute table ..  				DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// job table ..  				DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  					row ["Job_Group_Id"]  				})' "Job_Group_Id"' DataViewRowState.Unchanged);  				// create job relation data row count ..  				IDictionary<string' int> DataRecords = new Dictionary<string' int> {  					{  						view_job_group_data.Table.TableName'  						view_job_group_data.Count  					}'  					{  						view_job_attr_data.Table.TableName'  						view_job_attr_data.Count  					}'  					{  						view_job_data.Table.TableName'  						view_job_data.Count  					}'  				};  				#endregion  				#region Process History Data Section  				if (table.TableName == "job_history") {  					//DataView view_jobhistory_data = this.EnvData.FindData(  					//"job_history"'  					//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  					//"Submit_Time"'  					//DataViewRowState.Unchanged);  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  					//{  					//    cmd += " Update Job_History Set ";  					//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  					//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  					//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  					//    cmd += " And Submit_Acct = @Submit_Acct ";  					//}  					//else  					//{  					cmd += " Insert Into Job_History ";  					cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  					//}  					// add commands ..  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					continue;  				}  				#endregion  				#region update job data ..  				if (DataRecords [table.TableName] > 0) {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand comm = new MySqlCommand ();  					#region Update_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Update Job_Group Set ";  						cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  						cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  						cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job_attr":  						cmd = " Update Job_Attr Set ";  						cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  						cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  						cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  						cmd += " Where ";  						cmd += " Job_Group_Id = ?Job_Group_Id ";  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					case "job":  						cmd = " Select count(*)  From Job ";  						cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  						cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  						comm = new MySqlCommand (cmd);  						comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  						if (this.EnvData.IsExistJobMachineId (comm) > 0) {  							cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  							cmd += " Insert Into Job ";  							cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  							cmd += " Values ";  							cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  						}  						comm.CommandText = cmd;  						comm.CommandType = CommandType.Text;  						// add commands ..  						TextCommands.Add (table.TableName' comm);  						// sync data ..  						this.EnvData.WriteData (jds' TextCommands);  						break;  					}  					#endregion  				}  				#endregion  				#region add new job data ..  				else {  					if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  						HasError = true;  						break;  					}  					string cmd = string.Empty;  					MySqlCommand Jcommand = new MySqlCommand ();  					#region Insert_Bind DataBase Command  					switch (table.TableName) {  					case "job_group":  						cmd = " Insert Into Job_Group ";  						cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  						cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  						cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  						break;  					case "job_attr":  						cmd = " Insert Into Job_Attr ";  						cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  						cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  						cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  						break;  					case "job":  						cmd = " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  						break;  					}  					#endregion  					Jcommand.CommandText = cmd;  					Jcommand.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  				}  				#endregion  			}  			#region 記錄新增任務的Job_Group_Id  			IList<string> NewJobID = new List<string> ();  			foreach (DataRow dr in jtables [0].Rows) {  				NewJobID.Add (dr ["Job_Group_Id"].ToString ());  			}  			#endregion  			if (HasError) {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			else {  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh job data list ..  				DisplayBase.CanJobUpdate = true;  			}  			view_job_group_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK-- Delete Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEDELETE:  		try {  			if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  				// enumerable delete job for list ..  				foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  					// define filter expression ..  					string exp = string.Format ("Job_Group_Id = '{0}'"' job);  					// read job data ..  					DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  					DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  					#region Get Process Machine Group  					// create send to machine of delete list ..  					Hashtable __machine = new Hashtable ();  					// get machine processing info ..  					var machine_query = from mq in JobRows.AsEnumerable ()  					group mq by mq.Field<string> ("Proc_Machine") into signle_machine  					select signle_machine.ToList ();  					// regroup job list ..  					foreach (var group in machine_query) {  						if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  							IList<uint> list = new List<uint> ();  							foreach (DataRow row in group) {  								list.Add (Convert.ToUInt32 (row ["Job_Id"]));  							}  							__machine.Add (group [0] ["Proc_Machine"]' list);  						}  					}  					// send to processing render farm ..  					if (__machine.Count > 0) {  						// 發送指令到算圖機  						this.DeleteFunc (__machine);  					}  					#endregion  					// delete relation data ..  					for (int i = 0; i < JobGroupRows.Length; i++)  						JobGroupRows [i].Delete ();  					for (int i = 0; i < JobAttrRows.Length; i++)  						JobAttrRows [i].Delete ();  					for (int i = 0; i < JobRows.Length; i++)  						JobRows [i].Delete ();  					// bind database command ..  					string cmd = " Select count(*) From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  					cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  					//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  					MySqlCommand command = new MySqlCommand (cmd);  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					if (this.EnvData.IsExistJobMachineId (command) > 0) {  						cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  					}  					else {  						cmd = string.Empty;  					}  					// define tables collection ..  					DataSet pds = new DataSet ();  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					command = new MySqlCommand (cmd);  					// add to table collection ..  					pds.Tables.Add (JobGroupInfo);  					pds.Tables.Add (JobAttrInfo);  					pds.Tables.Add (JobInfo);  					// add commands ..  					command.Parameters.AddWithValue ("?Job_Group_Id"' job);  					TextCommands.Add (JobGroupInfo.TableName' command);  					TextCommands.Add (JobAttrInfo.TableName' command);  					TextCommands.Add (JobInfo.TableName' command);  					// sync data ..  					this.EnvData.WriteData (pds' TextCommands);  					pds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// pause all have not yet sent of job ..  	#region --F7300290--OK--  Pause Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEPAUSE:  		try {  			if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  				foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  					DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  					#region 暂停或重启 更新Job_Group表  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  					// define table collection ..  					DataSet jds = new DataSet ();  					// define temporary data structure ..  					DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  					DataRow jrow = jtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jrow ["Job_Group_Id"] = Ids;  					jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  					foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  						if (!dc.AllowDBNull) {  							//查詢數據中不存在的數據行（保證所有不許空的數據）  							if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  								jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  							}  						}  					}  					// complete added ..  					jtable.Rows.Add (jrow);  					#endregion  					#region 重启时清空job的proc_machine等信息，以便重新算图  					if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  						DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  						if (Job_attr_data.Rows.Count > 0) {  							// define table collection ..  							DataSet jobds = new DataSet ();  							// define temporary data structure ..  							DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  							foreach (DataRow dr in Job_attr_data.Rows) {  								// create new row ..  								DataRow jobrow = jobtable.NewRow ();  								//添加更新後的數據 mapping column ..  								jobrow ["Proc_Machine"] = null;  								jobrow ["Start_Time"] = DBNull.Value;  								jobrow ["Finish_Time"] = DBNull.Value;  								// 填充未更新數據 check the data column is allow DbNull type ..  								foreach (DataColumn dc in Job_attr_data.Columns) {  									if (!dc.AllowDBNull) {  										jobrow [dc.ColumnName] = dr [dc.ColumnName];  									}  								}  								jobtable.Rows.Add (jobrow);  							}  							jobds.Tables.Add (jobtable);  							string jcmd = " Update Job Set  ";  							jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  							jcmd += "  Where  ";  							jcmd += "  Job_Id = ?Job_Id ";  							// create text command dictionary ..  							IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  							MySqlCommand Jcommand = new MySqlCommand (jcmd);  							Jcommand.CommandType = CommandType.Text;  							//// add commands ..  							JobCommand.Add (jobtable.TableName' Jcommand);  							// sync data ..  							this.EnvData.WriteData (jobds' JobCommand);  							Job_attr_data.Dispose ();  							jobds.Dispose ();  						}  					}  					#endregion  					// add to table collection ..  					jds.Tables.Add (jtable);  					string cmd = " Update Job_Group Set  ";  					cmd += "  Status = ?Status   ";  					cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  					MySqlCommand command = new MySqlCommand (cmd);  					command.CommandType = CommandType.Text;  					//// add commands ..  					TextCommands.Add (jtable.TableName' command);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					view_Job_data.Dispose ();  					jds.Dispose ();  				}  				// response result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// current empty ..  	#region --F7300290--OK-- Repeat Job Queue Case Workflow  	case Client2Server.CommunicationType.JOBQUEUEREPEAT:  		try {  		}  		catch {  		}  		break;  	#endregion  	// Set Jobs Priority ..  	#region --F7300290--OK-- U:Set Jobs Priority Case Workflow  	case Client2Server.CommunicationType.JOBPRIORITY:  		try {  			if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  				#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  				DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  				#endregion  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				#region 獲取數據結構，並組合新數據  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  				// create new row ..  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (jtable.Columns.Contains (kv.Key))  						jrow [kv.Key] = kv.Value;  				}  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Attr Set ";  				cmd += "  Priority = ?Priority";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				//// add commands ..  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				// response error result ..  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				// wait for write data finish ..  				Thread.Sleep (100);  				// refresh machine data list ..  				DisplayBase.CanJobUpdate = true;  				view_machine_data.Dispose ();  				jtable.Dispose ();  				jds.Dispose ();  			}  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--  View Job History Record Case Workflow  	case Client2Server.CommunicationType.JOBHISTORYRECORD:  		try {  			int SeleectNum = 100;  			if (QueueItems.ContainsKey ("Num")) {  				SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  			}  			DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  			var JobRecord = (from records in Job_History.AsEnumerable ()  			orderby records.Field<DateTime> ("Submit_Time") descending  			select records).Take (SeleectNum);  			DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  			foreach (var record in JobRecord) {  				DataRow dr = JobHistory.NewRow ();  				for (int i = 0; i < JobHistory.Columns.Count; i++) {  					// assign machine ..  					dr [i] = record [i].ToString ();  				}  				JobHistory.Rows.Add (dr);  			}  			JobHistory.Columns.Remove ("Submit_Acct");  			JobHistory.Columns.Remove ("Submit_Time");  			// response result ..  			if (JobHistory.Rows.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_History.Dispose ();  			JobHistory.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	// Get Detail through HistoryForm  	#region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  	case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  		try {  			// create filter conditions string   			string filter = string.Empty;  			if (QueueItems.ContainsKey ("Job_Group_Id")) {  				filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  			}  			DataSet Job_Info = new DataSet ();  			DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  			//數據不完整  			if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  				break;  			}  			#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  			DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  			Job_Group_Info.Columns.Remove ("Submit_Acct");  			Job_Group_Info.Columns.Remove ("Submit_Machine");  			Job_Group_Info.Columns.Remove ("Submit_Time");  			Job_Group_Info.Columns.Remove ("Status");  			Job_Group_Info.Columns.Remove ("Start_Time");  			Job_Group_Info.Columns.Remove ("Finish_Time");  			Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  			DataRow JobRow = Job_Group_Info.NewRow ();  			foreach (DataColumn dc in view_Job_Group.Columns) {  				//查詢數據中存在的數據行  				if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  					JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  				}  			}  			string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  			JobRow ["Command"] = CommandText;  			Job_Group_Info.Rows.Add (JobRow);  			#endregion  			//合并Job_Attr與Job_Group_Info數據  			Job_Info.Tables.Add (Job_Attr_Info);  			Job_Info.Tables.Add (Job_Group_Info);  			if (Job_Info.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			Job_Attr_Info.Dispose ();  			Job_Command_Info.Dispose ();  			view_Job_Group.Dispose ();  			Job_Group_Info.Dispose ();  			Job_Info.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region --F7300290--OK--View Job Status Case Workflow  	case Client2Server.CommunicationType.VIEWJOBSTATUS:  		try {  			// read all match data (filter job status completed and error flag) ..  			DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  			// create empty object data table' include the data schema ..  			DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow row in view_job_group_data.Table.Rows) {  				// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  				string id = row ["Job_Group_Id"].ToString ();  				// read and custom match data tbale' add to dataset ..  				DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the attributes to table ..  				job_attr_table.Merge (view_job_attr_data.ToTable ());  				DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  				// merge the job to table ..  				job_table.Merge (view_job_data.ToTable ());  			}  			// create job dataset viewer object ..  			DataSet JobDatas = new DataSet ("JobViewer");  			JobDatas.Tables.Add (view_job_group_data.ToTable ());  			JobDatas.Tables.Add (job_attr_table);  			JobDatas.Tables.Add (job_table);  			// commit changes ..  			JobDatas.AcceptChanges ();  			// response result ..  			if (JobDatas.Tables.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_group_data.Dispose ();  			job_attr_table.Dispose ();  			job_table.Dispose ();  			JobDatas.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	#region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  	case Client2Server.CommunicationType.VIEWJOBOUTPUT:  		try {  			// find match data ..  			DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  			// response result ..  			if (view_job_data.Count > 0) {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  			}  			else {  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  			}  			view_job_data.Dispose ();  		}  		catch (Exception ex) {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		break;  	#endregion  	}  	#endregion  	// response object ..  	client.Send (this.EnvSvr.Serialize (__returnObject));  	QueueItems.Clear ();  	ActionHeader = Client2Server.CommunicationType.NONE;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// read machine table data ..  	DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  		QueueItems ["Name"]'  		QueueItems ["Ip"]'  		Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  	})' "Name' Ip"' DataViewRowState.Unchanged);  	// define table collection ..  	DataSet mds = new DataSet ();  	// define temporary data structure ..  	DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  	// create new row ..  	DataRow mrow = mtable.NewRow ();  	#region 填充數據  	// mapping column ..  	foreach (KeyValuePair<string' object> kv in QueueItems) {  		if (mtable.Columns.Contains (kv.Key)) {  			mrow [kv.Key] = kv.Value;  		}  	}  	// check the data column is allow DbNull type ..  	foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  				mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  	}  	#region 設定機器狀態值  	// decision machine type ..  	if (QueueItems.ContainsKey ("IsRender")) {  		if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  			if (DBNull.Value == mrow ["Priority"]) {  				mrow ["Priority"] = 0;  			}  		}  		else {  			mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  			if (DBNull.Value == mrow ["Priority"]) {  				mrow ["Priority"] = 20;  			}  		}  	}  	// decision the dictionary exist maintenance flag ..  	if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  		mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  		//***********************************************************(F7300253)  		global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  		IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  		string NetIP = IPClear.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (NetIP == address [i]) {  				address [i] = null;  			}  		}  		//************************************************************  	}  	// decision the dictionary exist offline flag ..  	if (QueueItems.ContainsKey ("IsOffLine")) {  		if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  	}  	#endregion  	#endregion  	// create text command dictionary ..  	string cmd = string.Empty;  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region Refresh Machine Data 更新/插入Machine數據！  	// update machine data ..  	if (view_machine_data.Count > 0) {  		// get machine id column ..  		mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		// bind database command ..  		cmd = " Update Machine Set ";  		cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  		cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  		cmd += " Where Machine_Id = ?Machine_Id ";  	}  	// add new machine data ..  	else {  		// create new machine id ..  		mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		// bind database command ..  		cmd = " Insert Into Machine ";  		cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  		cmd += " Values ";  		cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  	}  	#endregion  	MySqlCommand command = new MySqlCommand ();  	command.CommandText = cmd;  	command.CommandType = CommandType.Text;  	// add commands ..  	TextCommands.Add (mtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (mds' TextCommands);  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanMachineUpdate = true;  	//  	mtable.Dispose ();  	view_machine_data.Dispose ();  	mds.Dispose ();  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// read machine table data ..  	DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  		QueueItems ["Name"]'  		QueueItems ["Ip"]'  		Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  	})' "Name' Ip"' DataViewRowState.Unchanged);  	// define table collection ..  	DataSet mds = new DataSet ();  	// define temporary data structure ..  	DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  	// create new row ..  	DataRow mrow = mtable.NewRow ();  	#region 填充數據  	// mapping column ..  	foreach (KeyValuePair<string' object> kv in QueueItems) {  		if (mtable.Columns.Contains (kv.Key)) {  			mrow [kv.Key] = kv.Value;  		}  	}  	// check the data column is allow DbNull type ..  	foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  				mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  	}  	#region 設定機器狀態值  	// decision machine type ..  	if (QueueItems.ContainsKey ("IsRender")) {  		if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  			if (DBNull.Value == mrow ["Priority"]) {  				mrow ["Priority"] = 0;  			}  		}  		else {  			mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  			if (DBNull.Value == mrow ["Priority"]) {  				mrow ["Priority"] = 20;  			}  		}  	}  	// decision the dictionary exist maintenance flag ..  	if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  		mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  		//***********************************************************(F7300253)  		global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  		IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  		string NetIP = IPClear.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (NetIP == address [i]) {  				address [i] = null;  			}  		}  		//************************************************************  	}  	// decision the dictionary exist offline flag ..  	if (QueueItems.ContainsKey ("IsOffLine")) {  		if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  	}  	#endregion  	#endregion  	// create text command dictionary ..  	string cmd = string.Empty;  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	#region Refresh Machine Data 更新/插入Machine數據！  	// update machine data ..  	if (view_machine_data.Count > 0) {  		// get machine id column ..  		mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		// bind database command ..  		cmd = " Update Machine Set ";  		cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  		cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  		cmd += " Where Machine_Id = ?Machine_Id ";  	}  	// add new machine data ..  	else {  		// create new machine id ..  		mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		// bind database command ..  		cmd = " Insert Into Machine ";  		cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  		cmd += " Values ";  		cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  	}  	#endregion  	MySqlCommand command = new MySqlCommand ();  	command.CommandText = cmd;  	command.CommandType = CommandType.Text;  	// add commands ..  	TextCommands.Add (mtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (mds' TextCommands);  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanMachineUpdate = true;  	//  	mtable.Dispose ();  	view_machine_data.Dispose ();  	mds.Dispose ();  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("IsRender")) {  	if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  		mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  		if (DBNull.Value == mrow ["Priority"]) {  			mrow ["Priority"] = 0;  		}  	}  	else {  		mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  		//***********************************************************(F7300253)  		global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  		IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  		string NetIP = IPClear.Address.ToString ();  		for (int i = n - 1; i >= 0; i--) {  			if (NetIP == address [i]) {  				address [i] = null;  			}  		}  		//************************************************************  		if (DBNull.Value == mrow ["Priority"]) {  			mrow ["Priority"] = 20;  		}  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  	mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  	if (DBNull.Value == mrow ["Priority"]) {  		mrow ["Priority"] = 0;  	}  }  else {  	mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  	//***********************************************************(F7300253)  	global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  	IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  	string NetIP = IPClear.Address.ToString ();  	for (int i = n - 1; i >= 0; i--) {  		if (NetIP == address [i]) {  			address [i] = null;  		}  	}  	//************************************************************  	if (DBNull.Value == mrow ["Priority"]) {  		mrow ["Priority"] = 20;  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (DBNull.Value == mrow ["Priority"]) {  	mrow ["Priority"] = 20;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: mrow ["Priority"] = 20;  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// read machine table data ..  	DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  		QueueItems ["Name"]'  		QueueItems ["Ip"]'  		QueueItems ["Machine_Id"]  	})' "Machine_Id"' DataViewRowState.Unchanged);  	// get machine id ..  	string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  	// read machine pool table data ..  	DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  		id  	})' "Machine_Id"' DataViewRowState.Unchanged);  	// delete data from pool table and machine pool table ..  	while (delete_machine_pool_data.Count != 0)  		delete_machine_pool_data.Delete (0);  	while (delete_machine_data.Count != 0)  		delete_machine_data.Delete (0);  	// bind database command ..  	string cmd = " select count(*)  From Machine_Pool";  	cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  	cmd += " Where Machine.Machine_Id In (" + id + ")";  	MySqlCommand command = new MySqlCommand (cmd);  	//command.Parameters.AddWithValue("?Machine_Id"' id);  	if (this.EnvData.IsExistJobMachineId (command) > 0) {  		cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  		cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  	}  	else {  		cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  	}  	// define table collection ..  	DataSet pds = new DataSet ();  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	// add to table collection ..  	pds.Tables.Add (delete_machine_data.ToTable ());  	pds.Tables.Add (delete_machine_pool_data.ToTable ());  	command = new MySqlCommand (cmd);  	// add commands ..  	//command.Parameters.AddWithValue("?Machine_Id"' id);  	TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  	TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  	// sync data ..  	this.EnvData.WriteData (pds' TextCommands);  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanMachineUpdate = true;  	delete_machine_data.Dispose ();  	delete_machine_pool_data.Dispose ();  	pds.Dispose ();  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  		if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  			QueueItems ["IsEnable"] = 1;  		}  		else {  			QueueItems ["IsEnable"] = 0;  		}  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key))  				mrow [kv.Key] = kv.Value;  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		// bind database command ..  		string cmd = " Update Machine Set ";  		//cmd += "Name = ?Name' Ip = ?Ip'";  		cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  		//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  		cmd += " Where Machine_Id = ?Machine_Id ";  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		view_machine_data.Dispose ();  		mtable.Dispose ();  		mds.Dispose ();  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  	if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  		QueueItems ["IsEnable"] = 1;  	}  	else {  		QueueItems ["IsEnable"] = 0;  	}  	// read machine table data ..  	DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	// define table collection ..  	DataSet mds = new DataSet ();  	// define temporary data structure ..  	DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  	// create new row ..  	DataRow mrow = mtable.NewRow ();  	// mapping column ..  	foreach (KeyValuePair<string' object> kv in QueueItems) {  		if (mtable.Columns.Contains (kv.Key))  			mrow [kv.Key] = kv.Value;  	}  	// check the data column is allow DbNull type ..  	foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  				mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  		}  	}  	// complete added ..  	mtable.Rows.Add (mrow);  	// add to table collection ..  	mds.Tables.Add (mtable);  	// bind database command ..  	string cmd = " Update Machine Set ";  	//cmd += "Name = ?Name' Ip = ?Ip'";  	cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  	//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  	cmd += " Where Machine_Id = ?Machine_Id ";  	// add commands ..  	MySqlCommand command = new MySqlCommand (cmd);  	command.CommandType = CommandType.Text;  	TextCommands.Add (mtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (mds' TextCommands);  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanMachineUpdate = true;  	view_machine_data.Dispose ();  	mtable.Dispose ();  	mds.Dispose ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  		#region 獲取當前要更改的數據行所有數據 read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  		#endregion  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// define table collection ..  		DataSet mds = new DataSet ();  		#region 獲取數據結構，並組合新數據  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		//添加更新後的數據 mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key))  				mrow [kv.Key] = kv.Value;  		}  		// 填充未更新數據 check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				//查詢數據中不存在的數據行（保證所有不許空的數據）  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#endregion  		// complete added ..  		mtable.Rows.Add (mrow);  		// add to table collection ..  		mds.Tables.Add (mtable);  		//// bind database command ..  		string cmd = " Update Machine Set ";  		cmd += " Priority = ?Priority";  		cmd += " Where Machine_Id = ?Machine_Id ";  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		view_machine_data.Dispose ();  		mtable.Dispose ();  		mds.Dispose ();  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  	#region 獲取當前要更改的數據行所有數據 read machine table data ..  	DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  	#endregion  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	// define table collection ..  	DataSet mds = new DataSet ();  	#region 獲取數據結構，並組合新數據  	// define temporary data structure ..  	DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  	// create new row ..  	DataRow mrow = mtable.NewRow ();  	//添加更新後的數據 mapping column ..  	foreach (KeyValuePair<string' object> kv in QueueItems) {  		if (mtable.Columns.Contains (kv.Key))  			mrow [kv.Key] = kv.Value;  	}  	// 填充未更新數據 check the data column is allow DbNull type ..  	foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			//查詢數據中不存在的數據行（保證所有不許空的數據）  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  				mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  	}  	#endregion  	// complete added ..  	mtable.Rows.Add (mrow);  	// add to table collection ..  	mds.Tables.Add (mtable);  	//// bind database command ..  	string cmd = " Update Machine Set ";  	cmd += " Priority = ?Priority";  	cmd += " Where Machine_Id = ?Machine_Id ";  	// add commands ..  	MySqlCommand command = new MySqlCommand (cmd);  	command.CommandType = CommandType.Text;  	TextCommands.Add (mtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (mds' TextCommands);  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanMachineUpdate = true;  	view_machine_data.Dispose ();  	mtable.Dispose ();  	mds.Dispose ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	// declare error flag ..  	bool HasError = false;  	#region 获取原有数据/结构  	// create filter conditions string ..  	string filter = string.Empty;  	if (QueueItems.ContainsKey ("Job_Group_Id")) {  		filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Job_Group_Id"]  		});  	}  	else {  		filter = string.Format ("Name = '{0}'"' new object[] {  			QueueItems ["Name"]  		});  	}  	DataView view_job_group_data = null;  	// job queue update action ..  	if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  		// read job group table data ..  		view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  	}  	else {  		// job queue add-in action ..  		view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  	}  	// define temporary data structure ..  	IList<DataTable> jtables = new List<DataTable> {  		this.EnvData.ReadDataSchema ("Job_Group")'  		this.EnvData.ReadDataSchema ("Job_Attr")'  		this.EnvData.ReadDataSchema ("Job")'  		this.EnvData.ReadDataSchema ("Job_History")  	};  	#endregion  	#region 添加、加工数据  	// generate new job globally unique identifier ..  	Guid id = Guid.NewGuid ();  	// declare frames and command variable ..  	int start = 0' end = 0' ps = 0;  	string command = string.Empty;  	// assign start' end' packetsize and command attributes ..  	if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  		start = Convert.ToInt32 (QueueItems ["Start"]);  		end = Convert.ToInt32 (QueueItems ["End"]);  		ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  		command = QueueItems ["Command"].ToString ().Trim ();  	}  	else {  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		break;  	}  	// confirm use alienbrain extension ..  	if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  		QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  	}  	if (QueueItems.ContainsKey ("ABUpdateOnly")) {  		if (QueueItems ["ABUpdateOnly"].ToString () == "True")  			QueueItems ["ABUpdateOnly"] = 1;  		else  			QueueItems ["ABUpdateOnly"] = 0;  	}  	#endregion  	foreach (DataTable table in jtables) {  		// define table collection ..  		DataSet jds = new DataSet ();  		// declare data row variable ..  		DataRow row = null;  		#region JobTable  Process  		if (table.TableName.Equals ("job")) {  			#region Process Job Data Section  			for (int i = start; i <= end; i = i + ps) {  				int _start = -1' _end = -1;  				if ((i + ps) - 1 <= end) {  					_start = i;  					_end = (i + ps) - 1;  				}  				else {  					_start = i;  					_end = end;  				}  				// create new row ..  				row = table.NewRow ();  				//   				row ["Job_Id"] = i;  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				// 替換字符串，這樣Maya才能接受command ..  				row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  				// complete added ..  				table.Rows.Add (row);  			}  			#endregion  			// add to table collection ..  			jds.Tables.Add (table);  		}  		#endregion  		#region  		else {  			// create new row ..  			row = table.NewRow ();  			if (view_job_group_data.Count > 0) {  				// get the job group id ..  				row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  			}  			else {  				// assign the job group id ..  				row ["Job_Group_Id"] = id.ToString ().ToUpper ();  			}  			#region Process History Frames Column  			if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  				row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  			}  			#endregion  			#region mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (table.Columns.Contains (kv.Key)) {  					#region Mapping Machine Foreign Key  					if (kv.Key.IndexOf ("Machine") > 0) {  						// read machine table data ..  						DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  							kv.Value  						})' "Machine_Id"' DataViewRowState.Unchanged);  						if (view_machine_data.ToTable ().Rows.Count > 0)  							// get machine id ..  							row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  						continue;  					}  					#endregion  					// mapping other columns ..  					row [kv.Key] = kv.Value;  				}  			}  			#endregion  			// complete added ..  			table.Rows.Add (row);  			// add to table collection ..  			jds.Tables.Add (table);  		}  		#endregion  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Read Job Relation Tables Data  		// job attribute table ..  		DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  			row ["Job_Group_Id"]  		})' "Job_Group_Id"' DataViewRowState.Unchanged);  		// job table ..  		DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  			row ["Job_Group_Id"]  		})' "Job_Group_Id"' DataViewRowState.Unchanged);  		// create job relation data row count ..  		IDictionary<string' int> DataRecords = new Dictionary<string' int> {  			{  				view_job_group_data.Table.TableName'  				view_job_group_data.Count  			}'  			{  				view_job_attr_data.Table.TableName'  				view_job_attr_data.Count  			}'  			{  				view_job_data.Table.TableName'  				view_job_data.Count  			}'  		};  		#endregion  		#region Process History Data Section  		if (table.TableName == "job_history") {  			//DataView view_jobhistory_data = this.EnvData.FindData(  			//"job_history"'  			//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  			//"Submit_Time"'  			//DataViewRowState.Unchanged);  			string cmd = string.Empty;  			MySqlCommand comm = new MySqlCommand ();  			//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  			//{  			//    cmd += " Update Job_History Set ";  			//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  			//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  			//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  			//    cmd += " And Submit_Acct = @Submit_Acct ";  			//}  			//else  			//{  			cmd += " Insert Into Job_History ";  			cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  			cmd += " Values ";  			cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  			//}  			// add commands ..  			comm.CommandText = cmd;  			comm.CommandType = CommandType.Text;  			TextCommands.Add (table.TableName' comm);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			continue;  		}  		#endregion  		#region update job data ..  		if (DataRecords [table.TableName] > 0) {  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  				HasError = true;  				break;  			}  			string cmd = string.Empty;  			MySqlCommand comm = new MySqlCommand ();  			#region Update_Bind DataBase Command  			switch (table.TableName) {  			case "job_group":  				cmd = " Update Job_Group Set ";  				cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  				cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  				cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  				cmd += " Where ";  				cmd += " Job_Group_Id = ?Job_Group_Id ";  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				break;  			case "job_attr":  				cmd = " Update Job_Attr Set ";  				cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  				cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  				cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  				cmd += " Where ";  				cmd += " Job_Group_Id = ?Job_Group_Id ";  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				break;  			case "job":  				cmd = " Select count(*)  From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  				cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  				comm = new MySqlCommand (cmd);  				comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  				if (this.EnvData.IsExistJobMachineId (comm) > 0) {  					cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  				}  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				break;  			}  			#endregion  		}  		#endregion  		#region add new job data ..  		else {  			if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  				HasError = true;  				break;  			}  			string cmd = string.Empty;  			MySqlCommand Jcommand = new MySqlCommand ();  			#region Insert_Bind DataBase Command  			switch (table.TableName) {  			case "job_group":  				cmd = " Insert Into Job_Group ";  				cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  				cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  				cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  				break;  			case "job_attr":  				cmd = " Insert Into Job_Attr ";  				cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  				cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  				cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  				break;  			case "job":  				cmd = " Insert Into Job ";  				cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  				break;  			}  			#endregion  			Jcommand.CommandText = cmd;  			Jcommand.CommandType = CommandType.Text;  			// add commands ..  			TextCommands.Add (table.TableName' Jcommand);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  		}  		#endregion  	}  	#region 記錄新增任務的Job_Group_Id  	IList<string> NewJobID = new List<string> ();  	foreach (DataRow dr in jtables [0].Rows) {  		NewJobID.Add (dr ["Job_Group_Id"].ToString ());  	}  	#endregion  	if (HasError) {  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	}  	else {  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh job data list ..  		DisplayBase.CanJobUpdate = true;  	}  	view_job_group_data.Dispose ();  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (HasError) {  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  }  else {  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh job data list ..  	DisplayBase.CanJobUpdate = true;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  		// enumerable delete job for list ..  		foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  			// define filter expression ..  			string exp = string.Format ("Job_Group_Id = '{0}'"' job);  			// read job data ..  			DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  			DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  			#region Get Process Machine Group  			// create send to machine of delete list ..  			Hashtable __machine = new Hashtable ();  			// get machine processing info ..  			var machine_query = from mq in JobRows.AsEnumerable ()  			group mq by mq.Field<string> ("Proc_Machine") into signle_machine  			select signle_machine.ToList ();  			// regroup job list ..  			foreach (var group in machine_query) {  				if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  					IList<uint> list = new List<uint> ();  					foreach (DataRow row in group) {  						list.Add (Convert.ToUInt32 (row ["Job_Id"]));  					}  					__machine.Add (group [0] ["Proc_Machine"]' list);  				}  			}  			// send to processing render farm ..  			if (__machine.Count > 0) {  				// 發送指令到算圖機  				this.DeleteFunc (__machine);  			}  			#endregion  			// delete relation data ..  			for (int i = 0; i < JobGroupRows.Length; i++)  				JobGroupRows [i].Delete ();  			for (int i = 0; i < JobAttrRows.Length; i++)  				JobAttrRows [i].Delete ();  			for (int i = 0; i < JobRows.Length; i++)  				JobRows [i].Delete ();  			// bind database command ..  			string cmd = " Select count(*) From Job ";  			cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  			cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  			cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  			//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  			MySqlCommand command = new MySqlCommand (cmd);  			command.Parameters.AddWithValue ("?Job_Group_Id"' job);  			if (this.EnvData.IsExistJobMachineId (command) > 0) {  				cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  				cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  				cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  			}  			else {  				cmd = string.Empty;  			}  			// define tables collection ..  			DataSet pds = new DataSet ();  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			command = new MySqlCommand (cmd);  			// add to table collection ..  			pds.Tables.Add (JobGroupInfo);  			pds.Tables.Add (JobAttrInfo);  			pds.Tables.Add (JobInfo);  			// add commands ..  			command.Parameters.AddWithValue ("?Job_Group_Id"' job);  			TextCommands.Add (JobGroupInfo.TableName' command);  			TextCommands.Add (JobAttrInfo.TableName' command);  			TextCommands.Add (JobInfo.TableName' command);  			// sync data ..  			this.EnvData.WriteData (pds' TextCommands);  			pds.Dispose ();  		}  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanJobUpdate = true;  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  	// enumerable delete job for list ..  	foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  		// define filter expression ..  		string exp = string.Format ("Job_Group_Id = '{0}'"' job);  		// read job data ..  		DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  		DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  		#region Get Process Machine Group  		// create send to machine of delete list ..  		Hashtable __machine = new Hashtable ();  		// get machine processing info ..  		var machine_query = from mq in JobRows.AsEnumerable ()  		group mq by mq.Field<string> ("Proc_Machine") into signle_machine  		select signle_machine.ToList ();  		// regroup job list ..  		foreach (var group in machine_query) {  			if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  				IList<uint> list = new List<uint> ();  				foreach (DataRow row in group) {  					list.Add (Convert.ToUInt32 (row ["Job_Id"]));  				}  				__machine.Add (group [0] ["Proc_Machine"]' list);  			}  		}  		// send to processing render farm ..  		if (__machine.Count > 0) {  			// 發送指令到算圖機  			this.DeleteFunc (__machine);  		}  		#endregion  		// delete relation data ..  		for (int i = 0; i < JobGroupRows.Length; i++)  			JobGroupRows [i].Delete ();  		for (int i = 0; i < JobAttrRows.Length; i++)  			JobAttrRows [i].Delete ();  		for (int i = 0; i < JobRows.Length; i++)  			JobRows [i].Delete ();  		// bind database command ..  		string cmd = " Select count(*) From Job ";  		cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  		cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  		//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Job_Group_Id"' job);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  			cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  			cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  		}  		else {  			cmd = string.Empty;  		}  		// define tables collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		command = new MySqlCommand (cmd);  		// add to table collection ..  		pds.Tables.Add (JobGroupInfo);  		pds.Tables.Add (JobAttrInfo);  		pds.Tables.Add (JobInfo);  		// add commands ..  		command.Parameters.AddWithValue ("?Job_Group_Id"' job);  		TextCommands.Add (JobGroupInfo.TableName' command);  		TextCommands.Add (JobAttrInfo.TableName' command);  		TextCommands.Add (JobInfo.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		pds.Dispose ();  	}  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanJobUpdate = true;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  		foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  			DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  			#region 暂停或重启 更新Job_Group表  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			jrow ["Job_Group_Id"] = Ids;  			jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  			foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			#region 重启时清空job的proc_machine等信息，以便重新算图  			if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  				DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				if (Job_attr_data.Rows.Count > 0) {  					// define table collection ..  					DataSet jobds = new DataSet ();  					// define temporary data structure ..  					DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow dr in Job_attr_data.Rows) {  						// create new row ..  						DataRow jobrow = jobtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jobrow ["Proc_Machine"] = null;  						jobrow ["Start_Time"] = DBNull.Value;  						jobrow ["Finish_Time"] = DBNull.Value;  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in Job_attr_data.Columns) {  							if (!dc.AllowDBNull) {  								jobrow [dc.ColumnName] = dr [dc.ColumnName];  							}  						}  						jobtable.Rows.Add (jobrow);  					}  					jobds.Tables.Add (jobtable);  					string jcmd = " Update Job Set  ";  					jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  					jcmd += "  Where  ";  					jcmd += "  Job_Id = ?Job_Id ";  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  					MySqlCommand Jcommand = new MySqlCommand (jcmd);  					Jcommand.CommandType = CommandType.Text;  					//// add commands ..  					JobCommand.Add (jobtable.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jobds' JobCommand);  					Job_attr_data.Dispose ();  					jobds.Dispose ();  				}  			}  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Group Set  ";  			cmd += "  Status = ?Status   ";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			//// add commands ..  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			view_Job_data.Dispose ();  			jds.Dispose ();  		}  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanJobUpdate = true;  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  		foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  			DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  			#region 暂停或重启 更新Job_Group表  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			jrow ["Job_Group_Id"] = Ids;  			jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  			foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			#region 重启时清空job的proc_machine等信息，以便重新算图  			if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  				DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  				if (Job_attr_data.Rows.Count > 0) {  					// define table collection ..  					DataSet jobds = new DataSet ();  					// define temporary data structure ..  					DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  					foreach (DataRow dr in Job_attr_data.Rows) {  						// create new row ..  						DataRow jobrow = jobtable.NewRow ();  						//添加更新後的數據 mapping column ..  						jobrow ["Proc_Machine"] = null;  						jobrow ["Start_Time"] = DBNull.Value;  						jobrow ["Finish_Time"] = DBNull.Value;  						// 填充未更新數據 check the data column is allow DbNull type ..  						foreach (DataColumn dc in Job_attr_data.Columns) {  							if (!dc.AllowDBNull) {  								jobrow [dc.ColumnName] = dr [dc.ColumnName];  							}  						}  						jobtable.Rows.Add (jobrow);  					}  					jobds.Tables.Add (jobtable);  					string jcmd = " Update Job Set  ";  					jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  					jcmd += "  Where  ";  					jcmd += "  Job_Id = ?Job_Id ";  					// create text command dictionary ..  					IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  					MySqlCommand Jcommand = new MySqlCommand (jcmd);  					Jcommand.CommandType = CommandType.Text;  					//// add commands ..  					JobCommand.Add (jobtable.TableName' Jcommand);  					// sync data ..  					this.EnvData.WriteData (jobds' JobCommand);  					Job_attr_data.Dispose ();  					jobds.Dispose ();  				}  			}  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Group Set  ";  			cmd += "  Status = ?Status   ";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			//// add commands ..  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			view_Job_data.Dispose ();  			jds.Dispose ();  		}  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanJobUpdate = true;  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  	foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  		DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  		#region 暂停或重启 更新Job_Group表  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// define table collection ..  		DataSet jds = new DataSet ();  		// define temporary data structure ..  		DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  		DataRow jrow = jtable.NewRow ();  		//添加更新後的數據 mapping column ..  		jrow ["Job_Group_Id"] = Ids;  		jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  		foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				//查詢數據中不存在的數據行（保證所有不許空的數據）  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  					jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		// complete added ..  		jtable.Rows.Add (jrow);  		#endregion  		#region 重启时清空job的proc_machine等信息，以便重新算图  		if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  			DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			if (Job_attr_data.Rows.Count > 0) {  				// define table collection ..  				DataSet jobds = new DataSet ();  				// define temporary data structure ..  				DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow dr in Job_attr_data.Rows) {  					// create new row ..  					DataRow jobrow = jobtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jobrow ["Proc_Machine"] = null;  					jobrow ["Start_Time"] = DBNull.Value;  					jobrow ["Finish_Time"] = DBNull.Value;  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in Job_attr_data.Columns) {  						if (!dc.AllowDBNull) {  							jobrow [dc.ColumnName] = dr [dc.ColumnName];  						}  					}  					jobtable.Rows.Add (jobrow);  				}  				jobds.Tables.Add (jobtable);  				string jcmd = " Update Job Set  ";  				jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  				jcmd += "  Where  ";  				jcmd += "  Job_Id = ?Job_Id ";  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  				MySqlCommand Jcommand = new MySqlCommand (jcmd);  				Jcommand.CommandType = CommandType.Text;  				//// add commands ..  				JobCommand.Add (jobtable.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jobds' JobCommand);  				Job_attr_data.Dispose ();  				jobds.Dispose ();  			}  		}  		#endregion  		// add to table collection ..  		jds.Tables.Add (jtable);  		string cmd = " Update Job_Group Set  ";  		cmd += "  Status = ?Status   ";  		cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		//// add commands ..  		TextCommands.Add (jtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (jds' TextCommands);  		view_Job_data.Dispose ();  		jds.Dispose ();  	}  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanJobUpdate = true;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  	foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  		DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  		#region 暂停或重启 更新Job_Group表  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// define table collection ..  		DataSet jds = new DataSet ();  		// define temporary data structure ..  		DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  		DataRow jrow = jtable.NewRow ();  		//添加更新後的數據 mapping column ..  		jrow ["Job_Group_Id"] = Ids;  		jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  		foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				//查詢數據中不存在的數據行（保證所有不許空的數據）  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  					jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		// complete added ..  		jtable.Rows.Add (jrow);  		#endregion  		#region 重启时清空job的proc_machine等信息，以便重新算图  		if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  			DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  			if (Job_attr_data.Rows.Count > 0) {  				// define table collection ..  				DataSet jobds = new DataSet ();  				// define temporary data structure ..  				DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  				foreach (DataRow dr in Job_attr_data.Rows) {  					// create new row ..  					DataRow jobrow = jobtable.NewRow ();  					//添加更新後的數據 mapping column ..  					jobrow ["Proc_Machine"] = null;  					jobrow ["Start_Time"] = DBNull.Value;  					jobrow ["Finish_Time"] = DBNull.Value;  					// 填充未更新數據 check the data column is allow DbNull type ..  					foreach (DataColumn dc in Job_attr_data.Columns) {  						if (!dc.AllowDBNull) {  							jobrow [dc.ColumnName] = dr [dc.ColumnName];  						}  					}  					jobtable.Rows.Add (jobrow);  				}  				jobds.Tables.Add (jobtable);  				string jcmd = " Update Job Set  ";  				jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  				jcmd += "  Where  ";  				jcmd += "  Job_Id = ?Job_Id ";  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  				MySqlCommand Jcommand = new MySqlCommand (jcmd);  				Jcommand.CommandType = CommandType.Text;  				//// add commands ..  				JobCommand.Add (jobtable.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jobds' JobCommand);  				Job_attr_data.Dispose ();  				jobds.Dispose ();  			}  		}  		#endregion  		// add to table collection ..  		jds.Tables.Add (jtable);  		string cmd = " Update Job_Group Set  ";  		cmd += "  Status = ?Status   ";  		cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		//// add commands ..  		TextCommands.Add (jtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (jds' TextCommands);  		view_Job_data.Dispose ();  		jds.Dispose ();  	}  	// response result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanJobUpdate = true;  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  	DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  	#region 暂停或重启 更新Job_Group表  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	// define table collection ..  	DataSet jds = new DataSet ();  	// define temporary data structure ..  	DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  	DataRow jrow = jtable.NewRow ();  	//添加更新後的數據 mapping column ..  	jrow ["Job_Group_Id"] = Ids;  	jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  	foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			//查詢數據中不存在的數據行（保證所有不許空的數據）  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  				jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  	}  	// complete added ..  	jtable.Rows.Add (jrow);  	#endregion  	#region 重启时清空job的proc_machine等信息，以便重新算图  	if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  		DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		if (Job_attr_data.Rows.Count > 0) {  			// define table collection ..  			DataSet jobds = new DataSet ();  			// define temporary data structure ..  			DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  			foreach (DataRow dr in Job_attr_data.Rows) {  				// create new row ..  				DataRow jobrow = jobtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jobrow ["Proc_Machine"] = null;  				jobrow ["Start_Time"] = DBNull.Value;  				jobrow ["Finish_Time"] = DBNull.Value;  				// 填充未更新數據 check the data column is allow DbNull type ..  				foreach (DataColumn dc in Job_attr_data.Columns) {  					if (!dc.AllowDBNull) {  						jobrow [dc.ColumnName] = dr [dc.ColumnName];  					}  				}  				jobtable.Rows.Add (jobrow);  			}  			jobds.Tables.Add (jobtable);  			string jcmd = " Update Job Set  ";  			jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  			jcmd += "  Where  ";  			jcmd += "  Job_Id = ?Job_Id ";  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  			MySqlCommand Jcommand = new MySqlCommand (jcmd);  			Jcommand.CommandType = CommandType.Text;  			//// add commands ..  			JobCommand.Add (jobtable.TableName' Jcommand);  			// sync data ..  			this.EnvData.WriteData (jobds' JobCommand);  			Job_attr_data.Dispose ();  			jobds.Dispose ();  		}  	}  	#endregion  	// add to table collection ..  	jds.Tables.Add (jtable);  	string cmd = " Update Job_Group Set  ";  	cmd += "  Status = ?Status   ";  	cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  	MySqlCommand command = new MySqlCommand (cmd);  	command.CommandType = CommandType.Text;  	//// add commands ..  	TextCommands.Add (jtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (jds' TextCommands);  	view_Job_data.Dispose ();  	jds.Dispose ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  	DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  	if (Job_attr_data.Rows.Count > 0) {  		// define table collection ..  		DataSet jobds = new DataSet ();  		// define temporary data structure ..  		DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow dr in Job_attr_data.Rows) {  			// create new row ..  			DataRow jobrow = jobtable.NewRow ();  			//添加更新後的數據 mapping column ..  			jobrow ["Proc_Machine"] = null;  			jobrow ["Start_Time"] = DBNull.Value;  			jobrow ["Finish_Time"] = DBNull.Value;  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in Job_attr_data.Columns) {  				if (!dc.AllowDBNull) {  					jobrow [dc.ColumnName] = dr [dc.ColumnName];  				}  			}  			jobtable.Rows.Add (jobrow);  		}  		jobds.Tables.Add (jobtable);  		string jcmd = " Update Job Set  ";  		jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  		jcmd += "  Where  ";  		jcmd += "  Job_Id = ?Job_Id ";  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  		MySqlCommand Jcommand = new MySqlCommand (jcmd);  		Jcommand.CommandType = CommandType.Text;  		//// add commands ..  		JobCommand.Add (jobtable.TableName' Jcommand);  		// sync data ..  		this.EnvData.WriteData (jobds' JobCommand);  		Job_attr_data.Dispose ();  		jobds.Dispose ();  	}  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  		#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  		DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  		#endregion  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// define table collection ..  		DataSet jds = new DataSet ();  		#region 獲取數據結構，並組合新數據  		// define temporary data structure ..  		DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  		// create new row ..  		DataRow jrow = jtable.NewRow ();  		//添加更新後的數據 mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (jtable.Columns.Contains (kv.Key))  				jrow [kv.Key] = kv.Value;  		}  		// 填充未更新數據 check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				//查詢數據中不存在的數據行（保證所有不許空的數據）  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		// complete added ..  		jtable.Rows.Add (jrow);  		#endregion  		// add to table collection ..  		jds.Tables.Add (jtable);  		string cmd = " Update Job_Attr Set ";  		cmd += "  Priority = ?Priority";  		cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  		//// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (jtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (jds' TextCommands);  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanJobUpdate = true;  		view_machine_data.Dispose ();  		jtable.Dispose ();  		jds.Dispose ();  	}  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  	#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  	DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  	#endregion  	// create text command dictionary ..  	IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  	// define table collection ..  	DataSet jds = new DataSet ();  	#region 獲取數據結構，並組合新數據  	// define temporary data structure ..  	DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  	// create new row ..  	DataRow jrow = jtable.NewRow ();  	//添加更新後的數據 mapping column ..  	foreach (KeyValuePair<string' object> kv in QueueItems) {  		if (jtable.Columns.Contains (kv.Key))  			jrow [kv.Key] = kv.Value;  	}  	// 填充未更新數據 check the data column is allow DbNull type ..  	foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  		if (!dc.AllowDBNull) {  			//查詢數據中不存在的數據行（保證所有不許空的數據）  			if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  				jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  			}  		}  	}  	// complete added ..  	jtable.Rows.Add (jrow);  	#endregion  	// add to table collection ..  	jds.Tables.Add (jtable);  	string cmd = " Update Job_Attr Set ";  	cmd += "  Priority = ?Priority";  	cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  	//// add commands ..  	MySqlCommand command = new MySqlCommand (cmd);  	command.CommandType = CommandType.Text;  	TextCommands.Add (jtable.TableName' command);  	// sync data ..  	this.EnvData.WriteData (jds' TextCommands);  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  	// wait for write data finish ..  	Thread.Sleep (100);  	// refresh machine data list ..  	DisplayBase.CanJobUpdate = true;  	view_machine_data.Dispose ();  	jtable.Dispose ();  	jds.Dispose ();  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: try {  	int SeleectNum = 100;  	if (QueueItems.ContainsKey ("Num")) {  		SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  	}  	DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  	var JobRecord = (from records in Job_History.AsEnumerable ()  	orderby records.Field<DateTime> ("Submit_Time") descending  	select records).Take (SeleectNum);  	DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  	foreach (var record in JobRecord) {  		DataRow dr = JobHistory.NewRow ();  		for (int i = 0; i < JobHistory.Columns.Count; i++) {  			// assign machine ..  			dr [i] = record [i].ToString ();  		}  		JobHistory.Rows.Add (dr);  	}  	JobHistory.Columns.Remove ("Submit_Acct");  	JobHistory.Columns.Remove ("Submit_Time");  	// response result ..  	if (JobHistory.Rows.Count > 0) {  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  	}  	else {  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  	}  	Job_History.Dispose ();  	JobHistory.Dispose ();  }  catch (Exception ex) {  	// response error result ..  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBase,The following statement contains a magic number: while (ConnectPort > 0)  	Thread.Sleep (100);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBase,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: do {  	// get maintenance quantity ..  	DataView ConnectList = this.EnvData.FindData ("Machine"' "Status Not In (0' 3) And IsRender = 1 And IsEnable = 1"' "Priority Desc"' DataViewRowState.Unchanged);  	lock (this.Signal) {  		if (ConnectList.Count > 0) {  			try {  				// refresh pool machine list ..  				this.ReportPoolHost ();  				foreach (DataRowView row in ConnectList) {  					// package machine info ..  					IList<object> Info = new List<object> {  						row ["Machine_Id"]'  						row ["Ip"]'  					};  					if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  						// define row values ..  						DataRow _row = Signal.NewRow ();  						_row ["MachineId"] = row ["Machine_Id"];  						_row ["Priority"] = row ["Priority"];  						_row ["ConnectFail"] = 0;  						_row ["TCore"] = 0;  						_row ["UCore"] = 0;  						// add to signal ..  						this.Signal.Rows.Add (_row);  						// commit changes ..  						this.Signal.AcceptChanges ();  						// create single thread to maintenance machine ..  						Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  						MachineThread.SetApartmentState (ApartmentState.MTA);  						MachineThread.IsBackground = false;  						MachineThread.Priority = ThreadPriority.Normal;  						MachineThread.Start (Info);  					}  					// delay executing ..  					Thread.Sleep (500);  				}  			}  			catch (Exception ex) {  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  			}  		}  	}  	// delay 10 seconds to next execute check connect quantity ..  	Thread.Sleep (10000);  }  while (!this.requestStop);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: do {  	// get maintenance quantity ..  	DataView ConnectList = this.EnvData.FindData ("Machine"' "Status Not In (0' 3) And IsRender = 1 And IsEnable = 1"' "Priority Desc"' DataViewRowState.Unchanged);  	lock (this.Signal) {  		if (ConnectList.Count > 0) {  			try {  				// refresh pool machine list ..  				this.ReportPoolHost ();  				foreach (DataRowView row in ConnectList) {  					// package machine info ..  					IList<object> Info = new List<object> {  						row ["Machine_Id"]'  						row ["Ip"]'  					};  					if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  						// define row values ..  						DataRow _row = Signal.NewRow ();  						_row ["MachineId"] = row ["Machine_Id"];  						_row ["Priority"] = row ["Priority"];  						_row ["ConnectFail"] = 0;  						_row ["TCore"] = 0;  						_row ["UCore"] = 0;  						// add to signal ..  						this.Signal.Rows.Add (_row);  						// commit changes ..  						this.Signal.AcceptChanges ();  						// create single thread to maintenance machine ..  						Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  						MachineThread.SetApartmentState (ApartmentState.MTA);  						MachineThread.IsBackground = false;  						MachineThread.Priority = ThreadPriority.Normal;  						MachineThread.Start (Info);  					}  					// delay executing ..  					Thread.Sleep (500);  				}  			}  			catch (Exception ex) {  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  			}  		}  	}  	// delay 10 seconds to next execute check connect quantity ..  	Thread.Sleep (10000);  }  while (!this.requestStop);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: lock (this.Signal) {  	if (ConnectList.Count > 0) {  		try {  			// refresh pool machine list ..  			this.ReportPoolHost ();  			foreach (DataRowView row in ConnectList) {  				// package machine info ..  				IList<object> Info = new List<object> {  					row ["Machine_Id"]'  					row ["Ip"]'  				};  				if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  					// define row values ..  					DataRow _row = Signal.NewRow ();  					_row ["MachineId"] = row ["Machine_Id"];  					_row ["Priority"] = row ["Priority"];  					_row ["ConnectFail"] = 0;  					_row ["TCore"] = 0;  					_row ["UCore"] = 0;  					// add to signal ..  					this.Signal.Rows.Add (_row);  					// commit changes ..  					this.Signal.AcceptChanges ();  					// create single thread to maintenance machine ..  					Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  					MachineThread.SetApartmentState (ApartmentState.MTA);  					MachineThread.IsBackground = false;  					MachineThread.Priority = ThreadPriority.Normal;  					MachineThread.Start (Info);  				}  				// delay executing ..  				Thread.Sleep (500);  			}  		}  		catch (Exception ex) {  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  		}  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: if (ConnectList.Count > 0) {  	try {  		// refresh pool machine list ..  		this.ReportPoolHost ();  		foreach (DataRowView row in ConnectList) {  			// package machine info ..  			IList<object> Info = new List<object> {  				row ["Machine_Id"]'  				row ["Ip"]'  			};  			if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  				// define row values ..  				DataRow _row = Signal.NewRow ();  				_row ["MachineId"] = row ["Machine_Id"];  				_row ["Priority"] = row ["Priority"];  				_row ["ConnectFail"] = 0;  				_row ["TCore"] = 0;  				_row ["UCore"] = 0;  				// add to signal ..  				this.Signal.Rows.Add (_row);  				// commit changes ..  				this.Signal.AcceptChanges ();  				// create single thread to maintenance machine ..  				Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  				MachineThread.SetApartmentState (ApartmentState.MTA);  				MachineThread.IsBackground = false;  				MachineThread.Priority = ThreadPriority.Normal;  				MachineThread.Start (Info);  			}  			// delay executing ..  			Thread.Sleep (500);  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// release the waiting thread ..  		Monitor.PulseAll (this.Signal);  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: try {  	// refresh pool machine list ..  	this.ReportPoolHost ();  	foreach (DataRowView row in ConnectList) {  		// package machine info ..  		IList<object> Info = new List<object> {  			row ["Machine_Id"]'  			row ["Ip"]'  		};  		if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  			// define row values ..  			DataRow _row = Signal.NewRow ();  			_row ["MachineId"] = row ["Machine_Id"];  			_row ["Priority"] = row ["Priority"];  			_row ["ConnectFail"] = 0;  			_row ["TCore"] = 0;  			_row ["UCore"] = 0;  			// add to signal ..  			this.Signal.Rows.Add (_row);  			// commit changes ..  			this.Signal.AcceptChanges ();  			// create single thread to maintenance machine ..  			Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  			MachineThread.SetApartmentState (ApartmentState.MTA);  			MachineThread.IsBackground = false;  			MachineThread.Priority = ThreadPriority.Normal;  			MachineThread.Start (Info);  		}  		// delay executing ..  		Thread.Sleep (500);  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// release the waiting thread ..  	Monitor.PulseAll (this.Signal);  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: foreach (DataRowView row in ConnectList) {  	// package machine info ..  	IList<object> Info = new List<object> {  		row ["Machine_Id"]'  		row ["Ip"]'  	};  	if (Signal.Select (string.Format ("MachineId = '{0}'"' row ["Machine_Id"])).Length == 0) {  		// define row values ..  		DataRow _row = Signal.NewRow ();  		_row ["MachineId"] = row ["Machine_Id"];  		_row ["Priority"] = row ["Priority"];  		_row ["ConnectFail"] = 0;  		_row ["TCore"] = 0;  		_row ["UCore"] = 0;  		// add to signal ..  		this.Signal.Rows.Add (_row);  		// commit changes ..  		this.Signal.AcceptChanges ();  		// create single thread to maintenance machine ..  		Thread MachineThread = new Thread (new ParameterizedThreadStart (this.Maintenance));  		MachineThread.SetApartmentState (ApartmentState.MTA);  		MachineThread.IsBackground = false;  		MachineThread.Priority = ThreadPriority.Normal;  		MachineThread.Start (Info);  	}  	// delay executing ..  	Thread.Sleep (500);  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Renders,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: try {  	// declare exit status flag ..  	bool __stop = false;  	// unpackage machine info ..  	IList<object> Info = (IList<object>)sender;  	// create workflow in' out dictionary ..  	IDictionary<string' object> InDictionary = new Dictionary<string' object> ();  	IDictionary<string' object> OutDictionary = new Dictionary<string' object> ();  	// create object instance ..  	MachineServiceSocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	TcpClientSocket RegistrySocket = null;  	int countx = 0;  	do {  		//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  		//"Status = 0 And IsRender = 1 And IsEnable = 1"'  		//"Priority Desc"'  		//DataViewRowState.Unchanged);  		//DataTable IsMaintenance=ConnectList1.ToTable();  		//// get latest signal status ..  		//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  		// create connect remote machine class object instance ..  		RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  		if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  		//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  		 {  			countx = 0;  			//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  			//{  			#region Primary Communication Service Workflow  			// try lock object ..  			if (Monitor.TryEnter (this.Signal)) {  				try {  					if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							if (OutDictionary.Count > 0) {  								if (OutDictionary.ContainsKey ("TotalCore"))  									rows [0] ["TCore"] = OutDictionary ["TotalCore"];  								if (OutDictionary.ContainsKey ("UsageCore"))  									rows [0] ["UCore"] = OutDictionary ["UsageCore"];  							}  							else {  								rows [0] ["TCore"] = 0;  								rows [0] ["UCore"] = 0;  							}  							// commit changes ..  							this.Signal.AcceptChanges ();  							int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							#region Dispatch Jobs  							if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  								// get free core count ..  								int free = all_core - usage_core;  								if (0 < free) {  									// settings input dictionary ..  									InDictionary.Clear ();  									InDictionary.Add ("Machine_Id"' Info [0]);  									InDictionary.Add ("FreeCore"' free);  									if (0 == usage_core)  										InDictionary.Add ("HasZero"' true);  									else  										InDictionary.Add ("HasZero"' false);  									if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  										//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// refresh machine core ..  										if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  											string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  											this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  										}  										else {  											// update row value ..  											if (OutDictionary.Count > 0) {  												if (OutDictionary.ContainsKey ("TotalCore"))  													rows [0] ["TCore"] = OutDictionary ["TotalCore"];  												if (OutDictionary.ContainsKey ("UsageCore"))  													rows [0] ["UCore"] = OutDictionary ["UsageCore"];  											}  											else {  												rows [0] ["TCore"] = 0;  												rows [0] ["UCore"] = 0;  											}  											// commit changes ..  											this.Signal.AcceptChanges ();  										}  									}  								}  							}  							#endregion  							if (InDictionary.Count > 0)  								InDictionary.Clear ();  							InDictionary.Add ("Host_Id"' Info [0].ToString ());  							#region Get Running Jobs  							// get the machine running jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  							#region Get Completed Jobs  							// get the machine complete jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  			#region Render Maintenance Flag Chnage Event  			// try lock object wait for 0.5 second ..  			if (Monitor.TryEnter (this.Signal' 500)) {  				try {  					// get maintenance quantity ..  					DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  					if (MachineOff.Count > 0) {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  							// commit changes ..  							this.Signal.AcceptChanges ();  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  							if (machineData.Length > 0) {  								// remove the machine signal lights ..  								machineData [0].Delete ();  								// commit changes ..  								this.Signal.AcceptChanges ();  								// change status ..  								__stop = true;  							}  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  		}  		#region  		else {  			#region Connect Render Machine Fail Event  			// try lock object ..  			lock (this.Signal) {  				// get latest signal status ..  				DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  				if (machineData.Length > 0) {  					//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  					if (countx >= 3) {  						// get maintenance quantity ..  						DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  						if (Machine.Rows.Count > 0) {  							// update row value ..  							machineData [0] ["TCore"] = 0;  							machineData [0] ["UCore"] = 0;  							// write offline flag ..  							Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  							// accept changes ..  							Machine.AcceptChanges ();  							// create data cache data ..  							DataSet Data = new DataSet ();  							// merge tables to dataset ..  							Data.Merge (Machine);  							// integration to memory data ..  							this.SyncData (Data);  							// wait for data sync ..  							Thread.Sleep (500);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  							string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  							// write to log file ..  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  					}  					else {  						// increment fail count ..  						machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  						countx++;  						// commit changes ..  						this.Signal.AcceptChanges ();  					}  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  				}  			}  			#endregion  		}  		#endregion  		// confirm request exit ..  		if (__stop)  			break;  	}  	while (!this.requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close connect ..  	if (MachineServiceSocket != null) {  		MachineServiceSocket.Close ();  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: try {  	// declare exit status flag ..  	bool __stop = false;  	// unpackage machine info ..  	IList<object> Info = (IList<object>)sender;  	// create workflow in' out dictionary ..  	IDictionary<string' object> InDictionary = new Dictionary<string' object> ();  	IDictionary<string' object> OutDictionary = new Dictionary<string' object> ();  	// create object instance ..  	MachineServiceSocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	TcpClientSocket RegistrySocket = null;  	int countx = 0;  	do {  		//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  		//"Status = 0 And IsRender = 1 And IsEnable = 1"'  		//"Priority Desc"'  		//DataViewRowState.Unchanged);  		//DataTable IsMaintenance=ConnectList1.ToTable();  		//// get latest signal status ..  		//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  		// create connect remote machine class object instance ..  		RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  		if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  		//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  		 {  			countx = 0;  			//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  			//{  			#region Primary Communication Service Workflow  			// try lock object ..  			if (Monitor.TryEnter (this.Signal)) {  				try {  					if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							if (OutDictionary.Count > 0) {  								if (OutDictionary.ContainsKey ("TotalCore"))  									rows [0] ["TCore"] = OutDictionary ["TotalCore"];  								if (OutDictionary.ContainsKey ("UsageCore"))  									rows [0] ["UCore"] = OutDictionary ["UsageCore"];  							}  							else {  								rows [0] ["TCore"] = 0;  								rows [0] ["UCore"] = 0;  							}  							// commit changes ..  							this.Signal.AcceptChanges ();  							int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							#region Dispatch Jobs  							if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  								// get free core count ..  								int free = all_core - usage_core;  								if (0 < free) {  									// settings input dictionary ..  									InDictionary.Clear ();  									InDictionary.Add ("Machine_Id"' Info [0]);  									InDictionary.Add ("FreeCore"' free);  									if (0 == usage_core)  										InDictionary.Add ("HasZero"' true);  									else  										InDictionary.Add ("HasZero"' false);  									if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  										//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// refresh machine core ..  										if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  											string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  											this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  										}  										else {  											// update row value ..  											if (OutDictionary.Count > 0) {  												if (OutDictionary.ContainsKey ("TotalCore"))  													rows [0] ["TCore"] = OutDictionary ["TotalCore"];  												if (OutDictionary.ContainsKey ("UsageCore"))  													rows [0] ["UCore"] = OutDictionary ["UsageCore"];  											}  											else {  												rows [0] ["TCore"] = 0;  												rows [0] ["UCore"] = 0;  											}  											// commit changes ..  											this.Signal.AcceptChanges ();  										}  									}  								}  							}  							#endregion  							if (InDictionary.Count > 0)  								InDictionary.Clear ();  							InDictionary.Add ("Host_Id"' Info [0].ToString ());  							#region Get Running Jobs  							// get the machine running jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  							#region Get Completed Jobs  							// get the machine complete jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  			#region Render Maintenance Flag Chnage Event  			// try lock object wait for 0.5 second ..  			if (Monitor.TryEnter (this.Signal' 500)) {  				try {  					// get maintenance quantity ..  					DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  					if (MachineOff.Count > 0) {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  							// commit changes ..  							this.Signal.AcceptChanges ();  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  							if (machineData.Length > 0) {  								// remove the machine signal lights ..  								machineData [0].Delete ();  								// commit changes ..  								this.Signal.AcceptChanges ();  								// change status ..  								__stop = true;  							}  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  		}  		#region  		else {  			#region Connect Render Machine Fail Event  			// try lock object ..  			lock (this.Signal) {  				// get latest signal status ..  				DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  				if (machineData.Length > 0) {  					//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  					if (countx >= 3) {  						// get maintenance quantity ..  						DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  						if (Machine.Rows.Count > 0) {  							// update row value ..  							machineData [0] ["TCore"] = 0;  							machineData [0] ["UCore"] = 0;  							// write offline flag ..  							Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  							// accept changes ..  							Machine.AcceptChanges ();  							// create data cache data ..  							DataSet Data = new DataSet ();  							// merge tables to dataset ..  							Data.Merge (Machine);  							// integration to memory data ..  							this.SyncData (Data);  							// wait for data sync ..  							Thread.Sleep (500);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  							string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  							// write to log file ..  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  					}  					else {  						// increment fail count ..  						machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  						countx++;  						// commit changes ..  						this.Signal.AcceptChanges ();  					}  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  				}  			}  			#endregion  		}  		#endregion  		// confirm request exit ..  		if (__stop)  			break;  	}  	while (!this.requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close connect ..  	if (MachineServiceSocket != null) {  		MachineServiceSocket.Close ();  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: try {  	// declare exit status flag ..  	bool __stop = false;  	// unpackage machine info ..  	IList<object> Info = (IList<object>)sender;  	// create workflow in' out dictionary ..  	IDictionary<string' object> InDictionary = new Dictionary<string' object> ();  	IDictionary<string' object> OutDictionary = new Dictionary<string' object> ();  	// create object instance ..  	MachineServiceSocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	TcpClientSocket RegistrySocket = null;  	int countx = 0;  	do {  		//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  		//"Status = 0 And IsRender = 1 And IsEnable = 1"'  		//"Priority Desc"'  		//DataViewRowState.Unchanged);  		//DataTable IsMaintenance=ConnectList1.ToTable();  		//// get latest signal status ..  		//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  		// create connect remote machine class object instance ..  		RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  		if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  		//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  		 {  			countx = 0;  			//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  			//{  			#region Primary Communication Service Workflow  			// try lock object ..  			if (Monitor.TryEnter (this.Signal)) {  				try {  					if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							if (OutDictionary.Count > 0) {  								if (OutDictionary.ContainsKey ("TotalCore"))  									rows [0] ["TCore"] = OutDictionary ["TotalCore"];  								if (OutDictionary.ContainsKey ("UsageCore"))  									rows [0] ["UCore"] = OutDictionary ["UsageCore"];  							}  							else {  								rows [0] ["TCore"] = 0;  								rows [0] ["UCore"] = 0;  							}  							// commit changes ..  							this.Signal.AcceptChanges ();  							int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							#region Dispatch Jobs  							if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  								// get free core count ..  								int free = all_core - usage_core;  								if (0 < free) {  									// settings input dictionary ..  									InDictionary.Clear ();  									InDictionary.Add ("Machine_Id"' Info [0]);  									InDictionary.Add ("FreeCore"' free);  									if (0 == usage_core)  										InDictionary.Add ("HasZero"' true);  									else  										InDictionary.Add ("HasZero"' false);  									if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  										//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// refresh machine core ..  										if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  											string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  											this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  										}  										else {  											// update row value ..  											if (OutDictionary.Count > 0) {  												if (OutDictionary.ContainsKey ("TotalCore"))  													rows [0] ["TCore"] = OutDictionary ["TotalCore"];  												if (OutDictionary.ContainsKey ("UsageCore"))  													rows [0] ["UCore"] = OutDictionary ["UsageCore"];  											}  											else {  												rows [0] ["TCore"] = 0;  												rows [0] ["UCore"] = 0;  											}  											// commit changes ..  											this.Signal.AcceptChanges ();  										}  									}  								}  							}  							#endregion  							if (InDictionary.Count > 0)  								InDictionary.Clear ();  							InDictionary.Add ("Host_Id"' Info [0].ToString ());  							#region Get Running Jobs  							// get the machine running jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  							#region Get Completed Jobs  							// get the machine complete jobs ..  							if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  								this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								if (OutDictionary.Count > 0)  									// trigger foreground thread ..  									DisplayBase.CanJobUpdate = true;  							}  							#endregion  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  			#region Render Maintenance Flag Chnage Event  			// try lock object wait for 0.5 second ..  			if (Monitor.TryEnter (this.Signal' 500)) {  				try {  					// get maintenance quantity ..  					DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  					if (MachineOff.Count > 0) {  						// receive latest workflow return object value ..  						DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  						if (rows.Length > 0) {  							// update row value ..  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  							// commit changes ..  							this.Signal.AcceptChanges ();  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  							if (machineData.Length > 0) {  								// remove the machine signal lights ..  								machineData [0].Delete ();  								// commit changes ..  								this.Signal.AcceptChanges ();  								// change status ..  								__stop = true;  							}  						}  					}  				}  				finally {  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  					// release locked object ..  					Monitor.Exit (this.Signal);  				}  			}  			#endregion  		}  		#region  		else {  			#region Connect Render Machine Fail Event  			// try lock object ..  			lock (this.Signal) {  				// get latest signal status ..  				DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  				if (machineData.Length > 0) {  					//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  					if (countx >= 3) {  						// get maintenance quantity ..  						DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  						if (Machine.Rows.Count > 0) {  							// update row value ..  							machineData [0] ["TCore"] = 0;  							machineData [0] ["UCore"] = 0;  							// write offline flag ..  							Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  							// accept changes ..  							Machine.AcceptChanges ();  							// create data cache data ..  							DataSet Data = new DataSet ();  							// merge tables to dataset ..  							Data.Merge (Machine);  							// integration to memory data ..  							this.SyncData (Data);  							// wait for data sync ..  							Thread.Sleep (500);  							// update render status and trigger foreground thread ..  							DisplayBase.RenderStatus = Signal.Copy ();  							DisplayBase.CanMachineUpdate = true;  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  							string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  							// write to log file ..  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  					}  					else {  						// increment fail count ..  						machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  						countx++;  						// commit changes ..  						this.Signal.AcceptChanges ();  					}  					// release the waiting thread ..  					Monitor.PulseAll (this.Signal);  				}  			}  			#endregion  		}  		#endregion  		// confirm request exit ..  		if (__stop)  			break;  	}  	while (!this.requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close connect ..  	if (MachineServiceSocket != null) {  		MachineServiceSocket.Close ();  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: do {  	//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  	//"Status = 0 And IsRender = 1 And IsEnable = 1"'  	//"Priority Desc"'  	//DataViewRowState.Unchanged);  	//DataTable IsMaintenance=ConnectList1.ToTable();  	//// get latest signal status ..  	//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  	// create connect remote machine class object instance ..  	RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  	//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  	 {  		countx = 0;  		//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  		//{  		#region Primary Communication Service Workflow  		// try lock object ..  		if (Monitor.TryEnter (this.Signal)) {  			try {  				if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  					string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  				else {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						if (OutDictionary.Count > 0) {  							if (OutDictionary.ContainsKey ("TotalCore"))  								rows [0] ["TCore"] = OutDictionary ["TotalCore"];  							if (OutDictionary.ContainsKey ("UsageCore"))  								rows [0] ["UCore"] = OutDictionary ["UsageCore"];  						}  						else {  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  						}  						// commit changes ..  						this.Signal.AcceptChanges ();  						int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						#region Dispatch Jobs  						if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  							// get free core count ..  							int free = all_core - usage_core;  							if (0 < free) {  								// settings input dictionary ..  								InDictionary.Clear ();  								InDictionary.Add ("Machine_Id"' Info [0]);  								InDictionary.Add ("FreeCore"' free);  								if (0 == usage_core)  									InDictionary.Add ("HasZero"' true);  								else  									InDictionary.Add ("HasZero"' false);  								if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  									//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// refresh machine core ..  									if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  										this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// update row value ..  										if (OutDictionary.Count > 0) {  											if (OutDictionary.ContainsKey ("TotalCore"))  												rows [0] ["TCore"] = OutDictionary ["TotalCore"];  											if (OutDictionary.ContainsKey ("UsageCore"))  												rows [0] ["UCore"] = OutDictionary ["UsageCore"];  										}  										else {  											rows [0] ["TCore"] = 0;  											rows [0] ["UCore"] = 0;  										}  										// commit changes ..  										this.Signal.AcceptChanges ();  									}  								}  							}  						}  						#endregion  						if (InDictionary.Count > 0)  							InDictionary.Clear ();  						InDictionary.Add ("Host_Id"' Info [0].ToString ());  						#region Get Running Jobs  						// get the machine running jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  						#region Get Completed Jobs  						// get the machine complete jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  		#region Render Maintenance Flag Chnage Event  		// try lock object wait for 0.5 second ..  		if (Monitor.TryEnter (this.Signal' 500)) {  			try {  				// get maintenance quantity ..  				DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  				if (MachineOff.Count > 0) {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  						// commit changes ..  						this.Signal.AcceptChanges ();  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  						if (machineData.Length > 0) {  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  						}  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  	}  	#region  	else {  		#region Connect Render Machine Fail Event  		// try lock object ..  		lock (this.Signal) {  			// get latest signal status ..  			DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  			if (machineData.Length > 0) {  				//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  				if (countx >= 3) {  					// get maintenance quantity ..  					DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  					if (Machine.Rows.Count > 0) {  						// update row value ..  						machineData [0] ["TCore"] = 0;  						machineData [0] ["UCore"] = 0;  						// write offline flag ..  						Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  						// accept changes ..  						Machine.AcceptChanges ();  						// create data cache data ..  						DataSet Data = new DataSet ();  						// merge tables to dataset ..  						Data.Merge (Machine);  						// integration to memory data ..  						this.SyncData (Data);  						// wait for data sync ..  						Thread.Sleep (500);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  						string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  						// write to log file ..  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  				}  				else {  					// increment fail count ..  					machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  					countx++;  					// commit changes ..  					this.Signal.AcceptChanges ();  				}  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  			}  		}  		#endregion  	}  	#endregion  	// confirm request exit ..  	if (__stop)  		break;  }  while (!this.requestStop);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: do {  	//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  	//"Status = 0 And IsRender = 1 And IsEnable = 1"'  	//"Priority Desc"'  	//DataViewRowState.Unchanged);  	//DataTable IsMaintenance=ConnectList1.ToTable();  	//// get latest signal status ..  	//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  	// create connect remote machine class object instance ..  	RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  	//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  	 {  		countx = 0;  		//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  		//{  		#region Primary Communication Service Workflow  		// try lock object ..  		if (Monitor.TryEnter (this.Signal)) {  			try {  				if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  					string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  				else {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						if (OutDictionary.Count > 0) {  							if (OutDictionary.ContainsKey ("TotalCore"))  								rows [0] ["TCore"] = OutDictionary ["TotalCore"];  							if (OutDictionary.ContainsKey ("UsageCore"))  								rows [0] ["UCore"] = OutDictionary ["UsageCore"];  						}  						else {  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  						}  						// commit changes ..  						this.Signal.AcceptChanges ();  						int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						#region Dispatch Jobs  						if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  							// get free core count ..  							int free = all_core - usage_core;  							if (0 < free) {  								// settings input dictionary ..  								InDictionary.Clear ();  								InDictionary.Add ("Machine_Id"' Info [0]);  								InDictionary.Add ("FreeCore"' free);  								if (0 == usage_core)  									InDictionary.Add ("HasZero"' true);  								else  									InDictionary.Add ("HasZero"' false);  								if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  									//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// refresh machine core ..  									if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  										this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// update row value ..  										if (OutDictionary.Count > 0) {  											if (OutDictionary.ContainsKey ("TotalCore"))  												rows [0] ["TCore"] = OutDictionary ["TotalCore"];  											if (OutDictionary.ContainsKey ("UsageCore"))  												rows [0] ["UCore"] = OutDictionary ["UsageCore"];  										}  										else {  											rows [0] ["TCore"] = 0;  											rows [0] ["UCore"] = 0;  										}  										// commit changes ..  										this.Signal.AcceptChanges ();  									}  								}  							}  						}  						#endregion  						if (InDictionary.Count > 0)  							InDictionary.Clear ();  						InDictionary.Add ("Host_Id"' Info [0].ToString ());  						#region Get Running Jobs  						// get the machine running jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  						#region Get Completed Jobs  						// get the machine complete jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  		#region Render Maintenance Flag Chnage Event  		// try lock object wait for 0.5 second ..  		if (Monitor.TryEnter (this.Signal' 500)) {  			try {  				// get maintenance quantity ..  				DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  				if (MachineOff.Count > 0) {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  						// commit changes ..  						this.Signal.AcceptChanges ();  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  						if (machineData.Length > 0) {  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  						}  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  	}  	#region  	else {  		#region Connect Render Machine Fail Event  		// try lock object ..  		lock (this.Signal) {  			// get latest signal status ..  			DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  			if (machineData.Length > 0) {  				//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  				if (countx >= 3) {  					// get maintenance quantity ..  					DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  					if (Machine.Rows.Count > 0) {  						// update row value ..  						machineData [0] ["TCore"] = 0;  						machineData [0] ["UCore"] = 0;  						// write offline flag ..  						Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  						// accept changes ..  						Machine.AcceptChanges ();  						// create data cache data ..  						DataSet Data = new DataSet ();  						// merge tables to dataset ..  						Data.Merge (Machine);  						// integration to memory data ..  						this.SyncData (Data);  						// wait for data sync ..  						Thread.Sleep (500);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  						string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  						// write to log file ..  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  				}  				else {  					// increment fail count ..  					machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  					countx++;  					// commit changes ..  					this.Signal.AcceptChanges ();  				}  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  			}  		}  		#endregion  	}  	#endregion  	// confirm request exit ..  	if (__stop)  		break;  }  while (!this.requestStop);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: do {  	//   DataView ConnectList1 = this.EnvData.FindData("Machine"'  	//"Status = 0 And IsRender = 1 And IsEnable = 1"'  	//"Priority Desc"'  	//DataViewRowState.Unchanged);  	//DataTable IsMaintenance=ConnectList1.ToTable();  	//// get latest signal status ..  	//DataRow[] machineData = this.Signal.Select(string.Format("MachineId = '{0}'"' Info[0]));  	// create connect remote machine class object instance ..  	RegistrySocket = new TcpClientSocket (System.Net.IPAddress.Parse (Info [1].ToString ())' ConnectPort);  	if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  	//if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))  	 {  		countx = 0;  		//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  		//{  		#region Primary Communication Service Workflow  		// try lock object ..  		if (Monitor.TryEnter (this.Signal)) {  			try {  				if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  					string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  				else {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						if (OutDictionary.Count > 0) {  							if (OutDictionary.ContainsKey ("TotalCore"))  								rows [0] ["TCore"] = OutDictionary ["TotalCore"];  							if (OutDictionary.ContainsKey ("UsageCore"))  								rows [0] ["UCore"] = OutDictionary ["UsageCore"];  						}  						else {  							rows [0] ["TCore"] = 0;  							rows [0] ["UCore"] = 0;  						}  						// commit changes ..  						this.Signal.AcceptChanges ();  						int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						#region Dispatch Jobs  						if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  							// get free core count ..  							int free = all_core - usage_core;  							if (0 < free) {  								// settings input dictionary ..  								InDictionary.Clear ();  								InDictionary.Add ("Machine_Id"' Info [0]);  								InDictionary.Add ("FreeCore"' free);  								if (0 == usage_core)  									InDictionary.Add ("HasZero"' true);  								else  									InDictionary.Add ("HasZero"' false);  								if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  									//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// refresh machine core ..  									if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  										string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  										this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  									}  									else {  										// update row value ..  										if (OutDictionary.Count > 0) {  											if (OutDictionary.ContainsKey ("TotalCore"))  												rows [0] ["TCore"] = OutDictionary ["TotalCore"];  											if (OutDictionary.ContainsKey ("UsageCore"))  												rows [0] ["UCore"] = OutDictionary ["UsageCore"];  										}  										else {  											rows [0] ["TCore"] = 0;  											rows [0] ["UCore"] = 0;  										}  										// commit changes ..  										this.Signal.AcceptChanges ();  									}  								}  							}  						}  						#endregion  						if (InDictionary.Count > 0)  							InDictionary.Clear ();  						InDictionary.Add ("Host_Id"' Info [0].ToString ());  						#region Get Running Jobs  						// get the machine running jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  						#region Get Completed Jobs  						// get the machine complete jobs ..  						if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  							string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  							this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  						}  						else {  							if (OutDictionary.Count > 0)  								// trigger foreground thread ..  								DisplayBase.CanJobUpdate = true;  						}  						#endregion  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  		#region Render Maintenance Flag Chnage Event  		// try lock object wait for 0.5 second ..  		if (Monitor.TryEnter (this.Signal' 500)) {  			try {  				// get maintenance quantity ..  				DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  				if (MachineOff.Count > 0) {  					// receive latest workflow return object value ..  					DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  					if (rows.Length > 0) {  						// update row value ..  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  						// commit changes ..  						this.Signal.AcceptChanges ();  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  						if (machineData.Length > 0) {  							// remove the machine signal lights ..  							machineData [0].Delete ();  							// commit changes ..  							this.Signal.AcceptChanges ();  							// change status ..  							__stop = true;  						}  					}  				}  			}  			finally {  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  				// release locked object ..  				Monitor.Exit (this.Signal);  			}  		}  		#endregion  	}  	#region  	else {  		#region Connect Render Machine Fail Event  		// try lock object ..  		lock (this.Signal) {  			// get latest signal status ..  			DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  			if (machineData.Length > 0) {  				//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  				if (countx >= 3) {  					// get maintenance quantity ..  					DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  					if (Machine.Rows.Count > 0) {  						// update row value ..  						machineData [0] ["TCore"] = 0;  						machineData [0] ["UCore"] = 0;  						// write offline flag ..  						Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  						// accept changes ..  						Machine.AcceptChanges ();  						// create data cache data ..  						DataSet Data = new DataSet ();  						// merge tables to dataset ..  						Data.Merge (Machine);  						// integration to memory data ..  						this.SyncData (Data);  						// wait for data sync ..  						Thread.Sleep (500);  						// update render status and trigger foreground thread ..  						DisplayBase.RenderStatus = Signal.Copy ();  						DisplayBase.CanMachineUpdate = true;  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  						string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  						// write to log file ..  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  				}  				else {  					// increment fail count ..  					machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  					countx++;  					// commit changes ..  					this.Signal.AcceptChanges ();  				}  				// release the waiting thread ..  				Monitor.PulseAll (this.Signal);  			}  		}  		#endregion  	}  	#endregion  	// confirm request exit ..  	if (__stop)  		break;  }  while (!this.requestStop);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  //if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))   {  	countx = 0;  	//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  	//{  	#region Primary Communication Service Workflow  	// try lock object ..  	if (Monitor.TryEnter (this.Signal)) {  		try {  			if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  				string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  			}  			else {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					if (OutDictionary.Count > 0) {  						if (OutDictionary.ContainsKey ("TotalCore"))  							rows [0] ["TCore"] = OutDictionary ["TotalCore"];  						if (OutDictionary.ContainsKey ("UsageCore"))  							rows [0] ["UCore"] = OutDictionary ["UsageCore"];  					}  					else {  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  					}  					// commit changes ..  					this.Signal.AcceptChanges ();  					int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					#region Dispatch Jobs  					if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  						// get free core count ..  						int free = all_core - usage_core;  						if (0 < free) {  							// settings input dictionary ..  							InDictionary.Clear ();  							InDictionary.Add ("Machine_Id"' Info [0]);  							InDictionary.Add ("FreeCore"' free);  							if (0 == usage_core)  								InDictionary.Add ("HasZero"' true);  							else  								InDictionary.Add ("HasZero"' false);  							if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  								//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								// refresh machine core ..  								if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  									this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// update row value ..  									if (OutDictionary.Count > 0) {  										if (OutDictionary.ContainsKey ("TotalCore"))  											rows [0] ["TCore"] = OutDictionary ["TotalCore"];  										if (OutDictionary.ContainsKey ("UsageCore"))  											rows [0] ["UCore"] = OutDictionary ["UsageCore"];  									}  									else {  										rows [0] ["TCore"] = 0;  										rows [0] ["UCore"] = 0;  									}  									// commit changes ..  									this.Signal.AcceptChanges ();  								}  							}  						}  					}  					#endregion  					if (InDictionary.Count > 0)  						InDictionary.Clear ();  					InDictionary.Add ("Host_Id"' Info [0].ToString ());  					#region Get Running Jobs  					// get the machine running jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  					#region Get Completed Jobs  					// get the machine complete jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  	#region Render Maintenance Flag Chnage Event  	// try lock object wait for 0.5 second ..  	if (Monitor.TryEnter (this.Signal' 500)) {  		try {  			// get maintenance quantity ..  			DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  			if (MachineOff.Count > 0) {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					rows [0] ["TCore"] = 0;  					rows [0] ["UCore"] = 0;  					// commit changes ..  					this.Signal.AcceptChanges ();  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  					if (machineData.Length > 0) {  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  					}  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  }  #region  else {  	#region Connect Render Machine Fail Event  	// try lock object ..  	lock (this.Signal) {  		// get latest signal status ..  		DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  		if (machineData.Length > 0) {  			//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  			if (countx >= 3) {  				// get maintenance quantity ..  				DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  				if (Machine.Rows.Count > 0) {  					// update row value ..  					machineData [0] ["TCore"] = 0;  					machineData [0] ["UCore"] = 0;  					// write offline flag ..  					Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  					// accept changes ..  					Machine.AcceptChanges ();  					// create data cache data ..  					DataSet Data = new DataSet ();  					// merge tables to dataset ..  					Data.Merge (Machine);  					// integration to memory data ..  					this.SyncData (Data);  					// wait for data sync ..  					Thread.Sleep (500);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					// remove the machine signal lights ..  					machineData [0].Delete ();  					// commit changes ..  					this.Signal.AcceptChanges ();  					// change status ..  					__stop = true;  					string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  					// write to log file ..  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  			}  			else {  				// increment fail count ..  				machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  				countx++;  				// commit changes ..  				this.Signal.AcceptChanges ();  			}  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  		}  	}  	#endregion  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  //if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))   {  	countx = 0;  	//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  	//{  	#region Primary Communication Service Workflow  	// try lock object ..  	if (Monitor.TryEnter (this.Signal)) {  		try {  			if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  				string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  			}  			else {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					if (OutDictionary.Count > 0) {  						if (OutDictionary.ContainsKey ("TotalCore"))  							rows [0] ["TCore"] = OutDictionary ["TotalCore"];  						if (OutDictionary.ContainsKey ("UsageCore"))  							rows [0] ["UCore"] = OutDictionary ["UsageCore"];  					}  					else {  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  					}  					// commit changes ..  					this.Signal.AcceptChanges ();  					int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					#region Dispatch Jobs  					if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  						// get free core count ..  						int free = all_core - usage_core;  						if (0 < free) {  							// settings input dictionary ..  							InDictionary.Clear ();  							InDictionary.Add ("Machine_Id"' Info [0]);  							InDictionary.Add ("FreeCore"' free);  							if (0 == usage_core)  								InDictionary.Add ("HasZero"' true);  							else  								InDictionary.Add ("HasZero"' false);  							if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  								//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								// refresh machine core ..  								if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  									this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// update row value ..  									if (OutDictionary.Count > 0) {  										if (OutDictionary.ContainsKey ("TotalCore"))  											rows [0] ["TCore"] = OutDictionary ["TotalCore"];  										if (OutDictionary.ContainsKey ("UsageCore"))  											rows [0] ["UCore"] = OutDictionary ["UsageCore"];  									}  									else {  										rows [0] ["TCore"] = 0;  										rows [0] ["UCore"] = 0;  									}  									// commit changes ..  									this.Signal.AcceptChanges ();  								}  							}  						}  					}  					#endregion  					if (InDictionary.Count > 0)  						InDictionary.Clear ();  					InDictionary.Add ("Host_Id"' Info [0].ToString ());  					#region Get Running Jobs  					// get the machine running jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  					#region Get Completed Jobs  					// get the machine complete jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  	#region Render Maintenance Flag Chnage Event  	// try lock object wait for 0.5 second ..  	if (Monitor.TryEnter (this.Signal' 500)) {  		try {  			// get maintenance quantity ..  			DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  			if (MachineOff.Count > 0) {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					rows [0] ["TCore"] = 0;  					rows [0] ["UCore"] = 0;  					// commit changes ..  					this.Signal.AcceptChanges ();  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  					if (machineData.Length > 0) {  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  					}  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  }  #region  else {  	#region Connect Render Machine Fail Event  	// try lock object ..  	lock (this.Signal) {  		// get latest signal status ..  		DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  		if (machineData.Length > 0) {  			//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  			if (countx >= 3) {  				// get maintenance quantity ..  				DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  				if (Machine.Rows.Count > 0) {  					// update row value ..  					machineData [0] ["TCore"] = 0;  					machineData [0] ["UCore"] = 0;  					// write offline flag ..  					Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  					// accept changes ..  					Machine.AcceptChanges ();  					// create data cache data ..  					DataSet Data = new DataSet ();  					// merge tables to dataset ..  					Data.Merge (Machine);  					// integration to memory data ..  					this.SyncData (Data);  					// wait for data sync ..  					Thread.Sleep (500);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					// remove the machine signal lights ..  					machineData [0].Delete ();  					// commit changes ..  					this.Signal.AcceptChanges ();  					// change status ..  					__stop = true;  					string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  					// write to log file ..  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  			}  			else {  				// increment fail count ..  				machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  				countx++;  				// commit changes ..  				this.Signal.AcceptChanges ();  			}  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  		}  	}  	#endregion  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (RegistrySocket.IsConnected)//ScanPort runConnect = new ScanPort();  //if (runConnect.Scan(System.Net.IPAddress.Parse(Info[1].ToString())' ConnectPort))   {  	countx = 0;  	//if (IsMaintenance.Select(string.Format("Machine_Id = '{0}'"' Info[0].ToString())).Length == 0)  	//{  	#region Primary Communication Service Workflow  	// try lock object ..  	if (Monitor.TryEnter (this.Signal)) {  		try {  			if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  				string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  			}  			else {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "Priority Desc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					if (OutDictionary.Count > 0) {  						if (OutDictionary.ContainsKey ("TotalCore"))  							rows [0] ["TCore"] = OutDictionary ["TotalCore"];  						if (OutDictionary.ContainsKey ("UsageCore"))  							rows [0] ["UCore"] = OutDictionary ["UsageCore"];  					}  					else {  						rows [0] ["TCore"] = 0;  						rows [0] ["UCore"] = 0;  					}  					// commit changes ..  					this.Signal.AcceptChanges ();  					int all_core = Convert.ToInt32 (rows [0] ["TCore"])' usage_core = Convert.ToInt32 (rows [0] ["UCore"]);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					#region Dispatch Jobs  					if (rows [0] ["MachineId"] == Info [0] && usage_core < all_core) {  						// get free core count ..  						int free = all_core - usage_core;  						if (0 < free) {  							// settings input dictionary ..  							InDictionary.Clear ();  							InDictionary.Add ("Machine_Id"' Info [0]);  							InDictionary.Add ("FreeCore"' free);  							if (0 == usage_core)  								InDictionary.Add ("HasZero"' true);  							else  								InDictionary.Add ("HasZero"' false);  							if (!this.RenderBehavior (Server2Render.CommunicationType.DISPATCH' MachineServiceSocket' InDictionary' ref OutDictionary)) {  								string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine id :{0}' thread id: {1}' workflow name: {2}"' Info [1]' Thread.CurrentThread.ManagedThreadId' "DISPATCH");  								//this.EnvLog.Writer(AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  							}  							else {  								// refresh machine core ..  								if (!this.RenderBehavior (Server2Render.CommunicationType.ISBUSY' MachineServiceSocket' null' ref OutDictionary)) {  									string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "ISBUSY");  									this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  								}  								else {  									// update row value ..  									if (OutDictionary.Count > 0) {  										if (OutDictionary.ContainsKey ("TotalCore"))  											rows [0] ["TCore"] = OutDictionary ["TotalCore"];  										if (OutDictionary.ContainsKey ("UsageCore"))  											rows [0] ["UCore"] = OutDictionary ["UsageCore"];  									}  									else {  										rows [0] ["TCore"] = 0;  										rows [0] ["UCore"] = 0;  									}  									// commit changes ..  									this.Signal.AcceptChanges ();  								}  							}  						}  					}  					#endregion  					if (InDictionary.Count > 0)  						InDictionary.Clear ();  					InDictionary.Add ("Host_Id"' Info [0].ToString ());  					#region Get Running Jobs  					// get the machine running jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.RUNNINGJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "RUNNINGJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  					#region Get Completed Jobs  					// get the machine complete jobs ..  					if (!this.RenderBehavior (Server2Render.CommunicationType.COMPLETEDJOBS' MachineServiceSocket' InDictionary' ref OutDictionary)) {  						string ExceptionMsg = string.Format ("machine service loop workflow error' connect machine ip :{0}' thread id: {1}' workflow name: {2}"' Info [1].ToString ()' Thread.CurrentThread.ManagedThreadId' "COMPLETEDJOBS");  						this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  					}  					else {  						if (OutDictionary.Count > 0)  							// trigger foreground thread ..  							DisplayBase.CanJobUpdate = true;  					}  					#endregion  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  	#region Render Maintenance Flag Chnage Event  	// try lock object wait for 0.5 second ..  	if (Monitor.TryEnter (this.Signal' 500)) {  		try {  			// get maintenance quantity ..  			DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  			if (MachineOff.Count > 0) {  				// receive latest workflow return object value ..  				DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  				if (rows.Length > 0) {  					// update row value ..  					rows [0] ["TCore"] = 0;  					rows [0] ["UCore"] = 0;  					// commit changes ..  					this.Signal.AcceptChanges ();  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  					if (machineData.Length > 0) {  						// remove the machine signal lights ..  						machineData [0].Delete ();  						// commit changes ..  						this.Signal.AcceptChanges ();  						// change status ..  						__stop = true;  					}  				}  			}  		}  		finally {  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  			// release locked object ..  			Monitor.Exit (this.Signal);  		}  	}  	#endregion  }  #region  else {  	#region Connect Render Machine Fail Event  	// try lock object ..  	lock (this.Signal) {  		// get latest signal status ..  		DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  		if (machineData.Length > 0) {  			//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  			if (countx >= 3) {  				// get maintenance quantity ..  				DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  				if (Machine.Rows.Count > 0) {  					// update row value ..  					machineData [0] ["TCore"] = 0;  					machineData [0] ["UCore"] = 0;  					// write offline flag ..  					Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  					// accept changes ..  					Machine.AcceptChanges ();  					// create data cache data ..  					DataSet Data = new DataSet ();  					// merge tables to dataset ..  					Data.Merge (Machine);  					// integration to memory data ..  					this.SyncData (Data);  					// wait for data sync ..  					Thread.Sleep (500);  					// update render status and trigger foreground thread ..  					DisplayBase.RenderStatus = Signal.Copy ();  					DisplayBase.CanMachineUpdate = true;  					// remove the machine signal lights ..  					machineData [0].Delete ();  					// commit changes ..  					this.Signal.AcceptChanges ();  					// change status ..  					__stop = true;  					string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  					// write to log file ..  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  				}  			}  			else {  				// increment fail count ..  				machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  				countx++;  				// commit changes ..  				this.Signal.AcceptChanges ();  			}  			// release the waiting thread ..  			Monitor.PulseAll (this.Signal);  		}  	}  	#endregion  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (Monitor.TryEnter (this.Signal' 500)) {  	try {  		// get maintenance quantity ..  		DataView MachineOff = this.EnvData.FindData ("Machine"' string.Format ("Status = 0 And Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged);  		if (MachineOff.Count > 0) {  			// receive latest workflow return object value ..  			DataRow[] rows = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0])' "MachineId Asc"' DataViewRowState.Unchanged);  			if (rows.Length > 0) {  				// update row value ..  				rows [0] ["TCore"] = 0;  				rows [0] ["UCore"] = 0;  				// commit changes ..  				this.Signal.AcceptChanges ();  				// update render status and trigger foreground thread ..  				DisplayBase.RenderStatus = Signal.Copy ();  				DisplayBase.CanMachineUpdate = true;  				DataRow[] machineData = Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  				if (machineData.Length > 0) {  					// remove the machine signal lights ..  					machineData [0].Delete ();  					// commit changes ..  					this.Signal.AcceptChanges ();  					// change status ..  					__stop = true;  				}  			}  		}  	}  	finally {  		// release the waiting thread ..  		Monitor.PulseAll (this.Signal);  		// release locked object ..  		Monitor.Exit (this.Signal);  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: lock (this.Signal) {  	// get latest signal status ..  	DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  	if (machineData.Length > 0) {  		//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  		if (countx >= 3) {  			// get maintenance quantity ..  			DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  			if (Machine.Rows.Count > 0) {  				// update row value ..  				machineData [0] ["TCore"] = 0;  				machineData [0] ["UCore"] = 0;  				// write offline flag ..  				Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  				// accept changes ..  				Machine.AcceptChanges ();  				// create data cache data ..  				DataSet Data = new DataSet ();  				// merge tables to dataset ..  				Data.Merge (Machine);  				// integration to memory data ..  				this.SyncData (Data);  				// wait for data sync ..  				Thread.Sleep (500);  				// update render status and trigger foreground thread ..  				DisplayBase.RenderStatus = Signal.Copy ();  				DisplayBase.CanMachineUpdate = true;  				// remove the machine signal lights ..  				machineData [0].Delete ();  				// commit changes ..  				this.Signal.AcceptChanges ();  				// change status ..  				__stop = true;  				string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  				// write to log file ..  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  			}  		}  		else {  			// increment fail count ..  			machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  			countx++;  			// commit changes ..  			this.Signal.AcceptChanges ();  		}  		// release the waiting thread ..  		Monitor.PulseAll (this.Signal);  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: lock (this.Signal) {  	// get latest signal status ..  	DataRow[] machineData = this.Signal.Select (string.Format ("MachineId = '{0}'"' Info [0]));  	if (machineData.Length > 0) {  		//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  		if (countx >= 3) {  			// get maintenance quantity ..  			DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  			if (Machine.Rows.Count > 0) {  				// update row value ..  				machineData [0] ["TCore"] = 0;  				machineData [0] ["UCore"] = 0;  				// write offline flag ..  				Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  				// accept changes ..  				Machine.AcceptChanges ();  				// create data cache data ..  				DataSet Data = new DataSet ();  				// merge tables to dataset ..  				Data.Merge (Machine);  				// integration to memory data ..  				this.SyncData (Data);  				// wait for data sync ..  				Thread.Sleep (500);  				// update render status and trigger foreground thread ..  				DisplayBase.RenderStatus = Signal.Copy ();  				DisplayBase.CanMachineUpdate = true;  				// remove the machine signal lights ..  				machineData [0].Delete ();  				// commit changes ..  				this.Signal.AcceptChanges ();  				// change status ..  				__stop = true;  				string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  				// write to log file ..  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  			}  		}  		else {  			// increment fail count ..  			machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  			countx++;  			// commit changes ..  			this.Signal.AcceptChanges ();  		}  		// release the waiting thread ..  		Monitor.PulseAll (this.Signal);  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (machineData.Length > 0) {  	//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  	if (countx >= 3) {  		// get maintenance quantity ..  		DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  		if (Machine.Rows.Count > 0) {  			// update row value ..  			machineData [0] ["TCore"] = 0;  			machineData [0] ["UCore"] = 0;  			// write offline flag ..  			Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  			// accept changes ..  			Machine.AcceptChanges ();  			// create data cache data ..  			DataSet Data = new DataSet ();  			// merge tables to dataset ..  			Data.Merge (Machine);  			// integration to memory data ..  			this.SyncData (Data);  			// wait for data sync ..  			Thread.Sleep (500);  			// update render status and trigger foreground thread ..  			DisplayBase.RenderStatus = Signal.Copy ();  			DisplayBase.CanMachineUpdate = true;  			// remove the machine signal lights ..  			machineData [0].Delete ();  			// commit changes ..  			this.Signal.AcceptChanges ();  			// change status ..  			__stop = true;  			string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  			// write to log file ..  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  		}  	}  	else {  		// increment fail count ..  		machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  		countx++;  		// commit changes ..  		this.Signal.AcceptChanges ();  	}  	// release the waiting thread ..  	Monitor.PulseAll (this.Signal);  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (machineData.Length > 0) {  	//if (Convert.ToUInt16(machineData[0]["ConnectFail"]) >= 5)  	if (countx >= 3) {  		// get maintenance quantity ..  		DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  		if (Machine.Rows.Count > 0) {  			// update row value ..  			machineData [0] ["TCore"] = 0;  			machineData [0] ["UCore"] = 0;  			// write offline flag ..  			Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  			// accept changes ..  			Machine.AcceptChanges ();  			// create data cache data ..  			DataSet Data = new DataSet ();  			// merge tables to dataset ..  			Data.Merge (Machine);  			// integration to memory data ..  			this.SyncData (Data);  			// wait for data sync ..  			Thread.Sleep (500);  			// update render status and trigger foreground thread ..  			DisplayBase.RenderStatus = Signal.Copy ();  			DisplayBase.CanMachineUpdate = true;  			// remove the machine signal lights ..  			machineData [0].Delete ();  			// commit changes ..  			this.Signal.AcceptChanges ();  			// change status ..  			__stop = true;  			string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  			// write to log file ..  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  		}  	}  	else {  		// increment fail count ..  		machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  		countx++;  		// commit changes ..  		this.Signal.AcceptChanges ();  	}  	// release the waiting thread ..  	Monitor.PulseAll (this.Signal);  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (countx >= 3) {  	// get maintenance quantity ..  	DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  	if (Machine.Rows.Count > 0) {  		// update row value ..  		machineData [0] ["TCore"] = 0;  		machineData [0] ["UCore"] = 0;  		// write offline flag ..  		Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  		// accept changes ..  		Machine.AcceptChanges ();  		// create data cache data ..  		DataSet Data = new DataSet ();  		// merge tables to dataset ..  		Data.Merge (Machine);  		// integration to memory data ..  		this.SyncData (Data);  		// wait for data sync ..  		Thread.Sleep (500);  		// update render status and trigger foreground thread ..  		DisplayBase.RenderStatus = Signal.Copy ();  		DisplayBase.CanMachineUpdate = true;  		// remove the machine signal lights ..  		machineData [0].Delete ();  		// commit changes ..  		this.Signal.AcceptChanges ();  		// change status ..  		__stop = true;  		string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  		// write to log file ..  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  	}  }  else {  	// increment fail count ..  	machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  	countx++;  	// commit changes ..  	this.Signal.AcceptChanges ();  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (countx >= 3) {  	// get maintenance quantity ..  	DataTable Machine = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' Info [0])' null' DataViewRowState.Unchanged).ToTable ();  	if (Machine.Rows.Count > 0) {  		// update row value ..  		machineData [0] ["TCore"] = 0;  		machineData [0] ["UCore"] = 0;  		// write offline flag ..  		Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  		// accept changes ..  		Machine.AcceptChanges ();  		// create data cache data ..  		DataSet Data = new DataSet ();  		// merge tables to dataset ..  		Data.Merge (Machine);  		// integration to memory data ..  		this.SyncData (Data);  		// wait for data sync ..  		Thread.Sleep (500);  		// update render status and trigger foreground thread ..  		DisplayBase.RenderStatus = Signal.Copy ();  		DisplayBase.CanMachineUpdate = true;  		// remove the machine signal lights ..  		machineData [0].Delete ();  		// commit changes ..  		this.Signal.AcceptChanges ();  		// change status ..  		__stop = true;  		string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  		// write to log file ..  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  	}  }  else {  	// increment fail count ..  	machineData [0] ["ConnectFail"] = Convert.ToUInt16 (machineData [0] ["ConnectFail"]);  	countx++;  	// commit changes ..  	this.Signal.AcceptChanges ();  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: if (Machine.Rows.Count > 0) {  	// update row value ..  	machineData [0] ["TCore"] = 0;  	machineData [0] ["UCore"] = 0;  	// write offline flag ..  	Machine.Rows [0] ["Status"] = Convert.ToUInt16 (MachineStatusFlag.OFFLINE);  	// accept changes ..  	Machine.AcceptChanges ();  	// create data cache data ..  	DataSet Data = new DataSet ();  	// merge tables to dataset ..  	Data.Merge (Machine);  	// integration to memory data ..  	this.SyncData (Data);  	// wait for data sync ..  	Thread.Sleep (500);  	// update render status and trigger foreground thread ..  	DisplayBase.RenderStatus = Signal.Copy ();  	DisplayBase.CanMachineUpdate = true;  	// remove the machine signal lights ..  	machineData [0].Delete ();  	// commit changes ..  	this.Signal.AcceptChanges ();  	// change status ..  	__stop = true;  	string ExceptionMsg = string.Format ("can't connect operation of machine. (file: render.cs' id: {0}' ip: {1})"' Info [0]' Info [1]);  	// write to log file ..  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Warning' ExceptionMsg' true);  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,Maintenance,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: switch (Type) {  #region Get Completed Jobs Workflow  case Server2Render.CommunicationType.COMPLETEDJOBS:  	try {  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.COMPLETEDJOBS)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// declare empty dataset' and copy render return data value ..  			DataSet Data = new DataSet ();  			DataTable renderData = ((DataTable)__returnObject.Value).Copy ();  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return completed rows count ..  			OutputObject.Add ("Completed"' renderData.Rows.Count);  			// analysis remote object ..  			foreach (DataRow row in renderData.Rows) {  				// define row key ..  				string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = {0} And Finish_Time Is Null"' sid);  				lock (this.DispatchedList) {  					// remove dispatched record ..  					if (this.DispatchedList.Contains (row ["Job_Id"]))  						this.DispatchedList.Remove (row ["Job_Id"]);  				}  				// find data from memory database ..  				DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' all_jobs = this.EnvData.FindData ("Job"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable ();  				if (job_group.Rows.Count > 0 && all_jobs.Rows.Count > 0 && job.Rows.Count > 0) {  					if (row ["Status"] != null && row ["Status"].ToString () != string.Empty) {  						if (Convert.ToUInt16 (row ["Status"]) == Convert.ToUInt16 (JobStatusFlag.ERROR)) {  							job.Rows [0] ["Proc_Machine"] = InputObject ["Host_Id"];  							job.Rows [0] ["Start_Time"] = row ["Start_Time"];  							job.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  						}  					}  					else  						// update sub job finish data ..  						job.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  					if (!this.Completed.ContainsKey (id))  						// add to completed collection ..  						this.Completed.Add (id' all_jobs.Rows.Count);  					if (this.Completed.ContainsKey (id))  						// reduction count quantity ..  						this.Completed [id]--;  					else  						continue;  					IList<string> cid = new List<string> ();  					foreach (KeyValuePair<string' int> kv in this.Completed) {  						// update primary job finish data ..  						if (kv.Value == 0) {  							cid.Add (kv.Key);  							if (row ["Status"] != null && row ["Status"].ToString () != string.Empty) {  								if (Convert.ToUInt16 (row ["Status"]) == Convert.ToUInt16 (JobStatusFlag.ERROR)) {  									job_group.Rows [0] ["Start_Time"] = row ["Start_Time"];  									job_group.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  									job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  									job_group.Rows [0] ["Note"] = "Can't operation the job' please confirm the job command attribute.";  								}  							}  							else {  								job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.COMPLETED);  								job_group.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  							}  						}  					}  					// clear completed collection ..  					foreach (string s in cid) {  						if (this.Completed.ContainsKey (s))  							this.Completed.Remove (s);  					}  					// merge data ..  					Data.Merge (job_group);  					Data.Merge (job);  				}  			}  			if (Data.Tables.Count > 0) {  				// accpet all changes ..  				Data.AcceptChanges ();  				// integration to job data collection ..  				SyncData (Data);  			}  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Dispatch Job Workflow  case Server2Render.CommunicationType.DISPATCH:  	try {  		DataSet Data = new DataSet ();  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// create dispatch data list ..  		IList<Dispatch> Dispatchs = new List<Dispatch> ();  		// analysis waitFor' priority attribute and mapping machine event ..  		if (InputObject.ContainsKey ("Machine_Id") && InputObject.ContainsKey ("FreeCore") && InputObject.ContainsKey ("HasZero")) {  			#region Filtration waitFor Procedure  			// search queuing status rows ..  			DataTable job_group_data = this.EnvData.FindData ("Job_Group"' "Status In (1' 6)"' null' DataViewRowState.Unchanged).ToTable ();  			#region Getting waitFor Data List  			// create queuing waitFor list ..  			IList<string> waitForList = new List<string> ();  			// search waitfor ..  			foreach (DataRow wrow in job_group_data.Rows) {  				#region Analysis Job Machine Pool  				DataTable machine_pool_data1 = null' machine_pool_data2 = null;  				machine_pool_data1 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["First_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  				if (!DBNull.Value.Equals (wrow ["Second_Pool"])) {  					machine_pool_data2 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["Second_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  				}  				bool flag = false;  				foreach (DataRow __row1 in machine_pool_data1.Rows) {  					if (__row1 ["Machine_Id"].Equals (InputObject ["Machine_Id"])) {  						flag = true;  						break;  					}  				}  				if (machine_pool_data2 != null) {  					foreach (DataRow __row2 in machine_pool_data2.Rows) {  						if (__row2 ["Machine_Id"] == InputObject ["Machine_Id"]) {  							flag = true;  							break;  						}  					}  				}  				if (!flag)  					continue;  				#endregion  				DataTable waitfor_data = this.EnvData.FindData ("Job_Attr"' string.Format ("WaitFor Is Not Null And Job_Group_Id = '{1}'"' DBNull.Value' wrow ["Job_Group_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				// add to list ..  				if (waitfor_data.Rows.Count > 0) {  					DataRow[] validrow = job_group_data.Select (string.Format ("Status = {0} And Job_Group_Id = '{1}'"' Convert.ToUInt16 (JobStatusFlag.QUEUING)' waitfor_data.Rows [0] ["WaitFor"]));  					//  					if (validrow.Length > 0) {  						if (!waitForList.Contains (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ()))  							waitForList.Add (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ());  					}  				}  			}  			#endregion  			// create sort list ..  			IDictionary<string' ushort> FiltrationJobs = new Dictionary<string' ushort> ();  			foreach (DataRow grow in job_group_data.Rows) {  				#region Confirm Pool Machines  				if (this.PoolMachine_Info.Count == 0) {  					string ExceptionMsg = "can't find pool machine relations.";  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  					break;  				}  				else {  					string first = grow ["First_Pool"].ToString ().Trim ()' second = string.Empty;  					if (grow ["Second_Pool"] != null && grow ["Second_Pool"].ToString () != string.Empty)  						second = grow ["Second_Pool"].ToString ().Trim ();  					// check first pool ..  					if (this.PoolMachine_Info.ContainsKey (first) && !this.PoolMachine_Info [first].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ())) {  						if (!string.IsNullOrEmpty (second)) {  							// check second pool ..  							if (!this.PoolMachine_Info [second].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ()))  								continue;  						}  						else  							continue;  					}  				}  				#endregion  				// whether check this job exists waitFor list ..  				if (waitForList.Contains (grow ["Job_Group_Id"].ToString ()))  					continue;  				// find current job of queue status ..  				DataView __attr = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' grow ["Job_Group_Id"])' null' DataViewRowState.Unchanged);  				// add to ready dispatch list ..  				if (__attr.Count > 0) {  					if (!FiltrationJobs.ContainsKey (__attr [0] ["Job_Group_Id"].ToString ()))  						FiltrationJobs.Add (__attr [0] ["Job_Group_Id"].ToString ()' Convert.ToUInt16 (__attr [0] ["Priority"]));  				}  			}  			#endregion  			#region Getting Sub Job' And Setting Dispatch Structure  			// declare stop and package count flag ..  			bool stopDispatch = false;  			ushort retryCount = 0' packageCount = 0;  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return dispatch rows count ..  			OutputObject.Add ("Dispatch"' FiltrationJobs.Count);  			foreach (KeyValuePair<string' ushort> kv in FiltrationJobs.OrderByDescending (job => job.Value)) {  				string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key);  				// find job attribute ..  				DataTable job_attr_data = this.EnvData.FindData ("Job_Attr"' filter1' null' DataViewRowState.Unchanged).ToTable ();  				// find sub job ..  				DataTable job_data = this.EnvData.FindData ("Job"' filter2' "Job_Id Asc"' DataViewRowState.Unchanged).ToTable ();  				if (job_data.Rows.Count > 0) {  					if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  						if (!Convert.ToBoolean (InputObject ["HasZero"]))  							continue;  						InputObject ["FreeCore"] = 1;  					}  					// package dispatch data ..  					foreach (DataRow row in job_data.Rows) {  						if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  							stopDispatch = true;  							break;  						}  						// analysis command args ..  						string cmd = string.Empty' args = string.Empty;  						int idx = row ["Command"].ToString ().IndexOf ('-');  						if (idx > 0) {  							cmd = row ["Command"].ToString ().Substring (0' idx);  							args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  						}  						lock (this.DispatchedList) {  							//if (this.DispatchedList.Contains(row["Job_Id"]))  							//    continue;  							//else  							//{  							//add to dispatched collection ..  							this.DispatchedList.Add (row ["Job_Id"]);  							Dispatchs.Add (new Dispatch () {  								Job_Group_Id = new Guid (kv.Key)'  								Job_Id = Convert.ToInt32 (row ["Job_Id"])'  								//Job_Id = Convert.ToString(row["Job_Id"])'  								Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  								Command = cmd.Trim ()'  								Args = args.Trim ()  							});  							packageCount++;  							//}  						}  					}  					if (stopDispatch)  						break;  				}  				else {  					retryCount++;  					if (retryCount > 5) {  						DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  						if (errorRow.Rows.Count > 0) {  							// update fail info ..  							errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  							errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  							errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  							errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  							// commit changes ..  							errorRow.AcceptChanges ();  							// assign to dataset ..  							Data.Tables.Add (errorRow);  							// integration to job data collection ..  							SyncData (Data);  						}  					}  					else  						continue;  				}  			}  			#endregion  		}  		if (Dispatchs.Count <= 0)  			return false;  		// anew package dispatch structure ..  		IDictionary<string' object> jobs = new Dictionary<string' object> {  			{  				"Dispatcher"'  				Dispatchs  			}  		};  		if (Socket.IsConnected) {  			// package and send object to remote machine ..  			Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.DISPATCH' jobs)));  			// receive remote machine data object ..  			object received = null;  			if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  				// convert correct object type ..  				__returnObject = (KeyValuePair<string' object>)received;  			// check the client has return object data is nullable type ..  			if (__returnObject.Key.Substring (0' 1) == "-")  				result = false;  			else  				result = true;  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Get Render IsBusy Status Workflow  case Server2Render.CommunicationType.ISBUSY:  	try {  		// declare list result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.ISBUSY)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// create new instance ..  			OutputObject = new Dictionary<string' object> ();  			// receive and assign remote object ..  			foreach (KeyValuePair<string' object> kv in (IDictionary<string' object>)__returnObject.Value)  				OutputObject.Add (kv.Key' kv.Value);  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Get Running Jobs Workflow  case Server2Render.CommunicationType.RUNNINGJOBS:  	try {  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.RUNNINGJOBS)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// declare empty dataset' and copy render return data value ..  			DataSet Data = new DataSet ();  			DataTable renderData = ((DataTable)__returnObject.Value).Copy ();  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return running rows count ..  			OutputObject.Add ("Running"' renderData.Rows.Count);  			// analysis remote object ..  			foreach (DataRow row in renderData.Rows) {  				// define row key ..  				string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = '{0}'"' sid);  				// find data from memory database ..  				DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable ();  				if (job_group.Rows.Count > 0 && job.Rows.Count > 0) {  					if (job_group.Rows [0] ["Start_Time"] != null) {  						// write primary datetime data ..  						job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.PROCESSING);  						job_group.Rows [0] ["Start_Time"] = row ["Start_Time"];  					}  					if (job.Rows [0] ["Start_Time"] != null) {  						// write sub job datetime data ..  						job.Rows [0] ["Proc_Machine"] = InputObject ["Host_Id"];  						job.Rows [0] ["Start_Time"] = row ["Start_Time"];  					}  					if (row ["Render_Output"] != null)  						// update last output log ..  						job.Rows [0] ["OutputLog"] = row ["Render_Output"];  					// merge data ..  					Data.Merge (job_group);  					Data.Merge (job);  				}  			}  			if (Data.Tables.Count > 0) {  				// accept all changes ..  				Data.AcceptChanges ();  				// integration to job data collection ..  				SyncData (Data);  			}  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: try {  	DataSet Data = new DataSet ();  	// declare dictionary result object ..  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// create dispatch data list ..  	IList<Dispatch> Dispatchs = new List<Dispatch> ();  	// analysis waitFor' priority attribute and mapping machine event ..  	if (InputObject.ContainsKey ("Machine_Id") && InputObject.ContainsKey ("FreeCore") && InputObject.ContainsKey ("HasZero")) {  		#region Filtration waitFor Procedure  		// search queuing status rows ..  		DataTable job_group_data = this.EnvData.FindData ("Job_Group"' "Status In (1' 6)"' null' DataViewRowState.Unchanged).ToTable ();  		#region Getting waitFor Data List  		// create queuing waitFor list ..  		IList<string> waitForList = new List<string> ();  		// search waitfor ..  		foreach (DataRow wrow in job_group_data.Rows) {  			#region Analysis Job Machine Pool  			DataTable machine_pool_data1 = null' machine_pool_data2 = null;  			machine_pool_data1 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["First_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  			if (!DBNull.Value.Equals (wrow ["Second_Pool"])) {  				machine_pool_data2 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["Second_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  			}  			bool flag = false;  			foreach (DataRow __row1 in machine_pool_data1.Rows) {  				if (__row1 ["Machine_Id"].Equals (InputObject ["Machine_Id"])) {  					flag = true;  					break;  				}  			}  			if (machine_pool_data2 != null) {  				foreach (DataRow __row2 in machine_pool_data2.Rows) {  					if (__row2 ["Machine_Id"] == InputObject ["Machine_Id"]) {  						flag = true;  						break;  					}  				}  			}  			if (!flag)  				continue;  			#endregion  			DataTable waitfor_data = this.EnvData.FindData ("Job_Attr"' string.Format ("WaitFor Is Not Null And Job_Group_Id = '{1}'"' DBNull.Value' wrow ["Job_Group_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			// add to list ..  			if (waitfor_data.Rows.Count > 0) {  				DataRow[] validrow = job_group_data.Select (string.Format ("Status = {0} And Job_Group_Id = '{1}'"' Convert.ToUInt16 (JobStatusFlag.QUEUING)' waitfor_data.Rows [0] ["WaitFor"]));  				//  				if (validrow.Length > 0) {  					if (!waitForList.Contains (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ()))  						waitForList.Add (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ());  				}  			}  		}  		#endregion  		// create sort list ..  		IDictionary<string' ushort> FiltrationJobs = new Dictionary<string' ushort> ();  		foreach (DataRow grow in job_group_data.Rows) {  			#region Confirm Pool Machines  			if (this.PoolMachine_Info.Count == 0) {  				string ExceptionMsg = "can't find pool machine relations.";  				// write to log file ..  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				break;  			}  			else {  				string first = grow ["First_Pool"].ToString ().Trim ()' second = string.Empty;  				if (grow ["Second_Pool"] != null && grow ["Second_Pool"].ToString () != string.Empty)  					second = grow ["Second_Pool"].ToString ().Trim ();  				// check first pool ..  				if (this.PoolMachine_Info.ContainsKey (first) && !this.PoolMachine_Info [first].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ())) {  					if (!string.IsNullOrEmpty (second)) {  						// check second pool ..  						if (!this.PoolMachine_Info [second].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ()))  							continue;  					}  					else  						continue;  				}  			}  			#endregion  			// whether check this job exists waitFor list ..  			if (waitForList.Contains (grow ["Job_Group_Id"].ToString ()))  				continue;  			// find current job of queue status ..  			DataView __attr = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' grow ["Job_Group_Id"])' null' DataViewRowState.Unchanged);  			// add to ready dispatch list ..  			if (__attr.Count > 0) {  				if (!FiltrationJobs.ContainsKey (__attr [0] ["Job_Group_Id"].ToString ()))  					FiltrationJobs.Add (__attr [0] ["Job_Group_Id"].ToString ()' Convert.ToUInt16 (__attr [0] ["Priority"]));  			}  		}  		#endregion  		#region Getting Sub Job' And Setting Dispatch Structure  		// declare stop and package count flag ..  		bool stopDispatch = false;  		ushort retryCount = 0' packageCount = 0;  		// clear old data ..  		if (OutputObject.Count > 0)  			OutputObject.Clear ();  		// return dispatch rows count ..  		OutputObject.Add ("Dispatch"' FiltrationJobs.Count);  		foreach (KeyValuePair<string' ushort> kv in FiltrationJobs.OrderByDescending (job => job.Value)) {  			string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key);  			// find job attribute ..  			DataTable job_attr_data = this.EnvData.FindData ("Job_Attr"' filter1' null' DataViewRowState.Unchanged).ToTable ();  			// find sub job ..  			DataTable job_data = this.EnvData.FindData ("Job"' filter2' "Job_Id Asc"' DataViewRowState.Unchanged).ToTable ();  			if (job_data.Rows.Count > 0) {  				if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  					if (!Convert.ToBoolean (InputObject ["HasZero"]))  						continue;  					InputObject ["FreeCore"] = 1;  				}  				// package dispatch data ..  				foreach (DataRow row in job_data.Rows) {  					if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  						stopDispatch = true;  						break;  					}  					// analysis command args ..  					string cmd = string.Empty' args = string.Empty;  					int idx = row ["Command"].ToString ().IndexOf ('-');  					if (idx > 0) {  						cmd = row ["Command"].ToString ().Substring (0' idx);  						args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  					}  					lock (this.DispatchedList) {  						//if (this.DispatchedList.Contains(row["Job_Id"]))  						//    continue;  						//else  						//{  						//add to dispatched collection ..  						this.DispatchedList.Add (row ["Job_Id"]);  						Dispatchs.Add (new Dispatch () {  							Job_Group_Id = new Guid (kv.Key)'  							Job_Id = Convert.ToInt32 (row ["Job_Id"])'  							//Job_Id = Convert.ToString(row["Job_Id"])'  							Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  							Command = cmd.Trim ()'  							Args = args.Trim ()  						});  						packageCount++;  						//}  					}  				}  				if (stopDispatch)  					break;  			}  			else {  				retryCount++;  				if (retryCount > 5) {  					DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  					if (errorRow.Rows.Count > 0) {  						// update fail info ..  						errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  						errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  						errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  						errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  						// commit changes ..  						errorRow.AcceptChanges ();  						// assign to dataset ..  						Data.Tables.Add (errorRow);  						// integration to job data collection ..  						SyncData (Data);  					}  				}  				else  					continue;  			}  		}  		#endregion  	}  	if (Dispatchs.Count <= 0)  		return false;  	// anew package dispatch structure ..  	IDictionary<string' object> jobs = new Dictionary<string' object> {  		{  			"Dispatcher"'  			Dispatchs  		}  	};  	if (Socket.IsConnected) {  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.DISPATCH' jobs)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Key.Substring (0' 1) == "-")  			result = false;  		else  			result = true;  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	// change result ..  	result = false;  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: if (InputObject.ContainsKey ("Machine_Id") && InputObject.ContainsKey ("FreeCore") && InputObject.ContainsKey ("HasZero")) {  	#region Filtration waitFor Procedure  	// search queuing status rows ..  	DataTable job_group_data = this.EnvData.FindData ("Job_Group"' "Status In (1' 6)"' null' DataViewRowState.Unchanged).ToTable ();  	#region Getting waitFor Data List  	// create queuing waitFor list ..  	IList<string> waitForList = new List<string> ();  	// search waitfor ..  	foreach (DataRow wrow in job_group_data.Rows) {  		#region Analysis Job Machine Pool  		DataTable machine_pool_data1 = null' machine_pool_data2 = null;  		machine_pool_data1 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["First_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  		if (!DBNull.Value.Equals (wrow ["Second_Pool"])) {  			machine_pool_data2 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["Second_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  		}  		bool flag = false;  		foreach (DataRow __row1 in machine_pool_data1.Rows) {  			if (__row1 ["Machine_Id"].Equals (InputObject ["Machine_Id"])) {  				flag = true;  				break;  			}  		}  		if (machine_pool_data2 != null) {  			foreach (DataRow __row2 in machine_pool_data2.Rows) {  				if (__row2 ["Machine_Id"] == InputObject ["Machine_Id"]) {  					flag = true;  					break;  				}  			}  		}  		if (!flag)  			continue;  		#endregion  		DataTable waitfor_data = this.EnvData.FindData ("Job_Attr"' string.Format ("WaitFor Is Not Null And Job_Group_Id = '{1}'"' DBNull.Value' wrow ["Job_Group_Id"])' null' DataViewRowState.Unchanged).ToTable ();  		// add to list ..  		if (waitfor_data.Rows.Count > 0) {  			DataRow[] validrow = job_group_data.Select (string.Format ("Status = {0} And Job_Group_Id = '{1}'"' Convert.ToUInt16 (JobStatusFlag.QUEUING)' waitfor_data.Rows [0] ["WaitFor"]));  			//  			if (validrow.Length > 0) {  				if (!waitForList.Contains (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ()))  					waitForList.Add (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ());  			}  		}  	}  	#endregion  	// create sort list ..  	IDictionary<string' ushort> FiltrationJobs = new Dictionary<string' ushort> ();  	foreach (DataRow grow in job_group_data.Rows) {  		#region Confirm Pool Machines  		if (this.PoolMachine_Info.Count == 0) {  			string ExceptionMsg = "can't find pool machine relations.";  			// write to log file ..  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			break;  		}  		else {  			string first = grow ["First_Pool"].ToString ().Trim ()' second = string.Empty;  			if (grow ["Second_Pool"] != null && grow ["Second_Pool"].ToString () != string.Empty)  				second = grow ["Second_Pool"].ToString ().Trim ();  			// check first pool ..  			if (this.PoolMachine_Info.ContainsKey (first) && !this.PoolMachine_Info [first].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ())) {  				if (!string.IsNullOrEmpty (second)) {  					// check second pool ..  					if (!this.PoolMachine_Info [second].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ()))  						continue;  				}  				else  					continue;  			}  		}  		#endregion  		// whether check this job exists waitFor list ..  		if (waitForList.Contains (grow ["Job_Group_Id"].ToString ()))  			continue;  		// find current job of queue status ..  		DataView __attr = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' grow ["Job_Group_Id"])' null' DataViewRowState.Unchanged);  		// add to ready dispatch list ..  		if (__attr.Count > 0) {  			if (!FiltrationJobs.ContainsKey (__attr [0] ["Job_Group_Id"].ToString ()))  				FiltrationJobs.Add (__attr [0] ["Job_Group_Id"].ToString ()' Convert.ToUInt16 (__attr [0] ["Priority"]));  		}  	}  	#endregion  	#region Getting Sub Job' And Setting Dispatch Structure  	// declare stop and package count flag ..  	bool stopDispatch = false;  	ushort retryCount = 0' packageCount = 0;  	// clear old data ..  	if (OutputObject.Count > 0)  		OutputObject.Clear ();  	// return dispatch rows count ..  	OutputObject.Add ("Dispatch"' FiltrationJobs.Count);  	foreach (KeyValuePair<string' ushort> kv in FiltrationJobs.OrderByDescending (job => job.Value)) {  		string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key);  		// find job attribute ..  		DataTable job_attr_data = this.EnvData.FindData ("Job_Attr"' filter1' null' DataViewRowState.Unchanged).ToTable ();  		// find sub job ..  		DataTable job_data = this.EnvData.FindData ("Job"' filter2' "Job_Id Asc"' DataViewRowState.Unchanged).ToTable ();  		if (job_data.Rows.Count > 0) {  			if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  				if (!Convert.ToBoolean (InputObject ["HasZero"]))  					continue;  				InputObject ["FreeCore"] = 1;  			}  			// package dispatch data ..  			foreach (DataRow row in job_data.Rows) {  				if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  					stopDispatch = true;  					break;  				}  				// analysis command args ..  				string cmd = string.Empty' args = string.Empty;  				int idx = row ["Command"].ToString ().IndexOf ('-');  				if (idx > 0) {  					cmd = row ["Command"].ToString ().Substring (0' idx);  					args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  				}  				lock (this.DispatchedList) {  					//if (this.DispatchedList.Contains(row["Job_Id"]))  					//    continue;  					//else  					//{  					//add to dispatched collection ..  					this.DispatchedList.Add (row ["Job_Id"]);  					Dispatchs.Add (new Dispatch () {  						Job_Group_Id = new Guid (kv.Key)'  						Job_Id = Convert.ToInt32 (row ["Job_Id"])'  						//Job_Id = Convert.ToString(row["Job_Id"])'  						Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  						Command = cmd.Trim ()'  						Args = args.Trim ()  					});  					packageCount++;  					//}  				}  			}  			if (stopDispatch)  				break;  		}  		else {  			retryCount++;  			if (retryCount > 5) {  				DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  				if (errorRow.Rows.Count > 0) {  					// update fail info ..  					errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  					errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  					errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  					errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  					// commit changes ..  					errorRow.AcceptChanges ();  					// assign to dataset ..  					Data.Tables.Add (errorRow);  					// integration to job data collection ..  					SyncData (Data);  				}  			}  			else  				continue;  		}  	}  	#endregion  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: foreach (KeyValuePair<string' ushort> kv in FiltrationJobs.OrderByDescending (job => job.Value)) {  	string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key);  	// find job attribute ..  	DataTable job_attr_data = this.EnvData.FindData ("Job_Attr"' filter1' null' DataViewRowState.Unchanged).ToTable ();  	// find sub job ..  	DataTable job_data = this.EnvData.FindData ("Job"' filter2' "Job_Id Asc"' DataViewRowState.Unchanged).ToTable ();  	if (job_data.Rows.Count > 0) {  		if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  			if (!Convert.ToBoolean (InputObject ["HasZero"]))  				continue;  			InputObject ["FreeCore"] = 1;  		}  		// package dispatch data ..  		foreach (DataRow row in job_data.Rows) {  			if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  				stopDispatch = true;  				break;  			}  			// analysis command args ..  			string cmd = string.Empty' args = string.Empty;  			int idx = row ["Command"].ToString ().IndexOf ('-');  			if (idx > 0) {  				cmd = row ["Command"].ToString ().Substring (0' idx);  				args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  			}  			lock (this.DispatchedList) {  				//if (this.DispatchedList.Contains(row["Job_Id"]))  				//    continue;  				//else  				//{  				//add to dispatched collection ..  				this.DispatchedList.Add (row ["Job_Id"]);  				Dispatchs.Add (new Dispatch () {  					Job_Group_Id = new Guid (kv.Key)'  					Job_Id = Convert.ToInt32 (row ["Job_Id"])'  					//Job_Id = Convert.ToString(row["Job_Id"])'  					Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  					Command = cmd.Trim ()'  					Args = args.Trim ()  				});  				packageCount++;  				//}  			}  		}  		if (stopDispatch)  			break;  	}  	else {  		retryCount++;  		if (retryCount > 5) {  			DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  			if (errorRow.Rows.Count > 0) {  				// update fail info ..  				errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  				errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  				errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  				errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  				// commit changes ..  				errorRow.AcceptChanges ();  				// assign to dataset ..  				Data.Tables.Add (errorRow);  				// integration to job data collection ..  				SyncData (Data);  			}  		}  		else  			continue;  	}  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: if (job_data.Rows.Count > 0) {  	if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  		if (!Convert.ToBoolean (InputObject ["HasZero"]))  			continue;  		InputObject ["FreeCore"] = 1;  	}  	// package dispatch data ..  	foreach (DataRow row in job_data.Rows) {  		if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  			stopDispatch = true;  			break;  		}  		// analysis command args ..  		string cmd = string.Empty' args = string.Empty;  		int idx = row ["Command"].ToString ().IndexOf ('-');  		if (idx > 0) {  			cmd = row ["Command"].ToString ().Substring (0' idx);  			args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  		}  		lock (this.DispatchedList) {  			//if (this.DispatchedList.Contains(row["Job_Id"]))  			//    continue;  			//else  			//{  			//add to dispatched collection ..  			this.DispatchedList.Add (row ["Job_Id"]);  			Dispatchs.Add (new Dispatch () {  				Job_Group_Id = new Guid (kv.Key)'  				Job_Id = Convert.ToInt32 (row ["Job_Id"])'  				//Job_Id = Convert.ToString(row["Job_Id"])'  				Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  				Command = cmd.Trim ()'  				Args = args.Trim ()  			});  			packageCount++;  			//}  		}  	}  	if (stopDispatch)  		break;  }  else {  	retryCount++;  	if (retryCount > 5) {  		DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  		if (errorRow.Rows.Count > 0) {  			// update fail info ..  			errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  			errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  			errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  			errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  			// commit changes ..  			errorRow.AcceptChanges ();  			// assign to dataset ..  			Data.Tables.Add (errorRow);  			// integration to job data collection ..  			SyncData (Data);  		}  	}  	else  		continue;  }  
Magic Number,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following statement contains a magic number: if (retryCount > 5) {  	DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  	if (errorRow.Rows.Count > 0) {  		// update fail info ..  		errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  		errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  		errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  		errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  		// commit changes ..  		errorRow.AcceptChanges ();  		// assign to dataset ..  		Data.Tables.Add (errorRow);  		// integration to job data collection ..  		SyncData (Data);  	}  }  else  	continue;  
Magic Number,RenbarServerGUI,SlaveBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Slave.cs,Slaving,The following statement contains a magic number: try {  	ClientServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this._listenSlavePort);  	do {  		//    ClientServiceSocket.AcceptListen();  		//if (ClientServiceSocket.Pending())  		//{  		//}  		Thread.Sleep (200);  	}  	while (!requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (ClientServiceSocket != null)  		// clean server socket resource ..  		ClientServiceSocket.Close ();  }  
Magic Number,RenbarServerGUI,SlaveBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Slave.cs,Slaving,The following statement contains a magic number: do {  	//    ClientServiceSocket.AcceptListen();  	//if (ClientServiceSocket.Pending())  	//{  	//}  	Thread.Sleep (200);  }  while (!requestStop);  
Magic Number,RenbarServerGUI,SlaveBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Slave.cs,Slaving,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenbarLib.Extension.Alienbrain,AbLib,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Alienbrain.cs,DependencyGet,The following statement contains a magic number: dependencyGet.DependencyMaxResults = 999;  
Magic Number,RenbarLib.Extension.Alienbrain,AbLib,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Alienbrain.cs,Import,The following statement contains a magic number: _cmd.SetIn ("CreateVersion"' 2);  
Duplicate Code,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The method contains a code clone-set at the following line numbers (starting from the method definition): ((343' 369)' (408' 434))
Missing Default,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following switch statement is missing a default case: switch (ActionHeader) {  #region --F7300290--OK-- A/U:Machine Info Case Workflow  case Client2Server.CommunicationType.MACHINEINFO:  	try {  		// read machine table data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' And IsRender='{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			Convert.ToInt32 (bool.Parse (QueueItems ["IsRender"].ToString ()))  		})' "Name' Ip"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  		// create new row ..  		DataRow mrow = mtable.NewRow ();  		#region 填充數據  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (mtable.Columns.Contains (kv.Key)) {  				mrow [kv.Key] = kv.Value;  			}  		}  		// check the data column is allow DbNull type ..  		foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  			if (!dc.AllowDBNull) {  				if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  					mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  		}  		#region 設定機器狀態值  		// decision machine type ..  		if (QueueItems.ContainsKey ("IsRender")) {  			if (!bool.Parse (QueueItems ["IsRender"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.CLIENT;  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 0;  				}  			}  			else {  				mrow ["Status"] = (ushort)MachineStatusFlag.RENDER;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  				if (DBNull.Value == mrow ["Priority"]) {  					mrow ["Priority"] = 20;  				}  			}  		}  		// decision the dictionary exist maintenance flag ..  		if (QueueItems.ContainsKey ("IsMaintenance") && bool.Parse (QueueItems ["IsMaintenance"].ToString ())) {  			mrow ["Status"] = (ushort)MachineStatusFlag.MAINTENANCE;  			//***********************************************************(F7300253)  			global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  			IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  			string NetIP = IPClear.Address.ToString ();  			for (int i = n - 1; i >= 0; i--) {  				if (NetIP == address [i]) {  					address [i] = null;  				}  			}  			//************************************************************  		}  		// decision the dictionary exist offline flag ..  		if (QueueItems.ContainsKey ("IsOffLine")) {  			if (bool.Parse (QueueItems ["IsOffLine"].ToString ())) {  				mrow ["Status"] = (ushort)MachineStatusFlag.OFFLINE;  				//***********************************************************(F7300253)  				global::System.Net.Sockets.TcpClient handleClear = (global::System.Net.Sockets.TcpClient)ClientObject;  				IPEndPoint IPClear = (IPEndPoint)handleClear.Client.RemoteEndPoint;  				string NetIP = IPClear.Address.ToString ();  				for (int i = n - 1; i >= 0; i--) {  					if (NetIP == address [i]) {  						address [i] = null;  					}  				}  				//************************************************************  			}  		}  		#endregion  		#endregion  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region Refresh Machine Data 更新/插入Machine數據！  		// update machine data ..  		if (view_machine_data.Count > 0) {  			// get machine id column ..  			mrow ["Machine_Id"] = view_machine_data [0].DataView [0] ["Machine_Id"];  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Update Machine Set ";  			cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  			cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  		}  		// add new machine data ..  		else {  			// create new machine id ..  			mrow ["Machine_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			cmd = " Insert Into Machine ";  			cmd += " (Machine_Id' Name' Ip' IsEnable' Last_Online_Time' IsRender' Status' Priority' Note) ";  			cmd += " Values ";  			cmd += " (?Machine_Id' ?Name' ?Ip' ?IsEnable' ?Last_Online_Time' ?IsRender' ?Status' ?Priority' ?Note) ";  		}  		#endregion  		MySqlCommand command = new MySqlCommand ();  		command.CommandText = cmd;  		command.CommandType = CommandType.Text;  		// add commands ..  		TextCommands.Add (mtable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (mds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		//  		mtable.Dispose ();  		view_machine_data.Dispose ();  		mds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region Delete Machine Info Case Workflow ！！！！未使用！！！！  case Client2Server.CommunicationType.DELETEMACHINEINFO:  	try {  		// read machine table data ..  		DataView delete_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Name = '{0}' And Ip = '{1}' Or Machine_Id = '{2}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Ip"]'  			QueueItems ["Machine_Id"]  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// get machine id ..  		string id = delete_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Machine_Id = '{0}'"' new object[] {  			id  		})' "Machine_Id"' DataViewRowState.Unchanged);  		// delete data from pool table and machine pool table ..  		while (delete_machine_pool_data.Count != 0)  			delete_machine_pool_data.Delete (0);  		while (delete_machine_data.Count != 0)  			delete_machine_data.Delete (0);  		// bind database command ..  		string cmd = " select count(*)  From Machine_Pool";  		cmd += "  Inner Join Machine On Machine_Pool.Machine_Id = Machine.Machine_Id";  		cmd += " Where Machine.Machine_Id In (" + id + ")";  		MySqlCommand command = new MySqlCommand (cmd);  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "  Delete From Machine_Pool Where Machine_Id In (" + id + ") ;";  			cmd += "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		else {  			cmd = "  Delete From Machine Where Machine_Id In (" + id + ") ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (delete_machine_data.ToTable ());  		pds.Tables.Add (delete_machine_pool_data.ToTable ());  		command = new MySqlCommand (cmd);  		// add commands ..  		//command.Parameters.AddWithValue("?Machine_Id"' id);  		TextCommands.Add (delete_machine_data.ToTable ().TableName' command);  		TextCommands.Add (delete_machine_pool_data.ToTable ().TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		// wait for write data finish ..  		Thread.Sleep (100);  		// refresh machine data list ..  		DisplayBase.CanMachineUpdate = true;  		delete_machine_data.Dispose ();  		delete_machine_pool_data.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEINFO:  	try {  		// find match data ..  		DataView view_machine_data = this.EnvData.FindData ("Machine"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_data.Count > 0)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_data.ToTable ());  		else  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  		view_machine_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.VIEWMACHINEPOOLRELATION:  	try {  		// find match data ..  		DataView view_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_machine_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_machine_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_machine_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Machine Render Info Case Workflow  case Client2Server.CommunicationType.VIEWMACHINERENDERINFO:  	try {  		DataTable MachineData = DisplayBase.MachineStatus.Copy ();  		// response result ..  		if (MachineData != null) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' MachineData);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		MachineData.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Enable Or Disable Machine Case Workflow  case Client2Server.CommunicationType.ONOFFMACHINE:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("IsEnable")) {  			if (bool.Parse (QueueItems ["IsEnable"].ToString ())) {  				QueueItems ["IsEnable"] = 1;  			}  			else {  				QueueItems ["IsEnable"] = 0;  			}  			// read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			// mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0)  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  				}  			}  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			// bind database command ..  			string cmd = " Update Machine Set ";  			//cmd += "Name = ?Name' Ip = ?Ip'";  			cmd += "  IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time ";  			//cmd += " Status = ?Status' Priority = ?Priority' Note = ?Note ";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--Set Machine Priority Case Workflow  case Client2Server.CommunicationType.MACHINEPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Machine_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read machine table data ..  			DataView view_machine_data = this.EnvData.FindData ("Machine"' string.Format ("Machine_Id = '{0}'"' QueueItems ["Machine_Id"])' "Name"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet mds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable mtable = this.EnvData.ReadDataSchema ("Machine");  			// create new row ..  			DataRow mrow = mtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (mtable.Columns.Contains (kv.Key))  					mrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						mrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			#endregion  			// complete added ..  			mtable.Rows.Add (mrow);  			// add to table collection ..  			mds.Tables.Add (mtable);  			//// bind database command ..  			string cmd = " Update Machine Set ";  			cmd += " Priority = ?Priority";  			cmd += " Where Machine_Id = ?Machine_Id ";  			// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (mtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanMachineUpdate = true;  			view_machine_data.Dispose ();  			mtable.Dispose ();  			mds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- U:Set Machine Pool Relation Case Workflow  case Client2Server.CommunicationType.MACHINEPOOLRELATION:  	try {  		// define table collection ..  		DataSet mds = new DataSet ();  		// define temporary data structure ..  		DataTable mptable = this.EnvData.ReadDataSchema ("Machine_Pool");  		DataTable fkpool = this.EnvData.ReadData ("Pool");  		if (QueueItems.ContainsKey ("Pool_Id") && QueueItems.ContainsKey ("Machines")) {  			fkpool = this.EnvData.FindData ("Pool"' string.Format ("Pool_Id = '{0}'"' QueueItems ["Pool_Id"])' null' DataViewRowState.Unchanged).ToTable ();  			foreach (string s in (string[])QueueItems ["Machines"]) {  				// create new row ..  				DataRow mprow = mptable.NewRow ();  				if (mptable.Columns.Contains ("Pool_Id") && QueueItems.ContainsKey ("Pool_Id")) {  					// assign pool id key ..  					mprow ["Pool_Id"] = QueueItems ["Pool_Id"];  				}  				if (mptable.Columns.Contains ("Machine_Id")) {  					// assign machine id ..  					mprow ["Machine_Id"] = s;  				}  				// complete added ..  				mptable.Rows.Add (mprow);  			}  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			if (fkpool.Rows.Count > 0) {  				// bind database delete command ..  				// 先刪除該POOL的所有Machine，再逐一添加  				string cmd = " Delete From Machine_Pool Where Pool_Id = ?Pool_Id ";  				// add delete data table ..  				mds.Tables.Add (fkpool);  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (fkpool.TableName' command);  			}  			// bind database insert command ..  			string icmd = " Insert Into Machine_Pool ";  			icmd += " (Machine_Id' Pool_Id) ";  			icmd += " Values ";  			icmd += " (?Machine_Id' ?Pool_Id) ";  			MySqlCommand icommand = new MySqlCommand (icmd);  			icommand.CommandType = CommandType.Text;  			// add insert data table ..  			mds.Tables.Add (mptable);  			// refresh commands ..  			TextCommands.Add (mptable.TableName' icommand);  			// sync data ..  			this.EnvData.WriteData (mds' TextCommands);  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else {  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		mptable.Dispose ();  		mds.Dispose ();  		fkpool.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- S:View Pool Info Case Workflow  case Client2Server.CommunicationType.VIEWPOOLINFO:  	try {  		// find match data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_pool_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_pool_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Pool Info Case Workflow  case Client2Server.CommunicationType.POOLINFO:  	try {  		// read pool table data ..  		DataView view_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Name"' DataViewRowState.Unchanged);  		// define table collection ..  		DataSet pds = new DataSet ();  		// define temporary data structure ..  		DataTable ptable = this.EnvData.ReadDataSchema ("Pool");  		// create new row ..  		DataRow prow = ptable.NewRow ();  		// mapping column ..  		foreach (KeyValuePair<string' object> kv in QueueItems) {  			if (ptable.Columns.Contains (kv.Key))  				prow [kv.Key] = kv.Value;  		}  		// create text command dictionary ..  		string cmd = string.Empty;  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		#region 更新  		// update pool data ..  		if (view_pool_data.Count > 0) {  			// get pool id column ..  			prow ["Pool_Id"] = view_pool_data [0].DataView [0] ["Pool_Id"];  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Update Pool Set ";  			cmd += " Name = ?Name' Sharable = ?Sharable ";  			cmd += " Where Pool_Id = ?Pool_Id ";  		}  		#endregion  		#region 插入  		// add new pool data ..  		else {  			// create new pool id ..  			prow ["Pool_Id"] = Guid.NewGuid ().ToString ().ToUpper ();  			// complete added ..  			ptable.Rows.Add (prow);  			// add to table collection ..  			pds.Tables.Add (ptable);  			// bind database command ..  			cmd = " Insert Into Pool ";  			cmd += " (Pool_Id' Name' Sharable) ";  			cmd += " Values ";  			cmd += " (?Pool_Id' ?Name' ?Sharable) ";  		}  		#endregion  		// add commands ..  		MySqlCommand command = new MySqlCommand (cmd);  		command.CommandType = CommandType.Text;  		TextCommands.Add (ptable.TableName' command);  		// sync data ..  		this.EnvData.WriteData (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		view_pool_data.Dispose ();  		ptable.Dispose ();  		pds.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- D:Delete Pool Info Case Workflow  case Client2Server.CommunicationType.DELETEPOOLINFO:  	try {  		// read pool table data ..  		DataView delete_pool_data = this.EnvData.FindData ("Pool"' string.Format ("Name = '{0}' Or Pool_Id = '{1}'"' new object[] {  			QueueItems ["Name"]'  			QueueItems ["Pool_Id"]  		})' "Pool_Id"' DataViewRowState.Unchanged);  		// get pool id ..  		string id = delete_pool_data.ToTable ().Rows [0] ["Pool_Id"].ToString ();  		// read machine pool table data ..  		DataView delete_machine_pool_data = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' new object[] {  			id  		})' "Pool_Id"' DataViewRowState.Unchanged);  		DataTable machinepooltable = delete_machine_pool_data.ToTable ()' pooltable = delete_pool_data.ToTable ();  		//DataRow[]  		//           JobGroupRows = JobGroupInfo.Select(exp)'  		// 先刪除MachinePool，再操作Pool  		// bind database command ..  		string cmd = " Select count(*) From Machine_Pool ";  		cmd += " Inner Join Pool On Machine_Pool.Pool_Id =Pool.Pool_Id ";  		cmd += " Where Pool.Pool_Id = ?Pool_Id";  		MySqlCommand command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		if (this.EnvData.IsExistJobMachineId (command) > 0) {  			cmd = "Delete From Machine_Pool Where Pool_Id = ?Pool_Id; ";  			cmd += "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		else {  			cmd = "Delete From Pool Where Pool_Id = ?Pool_Id ";  		}  		// define table collection ..  		DataSet pds = new DataSet ();  		// create text command dictionary ..  		IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  		// add to table collection ..  		pds.Tables.Add (machinepooltable);  		pds.Tables.Add (pooltable);  		// add commands ..  		command = new MySqlCommand (cmd);  		command.Parameters.AddWithValue ("?Pool_Id"' id);  		TextCommands.Add (machinepooltable.TableName' command);  		TextCommands.Add (pooltable.TableName' command);  		// sync data ..  		this.EnvData.WriteDataPool (pds' TextCommands);  		// response result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		machinepooltable.Dispose ();  		pooltable.Dispose ();  		pds.Dispose ();  		delete_machine_pool_data.Dispose ();  		delete_pool_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- A/U:Job Queue Info Case Workflow            ??Dispose???  case Client2Server.CommunicationType.JOBQUEUEADD:  case Client2Server.CommunicationType.JOBQUEUEUPDATE:  	try {  		// declare error flag ..  		bool HasError = false;  		#region 获取原有数据/结构  		// create filter conditions string ..  		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Name = '{0}' Or Job_Group_Id = '{1}'"' new object[] {  				QueueItems ["Name"]'  				QueueItems ["Job_Group_Id"]  			});  		}  		else {  			filter = string.Format ("Name = '{0}'"' new object[] {  				QueueItems ["Name"]  			});  		}  		DataView view_job_group_data = null;  		// job queue update action ..  		if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  			// read job group table data ..  			view_job_group_data = this.EnvData.FindData ("job_group"' filter' "Name"' DataViewRowState.Unchanged);  		}  		else {  			// job queue add-in action ..  			view_job_group_data = this.EnvData.ReadDataSchema ("Job_Group").DefaultView;  		}  		// define temporary data structure ..  		IList<DataTable> jtables = new List<DataTable> {  			this.EnvData.ReadDataSchema ("Job_Group")'  			this.EnvData.ReadDataSchema ("Job_Attr")'  			this.EnvData.ReadDataSchema ("Job")'  			this.EnvData.ReadDataSchema ("Job_History")  		};  		#endregion  		#region 添加、加工数据  		// generate new job globally unique identifier ..  		Guid id = Guid.NewGuid ();  		// declare frames and command variable ..  		int start = 0' end = 0' ps = 0;  		string command = string.Empty;  		// assign start' end' packetsize and command attributes ..  		if (QueueItems.ContainsKey ("Start") && QueueItems.ContainsKey ("End") && QueueItems.ContainsKey ("Packet_Size") && QueueItems.ContainsKey ("Command")) {  			start = Convert.ToInt32 (QueueItems ["Start"]);  			end = Convert.ToInt32 (QueueItems ["End"]);  			ps = Convert.ToInt32 (QueueItems ["Packet_Size"]);  			command = QueueItems ["Command"].ToString ().Trim ();  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		// confirm use alienbrain extension ..  		if (QueueItems ["ABName"] != null && !string.IsNullOrEmpty (QueueItems ["ABName"].ToString ()) && QueueItems ["ABPath"] != null && !string.IsNullOrEmpty (QueueItems ["ABPath"].ToString ())) {  			QueueItems ["Status"] = Convert.ToUInt16 (JobStatusFlag.CHECKING);  		}  		if (QueueItems.ContainsKey ("ABUpdateOnly")) {  			if (QueueItems ["ABUpdateOnly"].ToString () == "True")  				QueueItems ["ABUpdateOnly"] = 1;  			else  				QueueItems ["ABUpdateOnly"] = 0;  		}  		#endregion  		foreach (DataTable table in jtables) {  			// define table collection ..  			DataSet jds = new DataSet ();  			// declare data row variable ..  			DataRow row = null;  			#region JobTable  Process  			if (table.TableName.Equals ("job")) {  				#region Process Job Data Section  				for (int i = start; i <= end; i = i + ps) {  					int _start = -1' _end = -1;  					if ((i + ps) - 1 <= end) {  						_start = i;  						_end = (i + ps) - 1;  					}  					else {  						_start = i;  						_end = end;  					}  					// create new row ..  					row = table.NewRow ();  					//   					row ["Job_Id"] = i;  					if (view_job_group_data.Count > 0) {  						// get the job group id ..  						row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  					}  					else {  						// assign the job group id ..  						row ["Job_Group_Id"] = id.ToString ().ToUpper ();  					}  					// 替換字符串，這樣Maya才能接受command ..  					row ["Command"] = command.Replace ("#S"' _start.ToString ()).Replace ("#E"' _end.ToString ()).Trim ();  					// complete added ..  					table.Rows.Add (row);  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			#region  			else {  				// create new row ..  				row = table.NewRow ();  				if (view_job_group_data.Count > 0) {  					// get the job group id ..  					row ["Job_Group_Id"] = new Guid (view_job_group_data.ToTable ().Rows [0] ["Job_Group_Id"].ToString ()).ToString ().ToUpper ();  				}  				else {  					// assign the job group id ..  					row ["Job_Group_Id"] = id.ToString ().ToUpper ();  				}  				#region Process History Frames Column  				if (table.TableName == "job_history" && table.Columns.Contains ("Frames")) {  					row ["Frames"] = string.Format ("{0}-{1} [{2}]"' QueueItems ["Start"]' QueueItems ["End"]' QueueItems ["Packet_Size"]);  				}  				#endregion  				#region mapping column ..  				foreach (KeyValuePair<string' object> kv in QueueItems) {  					if (table.Columns.Contains (kv.Key)) {  						#region Mapping Machine Foreign Key  						if (kv.Key.IndexOf ("Machine") > 0) {  							// read machine table data ..  							DataView view_machine_data = this.EnvData.FindData ("machine"' string.Format ("Name = '{0}'"' new object[] {  								kv.Value  							})' "Machine_Id"' DataViewRowState.Unchanged);  							if (view_machine_data.ToTable ().Rows.Count > 0)  								// get machine id ..  								row [kv.Key] = view_machine_data.ToTable ().Rows [0] ["Machine_Id"].ToString ();  							continue;  						}  						#endregion  						// mapping other columns ..  						row [kv.Key] = kv.Value;  					}  				}  				#endregion  				// complete added ..  				table.Rows.Add (row);  				// add to table collection ..  				jds.Tables.Add (table);  			}  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			#region Read Job Relation Tables Data  			// job attribute table ..  			DataView view_job_attr_data = this.EnvData.FindData ("job_attr"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// job table ..  			DataView view_job_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}'"' new object[] {  				row ["Job_Group_Id"]  			})' "Job_Group_Id"' DataViewRowState.Unchanged);  			// create job relation data row count ..  			IDictionary<string' int> DataRecords = new Dictionary<string' int> {  				{  					view_job_group_data.Table.TableName'  					view_job_group_data.Count  				}'  				{  					view_job_attr_data.Table.TableName'  					view_job_attr_data.Count  				}'  				{  					view_job_data.Table.TableName'  					view_job_data.Count  				}'  			};  			#endregion  			#region Process History Data Section  			if (table.TableName == "job_history") {  				//DataView view_jobhistory_data = this.EnvData.FindData(  				//"job_history"'  				//string.Format("Submit_Acct = '{0}'"' new object[] { row["Submit_Acct"] })'  				//"Submit_Time"'  				//DataViewRowState.Unchanged);  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				//if (view_jobhistory_data.ToTable().Rows.Count >= 50)  				//{  				//    cmd += " Update Job_History Set ";  				//    cmd += " Job_Group_Id = ?Job_Group_Id' Name = ?Name' Frames = @Frames' ";  				//    cmd += " Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time ";  				//    cmd += " Where Submit_Time = (Select Min(Submit_Time) From Job_History) ";？？？？？如何实现？？？？？  				//    cmd += " And Submit_Acct = @Submit_Acct ";  				//}  				//else  				//{  				cmd += " Insert Into Job_History ";  				cmd += " (Job_Group_Id' Name' Frames' Submit_Acct' Submit_Time) ";  				cmd += " Values ";  				cmd += " (?Job_Group_Id' ?Name' ?Frames' ?Submit_Acct' ?Submit_Time) ";  				//}  				// add commands ..  				comm.CommandText = cmd;  				comm.CommandType = CommandType.Text;  				TextCommands.Add (table.TableName' comm);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				continue;  			}  			#endregion  			#region update job data ..  			if (DataRecords [table.TableName] > 0) {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEADD) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand comm = new MySqlCommand ();  				#region Update_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Update Job_Group Set ";  					cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  					cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  					cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job_attr":  					cmd = " Update Job_Attr Set ";  					cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  					cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  					cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  					cmd += " Where ";  					cmd += " Job_Group_Id = ?Job_Group_Id ";  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				case "job":  					cmd = " Select count(*)  From Job ";  					cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  					cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  					comm = new MySqlCommand (cmd);  					comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  					if (this.EnvData.IsExistJobMachineId (comm) > 0) {  						cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  						cmd += " Insert Into Job ";  						cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  						cmd += " Values ";  						cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  					}  					comm.CommandText = cmd;  					comm.CommandType = CommandType.Text;  					// add commands ..  					TextCommands.Add (table.TableName' comm);  					// sync data ..  					this.EnvData.WriteData (jds' TextCommands);  					break;  				}  				#endregion  			}  			#endregion  			#region add new job data ..  			else {  				if (ActionHeader == Client2Server.CommunicationType.JOBQUEUEUPDATE) {  					HasError = true;  					break;  				}  				string cmd = string.Empty;  				MySqlCommand Jcommand = new MySqlCommand ();  				#region Insert_Bind DataBase Command  				switch (table.TableName) {  				case "job_group":  					cmd = " Insert Into Job_Group ";  					cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  					cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  					cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  					break;  				case "job_attr":  					cmd = " Insert Into Job_Attr ";  					cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  					cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  					cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  					break;  				case "job":  					cmd = " Insert Into Job ";  					cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  					cmd += " Values ";  					cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  					break;  				}  				#endregion  				Jcommand.CommandText = cmd;  				Jcommand.CommandType = CommandType.Text;  				// add commands ..  				TextCommands.Add (table.TableName' Jcommand);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  			}  			#endregion  		}  		#region 記錄新增任務的Job_Group_Id  		IList<string> NewJobID = new List<string> ();  		foreach (DataRow dr in jtables [0].Rows) {  			NewJobID.Add (dr ["Job_Group_Id"].ToString ());  		}  		#endregion  		if (HasError) {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		else {  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' NewJobID);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh job data list ..  			DisplayBase.CanJobUpdate = true;  		}  		view_job_group_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK-- Delete Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEDELETE:  	try {  		if (((IList<string>)QueueItems ["DeleteList"]).Count > 0) {  			// enumerable delete job for list ..  			foreach (string job in ((IList<string>)QueueItems ["DeleteList"])) {  				// define filter expression ..  				string exp = string.Format ("Job_Group_Id = '{0}'"' job);  				// read job data ..  				DataTable JobGroupInfo = this.EnvData.ReadData ("Job_Group")' JobAttrInfo = this.EnvData.ReadData ("Job_Attr")' JobInfo = this.EnvData.ReadData ("Job");  				DataRow[] JobGroupRows = JobGroupInfo.Select (exp)' JobAttrRows = JobAttrInfo.Select (exp)' JobRows = JobInfo.Select (exp);  				#region Get Process Machine Group  				// create send to machine of delete list ..  				Hashtable __machine = new Hashtable ();  				// get machine processing info ..  				var machine_query = from mq in JobRows.AsEnumerable ()  				group mq by mq.Field<string> ("Proc_Machine") into signle_machine  				select signle_machine.ToList ();  				// regroup job list ..  				foreach (var group in machine_query) {  					if (group.Count > 0 && !string.IsNullOrEmpty (group [0] ["Proc_Machine"].ToString ())) {  						IList<uint> list = new List<uint> ();  						foreach (DataRow row in group) {  							list.Add (Convert.ToUInt32 (row ["Job_Id"]));  						}  						__machine.Add (group [0] ["Proc_Machine"]' list);  					}  				}  				// send to processing render farm ..  				if (__machine.Count > 0) {  					// 發送指令到算圖機  					this.DeleteFunc (__machine);  				}  				#endregion  				// delete relation data ..  				for (int i = 0; i < JobGroupRows.Length; i++)  					JobGroupRows [i].Delete ();  				for (int i = 0; i < JobAttrRows.Length; i++)  					JobAttrRows [i].Delete ();  				for (int i = 0; i < JobRows.Length; i++)  					JobRows [i].Delete ();  				// bind database command ..  				string cmd = " Select count(*) From Job ";  				cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " Inner Join Job_Attr On Job_Attr.Job_Group_Id = Job_Group.Job_Group_Id ";  				cmd += " where Job_Group.Job_Group_Id = ?Job_Group_Id";  				//cmd.Replace("?Job_Group_Id"' string.Format("'{0}'"' job));  				MySqlCommand command = new MySqlCommand (cmd);  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				if (this.EnvData.IsExistJobMachineId (command) > 0) {  					cmd = " Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Attr Where Job_Group_Id = ?Job_Group_Id ;";  					cmd += " Delete From Job_Group Where Job_Group_Id = ?Job_Group_Id ;";  				}  				else {  					cmd = string.Empty;  				}  				// define tables collection ..  				DataSet pds = new DataSet ();  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				command = new MySqlCommand (cmd);  				// add to table collection ..  				pds.Tables.Add (JobGroupInfo);  				pds.Tables.Add (JobAttrInfo);  				pds.Tables.Add (JobInfo);  				// add commands ..  				command.Parameters.AddWithValue ("?Job_Group_Id"' job);  				TextCommands.Add (JobGroupInfo.TableName' command);  				TextCommands.Add (JobAttrInfo.TableName' command);  				TextCommands.Add (JobInfo.TableName' command);  				// sync data ..  				this.EnvData.WriteData (pds' TextCommands);  				pds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // pause all have not yet sent of job ..  #region --F7300290--OK--  Pause Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEPAUSE:  	try {  		if (QueueItems.ContainsKey ("Job_Pause_IDlist") && QueueItems.ContainsKey ("Status")) {  			foreach (string Ids in (string[])QueueItems ["Job_Pause_IDlist"]) {  				DataView view_Job_data = this.EnvData.FindData ("job_group"' string.Format ("Job_Group_Id = '{0}'"' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged);  				#region 暂停或重启 更新Job_Group表  				// create text command dictionary ..  				IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  				// define table collection ..  				DataSet jds = new DataSet ();  				// define temporary data structure ..  				DataTable jtable = this.EnvData.ReadDataSchema ("Job_Group");  				DataRow jrow = jtable.NewRow ();  				//添加更新後的數據 mapping column ..  				jrow ["Job_Group_Id"] = Ids;  				jrow ["Status"] = Convert.ToInt32 (QueueItems ["Status"]);  				foreach (DataColumn dc in view_Job_data.ToTable ().Columns) {  					if (!dc.AllowDBNull) {  						//查詢數據中不存在的數據行（保證所有不許空的數據）  						if (!QueueItems.ContainsKey (dc.ColumnName) && view_Job_data.ToTable ().Rows.Count > 0) {  							jrow [dc.ColumnName] = view_Job_data.ToTable ().Rows [0] [dc.ColumnName];  						}  					}  				}  				// complete added ..  				jtable.Rows.Add (jrow);  				#endregion  				#region 重启时清空job的proc_machine等信息，以便重新算图  				if (Convert.ToInt16 (QueueItems ["Status"]) != 2) {  					DataTable Job_attr_data = this.EnvData.FindData ("job"' string.Format ("Job_Group_Id = '{0}' And Finish_Time Is Null And Proc_Machine Is Not Null "' Ids.Trim ())' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  					if (Job_attr_data.Rows.Count > 0) {  						// define table collection ..  						DataSet jobds = new DataSet ();  						// define temporary data structure ..  						DataTable jobtable = this.EnvData.ReadDataSchema ("Job");  						foreach (DataRow dr in Job_attr_data.Rows) {  							// create new row ..  							DataRow jobrow = jobtable.NewRow ();  							//添加更新後的數據 mapping column ..  							jobrow ["Proc_Machine"] = null;  							jobrow ["Start_Time"] = DBNull.Value;  							jobrow ["Finish_Time"] = DBNull.Value;  							// 填充未更新數據 check the data column is allow DbNull type ..  							foreach (DataColumn dc in Job_attr_data.Columns) {  								if (!dc.AllowDBNull) {  									jobrow [dc.ColumnName] = dr [dc.ColumnName];  								}  							}  							jobtable.Rows.Add (jobrow);  						}  						jobds.Tables.Add (jobtable);  						string jcmd = " Update Job Set  ";  						jcmd += "  Proc_Machine = ?Proc_Machine'  Start_Time = ?Start_Time'  Finish_Time = ?Finish_Time'    ";  						jcmd += "  Where  ";  						jcmd += "  Job_Id = ?Job_Id ";  						// create text command dictionary ..  						IDictionary<string' MySqlCommand> JobCommand = new Dictionary<string' MySqlCommand> ();  						MySqlCommand Jcommand = new MySqlCommand (jcmd);  						Jcommand.CommandType = CommandType.Text;  						//// add commands ..  						JobCommand.Add (jobtable.TableName' Jcommand);  						// sync data ..  						this.EnvData.WriteData (jobds' JobCommand);  						Job_attr_data.Dispose ();  						jobds.Dispose ();  					}  				}  				#endregion  				// add to table collection ..  				jds.Tables.Add (jtable);  				string cmd = " Update Job_Group Set  ";  				cmd += "  Status = ?Status   ";  				cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  				MySqlCommand command = new MySqlCommand (cmd);  				command.CommandType = CommandType.Text;  				//// add commands ..  				TextCommands.Add (jtable.TableName' command);  				// sync data ..  				this.EnvData.WriteData (jds' TextCommands);  				view_Job_data.Dispose ();  				jds.Dispose ();  			}  			// response result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // current empty ..  #region --F7300290--OK-- Repeat Job Queue Case Workflow  case Client2Server.CommunicationType.JOBQUEUEREPEAT:  	try {  	}  	catch {  	}  	break;  #endregion  // Set Jobs Priority ..  #region --F7300290--OK-- U:Set Jobs Priority Case Workflow  case Client2Server.CommunicationType.JOBPRIORITY:  	try {  		if (QueueItems.ContainsKey ("Job_Group_Id") && QueueItems.ContainsKey ("Priority")) {  			#region 獲取當前要更改的數據行所有數據 read job_attr table data ..  			DataView view_machine_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"])' "Job_Group_Id"' DataViewRowState.Unchanged);  			#endregion  			// create text command dictionary ..  			IDictionary<string' MySqlCommand> TextCommands = new Dictionary<string' MySqlCommand> ();  			// define table collection ..  			DataSet jds = new DataSet ();  			#region 獲取數據結構，並組合新數據  			// define temporary data structure ..  			DataTable jtable = this.EnvData.ReadDataSchema ("job_attr");  			// create new row ..  			DataRow jrow = jtable.NewRow ();  			//添加更新後的數據 mapping column ..  			foreach (KeyValuePair<string' object> kv in QueueItems) {  				if (jtable.Columns.Contains (kv.Key))  					jrow [kv.Key] = kv.Value;  			}  			// 填充未更新數據 check the data column is allow DbNull type ..  			foreach (DataColumn dc in view_machine_data.ToTable ().Columns) {  				if (!dc.AllowDBNull) {  					//查詢數據中不存在的數據行（保證所有不許空的數據）  					if (!QueueItems.ContainsKey (dc.ColumnName) && view_machine_data.ToTable ().Rows.Count > 0) {  						jrow [dc.ColumnName] = view_machine_data.ToTable ().Rows [0] [dc.ColumnName];  					}  				}  			}  			// complete added ..  			jtable.Rows.Add (jrow);  			#endregion  			// add to table collection ..  			jds.Tables.Add (jtable);  			string cmd = " Update Job_Attr Set ";  			cmd += "  Priority = ?Priority";  			cmd += "  Where Job_Group_Id = ?Job_Group_Id ";  			//// add commands ..  			MySqlCommand command = new MySqlCommand (cmd);  			command.CommandType = CommandType.Text;  			TextCommands.Add (jtable.TableName' command);  			// sync data ..  			this.EnvData.WriteData (jds' TextCommands);  			// response error result ..  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			// wait for write data finish ..  			Thread.Sleep (100);  			// refresh machine data list ..  			DisplayBase.CanJobUpdate = true;  			view_machine_data.Dispose ();  			jtable.Dispose ();  			jds.Dispose ();  		}  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--  View Job History Record Case Workflow  case Client2Server.CommunicationType.JOBHISTORYRECORD:  	try {  		int SeleectNum = 100;  		if (QueueItems.ContainsKey ("Num")) {  			SeleectNum = Convert.ToInt32 (QueueItems ["Num"].ToString ().Trim ());  		}  		DataTable Job_History = this.EnvData.FindData ("Job_History"' ""' "Submit_Time"' DataViewRowState.Unchanged).ToTable ();  		var JobRecord = (from records in Job_History.AsEnumerable ()  		orderby records.Field<DateTime> ("Submit_Time") descending  		select records).Take (SeleectNum);  		DataTable JobHistory = this.EnvData.ReadDataSchema ("Job_History");  		foreach (var record in JobRecord) {  			DataRow dr = JobHistory.NewRow ();  			for (int i = 0; i < JobHistory.Columns.Count; i++) {  				// assign machine ..  				dr [i] = record [i].ToString ();  			}  			JobHistory.Rows.Add (dr);  		}  		JobHistory.Columns.Remove ("Submit_Acct");  		JobHistory.Columns.Remove ("Submit_Time");  		// response result ..  		if (JobHistory.Rows.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobHistory);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_History.Dispose ();  		JobHistory.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  // Get Detail through HistoryForm  #region --F7300290--OK-- S:View Job_Group_Info by Job_Group_ID Case Workflow  case Client2Server.CommunicationType.VIEWSINGLEJOBINFO:  	try {  		// create filter conditions string   		string filter = string.Empty;  		if (QueueItems.ContainsKey ("Job_Group_Id")) {  			filter = string.Format ("Job_Group_Id = '{0}'"' QueueItems ["Job_Group_Id"]);  		}  		DataSet Job_Info = new DataSet ();  		DataTable view_Job_Group = this.EnvData.FindData ("Job_Group"' filter' "Job_Group_Id"' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Attr_Info = this.EnvData.FindData ("Job_Attr"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		DataTable Job_Command_Info = this.EnvData.FindData ("Job"' filter' ""' DataViewRowState.Unchanged).ToTable ();  		//數據不完整  		if (view_Job_Group.Rows.Count == 0 || Job_Attr_Info.Rows.Count == 0 || Job_Command_Info.Rows.Count == 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' null);  			break;  		}  		#region 自定義Job_Group資料結構（去除……加入Command），並獲取數據  		DataTable Job_Group_Info = this.EnvData.ReadDataSchema ("Job_Group");  		Job_Group_Info.Columns.Remove ("Submit_Acct");  		Job_Group_Info.Columns.Remove ("Submit_Machine");  		Job_Group_Info.Columns.Remove ("Submit_Time");  		Job_Group_Info.Columns.Remove ("Status");  		Job_Group_Info.Columns.Remove ("Start_Time");  		Job_Group_Info.Columns.Remove ("Finish_Time");  		Job_Group_Info.Columns.Add ("Command"' typeof(System.String));  		DataRow JobRow = Job_Group_Info.NewRow ();  		foreach (DataColumn dc in view_Job_Group.Columns) {  			//查詢數據中存在的數據行  			if (Job_Group_Info.Columns.Contains (dc.ColumnName) && view_Job_Group.Rows.Count > 0) {  				JobRow [dc.ColumnName] = view_Job_Group.Rows [0] [dc.ColumnName];  			}  		}  		string CommandText = Job_Command_Info.Rows [0] ["Command"].ToString ();  		JobRow ["Command"] = CommandText;  		Job_Group_Info.Rows.Add (JobRow);  		#endregion  		//合并Job_Attr與Job_Group_Info數據  		Job_Info.Tables.Add (Job_Attr_Info);  		Job_Info.Tables.Add (Job_Group_Info);  		if (Job_Info.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Job_Info);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		Job_Attr_Info.Dispose ();  		Job_Command_Info.Dispose ();  		view_Job_Group.Dispose ();  		Job_Group_Info.Dispose ();  		Job_Info.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region --F7300290--OK--View Job Status Case Workflow  case Client2Server.CommunicationType.VIEWJOBSTATUS:  	try {  		// read all match data (filter job status completed and error flag) ..  		DataView view_job_group_data = this.EnvData.FindData ("Job_Group"' string.Format ("[Status] <> '{0}'"' (ushort)JobStatusFlag.COMPLETED)' "Submit_Time"' DataViewRowState.Unchanged);  		// create empty object data table' include the data schema ..  		DataTable job_attr_table = this.EnvData.ReadDataSchema ("Job_Attr")' job_table = this.EnvData.ReadDataSchema ("Job");  		foreach (DataRow row in view_job_group_data.Table.Rows) {  			// get job id ..！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！  			string id = row ["Job_Group_Id"].ToString ();  			// read and custom match data tbale' add to dataset ..  			DataView view_job_attr_data = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the attributes to table ..  			job_attr_table.Merge (view_job_attr_data.ToTable ());  			DataView view_job_data = this.EnvData.FindData ("Job"' string.Format ("Job_Group_Id = '{0}'"' id)' "Job_Group_Id"' DataViewRowState.Unchanged);  			// merge the job to table ..  			job_table.Merge (view_job_data.ToTable ());  		}  		// create job dataset viewer object ..  		DataSet JobDatas = new DataSet ("JobViewer");  		JobDatas.Tables.Add (view_job_group_data.ToTable ());  		JobDatas.Tables.Add (job_attr_table);  		JobDatas.Tables.Add (job_table);  		// commit changes ..  		JobDatas.AcceptChanges ();  		// response result ..  		if (JobDatas.Tables.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' JobDatas);  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_group_data.Dispose ();  		job_attr_table.Dispose ();  		job_table.Dispose ();  		JobDatas.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  #region View Job Process Output Case Workflow  ！！！！！！未測試！！！！！！！！！  case Client2Server.CommunicationType.VIEWJOBOUTPUT:  	try {  		// find match data ..  		DataView view_job_data = this.EnvData.FindData ("Job"' QueueItems' DataViewRowState.Unchanged);  		// response result ..  		if (view_job_data.Count > 0) {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' view_job_data.ToTable ());  		}  		else {  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR' null);  		}  		view_job_data.Dispose ();  	}  	catch (Exception ex) {  		// response error result ..  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	break;  #endregion  }  
Missing Default,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following switch statement is missing a default case: switch (table.TableName) {  case "job_group":  	cmd = " Update Job_Group Set ";  	cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  	cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  	cmd += " Finish_Time = ?Finish_Time' Note = ?Note ";  	cmd += " Where ";  	cmd += " Job_Group_Id = ?Job_Group_Id ";  	comm.CommandText = cmd;  	comm.CommandType = CommandType.Text;  	// add commands ..  	TextCommands.Add (table.TableName' comm);  	// sync data ..  	this.EnvData.WriteData (jds' TextCommands);  	break;  case "job_attr":  	cmd = " Update Job_Attr Set ";  	cmd += " Project = ?Project' Start = ?Start' End= ?End' Packet_Size = ?Packet_Size' ";  	cmd += " Proc_Type = ?Proc_Type' WaitFor= ?WaitFor' Priority = ?Priority' ";  	cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  	cmd += " Where ";  	cmd += " Job_Group_Id = ?Job_Group_Id ";  	comm.CommandText = cmd;  	comm.CommandType = CommandType.Text;  	// add commands ..  	TextCommands.Add (table.TableName' comm);  	// sync data ..  	this.EnvData.WriteData (jds' TextCommands);  	break;  case "job":  	cmd = " Select count(*)  From Job ";  	cmd += " Inner Join Job_Group On Job.Job_Group_Id = Job_Group.Job_Group_Id  ";  	cmd += " Where Job.Job_Group_Id = ?Job_Group_Id ";  	comm = new MySqlCommand (cmd);  	comm.Parameters.AddWithValue ("?Job_Group_Id"' table.Rows [0] ["Job_Group_Id"].ToString ());  	if (this.EnvData.IsExistJobMachineId (comm) > 0) {  		cmd = "  Delete From Job Where Job_Group_Id = ?Job_Group_Id ;";  		cmd += " Insert Into Job ";  		cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  		cmd += " Values ";  		cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time'?Finish_Time' ?OutputLog)";  	}  	comm.CommandText = cmd;  	comm.CommandType = CommandType.Text;  	// add commands ..  	TextCommands.Add (table.TableName' comm);  	// sync data ..  	this.EnvData.WriteData (jds' TextCommands);  	break;  }  
Missing Default,RenbarServerGUI,ProtocolBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Protocol.cs,Protocol,The following switch statement is missing a default case: switch (table.TableName) {  case "job_group":  	cmd = " Insert Into Job_Group ";  	cmd += " (Job_Group_Id' Name' Submit_Machine' Submit_Acct' Submit_Time' ";  	cmd += " First_Pool' Second_Pool' Status' Start_Time' Finish_Time' Note) ";  	cmd += " Values ";  	cmd += " (?Job_Group_Id' ?Name' ?Submit_Machine' ?Submit_Acct' ?Submit_Time' ";  	cmd += " ?First_Pool' ?Second_Pool' ?Status' ?Start_Time' ?Finish_Time' ?Note) ";  	break;  case "job_attr":  	cmd = " Insert Into Job_Attr ";  	cmd += " (Job_Group_Id' Project' Start' End' Packet_Size' Proc_Type' ";  	cmd += " WaitFor' Priority' ABName' ABPath' ABUpdateOnly) ";  	cmd += " Values ";  	cmd += " (?Job_Group_Id' ?Project' ?Start' ?End' ?Packet_Size' ?Proc_Type' ";  	cmd += " ?WaitFor' ?Priority' ?ABName' ?ABPath' ?ABUpdateOnly) ";  	break;  case "job":  	cmd = " Insert Into Job ";  	cmd += " (Job_Group_Id' Command' Proc_Machine' Start_Time' Finish_Time' OutputLog) ";  	cmd += " Values ";  	cmd += " (?Job_Group_Id' ?Command' ?Proc_Machine' ?Start_Time' ?Finish_Time' ?OutputLog) ";  	break;  }  
Missing Default,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,SyncData,The following switch statement is missing a default case: switch (table.TableName) {  case "job_group":  	cmd = " Update Job_Group Set ";  	cmd += " Submit_Machine = ?Submit_Machine' Submit_Acct = ?Submit_Acct' Submit_Time = ?Submit_Time' ";  	cmd += " First_Pool = ?First_Pool' Second_Pool = ?Second_Pool' Status = ?Status' ";  	cmd += " Start_Time = ?Start_Time' Finish_Time = ?Finish_Time' Note = ?Note ";  	cmd += " Where ";  	cmd += " Job_Group_Id = ?Job_Group_Id ";  	break;  case "job_attr":  	cmd = " Update Job_Attr Set ";  	cmd += " Project = ?Project' Start = ?Start' End = ?End' Packet_Size = ?Packet_Size' ";  	cmd += " Proc_Type = ?Proc_Type' WaitFor = ?WaitFor' Priority = ?Priority' ";  	cmd += " ABName = ?ABName' ABPath = ?ABPath' ABUpdateOnly = ?ABUpdateOnly ";  	cmd += " Where ";  	cmd += " Job_Group_Id = ?Job_Group_Id ";  	break;  case "job":  	cmd = " Update Job Set ";  	cmd += " Command = ?Command' Proc_Machine = ?Proc_Machine' Start_Time = ?Start_Time' ";  	cmd += " Finish_Time = ?Finish_Time' OutputLog = ?OutputLog ";  	cmd += " Where ";  	cmd += " Job_Id = ?Job_Id ";  	break;  case "machine":  	cmd = " Update Machine Set ";  	cmd += " Name = ?Name' Ip = ?Ip' IsEnable = ?IsEnable' Last_Online_Time = ?Last_Online_Time' ";  	cmd += " IsRender = ?IsRender' Status = ?Status' Priority = ?Priority' Note = ?Note ";  	cmd += " Where ";  	cmd += " Machine_Id = ?Machine_Id ";  	break;  }  
Missing Default,RenbarServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarServerGUI\Render.cs,RenderBehavior,The following switch statement is missing a default case: switch (Type) {  #region Get Completed Jobs Workflow  case Server2Render.CommunicationType.COMPLETEDJOBS:  	try {  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.COMPLETEDJOBS)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// declare empty dataset' and copy render return data value ..  			DataSet Data = new DataSet ();  			DataTable renderData = ((DataTable)__returnObject.Value).Copy ();  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return completed rows count ..  			OutputObject.Add ("Completed"' renderData.Rows.Count);  			// analysis remote object ..  			foreach (DataRow row in renderData.Rows) {  				// define row key ..  				string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = {0} And Finish_Time Is Null"' sid);  				lock (this.DispatchedList) {  					// remove dispatched record ..  					if (this.DispatchedList.Contains (row ["Job_Id"]))  						this.DispatchedList.Remove (row ["Job_Id"]);  				}  				// find data from memory database ..  				DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' all_jobs = this.EnvData.FindData ("Job"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable ();  				if (job_group.Rows.Count > 0 && all_jobs.Rows.Count > 0 && job.Rows.Count > 0) {  					if (row ["Status"] != null && row ["Status"].ToString () != string.Empty) {  						if (Convert.ToUInt16 (row ["Status"]) == Convert.ToUInt16 (JobStatusFlag.ERROR)) {  							job.Rows [0] ["Proc_Machine"] = InputObject ["Host_Id"];  							job.Rows [0] ["Start_Time"] = row ["Start_Time"];  							job.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  						}  					}  					else  						// update sub job finish data ..  						job.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  					if (!this.Completed.ContainsKey (id))  						// add to completed collection ..  						this.Completed.Add (id' all_jobs.Rows.Count);  					if (this.Completed.ContainsKey (id))  						// reduction count quantity ..  						this.Completed [id]--;  					else  						continue;  					IList<string> cid = new List<string> ();  					foreach (KeyValuePair<string' int> kv in this.Completed) {  						// update primary job finish data ..  						if (kv.Value == 0) {  							cid.Add (kv.Key);  							if (row ["Status"] != null && row ["Status"].ToString () != string.Empty) {  								if (Convert.ToUInt16 (row ["Status"]) == Convert.ToUInt16 (JobStatusFlag.ERROR)) {  									job_group.Rows [0] ["Start_Time"] = row ["Start_Time"];  									job_group.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  									job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  									job_group.Rows [0] ["Note"] = "Can't operation the job' please confirm the job command attribute.";  								}  							}  							else {  								job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.COMPLETED);  								job_group.Rows [0] ["Finish_Time"] = row ["Finish_Time"];  							}  						}  					}  					// clear completed collection ..  					foreach (string s in cid) {  						if (this.Completed.ContainsKey (s))  							this.Completed.Remove (s);  					}  					// merge data ..  					Data.Merge (job_group);  					Data.Merge (job);  				}  			}  			if (Data.Tables.Count > 0) {  				// accpet all changes ..  				Data.AcceptChanges ();  				// integration to job data collection ..  				SyncData (Data);  			}  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Dispatch Job Workflow  case Server2Render.CommunicationType.DISPATCH:  	try {  		DataSet Data = new DataSet ();  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// create dispatch data list ..  		IList<Dispatch> Dispatchs = new List<Dispatch> ();  		// analysis waitFor' priority attribute and mapping machine event ..  		if (InputObject.ContainsKey ("Machine_Id") && InputObject.ContainsKey ("FreeCore") && InputObject.ContainsKey ("HasZero")) {  			#region Filtration waitFor Procedure  			// search queuing status rows ..  			DataTable job_group_data = this.EnvData.FindData ("Job_Group"' "Status In (1' 6)"' null' DataViewRowState.Unchanged).ToTable ();  			#region Getting waitFor Data List  			// create queuing waitFor list ..  			IList<string> waitForList = new List<string> ();  			// search waitfor ..  			foreach (DataRow wrow in job_group_data.Rows) {  				#region Analysis Job Machine Pool  				DataTable machine_pool_data1 = null' machine_pool_data2 = null;  				machine_pool_data1 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["First_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  				if (!DBNull.Value.Equals (wrow ["Second_Pool"])) {  					machine_pool_data2 = this.EnvData.FindData ("Machine_Pool"' string.Format ("Pool_Id = '{0}'"' wrow ["Second_Pool"])' null' DataViewRowState.Unchanged).ToTable ();  				}  				bool flag = false;  				foreach (DataRow __row1 in machine_pool_data1.Rows) {  					if (__row1 ["Machine_Id"].Equals (InputObject ["Machine_Id"])) {  						flag = true;  						break;  					}  				}  				if (machine_pool_data2 != null) {  					foreach (DataRow __row2 in machine_pool_data2.Rows) {  						if (__row2 ["Machine_Id"] == InputObject ["Machine_Id"]) {  							flag = true;  							break;  						}  					}  				}  				if (!flag)  					continue;  				#endregion  				DataTable waitfor_data = this.EnvData.FindData ("Job_Attr"' string.Format ("WaitFor Is Not Null And Job_Group_Id = '{1}'"' DBNull.Value' wrow ["Job_Group_Id"])' null' DataViewRowState.Unchanged).ToTable ();  				// add to list ..  				if (waitfor_data.Rows.Count > 0) {  					DataRow[] validrow = job_group_data.Select (string.Format ("Status = {0} And Job_Group_Id = '{1}'"' Convert.ToUInt16 (JobStatusFlag.QUEUING)' waitfor_data.Rows [0] ["WaitFor"]));  					//  					if (validrow.Length > 0) {  						if (!waitForList.Contains (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ()))  							waitForList.Add (waitfor_data.Rows [0] ["Job_Group_Id"].ToString ());  					}  				}  			}  			#endregion  			// create sort list ..  			IDictionary<string' ushort> FiltrationJobs = new Dictionary<string' ushort> ();  			foreach (DataRow grow in job_group_data.Rows) {  				#region Confirm Pool Machines  				if (this.PoolMachine_Info.Count == 0) {  					string ExceptionMsg = "can't find pool machine relations.";  					// write to log file ..  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  					break;  				}  				else {  					string first = grow ["First_Pool"].ToString ().Trim ()' second = string.Empty;  					if (grow ["Second_Pool"] != null && grow ["Second_Pool"].ToString () != string.Empty)  						second = grow ["Second_Pool"].ToString ().Trim ();  					// check first pool ..  					if (this.PoolMachine_Info.ContainsKey (first) && !this.PoolMachine_Info [first].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ())) {  						if (!string.IsNullOrEmpty (second)) {  							// check second pool ..  							if (!this.PoolMachine_Info [second].Contains<string> (InputObject ["Machine_Id"].ToString ().Trim ()))  								continue;  						}  						else  							continue;  					}  				}  				#endregion  				// whether check this job exists waitFor list ..  				if (waitForList.Contains (grow ["Job_Group_Id"].ToString ()))  					continue;  				// find current job of queue status ..  				DataView __attr = this.EnvData.FindData ("Job_Attr"' string.Format ("Job_Group_Id = '{0}'"' grow ["Job_Group_Id"])' null' DataViewRowState.Unchanged);  				// add to ready dispatch list ..  				if (__attr.Count > 0) {  					if (!FiltrationJobs.ContainsKey (__attr [0] ["Job_Group_Id"].ToString ()))  						FiltrationJobs.Add (__attr [0] ["Job_Group_Id"].ToString ()' Convert.ToUInt16 (__attr [0] ["Priority"]));  				}  			}  			#endregion  			#region Getting Sub Job' And Setting Dispatch Structure  			// declare stop and package count flag ..  			bool stopDispatch = false;  			ushort retryCount = 0' packageCount = 0;  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return dispatch rows count ..  			OutputObject.Add ("Dispatch"' FiltrationJobs.Count);  			foreach (KeyValuePair<string' ushort> kv in FiltrationJobs.OrderByDescending (job => job.Value)) {  				string filter1 = string.Format ("Job_Group_Id = '{0}'"' kv.Key)' filter2 = string.Format ("Job_Group_Id = '{0}' And Proc_Machine Is Null"' kv.Key);  				// find job attribute ..  				DataTable job_attr_data = this.EnvData.FindData ("Job_Attr"' filter1' null' DataViewRowState.Unchanged).ToTable ();  				// find sub job ..  				DataTable job_data = this.EnvData.FindData ("Job"' filter2' "Job_Id Asc"' DataViewRowState.Unchanged).ToTable ();  				if (job_data.Rows.Count > 0) {  					if (job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim () == "Client") {  						if (!Convert.ToBoolean (InputObject ["HasZero"]))  							continue;  						InputObject ["FreeCore"] = 1;  					}  					// package dispatch data ..  					foreach (DataRow row in job_data.Rows) {  						if (packageCount == Convert.ToUInt16 (InputObject ["FreeCore"])) {  							stopDispatch = true;  							break;  						}  						// analysis command args ..  						string cmd = string.Empty' args = string.Empty;  						int idx = row ["Command"].ToString ().IndexOf ('-');  						if (idx > 0) {  							cmd = row ["Command"].ToString ().Substring (0' idx);  							args = row ["Command"].ToString ().Substring (idx' (row ["Command"].ToString ().Length) - idx);  						}  						lock (this.DispatchedList) {  							//if (this.DispatchedList.Contains(row["Job_Id"]))  							//    continue;  							//else  							//{  							//add to dispatched collection ..  							this.DispatchedList.Add (row ["Job_Id"]);  							Dispatchs.Add (new Dispatch () {  								Job_Group_Id = new Guid (kv.Key)'  								Job_Id = Convert.ToInt32 (row ["Job_Id"])'  								//Job_Id = Convert.ToString(row["Job_Id"])'  								Proc_Type = job_attr_data.Rows [0] ["Proc_Type"].ToString ().Trim ()'  								Command = cmd.Trim ()'  								Args = args.Trim ()  							});  							packageCount++;  							//}  						}  					}  					if (stopDispatch)  						break;  				}  				else {  					retryCount++;  					if (retryCount > 5) {  						DataTable errorRow = this.EnvData.FindData ("Job_Group"' filter1' null' DataViewRowState.Unchanged).ToTable ();  						if (errorRow.Rows.Count > 0) {  							// update fail info ..  							errorRow.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.ERROR);  							errorRow.Rows [0] ["Start_Time"] = DateTime.Now;  							errorRow.Rows [0] ["Finish_Time"] = DateTime.Now;  							errorRow.Rows [0] ["Note"] = "Can't dispatch job to render farm' please confirm the job attribute and sub job data.";  							// commit changes ..  							errorRow.AcceptChanges ();  							// assign to dataset ..  							Data.Tables.Add (errorRow);  							// integration to job data collection ..  							SyncData (Data);  						}  					}  					else  						continue;  				}  			}  			#endregion  		}  		if (Dispatchs.Count <= 0)  			return false;  		// anew package dispatch structure ..  		IDictionary<string' object> jobs = new Dictionary<string' object> {  			{  				"Dispatcher"'  				Dispatchs  			}  		};  		if (Socket.IsConnected) {  			// package and send object to remote machine ..  			Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.DISPATCH' jobs)));  			// receive remote machine data object ..  			object received = null;  			if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  				// convert correct object type ..  				__returnObject = (KeyValuePair<string' object>)received;  			// check the client has return object data is nullable type ..  			if (__returnObject.Key.Substring (0' 1) == "-")  				result = false;  			else  				result = true;  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Get Render IsBusy Status Workflow  case Server2Render.CommunicationType.ISBUSY:  	try {  		// declare list result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.ISBUSY)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// create new instance ..  			OutputObject = new Dictionary<string' object> ();  			// receive and assign remote object ..  			foreach (KeyValuePair<string' object> kv in (IDictionary<string' object>)__returnObject.Value)  				OutputObject.Add (kv.Key' kv.Value);  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  #region Get Running Jobs Workflow  case Server2Render.CommunicationType.RUNNINGJOBS:  	try {  		// declare dictionary result object ..  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// package and send object to remote machine ..  		Socket.Send (this.EnvSvr.Serialize (RenderObject.Package (Server2Render.CommunicationType.RUNNINGJOBS)));  		// receive remote machine data object ..  		object received = null;  		if ((received = this.EnvSvr.Deserialize (Socket.Receive ())) != null)  			// convert correct object type ..  			__returnObject = (KeyValuePair<string' object>)received;  		// check the client has return object data is nullable type ..  		if (__returnObject.Value == null)  			result = false;  		else {  			// declare empty dataset' and copy render return data value ..  			DataSet Data = new DataSet ();  			DataTable renderData = ((DataTable)__returnObject.Value).Copy ();  			// clear old data ..  			if (OutputObject.Count > 0)  				OutputObject.Clear ();  			// return running rows count ..  			OutputObject.Add ("Running"' renderData.Rows.Count);  			// analysis remote object ..  			foreach (DataRow row in renderData.Rows) {  				// define row key ..  				string id = row ["Job_Group_Id"].ToString ().Trim ()' sid = row ["Job_Id"].ToString ().Trim ()' exp1 = string.Format ("Job_Group_Id = '{0}'"' id)' exp2 = string.Format ("Job_Id = '{0}'"' sid);  				// find data from memory database ..  				DataTable job_group = this.EnvData.FindData ("Job_Group"' exp1' null' DataViewRowState.Unchanged).ToTable ()' job = this.EnvData.FindData ("Job"' exp2' null' DataViewRowState.Unchanged).ToTable ();  				if (job_group.Rows.Count > 0 && job.Rows.Count > 0) {  					if (job_group.Rows [0] ["Start_Time"] != null) {  						// write primary datetime data ..  						job_group.Rows [0] ["Status"] = Convert.ToUInt16 (JobStatusFlag.PROCESSING);  						job_group.Rows [0] ["Start_Time"] = row ["Start_Time"];  					}  					if (job.Rows [0] ["Start_Time"] != null) {  						// write sub job datetime data ..  						job.Rows [0] ["Proc_Machine"] = InputObject ["Host_Id"];  						job.Rows [0] ["Start_Time"] = row ["Start_Time"];  					}  					if (row ["Render_Output"] != null)  						// update last output log ..  						job.Rows [0] ["OutputLog"] = row ["Render_Output"];  					// merge data ..  					Data.Merge (job_group);  					Data.Merge (job);  				}  			}  			if (Data.Tables.Count > 0) {  				// accept all changes ..  				Data.AcceptChanges ();  				// integration to job data collection ..  				SyncData (Data);  			}  		}  	}  	catch (Exception ex) {  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		// change result ..  		result = false;  	}  	break;  #endregion  }  
