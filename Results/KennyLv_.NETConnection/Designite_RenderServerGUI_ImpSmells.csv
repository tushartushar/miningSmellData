Implementation smell,Namespace,Class,File,Method,Description
Long Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The method has 146 lines of code.
Long Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine1,The method has 130 lines of code.
Long Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The method has 397 lines of code.
Long Method,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,ReadData,The method has 108 lines of code.
Complex Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,Cyclomatic complexity of the method is 17
Complex Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine1,Cyclomatic complexity of the method is 16
Complex Method,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,Cyclomatic complexity of the method is 42
Complex Method,RenderServerGUI,IP_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\IP_Form.cs,FormControls,Cyclomatic complexity of the method is 9
Complex Method,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,ReadData,Cyclomatic complexity of the method is 13
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The length of the statement  "							RenderEvents.AppendLog (string.Format ("{0}"' "Master/Slave IP:" + __ConnectServerIp.ToString () + "  Connect  Success.")); " is 123.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The length of the statement  "					byte[] ByteData = this.EnvSvr.Serialize (ClientObject.Package (Client2Server.CommunicationType.MACHINEINFO' MachineInfo)); " is 122.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine1,The length of the statement  "							RenderEvents.AppendLog (string.Format ("{0}"' "Master/Slave IP:" + __ConnectServerIp.ToString () + "  Connect  Success.")); " is 123.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine1,The length of the statement  "					byte[] ByteData = this.EnvSvr.Serialize (ClientObject.Package (Client2Server.CommunicationType.MACHINEINFO' MachineInfo)); " is 122.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,QueueService,The length of the statement  "		RenderEvents.AppendLog (string.Format ("start queue listen service. ip: {0} port: {1}"' this.EnvHostBase.LocalIpAddress' this.__ListenRenderPort)); " is 147.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The length of the statement  "							DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR)); " is 150.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The length of the statement  "						RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count)); " is 155.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The length of the statement  "									RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore)); " is 147.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The length of the statement  "						RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count)); " is 150.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The length of the statement  "								RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id)); " is 131.
Long Statement,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Rendering,The length of the statement  "			//info.Arguments= -r file -proj D:\UAT20090709\CGI\element -s 1 -e 10 -rd Y:\UAT20090709\CGI\ep\e053\ren\s010_c014\OCC_CH "D:\UAT20090709\CGI\ep\e001\S020\lo\ball.ma"; " is 167.
Long Statement,RenderServerGUI,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Net_Form.cs,Button_AU_Click,The length of the statement  "		if (this.comboBox_Server.Text.Trim () != string.Empty && this.NumericUpDown_Port.Value.ToString ().Trim () != string.Empty) { " is 125.
Long Statement,RenderServerGUI,RenderEvents,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\RenderEvents.cs,SaveLog,The length of the statement  "	string LogsFloder = string.Format (@"{0}\{1}"' Environment.CurrentDirectory' @"Log\RenderEvents")' RecordFile = string.Format (@"{0}\{1}-{2}"' LogsFloder' "Log"' Service.CustomSysDateTime + ".log"); " is 198.
Long Statement,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,Main_Form_FormClosing,The length of the statement  "	DialogResult result = MessageBox.Show (this' AppCloseMessage' this.Text' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 126.
Long Statement,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,ReadData,The length of the statement  "	global::System.Collections.Generic.IList<string> RenderItemList = new global::System.Collections.Generic.List<string> ()' RenderDeleteList = new global::System.Collections.Generic.List<string> (); " is 196.
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The following statement contains a magic number: try {  	do {  		if (successMark != 1) {  			if (!new ScanPort ().Scan (__ConnectServerIp' __ConnectServerPort)) {  				foreach (RenbarServer CurrentServer in this.EnvSvr.GetServers (this.ServerListFilePath)) {  					if (new ScanPort ().Scan (CurrentServer.ServerIP' CurrentServer.ServerPort)) {  						this.__ConnectServerIp = Convert.ToString (CurrentServer.ServerIP);  						this.__ConnectServerPort = CurrentServer.ServerPort;  						RenderEvents.AppendLog (string.Format ("{0}"' "Master/Slave IP:" + __ConnectServerIp.ToString () + "  Connect  Success."));  						Settings.Default.ConnectServerIp = this.__ConnectServerIp;  						Settings.Default.ConnectServerPort = this.__ConnectServerPort;  						Settings.Default.Save ();  						break;  					}  				}  			}  			// create registry machine information socket ..//創建注冊機器信息socket'6600  			RegistrySocket = new TcpClientSocket (IPAddress.Parse (this.__ConnectServerIp)' this.__ConnectServerPort);  			//RegistrySocket = new TcpClientSocket(this.EnvSetting.ServerIpAddress' this.EnvSetting.ServerPort);  			if (RegistrySocket.IsConnected) {  				// registry information ..//注冊信息  				MachineInfo = new Dictionary<string' object> {  					{  						"Machine_Id"'  						string.Empty  					}'  					{  						"Name"'  						EnvHostBase.LocalHostName  					}'  					{  						"Ip"'  						EnvHostBase.LocalIpAddress  					}'  					{  						"IsRender"'  						true  					}'  					{  						"IsMaintenance"'  						this.__IsMaintenance  					}  				};  				if (Convert.ToBoolean (IsInit)) {  					MachineInfo.Add ("IsEnable"' true);  					MachineInfo.Add ("Last_Online_Time"' DateTime.Now);  				}  				//是否勾選維護，添加NOTE值不同。  				if (this.__IsMaintenance) {  					if (!MachineInfo.ContainsKey ("Note"))  						MachineInfo.Add ("Note"' "the machine stop render service.");  					else  						MachineInfo ["Note"] = "the machine stop render service.";  					// stops all process ..  					//this.KillProcess();  				}  				else  					MachineInfo.Add ("Note"' null);  				if (this.__IsOffLine) {  					MachineInfo.Add ("IsOffLine"' true);  					if (!MachineInfo.ContainsKey ("Note"))  						MachineInfo.Add ("Note"' null);  					else  						MachineInfo ["Note"] = null;  				}  				// serialize object ..//系列化對象'ClientObject(Renbar2 Control Protocol)  				byte[] ByteData = this.EnvSvr.Serialize (ClientObject.Package (Client2Server.CommunicationType.MACHINEINFO' MachineInfo));  				// send object to remote server ..//發送對象到遠程服務器  				RegistrySocket.Send (ByteData);  				object Data = new object ();  				//if (Convert.ToBoolean(IsInit))  				//{  				// deserialize object ..//反系列化對象  				Data = this.EnvSvr.Deserialize (RegistrySocket.Receive ());  				//}  				//else  				//{  				//    // deserialize object ..//反系列化對象  				//    Data = this.EnvSvr.Deserialize(RegistrySocket.Receive1());  				//}  				if (null != Data) {  					// receive server message ..//接受服務器信息  					KeyValuePair<string' object> received = (KeyValuePair<string' object>)Data;  					if (received.Key.Substring (0' 1).Equals ("+"))//+ (sign="+Ok")  					// append to logs object ..//追加到日志對象  					 {  						RenderEvents.AppendLog (string.Format ("{0}"' "registry machine successful."));  						successMark = 1;  						break;  					}  					else// append to logs object ..//追加到日志對象  					 {  						RenderEvents.AppendLog (string.Format ("{0}"' "registry machine fail."));  					}  				}  				else// append to logs object ..//追加到日志對象  				 {  					RenderEvents.AppendLog (string.Format ("{0}"' "registry machine fail."));  				}  			}  			else// append to logs object ..//追加到日志對象  			 {  				RenderEvents.AppendLog (string.Format ("{0}"' "can't connect server' registry fail."));  				//count++;  				//if (count > 2)  				//{  				//    successMark = -1;  				//}  			}  		}  		if (!Convert.ToBoolean (IsInit)) {  			break;  		}  		Thread.Sleep (3000);  	}  	while (!requestStop);  }  catch (Exception ex) {  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("{0}"' "registry machine info has happen exception error."));  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..//寫到日志對象  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (MachineInfo != null)  		MachineInfo.Clear ();  	if (RegistrySocket != null)  		// disconnect socket ..//斷開socket  		RegistrySocket.Close ();  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The following statement contains a magic number: do {  	if (successMark != 1) {  		if (!new ScanPort ().Scan (__ConnectServerIp' __ConnectServerPort)) {  			foreach (RenbarServer CurrentServer in this.EnvSvr.GetServers (this.ServerListFilePath)) {  				if (new ScanPort ().Scan (CurrentServer.ServerIP' CurrentServer.ServerPort)) {  					this.__ConnectServerIp = Convert.ToString (CurrentServer.ServerIP);  					this.__ConnectServerPort = CurrentServer.ServerPort;  					RenderEvents.AppendLog (string.Format ("{0}"' "Master/Slave IP:" + __ConnectServerIp.ToString () + "  Connect  Success."));  					Settings.Default.ConnectServerIp = this.__ConnectServerIp;  					Settings.Default.ConnectServerPort = this.__ConnectServerPort;  					Settings.Default.Save ();  					break;  				}  			}  		}  		// create registry machine information socket ..//創建注冊機器信息socket'6600  		RegistrySocket = new TcpClientSocket (IPAddress.Parse (this.__ConnectServerIp)' this.__ConnectServerPort);  		//RegistrySocket = new TcpClientSocket(this.EnvSetting.ServerIpAddress' this.EnvSetting.ServerPort);  		if (RegistrySocket.IsConnected) {  			// registry information ..//注冊信息  			MachineInfo = new Dictionary<string' object> {  				{  					"Machine_Id"'  					string.Empty  				}'  				{  					"Name"'  					EnvHostBase.LocalHostName  				}'  				{  					"Ip"'  					EnvHostBase.LocalIpAddress  				}'  				{  					"IsRender"'  					true  				}'  				{  					"IsMaintenance"'  					this.__IsMaintenance  				}  			};  			if (Convert.ToBoolean (IsInit)) {  				MachineInfo.Add ("IsEnable"' true);  				MachineInfo.Add ("Last_Online_Time"' DateTime.Now);  			}  			//是否勾選維護，添加NOTE值不同。  			if (this.__IsMaintenance) {  				if (!MachineInfo.ContainsKey ("Note"))  					MachineInfo.Add ("Note"' "the machine stop render service.");  				else  					MachineInfo ["Note"] = "the machine stop render service.";  				// stops all process ..  				//this.KillProcess();  			}  			else  				MachineInfo.Add ("Note"' null);  			if (this.__IsOffLine) {  				MachineInfo.Add ("IsOffLine"' true);  				if (!MachineInfo.ContainsKey ("Note"))  					MachineInfo.Add ("Note"' null);  				else  					MachineInfo ["Note"] = null;  			}  			// serialize object ..//系列化對象'ClientObject(Renbar2 Control Protocol)  			byte[] ByteData = this.EnvSvr.Serialize (ClientObject.Package (Client2Server.CommunicationType.MACHINEINFO' MachineInfo));  			// send object to remote server ..//發送對象到遠程服務器  			RegistrySocket.Send (ByteData);  			object Data = new object ();  			//if (Convert.ToBoolean(IsInit))  			//{  			// deserialize object ..//反系列化對象  			Data = this.EnvSvr.Deserialize (RegistrySocket.Receive ());  			//}  			//else  			//{  			//    // deserialize object ..//反系列化對象  			//    Data = this.EnvSvr.Deserialize(RegistrySocket.Receive1());  			//}  			if (null != Data) {  				// receive server message ..//接受服務器信息  				KeyValuePair<string' object> received = (KeyValuePair<string' object>)Data;  				if (received.Key.Substring (0' 1).Equals ("+"))//+ (sign="+Ok")  				// append to logs object ..//追加到日志對象  				 {  					RenderEvents.AppendLog (string.Format ("{0}"' "registry machine successful."));  					successMark = 1;  					break;  				}  				else// append to logs object ..//追加到日志對象  				 {  					RenderEvents.AppendLog (string.Format ("{0}"' "registry machine fail."));  				}  			}  			else// append to logs object ..//追加到日志對象  			 {  				RenderEvents.AppendLog (string.Format ("{0}"' "registry machine fail."));  			}  		}  		else// append to logs object ..//追加到日志對象  		 {  			RenderEvents.AppendLog (string.Format ("{0}"' "can't connect server' registry fail."));  			//count++;  			//if (count > 2)  			//{  			//    successMark = -1;  			//}  		}  	}  	if (!Convert.ToBoolean (IsInit)) {  		break;  	}  	Thread.Sleep (3000);  }  while (!requestStop);  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,RegistryMachine,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,QueueService,The following statement contains a magic number: try {  	// create object instance ..//創建對象Instance'6700(Render farm)  	QueueServiceSocket = new TcpServerSocket (this.EnvHostBase.LocalIpAddress' this.__ListenRenderPort);  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("start queue listen service. ip: {0} port: {1}"' this.EnvHostBase.LocalIpAddress' this.__ListenRenderPort));  	// confirm connect requests ..//確認連接請求'如果有連接正在暫止中'則為true，否則為false  	do {  		if (QueueServiceSocket.Pending ()) {  			// accept a new connect request ..//接受一個新連接請求  			global::System.Net.Sockets.TcpClient handle = QueueServiceSocket.AcceptListen ();  			//即可執行回呼方法。(队列要执行的方法。可以使用线程集区线程时，即可执行这个方法。)  			ThreadPool.QueueUserWorkItem (new WaitCallback (this.Protocol)' handle);  			//調用Protocol  			break;  		}  	}  	while (!this.requestStop);  	//与server端保持联系(梁涛修改)  	do {  		// confirm connect requests ..//確認連接請求'如果有連接正在暫止中'則為true，否則為false  		if (QueueServiceSocket.Pending ()) {  		}  		// delay 0.2 second to next listening ..//延遲0.2秒下一監聽  		Thread.Sleep (200);  	}  	while (!this.requestStop);  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..//寫到日志文件  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	if (QueueServiceSocket != null)  		// clean server socket resource ..//清空服務器Socket資源  		QueueServiceSocket.Close ();  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,QueueService,The following statement contains a magic number: do {  	// confirm connect requests ..//確認連接請求'如果有連接正在暫止中'則為true，否則為false  	if (QueueServiceSocket.Pending ()) {  	}  	// delay 0.2 second to next listening ..//延遲0.2秒下一監聽  	Thread.Sleep (200);  }  while (!this.requestStop);  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,QueueService,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: try {  	while (!requestStop) {  		if ((received = this.EnvSvr.Deserialize (client.Receive ())) != null)//將Control Server端接受并反系列化  		 {  			#region Analysis Remote Object Package分析遠程對象包  			// declare server response object list interface ..//宣布服務器回應對象列接口  			KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  			// define default communication enumeration ..//定義默認communication枚舉(COMPLETEDJOBS等六種狀態)  			Server2Render.CommunicationType ActionHeader = Server2Render.CommunicationType.NONE;  			IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  			// unpackage remote object data ..//解包遠程對象數據  			this.RenderObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  			#endregion  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("receive server \"{0}\" action behavior."' ActionHeader.ToString ()));  			switch (ActionHeader) {  			#region Completed Jobs Workflow完成工作流  			/*开启监听接受server端请求的数据，如果是请求completedjobs                                *则首先建立一张需要寄送的templetedatatable，然后从queuedatatable                                *取出status=completed or status=error的数据存入templetedatatable                                *然后清理queuedatatable中被挑选出来的数据                                *然后寄出templetedatatable到server端                                */case Server2Render.CommunicationType.COMPLETEDJOBS:  				try {  					// append to logs object ..//追加到日志對象0  					RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  					// create completed datatable ..//創建完成數據表  					DataTable Completed = new DataTable ("Completed");  					Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  					//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  					Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  					Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  					Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  					Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  					if (QueueDataTable.Rows.Count > 0) {  						// select completed status flag ..//查看完成狀態標志  						DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  						for (int i = 0; i < completed_rows.Length; i++) {  							// add to completed datatable ..//添加到完成數據表  							DataRow newRow = Completed.NewRow ();  							newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  							//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  							newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  							newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  							if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  								newRow ["Status"] = JobStatusFlag.ERROR;  								newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  							}  							Completed.Rows.Add (newRow);  						}  						// commit data changes ..//提交數據改變  						Completed.AcceptChanges ();  						#region Cleanup Data Procedure清除數據過程  						// declare cleaned count variable ..//定義cleaned計算變量  						ushort cleaned = 0;  						// cleanup completed data ..//清空完成數據  						for (int i = 0; i < completed_rows.Length; i++) {  							DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  							TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  							// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  							if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  								// remove completed row ..//移除完成行  								completed_rows [i].Delete ();  								// incremental count ..//增量計算  								cleaned++;  							}  						}  						// commit changes ..//提交改變  						this.QueueDataTable.AcceptChanges ();  						// append to logs object ..//追加到日志對象  						RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  						#endregion  						// set last change flag ..//設置上一次改變標志  						this.HasChange = true;  					}  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  				}  				catch (Exception ex) {  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..//寫到日志文件  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				finally {  					// response object ..//回應對象  					client.Send (this.EnvSvr.Serialize (__returnObject));  				}  				break;  			#endregion  			#region Deleted Jobs Workflow刪除工作流  			/*如果从server传过来的指令是deletejob                                  * 那么取出要删除的job列表List<int>，循环取出各个工作项                                  * ，从queuedatatable中取出job_id=item and status='processing'                                  * 然后循环取出proc_id项，kill掉this process                                  * 减少usagecore数量，从queuedatatable中移除this row                                  * 返回操作是否成功信息                                  */case Server2Render.CommunicationType.DELETEJOB:  				try {  					bool result = false;  					if (!QueueItems.ContainsKey ("Jobs") && ((IList<uint>)QueueItems ["Jobs"]).Count <= 0) {  						// response result ..//回應結果' MINUSERR(error flag)  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  						break;  					}  					foreach (int i in (IList<uint>)QueueItems ["Jobs"]) {  						//status為{1}是表示錯誤狀態  						string Expression = string.Format ("Job_Id = '{0}' And Status = '{1}'"' i' JobStatusFlag.PROCESSING);  						if (QueueDataTable.Rows.Count > 0) {  							// select current rendering job process ..//查看黨前Rendering工作進程  							DataRow[] delete_rows = QueueDataTable.Select (Expression);  							if (delete_rows.Length > 0) {  								// get process key ..//獲得進程主鍵  								int key = Convert.ToInt32 (delete_rows [0] ["Proc_Id"]);  								// delete process ..//刪除進程  								if (this.RenderProcess.ContainsKey (key))  									// kill mayabatch process ..//殺maya批程序  									Process.GetProcessById (this.RenderProcess [key]).Kill ();  								// decrement usage core count ..//減少UsageCore總數  								this.UsageCore--;  								// delete record from job datatable ..//從工作數據表刪除記錄  								QueueDataTable.Rows.Remove (delete_rows [0]);  								// append to logs object ..//追加到日志對象  								RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore));  							}  							// commit changes ..//提交改變  							this.QueueDataTable.AcceptChanges ();  							// change result flag ..//改變結果標志  							result = true;  						}  						else {  							// change result flag ..//改變結果標志  							result = false;  							break;  						}  					}  					if (result)  						// response result ..//回應結果  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					else  						// response result ..//回應結果  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				catch (Exception ex) {  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "executing delete job workflow has happen exception error."));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..//寫到日志文件  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				finally {  					// response object ..//回應對象  					client.Send (this.EnvSvr.Serialize (__returnObject));  				}  				break;  			#endregion  			#region Running Job Workflow運行工作流  			/*如果接受server端发送过来的指令是runningjobs                                  * 首先添加日志创建临时表running                                  * 从queuedatatable中选择status=‘PROCESSING’的数据                                  * 添加到running表中，返回running表到server端                                  */case Server2Render.CommunicationType.RUNNINGJOBS:  				try {  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "search running type job behavior workflow."));  					// create running datatable ..//創建運行數據表  					DataTable Running = new DataTable ("Running");  					Running.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  					Running.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  					Running.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  					Running.Columns.Add (new DataColumn ("Render_Output"' typeof(string)));  					if (QueueDataTable.Rows.Count > 0) {  						// select running status flag ..//查看運行狀態標志  						DataRow[] running_rows = QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  						for (int i = 0; i < running_rows.Length; i++) {  							// get render output log ..//獲得Render輸出日志  							int proc_id = Convert.ToInt32 (running_rows [i] ["Proc_Id"]);  							// add to running datatable ..//添加到運行數據表  							DataRow newRow = Running.NewRow ();  							newRow ["Job_Group_Id"] = running_rows [i] ["Job_Group_Id"].ToString ();  							newRow ["Job_Id"] = running_rows [i] ["Job_Id"].ToString ();  							newRow ["Start_Time"] = Convert.ToDateTime (running_rows [i] ["Start_Time"]);  							lock (this.ProcOutputLog) {  								if (this.ProcOutputLog.ContainsKey (proc_id))  									newRow ["Render_Output"] = this.ProcOutputLog [proc_id];  								else  									newRow ["Render_Output"] = DBNull.Value;  							}  							Running.Rows.Add (newRow);  						}  						// commit data changes ..//提交數據改變  						Running.AcceptChanges ();  					}  					// response result ..//回應結果'PLUSOK(Success Flag.)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Running);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count));  				}  				catch (Exception ex) {  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "executing running workflow has happen exception error."));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..//寫到日志文件  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				finally {  					// response object ..//回應對象  					client.Send (this.EnvSvr.Serialize (__returnObject));  				}  				break;  			#endregion  			#region Dispatch Job Workflow分派工作流(關于服務器端添加客戶端發送過來的指令的數據)  			/*如果接受server端发送过来的是dispatch则首先                                  * 写入log，取出list<dispatch>'dispatch循环list<dispatch>                                  * 判断queuedatatable中是否包含该dispatch，如果不存在，则往queuedatatable                                  * 中添加该dispatch项，启动线程Rendering执行dispatch的工作                                  * 返回分配job是否成功                                  */case Server2Render.CommunicationType.DISPATCH:  				try {  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "execute dispatch behavior workflow."));  					// analysis remote object ..//分析遠程對象  					IList<Dispatch> _obj = (IList<Dispatch>)QueueItems ["Dispatcher"];  					//Dispatch結構體(job_id等)  					if (_obj.Count > 0) {  						// add to queue data table ..//添加到隊列數據表  						foreach (Dispatch v in _obj) {  							// judge this job has been already exist ..//判斷這工作是否已經存在  							if (this.QueueDataTable.Select (string.Format ("Job_Id = {0}"' v.Job_Id)).Length > 0)  								continue;  							DataRow row = this.QueueDataTable.NewRow ();  							row ["Job_Group_Id"] = v.Job_Group_Id.ToString ().ToUpper ();  							row ["Job_Id"] = v.Job_Id;  							row ["Proc_Id"] = -1;  							row ["Proc_Type"] = v.Proc_Type;  							row ["Command"] = v.Command;  							row ["Args"] = v.Args;  							row ["Status"] = JobStatusFlag.PROCESSING;  							row ["Start_Time"] = DateTime.Now;  							this.QueueDataTable.Rows.Add (row);  							// commit changes ..//提交改變  							this.QueueDataTable.AcceptChanges ();  							// render processing ..//Render程序  							new Thread (new ParameterizedThreadStart (this.Rendering)).Start (row);  							//調用Rendering  							// append to logs object ..//追加到日志對象  							RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id));  						}  						// set last change flag ..//設置上一次改變標志  						this.HasChange = true;  						// response result ..//回應結果  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  					}  					else  						// response result ..//回應結果  						__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				}  				catch (Exception ex) {  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "executing dispatch workflow has happen exception error."));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..//寫到日志文件  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				finally {  					// response object ..//回應對象  					client.Send (this.EnvSvr.Serialize (__returnObject));  				}  				break;  			#endregion  			#region IsBusy Status Workflow忙碌狀態工作流  			/*如果服务器端发送过来的是isbusy命令，则首先写日志                                  * 创建dictionary类型的state，                                  * 判断usagecore是否大于零且queuedatatable是否大于零                                  * 如果都成立，取出queuedatatable中status=‘processing’的row                                  * 如果使用usagecore<总数，填充state信息                                  */case Server2Render.CommunicationType.ISBUSY:  				try {  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "report the machine core behavior workflow."));  					IDictionary<string' object> state = null;  					DataRow row = this.QueueDataTable.NewRow ();  					if (this.UsageCore > 0 && this.QueueDataTable.Rows.Count > 0)//如果進程數量與隊列數據表有數據  					 {  						DataRow[] busy_rows = this.QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  						if (this.UsageCore < this.EnvSvr.Cores)//判斷進程數量是否小于獲取處理器的數量  						 {  							state = new Dictionary<string' object> {  								{  									"IsBusy"'  									true  								}'  								{  									"ProcessType"'  									busy_rows [0] ["Proc_Type"]  								}'  								{  									"UsageCore"'  									this.UsageCore  								}'  								{  									"TotalCore"'  									this.EnvSvr.Cores  								}  							};  							if (busy_rows [0] ["Proc_Type"].ToString ().Trim () == "Client")  								state ["UsageCore"] = this.EnvSvr.Cores;  						}  						else {  							state = new Dictionary<string' object> {  								{  									"IsBusy"'  									true  								}'  								{  									"ProcessType"'  									busy_rows [0] ["Proc_Type"]  								}'  								{  									"UsageCore"'  									this.EnvSvr.Cores  								}'  								{  									"TotalCore"'  									this.EnvSvr.Cores  								}  							};  						}  					}  					else {  						state = new Dictionary<string' object> {  							{  								"IsBusy"'  								false  							}'  							{  								"ProcessType"'  								"None"  							}'  							{  								"UsageCore"'  								0  							}'  							{  								"TotalCore"'  								this.EnvSvr.Cores  							}  						};  					}  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' state);  				}  				catch (Exception ex) {  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0}"' "has happen workflow exception error."));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					// write to log file ..//寫到日志文件  					this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  				}  				finally {  					// response object ..//回應對象  					client.Send (this.EnvSvr.Serialize (__returnObject));  				}  				break;  			#endregion  			}  		}  	}  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..//寫到日志文件  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// close the signle client object ..//關閉單個客戶對象  	client.Close ();  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: while (!requestStop) {  	if ((received = this.EnvSvr.Deserialize (client.Receive ())) != null)//將Control Server端接受并反系列化  	 {  		#region Analysis Remote Object Package分析遠程對象包  		// declare server response object list interface ..//宣布服務器回應對象列接口  		KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  		// define default communication enumeration ..//定義默認communication枚舉(COMPLETEDJOBS等六種狀態)  		Server2Render.CommunicationType ActionHeader = Server2Render.CommunicationType.NONE;  		IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  		// unpackage remote object data ..//解包遠程對象數據  		this.RenderObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  		#endregion  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("receive server \"{0}\" action behavior."' ActionHeader.ToString ()));  		switch (ActionHeader) {  		#region Completed Jobs Workflow完成工作流  		/*开启监听接受server端请求的数据，如果是请求completedjobs                                *则首先建立一张需要寄送的templetedatatable，然后从queuedatatable                                *取出status=completed or status=error的数据存入templetedatatable                                *然后清理queuedatatable中被挑选出来的数据                                *然后寄出templetedatatable到server端                                */case Server2Render.CommunicationType.COMPLETEDJOBS:  			try {  				// append to logs object ..//追加到日志對象0  				RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  				// create completed datatable ..//創建完成數據表  				DataTable Completed = new DataTable ("Completed");  				Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  				//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  				Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  				Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  				Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  				Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  				if (QueueDataTable.Rows.Count > 0) {  					// select completed status flag ..//查看完成狀態標志  					DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  					for (int i = 0; i < completed_rows.Length; i++) {  						// add to completed datatable ..//添加到完成數據表  						DataRow newRow = Completed.NewRow ();  						newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  						//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  						newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  						newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  						if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  							newRow ["Status"] = JobStatusFlag.ERROR;  							newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  						}  						Completed.Rows.Add (newRow);  					}  					// commit data changes ..//提交數據改變  					Completed.AcceptChanges ();  					#region Cleanup Data Procedure清除數據過程  					// declare cleaned count variable ..//定義cleaned計算變量  					ushort cleaned = 0;  					// cleanup completed data ..//清空完成數據  					for (int i = 0; i < completed_rows.Length; i++) {  						DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  						TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  						// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  						if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  							// remove completed row ..//移除完成行  							completed_rows [i].Delete ();  							// incremental count ..//增量計算  							cleaned++;  						}  					}  					// commit changes ..//提交改變  					this.QueueDataTable.AcceptChanges ();  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  					#endregion  					// set last change flag ..//設置上一次改變標志  					this.HasChange = true;  				}  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  			}  			catch (Exception ex) {  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..//寫到日志文件  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// response object ..//回應對象  				client.Send (this.EnvSvr.Serialize (__returnObject));  			}  			break;  		#endregion  		#region Deleted Jobs Workflow刪除工作流  		/*如果从server传过来的指令是deletejob                                  * 那么取出要删除的job列表List<int>，循环取出各个工作项                                  * ，从queuedatatable中取出job_id=item and status='processing'                                  * 然后循环取出proc_id项，kill掉this process                                  * 减少usagecore数量，从queuedatatable中移除this row                                  * 返回操作是否成功信息                                  */case Server2Render.CommunicationType.DELETEJOB:  			try {  				bool result = false;  				if (!QueueItems.ContainsKey ("Jobs") && ((IList<uint>)QueueItems ["Jobs"]).Count <= 0) {  					// response result ..//回應結果' MINUSERR(error flag)  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  					break;  				}  				foreach (int i in (IList<uint>)QueueItems ["Jobs"]) {  					//status為{1}是表示錯誤狀態  					string Expression = string.Format ("Job_Id = '{0}' And Status = '{1}'"' i' JobStatusFlag.PROCESSING);  					if (QueueDataTable.Rows.Count > 0) {  						// select current rendering job process ..//查看黨前Rendering工作進程  						DataRow[] delete_rows = QueueDataTable.Select (Expression);  						if (delete_rows.Length > 0) {  							// get process key ..//獲得進程主鍵  							int key = Convert.ToInt32 (delete_rows [0] ["Proc_Id"]);  							// delete process ..//刪除進程  							if (this.RenderProcess.ContainsKey (key))  								// kill mayabatch process ..//殺maya批程序  								Process.GetProcessById (this.RenderProcess [key]).Kill ();  							// decrement usage core count ..//減少UsageCore總數  							this.UsageCore--;  							// delete record from job datatable ..//從工作數據表刪除記錄  							QueueDataTable.Rows.Remove (delete_rows [0]);  							// append to logs object ..//追加到日志對象  							RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore));  						}  						// commit changes ..//提交改變  						this.QueueDataTable.AcceptChanges ();  						// change result flag ..//改變結果標志  						result = true;  					}  					else {  						// change result flag ..//改變結果標志  						result = false;  						break;  					}  				}  				if (result)  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				else  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			catch (Exception ex) {  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "executing delete job workflow has happen exception error."));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..//寫到日志文件  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// response object ..//回應對象  				client.Send (this.EnvSvr.Serialize (__returnObject));  			}  			break;  		#endregion  		#region Running Job Workflow運行工作流  		/*如果接受server端发送过来的指令是runningjobs                                  * 首先添加日志创建临时表running                                  * 从queuedatatable中选择status=‘PROCESSING’的数据                                  * 添加到running表中，返回running表到server端                                  */case Server2Render.CommunicationType.RUNNINGJOBS:  			try {  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "search running type job behavior workflow."));  				// create running datatable ..//創建運行數據表  				DataTable Running = new DataTable ("Running");  				Running.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  				Running.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  				Running.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  				Running.Columns.Add (new DataColumn ("Render_Output"' typeof(string)));  				if (QueueDataTable.Rows.Count > 0) {  					// select running status flag ..//查看運行狀態標志  					DataRow[] running_rows = QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  					for (int i = 0; i < running_rows.Length; i++) {  						// get render output log ..//獲得Render輸出日志  						int proc_id = Convert.ToInt32 (running_rows [i] ["Proc_Id"]);  						// add to running datatable ..//添加到運行數據表  						DataRow newRow = Running.NewRow ();  						newRow ["Job_Group_Id"] = running_rows [i] ["Job_Group_Id"].ToString ();  						newRow ["Job_Id"] = running_rows [i] ["Job_Id"].ToString ();  						newRow ["Start_Time"] = Convert.ToDateTime (running_rows [i] ["Start_Time"]);  						lock (this.ProcOutputLog) {  							if (this.ProcOutputLog.ContainsKey (proc_id))  								newRow ["Render_Output"] = this.ProcOutputLog [proc_id];  							else  								newRow ["Render_Output"] = DBNull.Value;  						}  						Running.Rows.Add (newRow);  					}  					// commit data changes ..//提交數據改變  					Running.AcceptChanges ();  				}  				// response result ..//回應結果'PLUSOK(Success Flag.)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Running);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count));  			}  			catch (Exception ex) {  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "executing running workflow has happen exception error."));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..//寫到日志文件  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// response object ..//回應對象  				client.Send (this.EnvSvr.Serialize (__returnObject));  			}  			break;  		#endregion  		#region Dispatch Job Workflow分派工作流(關于服務器端添加客戶端發送過來的指令的數據)  		/*如果接受server端发送过来的是dispatch则首先                                  * 写入log，取出list<dispatch>'dispatch循环list<dispatch>                                  * 判断queuedatatable中是否包含该dispatch，如果不存在，则往queuedatatable                                  * 中添加该dispatch项，启动线程Rendering执行dispatch的工作                                  * 返回分配job是否成功                                  */case Server2Render.CommunicationType.DISPATCH:  			try {  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "execute dispatch behavior workflow."));  				// analysis remote object ..//分析遠程對象  				IList<Dispatch> _obj = (IList<Dispatch>)QueueItems ["Dispatcher"];  				//Dispatch結構體(job_id等)  				if (_obj.Count > 0) {  					// add to queue data table ..//添加到隊列數據表  					foreach (Dispatch v in _obj) {  						// judge this job has been already exist ..//判斷這工作是否已經存在  						if (this.QueueDataTable.Select (string.Format ("Job_Id = {0}"' v.Job_Id)).Length > 0)  							continue;  						DataRow row = this.QueueDataTable.NewRow ();  						row ["Job_Group_Id"] = v.Job_Group_Id.ToString ().ToUpper ();  						row ["Job_Id"] = v.Job_Id;  						row ["Proc_Id"] = -1;  						row ["Proc_Type"] = v.Proc_Type;  						row ["Command"] = v.Command;  						row ["Args"] = v.Args;  						row ["Status"] = JobStatusFlag.PROCESSING;  						row ["Start_Time"] = DateTime.Now;  						this.QueueDataTable.Rows.Add (row);  						// commit changes ..//提交改變  						this.QueueDataTable.AcceptChanges ();  						// render processing ..//Render程序  						new Thread (new ParameterizedThreadStart (this.Rendering)).Start (row);  						//調用Rendering  						// append to logs object ..//追加到日志對象  						RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id));  					}  					// set last change flag ..//設置上一次改變標志  					this.HasChange = true;  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  				}  				else  					// response result ..//回應結果  					__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			}  			catch (Exception ex) {  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "executing dispatch workflow has happen exception error."));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..//寫到日志文件  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// response object ..//回應對象  				client.Send (this.EnvSvr.Serialize (__returnObject));  			}  			break;  		#endregion  		#region IsBusy Status Workflow忙碌狀態工作流  		/*如果服务器端发送过来的是isbusy命令，则首先写日志                                  * 创建dictionary类型的state，                                  * 判断usagecore是否大于零且queuedatatable是否大于零                                  * 如果都成立，取出queuedatatable中status=‘processing’的row                                  * 如果使用usagecore<总数，填充state信息                                  */case Server2Render.CommunicationType.ISBUSY:  			try {  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "report the machine core behavior workflow."));  				IDictionary<string' object> state = null;  				DataRow row = this.QueueDataTable.NewRow ();  				if (this.UsageCore > 0 && this.QueueDataTable.Rows.Count > 0)//如果進程數量與隊列數據表有數據  				 {  					DataRow[] busy_rows = this.QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  					if (this.UsageCore < this.EnvSvr.Cores)//判斷進程數量是否小于獲取處理器的數量  					 {  						state = new Dictionary<string' object> {  							{  								"IsBusy"'  								true  							}'  							{  								"ProcessType"'  								busy_rows [0] ["Proc_Type"]  							}'  							{  								"UsageCore"'  								this.UsageCore  							}'  							{  								"TotalCore"'  								this.EnvSvr.Cores  							}  						};  						if (busy_rows [0] ["Proc_Type"].ToString ().Trim () == "Client")  							state ["UsageCore"] = this.EnvSvr.Cores;  					}  					else {  						state = new Dictionary<string' object> {  							{  								"IsBusy"'  								true  							}'  							{  								"ProcessType"'  								busy_rows [0] ["Proc_Type"]  							}'  							{  								"UsageCore"'  								this.EnvSvr.Cores  							}'  							{  								"TotalCore"'  								this.EnvSvr.Cores  							}  						};  					}  				}  				else {  					state = new Dictionary<string' object> {  						{  							"IsBusy"'  							false  						}'  						{  							"ProcessType"'  							"None"  						}'  						{  							"UsageCore"'  							0  						}'  						{  							"TotalCore"'  							this.EnvSvr.Cores  						}  					};  				}  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' state);  			}  			catch (Exception ex) {  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "has happen workflow exception error."));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// write to log file ..//寫到日志文件  				this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  			}  			finally {  				// response object ..//回應對象  				client.Send (this.EnvSvr.Serialize (__returnObject));  			}  			break;  		#endregion  		}  	}  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: if ((received = this.EnvSvr.Deserialize (client.Receive ())) != null)//將Control Server端接受并反系列化   {  	#region Analysis Remote Object Package分析遠程對象包  	// declare server response object list interface ..//宣布服務器回應對象列接口  	KeyValuePair<string' object> __returnObject = new KeyValuePair<string' object> ();  	// define default communication enumeration ..//定義默認communication枚舉(COMPLETEDJOBS等六種狀態)  	Server2Render.CommunicationType ActionHeader = Server2Render.CommunicationType.NONE;  	IDictionary<string' object> QueueItems = new Dictionary<string' object> ();  	// unpackage remote object data ..//解包遠程對象數據  	this.RenderObject.UnPackage ((IList<object>)received' out ActionHeader' out QueueItems);  	#endregion  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("receive server \"{0}\" action behavior."' ActionHeader.ToString ()));  	switch (ActionHeader) {  	#region Completed Jobs Workflow完成工作流  	/*开启监听接受server端请求的数据，如果是请求completedjobs                                *则首先建立一张需要寄送的templetedatatable，然后从queuedatatable                                *取出status=completed or status=error的数据存入templetedatatable                                *然后清理queuedatatable中被挑选出来的数据                                *然后寄出templetedatatable到server端                                */case Server2Render.CommunicationType.COMPLETEDJOBS:  		try {  			// append to logs object ..//追加到日志對象0  			RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  			// create completed datatable ..//創建完成數據表  			DataTable Completed = new DataTable ("Completed");  			Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  			//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  			Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  			Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  			Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  			Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  			if (QueueDataTable.Rows.Count > 0) {  				// select completed status flag ..//查看完成狀態標志  				DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  				for (int i = 0; i < completed_rows.Length; i++) {  					// add to completed datatable ..//添加到完成數據表  					DataRow newRow = Completed.NewRow ();  					newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  					//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  					newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  					newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  					if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  						newRow ["Status"] = JobStatusFlag.ERROR;  						newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  					}  					Completed.Rows.Add (newRow);  				}  				// commit data changes ..//提交數據改變  				Completed.AcceptChanges ();  				#region Cleanup Data Procedure清除數據過程  				// declare cleaned count variable ..//定義cleaned計算變量  				ushort cleaned = 0;  				// cleanup completed data ..//清空完成數據  				for (int i = 0; i < completed_rows.Length; i++) {  					DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  					TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  					// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  					if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  						// remove completed row ..//移除完成行  						completed_rows [i].Delete ();  						// incremental count ..//增量計算  						cleaned++;  					}  				}  				// commit changes ..//提交改變  				this.QueueDataTable.AcceptChanges ();  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  				#endregion  				// set last change flag ..//設置上一次改變標志  				this.HasChange = true;  			}  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  		}  		catch (Exception ex) {  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..//寫到日志文件  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// response object ..//回應對象  			client.Send (this.EnvSvr.Serialize (__returnObject));  		}  		break;  	#endregion  	#region Deleted Jobs Workflow刪除工作流  	/*如果从server传过来的指令是deletejob                                  * 那么取出要删除的job列表List<int>，循环取出各个工作项                                  * ，从queuedatatable中取出job_id=item and status='processing'                                  * 然后循环取出proc_id项，kill掉this process                                  * 减少usagecore数量，从queuedatatable中移除this row                                  * 返回操作是否成功信息                                  */case Server2Render.CommunicationType.DELETEJOB:  		try {  			bool result = false;  			if (!QueueItems.ContainsKey ("Jobs") && ((IList<uint>)QueueItems ["Jobs"]).Count <= 0) {  				// response result ..//回應結果' MINUSERR(error flag)  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  				break;  			}  			foreach (int i in (IList<uint>)QueueItems ["Jobs"]) {  				//status為{1}是表示錯誤狀態  				string Expression = string.Format ("Job_Id = '{0}' And Status = '{1}'"' i' JobStatusFlag.PROCESSING);  				if (QueueDataTable.Rows.Count > 0) {  					// select current rendering job process ..//查看黨前Rendering工作進程  					DataRow[] delete_rows = QueueDataTable.Select (Expression);  					if (delete_rows.Length > 0) {  						// get process key ..//獲得進程主鍵  						int key = Convert.ToInt32 (delete_rows [0] ["Proc_Id"]);  						// delete process ..//刪除進程  						if (this.RenderProcess.ContainsKey (key))  							// kill mayabatch process ..//殺maya批程序  							Process.GetProcessById (this.RenderProcess [key]).Kill ();  						// decrement usage core count ..//減少UsageCore總數  						this.UsageCore--;  						// delete record from job datatable ..//從工作數據表刪除記錄  						QueueDataTable.Rows.Remove (delete_rows [0]);  						// append to logs object ..//追加到日志對象  						RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore));  					}  					// commit changes ..//提交改變  					this.QueueDataTable.AcceptChanges ();  					// change result flag ..//改變結果標志  					result = true;  				}  				else {  					// change result flag ..//改變結果標志  					result = false;  					break;  				}  			}  			if (result)  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			else  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		catch (Exception ex) {  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "executing delete job workflow has happen exception error."));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..//寫到日志文件  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// response object ..//回應對象  			client.Send (this.EnvSvr.Serialize (__returnObject));  		}  		break;  	#endregion  	#region Running Job Workflow運行工作流  	/*如果接受server端发送过来的指令是runningjobs                                  * 首先添加日志创建临时表running                                  * 从queuedatatable中选择status=‘PROCESSING’的数据                                  * 添加到running表中，返回running表到server端                                  */case Server2Render.CommunicationType.RUNNINGJOBS:  		try {  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "search running type job behavior workflow."));  			// create running datatable ..//創建運行數據表  			DataTable Running = new DataTable ("Running");  			Running.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  			Running.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  			Running.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  			Running.Columns.Add (new DataColumn ("Render_Output"' typeof(string)));  			if (QueueDataTable.Rows.Count > 0) {  				// select running status flag ..//查看運行狀態標志  				DataRow[] running_rows = QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  				for (int i = 0; i < running_rows.Length; i++) {  					// get render output log ..//獲得Render輸出日志  					int proc_id = Convert.ToInt32 (running_rows [i] ["Proc_Id"]);  					// add to running datatable ..//添加到運行數據表  					DataRow newRow = Running.NewRow ();  					newRow ["Job_Group_Id"] = running_rows [i] ["Job_Group_Id"].ToString ();  					newRow ["Job_Id"] = running_rows [i] ["Job_Id"].ToString ();  					newRow ["Start_Time"] = Convert.ToDateTime (running_rows [i] ["Start_Time"]);  					lock (this.ProcOutputLog) {  						if (this.ProcOutputLog.ContainsKey (proc_id))  							newRow ["Render_Output"] = this.ProcOutputLog [proc_id];  						else  							newRow ["Render_Output"] = DBNull.Value;  					}  					Running.Rows.Add (newRow);  				}  				// commit data changes ..//提交數據改變  				Running.AcceptChanges ();  			}  			// response result ..//回應結果'PLUSOK(Success Flag.)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Running);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count));  		}  		catch (Exception ex) {  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "executing running workflow has happen exception error."));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..//寫到日志文件  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// response object ..//回應對象  			client.Send (this.EnvSvr.Serialize (__returnObject));  		}  		break;  	#endregion  	#region Dispatch Job Workflow分派工作流(關于服務器端添加客戶端發送過來的指令的數據)  	/*如果接受server端发送过来的是dispatch则首先                                  * 写入log，取出list<dispatch>'dispatch循环list<dispatch>                                  * 判断queuedatatable中是否包含该dispatch，如果不存在，则往queuedatatable                                  * 中添加该dispatch项，启动线程Rendering执行dispatch的工作                                  * 返回分配job是否成功                                  */case Server2Render.CommunicationType.DISPATCH:  		try {  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "execute dispatch behavior workflow."));  			// analysis remote object ..//分析遠程對象  			IList<Dispatch> _obj = (IList<Dispatch>)QueueItems ["Dispatcher"];  			//Dispatch結構體(job_id等)  			if (_obj.Count > 0) {  				// add to queue data table ..//添加到隊列數據表  				foreach (Dispatch v in _obj) {  					// judge this job has been already exist ..//判斷這工作是否已經存在  					if (this.QueueDataTable.Select (string.Format ("Job_Id = {0}"' v.Job_Id)).Length > 0)  						continue;  					DataRow row = this.QueueDataTable.NewRow ();  					row ["Job_Group_Id"] = v.Job_Group_Id.ToString ().ToUpper ();  					row ["Job_Id"] = v.Job_Id;  					row ["Proc_Id"] = -1;  					row ["Proc_Type"] = v.Proc_Type;  					row ["Command"] = v.Command;  					row ["Args"] = v.Args;  					row ["Status"] = JobStatusFlag.PROCESSING;  					row ["Start_Time"] = DateTime.Now;  					this.QueueDataTable.Rows.Add (row);  					// commit changes ..//提交改變  					this.QueueDataTable.AcceptChanges ();  					// render processing ..//Render程序  					new Thread (new ParameterizedThreadStart (this.Rendering)).Start (row);  					//調用Rendering  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id));  				}  				// set last change flag ..//設置上一次改變標志  				this.HasChange = true;  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  			}  			else  				// response result ..//回應結果  				__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		}  		catch (Exception ex) {  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "executing dispatch workflow has happen exception error."));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..//寫到日志文件  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// response object ..//回應對象  			client.Send (this.EnvSvr.Serialize (__returnObject));  		}  		break;  	#endregion  	#region IsBusy Status Workflow忙碌狀態工作流  	/*如果服务器端发送过来的是isbusy命令，则首先写日志                                  * 创建dictionary类型的state，                                  * 判断usagecore是否大于零且queuedatatable是否大于零                                  * 如果都成立，取出queuedatatable中status=‘processing’的row                                  * 如果使用usagecore<总数，填充state信息                                  */case Server2Render.CommunicationType.ISBUSY:  		try {  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "report the machine core behavior workflow."));  			IDictionary<string' object> state = null;  			DataRow row = this.QueueDataTable.NewRow ();  			if (this.UsageCore > 0 && this.QueueDataTable.Rows.Count > 0)//如果進程數量與隊列數據表有數據  			 {  				DataRow[] busy_rows = this.QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  				if (this.UsageCore < this.EnvSvr.Cores)//判斷進程數量是否小于獲取處理器的數量  				 {  					state = new Dictionary<string' object> {  						{  							"IsBusy"'  							true  						}'  						{  							"ProcessType"'  							busy_rows [0] ["Proc_Type"]  						}'  						{  							"UsageCore"'  							this.UsageCore  						}'  						{  							"TotalCore"'  							this.EnvSvr.Cores  						}  					};  					if (busy_rows [0] ["Proc_Type"].ToString ().Trim () == "Client")  						state ["UsageCore"] = this.EnvSvr.Cores;  				}  				else {  					state = new Dictionary<string' object> {  						{  							"IsBusy"'  							true  						}'  						{  							"ProcessType"'  							busy_rows [0] ["Proc_Type"]  						}'  						{  							"UsageCore"'  							this.EnvSvr.Cores  						}'  						{  							"TotalCore"'  							this.EnvSvr.Cores  						}  					};  				}  			}  			else {  				state = new Dictionary<string' object> {  					{  						"IsBusy"'  						false  					}'  					{  						"ProcessType"'  						"None"  					}'  					{  						"UsageCore"'  						0  					}'  					{  						"TotalCore"'  						this.EnvSvr.Cores  					}  				};  			}  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' state);  		}  		catch (Exception ex) {  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("{0}"' "has happen workflow exception error."));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// write to log file ..//寫到日志文件  			this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  		}  		finally {  			// response object ..//回應對象  			client.Send (this.EnvSvr.Serialize (__returnObject));  		}  		break;  	#endregion  	}  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: switch (ActionHeader) {  #region Completed Jobs Workflow完成工作流  /*开启监听接受server端请求的数据，如果是请求completedjobs                                *则首先建立一张需要寄送的templetedatatable，然后从queuedatatable                                *取出status=completed or status=error的数据存入templetedatatable                                *然后清理queuedatatable中被挑选出来的数据                                *然后寄出templetedatatable到server端                                */case Server2Render.CommunicationType.COMPLETEDJOBS:  	try {  		// append to logs object ..//追加到日志對象0  		RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  		// create completed datatable ..//創建完成數據表  		DataTable Completed = new DataTable ("Completed");  		Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  		//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  		Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  		Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  		Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  		Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  		if (QueueDataTable.Rows.Count > 0) {  			// select completed status flag ..//查看完成狀態標志  			DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  			for (int i = 0; i < completed_rows.Length; i++) {  				// add to completed datatable ..//添加到完成數據表  				DataRow newRow = Completed.NewRow ();  				newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  				//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  				newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  				newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  				if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  					newRow ["Status"] = JobStatusFlag.ERROR;  					newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  				}  				Completed.Rows.Add (newRow);  			}  			// commit data changes ..//提交數據改變  			Completed.AcceptChanges ();  			#region Cleanup Data Procedure清除數據過程  			// declare cleaned count variable ..//定義cleaned計算變量  			ushort cleaned = 0;  			// cleanup completed data ..//清空完成數據  			for (int i = 0; i < completed_rows.Length; i++) {  				DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  				TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  				// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  				if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  					// remove completed row ..//移除完成行  					completed_rows [i].Delete ();  					// incremental count ..//增量計算  					cleaned++;  				}  			}  			// commit changes ..//提交改變  			this.QueueDataTable.AcceptChanges ();  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  			#endregion  			// set last change flag ..//設置上一次改變標志  			this.HasChange = true;  		}  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Deleted Jobs Workflow刪除工作流  /*如果从server传过来的指令是deletejob                                  * 那么取出要删除的job列表List<int>，循环取出各个工作项                                  * ，从queuedatatable中取出job_id=item and status='processing'                                  * 然后循环取出proc_id项，kill掉this process                                  * 减少usagecore数量，从queuedatatable中移除this row                                  * 返回操作是否成功信息                                  */case Server2Render.CommunicationType.DELETEJOB:  	try {  		bool result = false;  		if (!QueueItems.ContainsKey ("Jobs") && ((IList<uint>)QueueItems ["Jobs"]).Count <= 0) {  			// response result ..//回應結果' MINUSERR(error flag)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		foreach (int i in (IList<uint>)QueueItems ["Jobs"]) {  			//status為{1}是表示錯誤狀態  			string Expression = string.Format ("Job_Id = '{0}' And Status = '{1}'"' i' JobStatusFlag.PROCESSING);  			if (QueueDataTable.Rows.Count > 0) {  				// select current rendering job process ..//查看黨前Rendering工作進程  				DataRow[] delete_rows = QueueDataTable.Select (Expression);  				if (delete_rows.Length > 0) {  					// get process key ..//獲得進程主鍵  					int key = Convert.ToInt32 (delete_rows [0] ["Proc_Id"]);  					// delete process ..//刪除進程  					if (this.RenderProcess.ContainsKey (key))  						// kill mayabatch process ..//殺maya批程序  						Process.GetProcessById (this.RenderProcess [key]).Kill ();  					// decrement usage core count ..//減少UsageCore總數  					this.UsageCore--;  					// delete record from job datatable ..//從工作數據表刪除記錄  					QueueDataTable.Rows.Remove (delete_rows [0]);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore));  				}  				// commit changes ..//提交改變  				this.QueueDataTable.AcceptChanges ();  				// change result flag ..//改變結果標志  				result = true;  			}  			else {  				// change result flag ..//改變結果標志  				result = false;  				break;  			}  		}  		if (result)  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		else  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing delete job workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Running Job Workflow運行工作流  /*如果接受server端发送过来的指令是runningjobs                                  * 首先添加日志创建临时表running                                  * 从queuedatatable中选择status=‘PROCESSING’的数据                                  * 添加到running表中，返回running表到server端                                  */case Server2Render.CommunicationType.RUNNINGJOBS:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "search running type job behavior workflow."));  		// create running datatable ..//創建運行數據表  		DataTable Running = new DataTable ("Running");  		Running.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  		Running.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  		Running.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  		Running.Columns.Add (new DataColumn ("Render_Output"' typeof(string)));  		if (QueueDataTable.Rows.Count > 0) {  			// select running status flag ..//查看運行狀態標志  			DataRow[] running_rows = QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  			for (int i = 0; i < running_rows.Length; i++) {  				// get render output log ..//獲得Render輸出日志  				int proc_id = Convert.ToInt32 (running_rows [i] ["Proc_Id"]);  				// add to running datatable ..//添加到運行數據表  				DataRow newRow = Running.NewRow ();  				newRow ["Job_Group_Id"] = running_rows [i] ["Job_Group_Id"].ToString ();  				newRow ["Job_Id"] = running_rows [i] ["Job_Id"].ToString ();  				newRow ["Start_Time"] = Convert.ToDateTime (running_rows [i] ["Start_Time"]);  				lock (this.ProcOutputLog) {  					if (this.ProcOutputLog.ContainsKey (proc_id))  						newRow ["Render_Output"] = this.ProcOutputLog [proc_id];  					else  						newRow ["Render_Output"] = DBNull.Value;  				}  				Running.Rows.Add (newRow);  			}  			// commit data changes ..//提交數據改變  			Running.AcceptChanges ();  		}  		// response result ..//回應結果'PLUSOK(Success Flag.)  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Running);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count));  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing running workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Dispatch Job Workflow分派工作流(關于服務器端添加客戶端發送過來的指令的數據)  /*如果接受server端发送过来的是dispatch则首先                                  * 写入log，取出list<dispatch>'dispatch循环list<dispatch>                                  * 判断queuedatatable中是否包含该dispatch，如果不存在，则往queuedatatable                                  * 中添加该dispatch项，启动线程Rendering执行dispatch的工作                                  * 返回分配job是否成功                                  */case Server2Render.CommunicationType.DISPATCH:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "execute dispatch behavior workflow."));  		// analysis remote object ..//分析遠程對象  		IList<Dispatch> _obj = (IList<Dispatch>)QueueItems ["Dispatcher"];  		//Dispatch結構體(job_id等)  		if (_obj.Count > 0) {  			// add to queue data table ..//添加到隊列數據表  			foreach (Dispatch v in _obj) {  				// judge this job has been already exist ..//判斷這工作是否已經存在  				if (this.QueueDataTable.Select (string.Format ("Job_Id = {0}"' v.Job_Id)).Length > 0)  					continue;  				DataRow row = this.QueueDataTable.NewRow ();  				row ["Job_Group_Id"] = v.Job_Group_Id.ToString ().ToUpper ();  				row ["Job_Id"] = v.Job_Id;  				row ["Proc_Id"] = -1;  				row ["Proc_Type"] = v.Proc_Type;  				row ["Command"] = v.Command;  				row ["Args"] = v.Args;  				row ["Status"] = JobStatusFlag.PROCESSING;  				row ["Start_Time"] = DateTime.Now;  				this.QueueDataTable.Rows.Add (row);  				// commit changes ..//提交改變  				this.QueueDataTable.AcceptChanges ();  				// render processing ..//Render程序  				new Thread (new ParameterizedThreadStart (this.Rendering)).Start (row);  				//調用Rendering  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id));  			}  			// set last change flag ..//設置上一次改變標志  			this.HasChange = true;  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing dispatch workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region IsBusy Status Workflow忙碌狀態工作流  /*如果服务器端发送过来的是isbusy命令，则首先写日志                                  * 创建dictionary类型的state，                                  * 判断usagecore是否大于零且queuedatatable是否大于零                                  * 如果都成立，取出queuedatatable中status=‘processing’的row                                  * 如果使用usagecore<总数，填充state信息                                  */case Server2Render.CommunicationType.ISBUSY:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "report the machine core behavior workflow."));  		IDictionary<string' object> state = null;  		DataRow row = this.QueueDataTable.NewRow ();  		if (this.UsageCore > 0 && this.QueueDataTable.Rows.Count > 0)//如果進程數量與隊列數據表有數據  		 {  			DataRow[] busy_rows = this.QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  			if (this.UsageCore < this.EnvSvr.Cores)//判斷進程數量是否小于獲取處理器的數量  			 {  				state = new Dictionary<string' object> {  					{  						"IsBusy"'  						true  					}'  					{  						"ProcessType"'  						busy_rows [0] ["Proc_Type"]  					}'  					{  						"UsageCore"'  						this.UsageCore  					}'  					{  						"TotalCore"'  						this.EnvSvr.Cores  					}  				};  				if (busy_rows [0] ["Proc_Type"].ToString ().Trim () == "Client")  					state ["UsageCore"] = this.EnvSvr.Cores;  			}  			else {  				state = new Dictionary<string' object> {  					{  						"IsBusy"'  						true  					}'  					{  						"ProcessType"'  						busy_rows [0] ["Proc_Type"]  					}'  					{  						"UsageCore"'  						this.EnvSvr.Cores  					}'  					{  						"TotalCore"'  						this.EnvSvr.Cores  					}  				};  			}  		}  		else {  			state = new Dictionary<string' object> {  				{  					"IsBusy"'  					false  				}'  				{  					"ProcessType"'  					"None"  				}'  				{  					"UsageCore"'  					0  				}'  				{  					"TotalCore"'  					this.EnvSvr.Cores  				}  			};  		}  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' state);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "has happen workflow exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: try {  	// append to logs object ..//追加到日志對象0  	RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  	// create completed datatable ..//創建完成數據表  	DataTable Completed = new DataTable ("Completed");  	Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  	//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  	Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  	Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  	Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  	Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  	if (QueueDataTable.Rows.Count > 0) {  		// select completed status flag ..//查看完成狀態標志  		DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  		for (int i = 0; i < completed_rows.Length; i++) {  			// add to completed datatable ..//添加到完成數據表  			DataRow newRow = Completed.NewRow ();  			newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  			//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  			newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  			newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  			if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  				newRow ["Status"] = JobStatusFlag.ERROR;  				newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  			}  			Completed.Rows.Add (newRow);  		}  		// commit data changes ..//提交數據改變  		Completed.AcceptChanges ();  		#region Cleanup Data Procedure清除數據過程  		// declare cleaned count variable ..//定義cleaned計算變量  		ushort cleaned = 0;  		// cleanup completed data ..//清空完成數據  		for (int i = 0; i < completed_rows.Length; i++) {  			DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  			TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  			// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  			if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  				// remove completed row ..//移除完成行  				completed_rows [i].Delete ();  				// incremental count ..//增量計算  				cleaned++;  			}  		}  		// commit changes ..//提交改變  		this.QueueDataTable.AcceptChanges ();  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  		#endregion  		// set last change flag ..//設置上一次改變標志  		this.HasChange = true;  	}  	// response result ..//回應結果  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  }  catch (Exception ex) {  	// response result ..//回應結果  	__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..//寫到日志文件  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  finally {  	// response object ..//回應對象  	client.Send (this.EnvSvr.Serialize (__returnObject));  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: if (QueueDataTable.Rows.Count > 0) {  	// select completed status flag ..//查看完成狀態標志  	DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  	for (int i = 0; i < completed_rows.Length; i++) {  		// add to completed datatable ..//添加到完成數據表  		DataRow newRow = Completed.NewRow ();  		newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  		//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  		newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  		newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  		if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  			newRow ["Status"] = JobStatusFlag.ERROR;  			newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  		}  		Completed.Rows.Add (newRow);  	}  	// commit data changes ..//提交數據改變  	Completed.AcceptChanges ();  	#region Cleanup Data Procedure清除數據過程  	// declare cleaned count variable ..//定義cleaned計算變量  	ushort cleaned = 0;  	// cleanup completed data ..//清空完成數據  	for (int i = 0; i < completed_rows.Length; i++) {  		DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  		TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  		// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  		if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  			// remove completed row ..//移除完成行  			completed_rows [i].Delete ();  			// incremental count ..//增量計算  			cleaned++;  		}  	}  	// commit changes ..//提交改變  	this.QueueDataTable.AcceptChanges ();  	// append to logs object ..//追加到日志對象  	RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  	#endregion  	// set last change flag ..//設置上一次改變標志  	this.HasChange = true;  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: for (int i = 0; i < completed_rows.Length; i++) {  	DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  	TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  	// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  	if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  		// remove completed row ..//移除完成行  		completed_rows [i].Delete ();  		// incremental count ..//增量計算  		cleaned++;  	}  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following statement contains a magic number: if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  	// remove completed row ..//移除完成行  	completed_rows [i].Delete ();  	// incremental count ..//增量計算  	cleaned++;  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Proc_Exited,The following statement contains a magic number: try {  	// get process id ..//得到進程Id  	int id = ((Process)sender).Id;  	lock (this.FailProcess)//將失敗進程加鎖  	 {  		if (((Process)sender).HasExited) {  			DateTime StartTime = ((Process)sender).StartTime;  			TimeSpan EndTime = new TimeSpan (((Process)sender).ExitTime.Ticks);  			if (EndTime.Subtract (new TimeSpan (StartTime.Ticks)).Duration ().TotalMilliseconds < 1000)  				// add to fail list ..//添加到失敗列  				this.FailProcess.Add (id);  		}  		// release the waiting thread ..//釋放等待線程                                                            		Monitor.PulseAll (this.FailProcess);  	}  	lock (this.QueueDataTable) {  		if (this.FailProcess.Contains (id)) {  			DataRow[] row = this.QueueDataTable.Select (string.Format ("Proc_Id = {0}"' id));  			for (int i = 0; i < row.Length; i++) {  				row [i] ["Finish_Time"] = DateTime.Now;  				row [i] ["Status"] = JobStatusFlag.ERROR;  			}  			// commit data changes ..//把改變數據進行提交  			this.QueueDataTable.AcceptChanges ();  			// set last change flag ..//設置上一次改變標志  			this.HasChange = true;  			// remove the fail process ..//移除失敗進程  			this.FailProcess.Remove (id);  			// reduce one quantity ..//減少一數量  			UsageCore--;  		}  	}  	lock (this.RenderProcess) {  		// find process id ..//查找進程id  		if (this.RenderProcess.ContainsKey (id)) {  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("the process id {0} has completed."' id));  			lock (this.QueueDataTable) {  				DataRow[] row = this.QueueDataTable.Select (string.Format ("Proc_Id = {0}"' id));  				for (int i = 0; i < row.Length; i++) {  					// normal finish status ..//正常完成狀態  					row [i] ["Render_Output"] = this.ProcOutputLog [id];  					row [i] ["Finish_Time"] = DateTime.Now;  					row [i] ["Status"] = JobStatusFlag.COMPLETED;  				}  				// commit data changes ..//提交數據改變  				this.QueueDataTable.AcceptChanges ();  				// set last change flag ..//設置上一次改變標志  				this.HasChange = true;  				// release the waiting thread ..//釋放等待線程  				Monitor.PulseAll (this.QueueDataTable);  			}  			lock (this.ProcOutputLog) {  				// remove from dictionary record ..//移除字典記錄  				this.ProcOutputLog.Remove (id);  				// release the waiting thread ..//釋放等待線程  				Monitor.PulseAll (this.ProcOutputLog);  			}  			if (this.RenderProcess.ContainsKey (id)) {  				// remove the process id ..//移除進程ID  				this.RenderProcess.Remove (id);  				// release the waiting thread ..//釋放等待線程  				Monitor.PulseAll (this.RenderProcess);  			}  			// reduce one quantity ..//減少一數量  			UsageCore--;  		}  	}  	// clean all resource associated with process ..//清除所有資源聯系進程  	((Process)sender).Close ();  }  catch (Exception ex) {  	string ExceptionMsg = ex.Message + ex.StackTrace;  	// write to log file ..//寫到日志文件  	this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Proc_Exited,The following statement contains a magic number: lock (this.FailProcess)//將失敗進程加鎖   {  	if (((Process)sender).HasExited) {  		DateTime StartTime = ((Process)sender).StartTime;  		TimeSpan EndTime = new TimeSpan (((Process)sender).ExitTime.Ticks);  		if (EndTime.Subtract (new TimeSpan (StartTime.Ticks)).Duration ().TotalMilliseconds < 1000)  			// add to fail list ..//添加到失敗列  			this.FailProcess.Add (id);  	}  	// release the waiting thread ..//釋放等待線程                                                            	Monitor.PulseAll (this.FailProcess);  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Proc_Exited,The following statement contains a magic number: if (((Process)sender).HasExited) {  	DateTime StartTime = ((Process)sender).StartTime;  	TimeSpan EndTime = new TimeSpan (((Process)sender).ExitTime.Ticks);  	if (EndTime.Subtract (new TimeSpan (StartTime.Ticks)).Duration ().TotalMilliseconds < 1000)  		// add to fail list ..//添加到失敗列  		this.FailProcess.Add (id);  }  
Magic Number,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Proc_Exited,The following statement contains a magic number: if (EndTime.Subtract (new TimeSpan (StartTime.Ticks)).Duration ().TotalMilliseconds < 1000)  	// add to fail list ..//添加到失敗列  	this.FailProcess.Add (id);  
Magic Number,RenderServerGUI,RenderEvents,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\RenderEvents.cs,AppendLog,The following statement contains a magic number: if (!Open_LogForm) {  	if (Lines >= 5000)  		SaveLog ();  }  
Magic Number,RenderServerGUI,RenderEvents,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\RenderEvents.cs,AppendLog,The following statement contains a magic number: if (Lines >= 5000)  	SaveLog ();  
Magic Number,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,ReadData,The following statement contains a magic number: do {  	while (this.Base.HasChange)//如果得到或者設置數據狀態改變  	 {  		// read current job information ..//讀黨前的工作信息  		DataTable DataStatus = this.Base.GetQueueStatus;  		if (DataStatus != null) {  			#region Invoke Render Status Data Object Delegate Procedure調用Render狀態數據對象代表Procedure  			RenderDataCallBack RenderData = delegate (ListViewItem Item' string DeleteItemText) {  				if (!string.IsNullOrEmpty (DeleteItemText)) {  					for (int i = 0; i < ListView_Render_Status.Items.Count; i++) {  						// processing application all events ..//進程應用程序所有事件  						Application.DoEvents ();  						if (this.ListView_Render_Status.Items [i].SubItems [0].Text == DeleteItemText)  							// remove item ..//移除項  							this.ListView_Render_Status.Items [i].Remove ();  						// refresh control ..//刷新控制  						this.ListView_Render_Status.Update ();  					}  					return;  				}  				foreach (ListViewItem RenderItem in this.ListView_Render_Status.Items) {  					// processing application all events ..//進程應用程序所有事件  					Application.DoEvents ();  					if (RenderItem.Text == Item.Text) {  						// update the item of sub items ..//修改子項的項  						for (int i = 0; i < RenderItem.SubItems.Count; i++)  							RenderItem.SubItems [i] = Item.SubItems [i];  						// refresh control ..//刷新控制  						this.ListView_Render_Status.Update ();  						return;  					}  				}  				// processing application all events ..//processing應用程序所有事件  				Application.DoEvents ();  				// add new items to the listview control ..//添加新項到listview控制  				this.ListView_Render_Status.Items.Add (Item);  				// sorting ..//排序  				this.ListViewSorter.SortColumn = 0;  				this.ListView_Render_Status.Sort ();  				// refresh control ..//刷新控制  				this.ListView_Render_Status.Update ();  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0}"' "refresh listview render data."));  			};  			foreach (global::System.Data.DataRow row in DataStatus.Rows) {  				if (!RenderItemList.Contains (row ["Job_Id"].ToString ().Trim ()))  					RenderItemList.Add (row ["Job_Id"].ToString ().Trim ());  				string[] subitems =  {  					row ["Job_Id"].ToString ().Trim ()'  					row ["Job_Group_Id"].ToString ().Trim ()'  					row ["Proc_Id"].ToString ().Trim ()'  					row ["Proc_Type"].ToString ().Trim ()'  					row ["Command"].ToString ().Trim ()'  					row ["Args"].ToString ().Trim ()'  					row ["Status"].ToString ().Trim ()'  					row ["Start_Time"].ToString ().Trim ()'  					row ["Finish_Time"].ToString ().Trim ()  				};  				try {  					// invoke job list view delegate control ..//調用工作列view代表控制  					this.Invoke (RenderData' new object[] {  						new ListViewItem (subitems)'  						null  					});  					//調用RenderData  				}  				catch (InvalidOperationException) {  					// if delegate object already clean' exit loop ..//如果代表對象已經清空，退出loop  					break;  				}  			}  			// search deleted items ..//查看刪除項  			foreach (string s in RenderItemList) {  				if (DataStatus.PrimaryKey.Length == 0)  					break;  				if (!DataStatus.Rows.Contains (s)) {  					try {  						// invoke job list view delegate control ..//調用工作列視圖代表控制  						this.Invoke (RenderData' new object[] {  							new ListViewItem ()'  							s  						});  						// add to remove list ..//添加到移除列  						RenderDeleteList.Add (s);  					}  					catch (InvalidOperationException) {  						// if delegate object already clean' exit loop ..//如果代表對象已經清空，退出loop  						break;  					}  				}  			}  			foreach (string s in RenderDeleteList)  				// remove data record ..//移除數據記錄  				RenderItemList.Remove (s);  			// clear all delete list ..//清空所有刪除列  			RenderDeleteList.Clear ();  			#endregion  		}  		// reset change flag ..//重置改變標志  		this.Base.HasChange = false;  	}  	// set access state timespan ..//設置接口狀態timespan  	Thread.Sleep (500);  }  while (!requeststop);  
Magic Number,RenderServerGUI,Main_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Main_Form.cs,ReadData,The following statement contains a magic number: Thread.Sleep (500);  
Missing Default,RenderServerGUI,RenderBase,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Base.cs,Protocol,The following switch statement is missing a default case: switch (ActionHeader) {  #region Completed Jobs Workflow完成工作流  /*开启监听接受server端请求的数据，如果是请求completedjobs                                *则首先建立一张需要寄送的templetedatatable，然后从queuedatatable                                *取出status=completed or status=error的数据存入templetedatatable                                *然后清理queuedatatable中被挑选出来的数据                                *然后寄出templetedatatable到server端                                */case Server2Render.CommunicationType.COMPLETEDJOBS:  	try {  		// append to logs object ..//追加到日志對象0  		RenderEvents.AppendLog (string.Format ("{0}"' "search completed type job behavior workflow."));  		// create completed datatable ..//創建完成數據表  		DataTable Completed = new DataTable ("Completed");  		Completed.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  		//Completed.Columns.Add(new DataColumn("Job_Id"' typeof(int)));  		Completed.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  		Completed.Columns.Add (new DataColumn ("Status"' typeof(JobStatusFlag)));  		Completed.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  		Completed.Columns.Add (new DataColumn ("Finish_Time"' typeof(DateTime)));  		if (QueueDataTable.Rows.Count > 0) {  			// select completed status flag ..//查看完成狀態標志  			DataRow[] completed_rows = QueueDataTable.Select (string.Format ("(Status = '{0}' Or Status = '{1}')"' JobStatusFlag.COMPLETED' JobStatusFlag.ERROR));  			for (int i = 0; i < completed_rows.Length; i++) {  				// add to completed datatable ..//添加到完成數據表  				DataRow newRow = Completed.NewRow ();  				newRow ["Job_Group_Id"] = completed_rows [i] ["Job_Group_Id"].ToString ().ToUpper ();  				//newRow["Job_Id"] = Convert.ToInt32(completed_rows[i]["Job_Id"]);  				newRow ["Job_Id"] = Convert.ToString (completed_rows [i] ["Job_Id"]);  				newRow ["Finish_Time"] = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  				if (completed_rows [i] ["Status"].ToString () == JobStatusFlag.ERROR.ToString ()) {  					newRow ["Status"] = JobStatusFlag.ERROR;  					newRow ["Start_Time"] = Convert.ToDateTime (completed_rows [i] ["Start_Time"]);  				}  				Completed.Rows.Add (newRow);  			}  			// commit data changes ..//提交數據改變  			Completed.AcceptChanges ();  			#region Cleanup Data Procedure清除數據過程  			// declare cleaned count variable ..//定義cleaned計算變量  			ushort cleaned = 0;  			// cleanup completed data ..//清空完成數據  			for (int i = 0; i < completed_rows.Length; i++) {  				DateTime canDeleted = Convert.ToDateTime (completed_rows [i] ["Finish_Time"]);  				TimeSpan lockspan = new TimeSpan (DateTime.Now.Ticks);  				// check whether the machine had been locked more than 5 minute ..//查看機器被鎖是否超過5分鐘  				if (lockspan.Subtract (new TimeSpan (canDeleted.Ticks)).Duration ().TotalMilliseconds >= 300000) {  					// remove completed row ..//移除完成行  					completed_rows [i].Delete ();  					// incremental count ..//增量計算  					cleaned++;  				}  			}  			// commit changes ..//提交改變  			this.QueueDataTable.AcceptChanges ();  			// append to logs object ..//追加到日志對象  			RenderEvents.AppendLog (string.Format ("has success cleanup {0} data."' cleaned));  			#endregion  			// set last change flag ..//設置上一次改變標志  			this.HasChange = true;  		}  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Completed);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0} complete object count: {1}"' "successful search completed type job behavior workflow."' Completed.Rows.Count));  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing completed workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Deleted Jobs Workflow刪除工作流  /*如果从server传过来的指令是deletejob                                  * 那么取出要删除的job列表List<int>，循环取出各个工作项                                  * ，从queuedatatable中取出job_id=item and status='processing'                                  * 然后循环取出proc_id项，kill掉this process                                  * 减少usagecore数量，从queuedatatable中移除this row                                  * 返回操作是否成功信息                                  */case Server2Render.CommunicationType.DELETEJOB:  	try {  		bool result = false;  		if (!QueueItems.ContainsKey ("Jobs") && ((IList<uint>)QueueItems ["Jobs"]).Count <= 0) {  			// response result ..//回應結果' MINUSERR(error flag)  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  			break;  		}  		foreach (int i in (IList<uint>)QueueItems ["Jobs"]) {  			//status為{1}是表示錯誤狀態  			string Expression = string.Format ("Job_Id = '{0}' And Status = '{1}'"' i' JobStatusFlag.PROCESSING);  			if (QueueDataTable.Rows.Count > 0) {  				// select current rendering job process ..//查看黨前Rendering工作進程  				DataRow[] delete_rows = QueueDataTable.Select (Expression);  				if (delete_rows.Length > 0) {  					// get process key ..//獲得進程主鍵  					int key = Convert.ToInt32 (delete_rows [0] ["Proc_Id"]);  					// delete process ..//刪除進程  					if (this.RenderProcess.ContainsKey (key))  						// kill mayabatch process ..//殺maya批程序  						Process.GetProcessById (this.RenderProcess [key]).Kill ();  					// decrement usage core count ..//減少UsageCore總數  					this.UsageCore--;  					// delete record from job datatable ..//從工作數據表刪除記錄  					QueueDataTable.Rows.Remove (delete_rows [0]);  					// append to logs object ..//追加到日志對象  					RenderEvents.AppendLog (string.Format ("{0} deleted job id: {1}' free core: {2}"' "successful deleted job behavior workflow."' i' this.UsageCore));  				}  				// commit changes ..//提交改變  				this.QueueDataTable.AcceptChanges ();  				// change result flag ..//改變結果標志  				result = true;  			}  			else {  				// change result flag ..//改變結果標志  				result = false;  				break;  			}  		}  		if (result)  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		else  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing delete job workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Running Job Workflow運行工作流  /*如果接受server端发送过来的指令是runningjobs                                  * 首先添加日志创建临时表running                                  * 从queuedatatable中选择status=‘PROCESSING’的数据                                  * 添加到running表中，返回running表到server端                                  */case Server2Render.CommunicationType.RUNNINGJOBS:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "search running type job behavior workflow."));  		// create running datatable ..//創建運行數據表  		DataTable Running = new DataTable ("Running");  		Running.Columns.Add (new DataColumn ("Job_Group_Id"' typeof(string)));  		Running.Columns.Add (new DataColumn ("Job_Id"' typeof(string)));  		Running.Columns.Add (new DataColumn ("Start_Time"' typeof(DateTime)));  		Running.Columns.Add (new DataColumn ("Render_Output"' typeof(string)));  		if (QueueDataTable.Rows.Count > 0) {  			// select running status flag ..//查看運行狀態標志  			DataRow[] running_rows = QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  			for (int i = 0; i < running_rows.Length; i++) {  				// get render output log ..//獲得Render輸出日志  				int proc_id = Convert.ToInt32 (running_rows [i] ["Proc_Id"]);  				// add to running datatable ..//添加到運行數據表  				DataRow newRow = Running.NewRow ();  				newRow ["Job_Group_Id"] = running_rows [i] ["Job_Group_Id"].ToString ();  				newRow ["Job_Id"] = running_rows [i] ["Job_Id"].ToString ();  				newRow ["Start_Time"] = Convert.ToDateTime (running_rows [i] ["Start_Time"]);  				lock (this.ProcOutputLog) {  					if (this.ProcOutputLog.ContainsKey (proc_id))  						newRow ["Render_Output"] = this.ProcOutputLog [proc_id];  					else  						newRow ["Render_Output"] = DBNull.Value;  				}  				Running.Rows.Add (newRow);  			}  			// commit data changes ..//提交數據改變  			Running.AcceptChanges ();  		}  		// response result ..//回應結果'PLUSOK(Success Flag.)  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' Running);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0} running object count: {1}"' "successful search running type job behavior workflow."' Running.Rows.Count));  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing running workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region Dispatch Job Workflow分派工作流(關于服務器端添加客戶端發送過來的指令的數據)  /*如果接受server端发送过来的是dispatch则首先                                  * 写入log，取出list<dispatch>'dispatch循环list<dispatch>                                  * 判断queuedatatable中是否包含该dispatch，如果不存在，则往queuedatatable                                  * 中添加该dispatch项，启动线程Rendering执行dispatch的工作                                  * 返回分配job是否成功                                  */case Server2Render.CommunicationType.DISPATCH:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "execute dispatch behavior workflow."));  		// analysis remote object ..//分析遠程對象  		IList<Dispatch> _obj = (IList<Dispatch>)QueueItems ["Dispatcher"];  		//Dispatch結構體(job_id等)  		if (_obj.Count > 0) {  			// add to queue data table ..//添加到隊列數據表  			foreach (Dispatch v in _obj) {  				// judge this job has been already exist ..//判斷這工作是否已經存在  				if (this.QueueDataTable.Select (string.Format ("Job_Id = {0}"' v.Job_Id)).Length > 0)  					continue;  				DataRow row = this.QueueDataTable.NewRow ();  				row ["Job_Group_Id"] = v.Job_Group_Id.ToString ().ToUpper ();  				row ["Job_Id"] = v.Job_Id;  				row ["Proc_Id"] = -1;  				row ["Proc_Type"] = v.Proc_Type;  				row ["Command"] = v.Command;  				row ["Args"] = v.Args;  				row ["Status"] = JobStatusFlag.PROCESSING;  				row ["Start_Time"] = DateTime.Now;  				this.QueueDataTable.Rows.Add (row);  				// commit changes ..//提交改變  				this.QueueDataTable.AcceptChanges ();  				// render processing ..//Render程序  				new Thread (new ParameterizedThreadStart (this.Rendering)).Start (row);  				//調用Rendering  				// append to logs object ..//追加到日志對象  				RenderEvents.AppendLog (string.Format ("{0} receive job id: {1}"' "successful receive job dispatch behavior workflow."' v.Job_Id));  			}  			// set last change flag ..//設置上一次改變標志  			this.HasChange = true;  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK);  		}  		else  			// response result ..//回應結果  			__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "executing dispatch workflow has happen exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  #region IsBusy Status Workflow忙碌狀態工作流  /*如果服务器端发送过来的是isbusy命令，则首先写日志                                  * 创建dictionary类型的state，                                  * 判断usagecore是否大于零且queuedatatable是否大于零                                  * 如果都成立，取出queuedatatable中status=‘processing’的row                                  * 如果使用usagecore<总数，填充state信息                                  */case Server2Render.CommunicationType.ISBUSY:  	try {  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "report the machine core behavior workflow."));  		IDictionary<string' object> state = null;  		DataRow row = this.QueueDataTable.NewRow ();  		if (this.UsageCore > 0 && this.QueueDataTable.Rows.Count > 0)//如果進程數量與隊列數據表有數據  		 {  			DataRow[] busy_rows = this.QueueDataTable.Select (string.Format ("Status = '{0}'"' JobStatusFlag.PROCESSING));  			if (this.UsageCore < this.EnvSvr.Cores)//判斷進程數量是否小于獲取處理器的數量  			 {  				state = new Dictionary<string' object> {  					{  						"IsBusy"'  						true  					}'  					{  						"ProcessType"'  						busy_rows [0] ["Proc_Type"]  					}'  					{  						"UsageCore"'  						this.UsageCore  					}'  					{  						"TotalCore"'  						this.EnvSvr.Cores  					}  				};  				if (busy_rows [0] ["Proc_Type"].ToString ().Trim () == "Client")  					state ["UsageCore"] = this.EnvSvr.Cores;  			}  			else {  				state = new Dictionary<string' object> {  					{  						"IsBusy"'  						true  					}'  					{  						"ProcessType"'  						busy_rows [0] ["Proc_Type"]  					}'  					{  						"UsageCore"'  						this.EnvSvr.Cores  					}'  					{  						"TotalCore"'  						this.EnvSvr.Cores  					}  				};  			}  		}  		else {  			state = new Dictionary<string' object> {  				{  					"IsBusy"'  					false  				}'  				{  					"ProcessType"'  					"None"  				}'  				{  					"UsageCore"'  					0  				}'  				{  					"TotalCore"'  					this.EnvSvr.Cores  				}  			};  		}  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.PLUSOK' state);  	}  	catch (Exception ex) {  		// response result ..//回應結果  		__returnObject = ServerObject.Response (ServerReponse.ResponseSign.MINUSERR);  		// append to logs object ..//追加到日志對象  		RenderEvents.AppendLog (string.Format ("{0}"' "has happen workflow exception error."));  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// write to log file ..//寫到日志文件  		this.EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' true);  	}  	finally {  		// response object ..//回應對象  		client.Send (this.EnvSvr.Serialize (__returnObject));  	}  	break;  #endregion  }  
Missing Default,RenderServerGUI,IP_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\IP_Form.cs,FormControls,The following switch statement is missing a default case: switch (resultVar) {  case ConnectResult.SUCCESS:  	ConnectOkMsg = "Success'Congratulations!";  	MessageBox.Show (this.ConnectOkMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  case ConnectResult.FAILCONNECT:  	ConnectErrMsg = "Fail'Please try again!";  	MessageBox.Show (this.ConnectErrMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  }  
Missing Default,RenderServerGUI,Net_Form,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenderServerGUI\Net_Form.cs,FormControls,The following switch statement is missing a default case: switch (resultVar) {  case ConnectResult.SUCCESS:  	MessageBox.Show (this.ConnectOkMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  case ConnectResult.FAILCONNECT:  	MessageBox.Show (this.ConnectErrMsg' AssemblyInfoClass.ProductInfo' MessageBoxButtons.OK' MessageBoxIcon.Information);  	break;  }  
