Implementation smell,Namespace,Class,File,Method,Description
Long Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The method has 357 lines of code.
Long Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,SendDocument,The method has 100 lines of code.
Long Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Mapping,The method has 111 lines of code.
Long Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,The method has 119 lines of code.
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,Cyclomatic complexity of the method is 57
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,SendDocument,Cyclomatic complexity of the method is 8
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Mapping,Cyclomatic complexity of the method is 56
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,CheckPrinciples,Cyclomatic complexity of the method is 10
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetMachineList,Cyclomatic complexity of the method is 8
Complex Method,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,Cyclomatic complexity of the method is 35
Long Statement,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,SendDocument,The length of the statement  "		if (Filesys.Convert (FileSystem.RenderFileType.Rbr' FileSystem.RenderMethod.Console' File.FullName' ref renderObjects)) { " is 121.
Long Statement,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,SendDocument,The length of the statement  "							IList<object> packaged = EnvComm.Package (Client2Server.CommunicationType.JOBQUEUEADD' Mapping ((IDictionary<string' object>)kv.Value)); " is 136.
Long Statement,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,CheckPrinciples,The length of the statement  "			if (Dictionarys ["name"] != null && Dictionarys ["name"].ToString () != string.Empty && Dictionarys ["waitFor"] != null && Dictionarys ["waitFor"].ToString () != string.Empty) { " is 177.
Long Statement,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,The length of the statement  "		IList<string> machines = GetMachineList (row ["Pool_Id"].ToString ()' Ds.Tables ["Machine"]' Ds.Tables ["Machine_Pool"]); " is 121.
Complex Conditional,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,CheckPrinciples,The conditional expression  "Dictionarys ["name"] != null && Dictionarys ["name"].ToString () != string.Empty && Dictionarys ["waitFor"] != null && Dictionarys ["waitFor"].ToString () != string.Empty"  is complex.
Empty Catch Block,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The method has an empty catch block.
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args [0] != null) {  	#region 傳入参数非空  	Console.WriteLine ("Reading EnvironemtFile from:\r\n\t" + EnvSvr.EnvironemtFilePath.ToString () + "\r\n\r\n");  	// 檢測renbar環境設定的二進制文件(Environment.rbe) check renbar environment binary file ..  	if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  		#region 不存在，則顯示錯誤信息並寫入日志  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		// 輸出信息提示【優先設定環境】 output error message ..  		Console.WriteLine ("\t" + ReturnCode (false));  		string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		#endregion  	}  	else {  		#region 存在環境文件、嘗試連接、注冊信息  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t Get the Environment setting successed! \r\n");  		Console.WriteLine ("=============================================================\r\n");  		try {  			// 讀取並緩存環境設定數據 restore environment setting ..  			EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  			string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  			Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  			Console.WriteLine ("=============================================================\r\n");  			// 鏈接遠端服務器 connect remote server ..  			Console.WriteLine ("Try to connect to the remote server ……\r\n");  			if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				#region 無法連接  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 輸出信息並寫入日志 output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				//？？？？？？？？？？  				return;  				#endregion  			}  			else {  				#region 可連接，則嘗試注冊本機信息  				// 注冊本機信息 registry local machine to server request ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Connect the Server successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Try to registry local machine……\r\n");  				if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  					Console.WriteLine ("\t" + ReturnCode (false));  					//1  					// 失敗 output error message ..  					string ExceptionMsg = "\t can't registry local machine information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					IsConnected = true;  					Console.WriteLine ("\t" + ReturnCode (true));  					//0  					// 成功 output Success message ..  					Console.WriteLine ("\t Registry local machine information successed! \r\n");  					Console.WriteLine ("=============================================================\r\n");  				}  				#endregion  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// 輸出異常信息 output error message ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// 寫入日志 write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			return;  		}  		#endregion  		#region 根據指令進行操作  		Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  		switch (args [0].ToLower ()) {  		#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  		case "-f":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\r\n");  				Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  				global::System.Threading.Thread.Sleep (500);  				// create check file object ..  				FileInfo file = new FileInfo (args [1]);  				// analysis file path and context ..  				if (!file.Exists) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					if (!file.Extension.ToLower ().Equals (".rbr")) {  						Console.WriteLine ("\t" + ReturnCode (false));  						// output error message ..  						string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  						Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  						Console.WriteLine ("=============================================================\r\n");  						return;  					}  					else {  						Console.WriteLine ("\t" + ReturnCode (true));  						Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  						Console.WriteLine ("=============================================================\r\n");  						// analysis and send ..  						SendDocument (file);  					}  				}  			}  			break;  		#endregion  		#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  		case "-c":  			// create connect server object ..  			ScanPort scanServer = new ScanPort ();  			// confirm whether can connect server ..  			if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine (" \t Connected! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  		case "-g":  			// check the gui app exist in machine process ..  			if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t RenbarGUI is running……");  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t No RenbarGUI is running");  				Console.WriteLine ("=============================================================\r\n");  				try {  					Console.WriteLine ("Trying to start the RenbarGUI……");  					Process p = new Process ();  					p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  					//p.StartInfo.Arguments = Console.ReadLine();  					p.Start ();  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Start RenbarGUI successed!");  					Console.WriteLine ("=============================================================\r\n");  				}  				catch (Exception ex) {  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					// write to log file ..  					// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				}  			}  			break;  		#endregion  		#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  		case "-p":  			Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  			string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  			if (!string.IsNullOrEmpty (primary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (primary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  		case "-sp":  			try {  				Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  				string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  				if (!string.IsNullOrEmpty (secondary_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (secondary_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t No shareable pool exist ……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the shareable pool info ……");  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			break;  		#endregion  		#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  		case "-pd":  			Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo);  			Console.WriteLine (AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  			Console.WriteLine ("=============================================================\r\n");  			break;  		#endregion  		#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  		case "-ps":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  				string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  				if (!string.IsNullOrEmpty (ps_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  		case "-pm":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  				string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  				if (!string.IsNullOrEmpty (pm_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (pm_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region Default條件下輸出提示信息 Print Syntax Default Case  		default:  			PrintSyntax ();  			break;  		#endregion  		}  		#endregion  		#region 退出，再次注冊、關閉連接  		try {  			if (IsConnected) {  				Console.WriteLine ("MISSION COMPLETE ! ! ");  				// registry local machine to server request ..  				if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  					// 不能注冊本機信息則輸出信息 output error message ..  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = "\t Can't registry local machine offline information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  				else {  					// 能注冊則在注冊完成后關閉連接  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  			}  		}  		catch {  		}  		finally {  			EnvComm.Disconnect ();  		}  		#endregion  	}  	#endregion  }  else {  	#region 傳入參數為空，則輸出其正確語法及示例提示  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n\r\n");  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args [0] != null) {  	#region 傳入参数非空  	Console.WriteLine ("Reading EnvironemtFile from:\r\n\t" + EnvSvr.EnvironemtFilePath.ToString () + "\r\n\r\n");  	// 檢測renbar環境設定的二進制文件(Environment.rbe) check renbar environment binary file ..  	if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  		#region 不存在，則顯示錯誤信息並寫入日志  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		// 輸出信息提示【優先設定環境】 output error message ..  		Console.WriteLine ("\t" + ReturnCode (false));  		string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		#endregion  	}  	else {  		#region 存在環境文件、嘗試連接、注冊信息  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t Get the Environment setting successed! \r\n");  		Console.WriteLine ("=============================================================\r\n");  		try {  			// 讀取並緩存環境設定數據 restore environment setting ..  			EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  			string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  			Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  			Console.WriteLine ("=============================================================\r\n");  			// 鏈接遠端服務器 connect remote server ..  			Console.WriteLine ("Try to connect to the remote server ……\r\n");  			if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				#region 無法連接  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 輸出信息並寫入日志 output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				//？？？？？？？？？？  				return;  				#endregion  			}  			else {  				#region 可連接，則嘗試注冊本機信息  				// 注冊本機信息 registry local machine to server request ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Connect the Server successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Try to registry local machine……\r\n");  				if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  					Console.WriteLine ("\t" + ReturnCode (false));  					//1  					// 失敗 output error message ..  					string ExceptionMsg = "\t can't registry local machine information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					IsConnected = true;  					Console.WriteLine ("\t" + ReturnCode (true));  					//0  					// 成功 output Success message ..  					Console.WriteLine ("\t Registry local machine information successed! \r\n");  					Console.WriteLine ("=============================================================\r\n");  				}  				#endregion  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// 輸出異常信息 output error message ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// 寫入日志 write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			return;  		}  		#endregion  		#region 根據指令進行操作  		Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  		switch (args [0].ToLower ()) {  		#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  		case "-f":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\r\n");  				Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  				global::System.Threading.Thread.Sleep (500);  				// create check file object ..  				FileInfo file = new FileInfo (args [1]);  				// analysis file path and context ..  				if (!file.Exists) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					if (!file.Extension.ToLower ().Equals (".rbr")) {  						Console.WriteLine ("\t" + ReturnCode (false));  						// output error message ..  						string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  						Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  						Console.WriteLine ("=============================================================\r\n");  						return;  					}  					else {  						Console.WriteLine ("\t" + ReturnCode (true));  						Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  						Console.WriteLine ("=============================================================\r\n");  						// analysis and send ..  						SendDocument (file);  					}  				}  			}  			break;  		#endregion  		#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  		case "-c":  			// create connect server object ..  			ScanPort scanServer = new ScanPort ();  			// confirm whether can connect server ..  			if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine (" \t Connected! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  		case "-g":  			// check the gui app exist in machine process ..  			if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t RenbarGUI is running……");  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t No RenbarGUI is running");  				Console.WriteLine ("=============================================================\r\n");  				try {  					Console.WriteLine ("Trying to start the RenbarGUI……");  					Process p = new Process ();  					p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  					//p.StartInfo.Arguments = Console.ReadLine();  					p.Start ();  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Start RenbarGUI successed!");  					Console.WriteLine ("=============================================================\r\n");  				}  				catch (Exception ex) {  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					// write to log file ..  					// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				}  			}  			break;  		#endregion  		#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  		case "-p":  			Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  			string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  			if (!string.IsNullOrEmpty (primary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (primary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  		case "-sp":  			try {  				Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  				string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  				if (!string.IsNullOrEmpty (secondary_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (secondary_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t No shareable pool exist ……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the shareable pool info ……");  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			break;  		#endregion  		#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  		case "-pd":  			Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo);  			Console.WriteLine (AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  			Console.WriteLine ("=============================================================\r\n");  			break;  		#endregion  		#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  		case "-ps":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  				string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  				if (!string.IsNullOrEmpty (ps_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  		case "-pm":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  				string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  				if (!string.IsNullOrEmpty (pm_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (pm_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region Default條件下輸出提示信息 Print Syntax Default Case  		default:  			PrintSyntax ();  			break;  		#endregion  		}  		#endregion  		#region 退出，再次注冊、關閉連接  		try {  			if (IsConnected) {  				Console.WriteLine ("MISSION COMPLETE ! ! ");  				// registry local machine to server request ..  				if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  					// 不能注冊本機信息則輸出信息 output error message ..  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = "\t Can't registry local machine offline information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  				else {  					// 能注冊則在注冊完成后關閉連接  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  			}  		}  		catch {  		}  		finally {  			EnvComm.Disconnect ();  		}  		#endregion  	}  	#endregion  }  else {  	#region 傳入參數為空，則輸出其正確語法及示例提示  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n\r\n");  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args [0] != null) {  	#region 傳入参数非空  	Console.WriteLine ("Reading EnvironemtFile from:\r\n\t" + EnvSvr.EnvironemtFilePath.ToString () + "\r\n\r\n");  	// 檢測renbar環境設定的二進制文件(Environment.rbe) check renbar environment binary file ..  	if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  		#region 不存在，則顯示錯誤信息並寫入日志  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		// 輸出信息提示【優先設定環境】 output error message ..  		Console.WriteLine ("\t" + ReturnCode (false));  		string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		#endregion  	}  	else {  		#region 存在環境文件、嘗試連接、注冊信息  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t Get the Environment setting successed! \r\n");  		Console.WriteLine ("=============================================================\r\n");  		try {  			// 讀取並緩存環境設定數據 restore environment setting ..  			EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  			string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  			Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  			Console.WriteLine ("=============================================================\r\n");  			// 鏈接遠端服務器 connect remote server ..  			Console.WriteLine ("Try to connect to the remote server ……\r\n");  			if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				#region 無法連接  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 輸出信息並寫入日志 output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				//？？？？？？？？？？  				return;  				#endregion  			}  			else {  				#region 可連接，則嘗試注冊本機信息  				// 注冊本機信息 registry local machine to server request ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Connect the Server successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Try to registry local machine……\r\n");  				if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  					Console.WriteLine ("\t" + ReturnCode (false));  					//1  					// 失敗 output error message ..  					string ExceptionMsg = "\t can't registry local machine information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					IsConnected = true;  					Console.WriteLine ("\t" + ReturnCode (true));  					//0  					// 成功 output Success message ..  					Console.WriteLine ("\t Registry local machine information successed! \r\n");  					Console.WriteLine ("=============================================================\r\n");  				}  				#endregion  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// 輸出異常信息 output error message ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// 寫入日志 write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			return;  		}  		#endregion  		#region 根據指令進行操作  		Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  		switch (args [0].ToLower ()) {  		#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  		case "-f":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\r\n");  				Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  				global::System.Threading.Thread.Sleep (500);  				// create check file object ..  				FileInfo file = new FileInfo (args [1]);  				// analysis file path and context ..  				if (!file.Exists) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					if (!file.Extension.ToLower ().Equals (".rbr")) {  						Console.WriteLine ("\t" + ReturnCode (false));  						// output error message ..  						string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  						Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  						Console.WriteLine ("=============================================================\r\n");  						return;  					}  					else {  						Console.WriteLine ("\t" + ReturnCode (true));  						Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  						Console.WriteLine ("=============================================================\r\n");  						// analysis and send ..  						SendDocument (file);  					}  				}  			}  			break;  		#endregion  		#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  		case "-c":  			// create connect server object ..  			ScanPort scanServer = new ScanPort ();  			// confirm whether can connect server ..  			if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine (" \t Connected! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  		case "-g":  			// check the gui app exist in machine process ..  			if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t RenbarGUI is running……");  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t No RenbarGUI is running");  				Console.WriteLine ("=============================================================\r\n");  				try {  					Console.WriteLine ("Trying to start the RenbarGUI……");  					Process p = new Process ();  					p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  					//p.StartInfo.Arguments = Console.ReadLine();  					p.Start ();  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Start RenbarGUI successed!");  					Console.WriteLine ("=============================================================\r\n");  				}  				catch (Exception ex) {  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					// write to log file ..  					// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				}  			}  			break;  		#endregion  		#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  		case "-p":  			Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  			string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  			if (!string.IsNullOrEmpty (primary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (primary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  		case "-sp":  			try {  				Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  				string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  				if (!string.IsNullOrEmpty (secondary_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (secondary_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t No shareable pool exist ……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the shareable pool info ……");  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			break;  		#endregion  		#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  		case "-pd":  			Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo);  			Console.WriteLine (AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  			Console.WriteLine ("=============================================================\r\n");  			break;  		#endregion  		#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  		case "-ps":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  				string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  				if (!string.IsNullOrEmpty (ps_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  		case "-pm":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  				string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  				if (!string.IsNullOrEmpty (pm_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (pm_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region Default條件下輸出提示信息 Print Syntax Default Case  		default:  			PrintSyntax ();  			break;  		#endregion  		}  		#endregion  		#region 退出，再次注冊、關閉連接  		try {  			if (IsConnected) {  				Console.WriteLine ("MISSION COMPLETE ! ! ");  				// registry local machine to server request ..  				if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  					// 不能注冊本機信息則輸出信息 output error message ..  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = "\t Can't registry local machine offline information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  				else {  					// 能注冊則在注冊完成后關閉連接  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  			}  		}  		catch {  		}  		finally {  			EnvComm.Disconnect ();  		}  		#endregion  	}  	#endregion  }  else {  	#region 傳入參數為空，則輸出其正確語法及示例提示  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n\r\n");  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length > 0 && args [0] != null) {  	#region 傳入参数非空  	Console.WriteLine ("Reading EnvironemtFile from:\r\n\t" + EnvSvr.EnvironemtFilePath.ToString () + "\r\n\r\n");  	// 檢測renbar環境設定的二進制文件(Environment.rbe) check renbar environment binary file ..  	if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  		#region 不存在，則顯示錯誤信息並寫入日志  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		// 輸出信息提示【優先設定環境】 output error message ..  		Console.WriteLine ("\t" + ReturnCode (false));  		string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		#endregion  	}  	else {  		#region 存在環境文件、嘗試連接、注冊信息  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t Get the Environment setting successed! \r\n");  		Console.WriteLine ("=============================================================\r\n");  		try {  			// 讀取並緩存環境設定數據 restore environment setting ..  			EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  			string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  			Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  			Console.WriteLine ("=============================================================\r\n");  			// 鏈接遠端服務器 connect remote server ..  			Console.WriteLine ("Try to connect to the remote server ……\r\n");  			if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				#region 無法連接  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 輸出信息並寫入日志 output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				//？？？？？？？？？？  				return;  				#endregion  			}  			else {  				#region 可連接，則嘗試注冊本機信息  				// 注冊本機信息 registry local machine to server request ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Connect the Server successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Try to registry local machine……\r\n");  				if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  					Console.WriteLine ("\t" + ReturnCode (false));  					//1  					// 失敗 output error message ..  					string ExceptionMsg = "\t can't registry local machine information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					IsConnected = true;  					Console.WriteLine ("\t" + ReturnCode (true));  					//0  					// 成功 output Success message ..  					Console.WriteLine ("\t Registry local machine information successed! \r\n");  					Console.WriteLine ("=============================================================\r\n");  				}  				#endregion  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// 輸出異常信息 output error message ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// 寫入日志 write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			return;  		}  		#endregion  		#region 根據指令進行操作  		Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  		switch (args [0].ToLower ()) {  		#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  		case "-f":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\r\n");  				Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  				Console.WriteLine ("=============================================================\r\n");  				Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  				global::System.Threading.Thread.Sleep (500);  				// create check file object ..  				FileInfo file = new FileInfo (args [1]);  				// analysis file path and context ..  				if (!file.Exists) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					if (!file.Extension.ToLower ().Equals (".rbr")) {  						Console.WriteLine ("\t" + ReturnCode (false));  						// output error message ..  						string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  						Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  						Console.WriteLine ("=============================================================\r\n");  						return;  					}  					else {  						Console.WriteLine ("\t" + ReturnCode (true));  						Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  						Console.WriteLine ("=============================================================\r\n");  						// analysis and send ..  						SendDocument (file);  					}  				}  			}  			break;  		#endregion  		#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  		case "-c":  			// create connect server object ..  			ScanPort scanServer = new ScanPort ();  			// confirm whether can connect server ..  			if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  				Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine (" \t Connected! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  		case "-g":  			// check the gui app exist in machine process ..  			if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t RenbarGUI is running……");  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t No RenbarGUI is running");  				Console.WriteLine ("=============================================================\r\n");  				try {  					Console.WriteLine ("Trying to start the RenbarGUI……");  					Process p = new Process ();  					p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  					//p.StartInfo.Arguments = Console.ReadLine();  					p.Start ();  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Start RenbarGUI successed!");  					Console.WriteLine ("=============================================================\r\n");  				}  				catch (Exception ex) {  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = ex.Message + ex.StackTrace;  					Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					// write to log file ..  					// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  					EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  				}  			}  			break;  		#endregion  		#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  		case "-p":  			Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  			string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  			if (!string.IsNullOrEmpty (primary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (primary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  			break;  		#endregion  		#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  		case "-sp":  			try {  				Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  				string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  				if (!string.IsNullOrEmpty (secondary_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (secondary_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t No shareable pool exist ……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the shareable pool info ……");  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				string ExceptionMsg = ex.Message + ex.StackTrace;  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  			break;  		#endregion  		#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  		case "-pd":  			Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo);  			Console.WriteLine (AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  			Console.WriteLine ("=============================================================\r\n");  			break;  		#endregion  		#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  		case "-ps":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  				string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  				if (!string.IsNullOrEmpty (ps_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  		case "-pm":  			if (args.Length < 2) {  				Console.WriteLine ("Syntax Error:\r\n");  				Console.WriteLine ("=============================================================\r\n");  				PrintSyntax ();  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  				string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  				if (!string.IsNullOrEmpty (pm_result)) {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (true));  					// return message ..  					Console.WriteLine (pm_result);  					Console.WriteLine ("=============================================================\r\n");  				}  				else {  					// return code ..  					Console.WriteLine ("\t" + ReturnCode (false));  					Console.WriteLine ("\t Failed to get the information……");  					Console.WriteLine ("=============================================================\r\n");  				}  			}  			break;  		#endregion  		#region Default條件下輸出提示信息 Print Syntax Default Case  		default:  			PrintSyntax ();  			break;  		#endregion  		}  		#endregion  		#region 退出，再次注冊、關閉連接  		try {  			if (IsConnected) {  				Console.WriteLine ("MISSION COMPLETE ! ! ");  				// registry local machine to server request ..  				if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  					// 不能注冊本機信息則輸出信息 output error message ..  					Console.WriteLine ("\t" + ReturnCode (false));  					string ExceptionMsg = "\t Can't registry local machine offline information !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  				else {  					// 能注冊則在注冊完成后關閉連接  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  					Console.WriteLine ("=============================================================\r\n\r\n");  				}  			}  		}  		catch {  		}  		finally {  			EnvComm.Disconnect ();  		}  		#endregion  	}  	#endregion  }  else {  	#region 傳入參數為空，則輸出其正確語法及示例提示  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n\r\n");  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  	#region 不存在，則顯示錯誤信息並寫入日志  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	// 輸出信息提示【優先設定環境】 output error message ..  	Console.WriteLine ("\t" + ReturnCode (false));  	string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  	Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  	Console.WriteLine ("=============================================================\r\n");  	// 寫入日志 write to log file ..  	// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	#endregion  }  else {  	#region 存在環境文件、嘗試連接、注冊信息  	Console.WriteLine ("\t" + ReturnCode (true));  	Console.WriteLine ("\t Get the Environment setting successed! \r\n");  	Console.WriteLine ("=============================================================\r\n");  	try {  		// 讀取並緩存環境設定數據 restore environment setting ..  		EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  		string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  		Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  		Console.WriteLine ("=============================================================\r\n");  		// 鏈接遠端服務器 connect remote server ..  		Console.WriteLine ("Try to connect to the remote server ……\r\n");  		if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			#region 無法連接  			Console.WriteLine ("\t" + ReturnCode (false));  			//1  			// 輸出信息並寫入日志 output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			//？？？？？？？？？？  			return;  			#endregion  		}  		else {  			#region 可連接，則嘗試注冊本機信息  			// 注冊本機信息 registry local machine to server request ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Connect the Server successed! \r\n");  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Try to registry local machine……\r\n");  			if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 失敗 output error message ..  				string ExceptionMsg = "\t can't registry local machine information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				IsConnected = true;  				Console.WriteLine ("\t" + ReturnCode (true));  				//0  				// 成功 output Success message ..  				Console.WriteLine ("\t Registry local machine information successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			#endregion  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// 輸出異常信息 output error message ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		return;  	}  	#endregion  	#region 根據指令進行操作  	Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  	switch (args [0].ToLower ()) {  	#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  	case "-f":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  			global::System.Threading.Thread.Sleep (500);  			// create check file object ..  			FileInfo file = new FileInfo (args [1]);  			// analysis file path and context ..  			if (!file.Exists) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				if (!file.Extension.ToLower ().Equals (".rbr")) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  					Console.WriteLine ("=============================================================\r\n");  					// analysis and send ..  					SendDocument (file);  				}  			}  		}  		break;  	#endregion  	#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  	case "-c":  		// create connect server object ..  		ScanPort scanServer = new ScanPort ();  		// confirm whether can connect server ..  		if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine (" \t Connected! \r\n");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  	case "-g":  		// check the gui app exist in machine process ..  		if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t RenbarGUI is running……");  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t No RenbarGUI is running");  			Console.WriteLine ("=============================================================\r\n");  			try {  				Console.WriteLine ("Trying to start the RenbarGUI……");  				Process p = new Process ();  				p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  				//p.StartInfo.Arguments = Console.ReadLine();  				p.Start ();  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Start RenbarGUI successed!");  				Console.WriteLine ("=============================================================\r\n");  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  		}  		break;  	#endregion  	#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  	case "-p":  		Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  		string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  		if (!string.IsNullOrEmpty (primary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (primary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  	case "-sp":  		try {  			Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  			string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  			if (!string.IsNullOrEmpty (secondary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (secondary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t No shareable pool exist ……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the shareable pool info ……");  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		break;  	#endregion  	#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  	case "-pd":  		Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo);  		Console.WriteLine (AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  		Console.WriteLine ("=============================================================\r\n");  		break;  	#endregion  	#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  	case "-ps":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  			string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  			if (!string.IsNullOrEmpty (ps_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  	case "-pm":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  			string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  			if (!string.IsNullOrEmpty (pm_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (pm_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region Default條件下輸出提示信息 Print Syntax Default Case  	default:  		PrintSyntax ();  		break;  	#endregion  	}  	#endregion  	#region 退出，再次注冊、關閉連接  	try {  		if (IsConnected) {  			Console.WriteLine ("MISSION COMPLETE ! ! ");  			// registry local machine to server request ..  			if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  				// 不能注冊本機信息則輸出信息 output error message ..  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = "\t Can't registry local machine offline information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  			else {  				// 能注冊則在注冊完成后關閉連接  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  		}  	}  	catch {  	}  	finally {  		EnvComm.Disconnect ();  	}  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  	#region 不存在，則顯示錯誤信息並寫入日志  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	// 輸出信息提示【優先設定環境】 output error message ..  	Console.WriteLine ("\t" + ReturnCode (false));  	string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  	Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  	Console.WriteLine ("=============================================================\r\n");  	// 寫入日志 write to log file ..  	// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	#endregion  }  else {  	#region 存在環境文件、嘗試連接、注冊信息  	Console.WriteLine ("\t" + ReturnCode (true));  	Console.WriteLine ("\t Get the Environment setting successed! \r\n");  	Console.WriteLine ("=============================================================\r\n");  	try {  		// 讀取並緩存環境設定數據 restore environment setting ..  		EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  		string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  		Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  		Console.WriteLine ("=============================================================\r\n");  		// 鏈接遠端服務器 connect remote server ..  		Console.WriteLine ("Try to connect to the remote server ……\r\n");  		if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			#region 無法連接  			Console.WriteLine ("\t" + ReturnCode (false));  			//1  			// 輸出信息並寫入日志 output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			//？？？？？？？？？？  			return;  			#endregion  		}  		else {  			#region 可連接，則嘗試注冊本機信息  			// 注冊本機信息 registry local machine to server request ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Connect the Server successed! \r\n");  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Try to registry local machine……\r\n");  			if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 失敗 output error message ..  				string ExceptionMsg = "\t can't registry local machine information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				IsConnected = true;  				Console.WriteLine ("\t" + ReturnCode (true));  				//0  				// 成功 output Success message ..  				Console.WriteLine ("\t Registry local machine information successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			#endregion  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// 輸出異常信息 output error message ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		return;  	}  	#endregion  	#region 根據指令進行操作  	Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  	switch (args [0].ToLower ()) {  	#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  	case "-f":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  			global::System.Threading.Thread.Sleep (500);  			// create check file object ..  			FileInfo file = new FileInfo (args [1]);  			// analysis file path and context ..  			if (!file.Exists) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				if (!file.Extension.ToLower ().Equals (".rbr")) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  					Console.WriteLine ("=============================================================\r\n");  					// analysis and send ..  					SendDocument (file);  				}  			}  		}  		break;  	#endregion  	#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  	case "-c":  		// create connect server object ..  		ScanPort scanServer = new ScanPort ();  		// confirm whether can connect server ..  		if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine (" \t Connected! \r\n");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  	case "-g":  		// check the gui app exist in machine process ..  		if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t RenbarGUI is running……");  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t No RenbarGUI is running");  			Console.WriteLine ("=============================================================\r\n");  			try {  				Console.WriteLine ("Trying to start the RenbarGUI……");  				Process p = new Process ();  				p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  				//p.StartInfo.Arguments = Console.ReadLine();  				p.Start ();  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Start RenbarGUI successed!");  				Console.WriteLine ("=============================================================\r\n");  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  		}  		break;  	#endregion  	#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  	case "-p":  		Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  		string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  		if (!string.IsNullOrEmpty (primary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (primary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  	case "-sp":  		try {  			Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  			string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  			if (!string.IsNullOrEmpty (secondary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (secondary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t No shareable pool exist ……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the shareable pool info ……");  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		break;  	#endregion  	#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  	case "-pd":  		Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo);  		Console.WriteLine (AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  		Console.WriteLine ("=============================================================\r\n");  		break;  	#endregion  	#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  	case "-ps":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  			string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  			if (!string.IsNullOrEmpty (ps_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  	case "-pm":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  			string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  			if (!string.IsNullOrEmpty (pm_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (pm_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region Default條件下輸出提示信息 Print Syntax Default Case  	default:  		PrintSyntax ();  		break;  	#endregion  	}  	#endregion  	#region 退出，再次注冊、關閉連接  	try {  		if (IsConnected) {  			Console.WriteLine ("MISSION COMPLETE ! ! ");  			// registry local machine to server request ..  			if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  				// 不能注冊本機信息則輸出信息 output error message ..  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = "\t Can't registry local machine offline information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  			else {  				// 能注冊則在注冊完成后關閉連接  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  		}  	}  	catch {  	}  	finally {  		EnvComm.Disconnect ();  	}  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  	#region 不存在，則顯示錯誤信息並寫入日志  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	// 輸出信息提示【優先設定環境】 output error message ..  	Console.WriteLine ("\t" + ReturnCode (false));  	string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  	Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  	Console.WriteLine ("=============================================================\r\n");  	// 寫入日志 write to log file ..  	// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	#endregion  }  else {  	#region 存在環境文件、嘗試連接、注冊信息  	Console.WriteLine ("\t" + ReturnCode (true));  	Console.WriteLine ("\t Get the Environment setting successed! \r\n");  	Console.WriteLine ("=============================================================\r\n");  	try {  		// 讀取並緩存環境設定數據 restore environment setting ..  		EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  		string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  		Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  		Console.WriteLine ("=============================================================\r\n");  		// 鏈接遠端服務器 connect remote server ..  		Console.WriteLine ("Try to connect to the remote server ……\r\n");  		if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			#region 無法連接  			Console.WriteLine ("\t" + ReturnCode (false));  			//1  			// 輸出信息並寫入日志 output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			//？？？？？？？？？？  			return;  			#endregion  		}  		else {  			#region 可連接，則嘗試注冊本機信息  			// 注冊本機信息 registry local machine to server request ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Connect the Server successed! \r\n");  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Try to registry local machine……\r\n");  			if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 失敗 output error message ..  				string ExceptionMsg = "\t can't registry local machine information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				IsConnected = true;  				Console.WriteLine ("\t" + ReturnCode (true));  				//0  				// 成功 output Success message ..  				Console.WriteLine ("\t Registry local machine information successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			#endregion  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// 輸出異常信息 output error message ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		return;  	}  	#endregion  	#region 根據指令進行操作  	Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  	switch (args [0].ToLower ()) {  	#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  	case "-f":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  			global::System.Threading.Thread.Sleep (500);  			// create check file object ..  			FileInfo file = new FileInfo (args [1]);  			// analysis file path and context ..  			if (!file.Exists) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				if (!file.Extension.ToLower ().Equals (".rbr")) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  					Console.WriteLine ("=============================================================\r\n");  					// analysis and send ..  					SendDocument (file);  				}  			}  		}  		break;  	#endregion  	#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  	case "-c":  		// create connect server object ..  		ScanPort scanServer = new ScanPort ();  		// confirm whether can connect server ..  		if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine (" \t Connected! \r\n");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  	case "-g":  		// check the gui app exist in machine process ..  		if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t RenbarGUI is running……");  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t No RenbarGUI is running");  			Console.WriteLine ("=============================================================\r\n");  			try {  				Console.WriteLine ("Trying to start the RenbarGUI……");  				Process p = new Process ();  				p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  				//p.StartInfo.Arguments = Console.ReadLine();  				p.Start ();  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Start RenbarGUI successed!");  				Console.WriteLine ("=============================================================\r\n");  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  		}  		break;  	#endregion  	#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  	case "-p":  		Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  		string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  		if (!string.IsNullOrEmpty (primary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (primary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  	case "-sp":  		try {  			Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  			string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  			if (!string.IsNullOrEmpty (secondary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (secondary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t No shareable pool exist ……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the shareable pool info ……");  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		break;  	#endregion  	#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  	case "-pd":  		Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo);  		Console.WriteLine (AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  		Console.WriteLine ("=============================================================\r\n");  		break;  	#endregion  	#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  	case "-ps":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  			string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  			if (!string.IsNullOrEmpty (ps_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  	case "-pm":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  			string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  			if (!string.IsNullOrEmpty (pm_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (pm_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region Default條件下輸出提示信息 Print Syntax Default Case  	default:  		PrintSyntax ();  		break;  	#endregion  	}  	#endregion  	#region 退出，再次注冊、關閉連接  	try {  		if (IsConnected) {  			Console.WriteLine ("MISSION COMPLETE ! ! ");  			// registry local machine to server request ..  			if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  				// 不能注冊本機信息則輸出信息 output error message ..  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = "\t Can't registry local machine offline information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  			else {  				// 能注冊則在注冊完成后關閉連接  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  		}  	}  	catch {  	}  	finally {  		EnvComm.Disconnect ();  	}  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (EnvSvr.EnvironemtFilePath)) {  	#region 不存在，則顯示錯誤信息並寫入日志  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	// 輸出信息提示【優先設定環境】 output error message ..  	Console.WriteLine ("\t" + ReturnCode (false));  	string ExceptionMsg = "The EnvironemtFile wasn't found 'Please priority setting RenbarGUI environment !";  	Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  	Console.WriteLine ("=============================================================\r\n");  	// 寫入日志 write to log file ..  	// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  	EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	#endregion  }  else {  	#region 存在環境文件、嘗試連接、注冊信息  	Console.WriteLine ("\t" + ReturnCode (true));  	Console.WriteLine ("\t Get the Environment setting successed! \r\n");  	Console.WriteLine ("=============================================================\r\n");  	try {  		// 讀取並緩存環境設定數據 restore environment setting ..  		EnvSetting = (Settings)EnvSvr.Deserialize (EnvSvr.EnvironemtFilePath);  		string SocketAD = EnvSetting.ServerIpAddress.ToString () + ":" + EnvSetting.ServerPort.ToString ();  		Console.WriteLine ("Current ServerIP and Port is:" + "\r\n\t" + SocketAD + "\r\n");  		Console.WriteLine ("=============================================================\r\n");  		// 鏈接遠端服務器 connect remote server ..  		Console.WriteLine ("Try to connect to the remote server ……\r\n");  		if (!EnvComm.Connect (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			#region 無法連接  			Console.WriteLine ("\t" + ReturnCode (false));  			//1  			// 輸出信息並寫入日志 output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			//？？？？？？？？？？  			return;  			#endregion  		}  		else {  			#region 可連接，則嘗試注冊本機信息  			// 注冊本機信息 registry local machine to server request ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Connect the Server successed! \r\n");  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Try to registry local machine……\r\n");  			if (!EnvCust.RegLocalMachine (null' false' ref EnvComm)) {  				Console.WriteLine ("\t" + ReturnCode (false));  				//1  				// 失敗 output error message ..  				string ExceptionMsg = "\t can't registry local machine information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				IsConnected = true;  				Console.WriteLine ("\t" + ReturnCode (true));  				//0  				// 成功 output Success message ..  				Console.WriteLine ("\t Registry local machine information successed! \r\n");  				Console.WriteLine ("=============================================================\r\n");  			}  			#endregion  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// 輸出異常信息 output error message ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		Console.WriteLine ("\t Error :{0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// 寫入日志 write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		return;  	}  	#endregion  	#region 根據指令進行操作  	Console.WriteLine ("Analysing the command:" + args [0].ToString () + "\r\n");  	switch (args [0].ToLower ()) {  	#region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  	case "-f":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\r\n");  			Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  			Console.WriteLine ("=============================================================\r\n");  			Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  			global::System.Threading.Thread.Sleep (500);  			// create check file object ..  			FileInfo file = new FileInfo (args [1]);  			// analysis file path and context ..  			if (!file.Exists) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				if (!file.Extension.ToLower ().Equals (".rbr")) {  					Console.WriteLine ("\t" + ReturnCode (false));  					// output error message ..  					string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  					Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  					Console.WriteLine ("=============================================================\r\n");  					return;  				}  				else {  					Console.WriteLine ("\t" + ReturnCode (true));  					Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  					Console.WriteLine ("=============================================================\r\n");  					// analysis and send ..  					SendDocument (file);  				}  			}  		}  		break;  	#endregion  	#region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  	case "-c":  		// create connect server object ..  		ScanPort scanServer = new ScanPort ();  		// confirm whether can connect server ..  		if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  			Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine (" \t Connected! \r\n");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  	case "-g":  		// check the gui app exist in machine process ..  		if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t RenbarGUI is running……");  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t No RenbarGUI is running");  			Console.WriteLine ("=============================================================\r\n");  			try {  				Console.WriteLine ("Trying to start the RenbarGUI……");  				Process p = new Process ();  				p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  				//p.StartInfo.Arguments = Console.ReadLine();  				p.Start ();  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Start RenbarGUI successed!");  				Console.WriteLine ("=============================================================\r\n");  			}  			catch (Exception ex) {  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = ex.Message + ex.StackTrace;  				Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				// write to log file ..  				// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  				EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  			}  		}  		break;  	#endregion  	#region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  	case "-p":  		Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  		string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  		if (!string.IsNullOrEmpty (primary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (primary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  		break;  	#endregion  	#region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  	case "-sp":  		try {  			Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  			string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  			if (!string.IsNullOrEmpty (secondary_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (secondary_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t No shareable pool exist ……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the shareable pool info ……");  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			string ExceptionMsg = ex.Message + ex.StackTrace;  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  		break;  	#endregion  	#region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  	case "-pd":  		Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo);  		Console.WriteLine (AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  		Console.WriteLine ("=============================================================\r\n");  		break;  	#endregion  	#region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  	case "-ps":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  			string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  			if (!string.IsNullOrEmpty (ps_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  	case "-pm":  		if (args.Length < 2) {  			Console.WriteLine ("Syntax Error:\r\n");  			Console.WriteLine ("=============================================================\r\n");  			PrintSyntax ();  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  			string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  			if (!string.IsNullOrEmpty (pm_result)) {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (true));  				// return message ..  				Console.WriteLine (pm_result);  				Console.WriteLine ("=============================================================\r\n");  			}  			else {  				// return code ..  				Console.WriteLine ("\t" + ReturnCode (false));  				Console.WriteLine ("\t Failed to get the information……");  				Console.WriteLine ("=============================================================\r\n");  			}  		}  		break;  	#endregion  	#region Default條件下輸出提示信息 Print Syntax Default Case  	default:  		PrintSyntax ();  		break;  	#endregion  	}  	#endregion  	#region 退出，再次注冊、關閉連接  	try {  		if (IsConnected) {  			Console.WriteLine ("MISSION COMPLETE ! ! ");  			// registry local machine to server request ..  			if (!EnvCust.RegLocalMachine (null' true' ref EnvComm)) {  				// 不能注冊本機信息則輸出信息 output error message ..  				Console.WriteLine ("\t" + ReturnCode (false));  				string ExceptionMsg = "\t Can't registry local machine offline information !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  			else {  				// 能注冊則在注冊完成后關閉連接  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\tRegistry local machine offline information successed 'Disconnect…");  				Console.WriteLine ("=============================================================\r\n\r\n");  			}  		}  	}  	catch {  	}  	finally {  		EnvComm.Disconnect ();  	}  	#endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: switch (args [0].ToLower ()) {  #region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  case "-f":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  		global::System.Threading.Thread.Sleep (500);  		// create check file object ..  		FileInfo file = new FileInfo (args [1]);  		// analysis file path and context ..  		if (!file.Exists) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			if (!file.Extension.ToLower ().Equals (".rbr")) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  				Console.WriteLine ("=============================================================\r\n");  				// analysis and send ..  				SendDocument (file);  			}  		}  	}  	break;  #endregion  #region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  case "-c":  	// create connect server object ..  	ScanPort scanServer = new ScanPort ();  	// confirm whether can connect server ..  	if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  		Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine (" \t Connected! \r\n");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  case "-g":  	// check the gui app exist in machine process ..  	if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t RenbarGUI is running……");  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t No RenbarGUI is running");  		Console.WriteLine ("=============================================================\r\n");  		try {  			Console.WriteLine ("Trying to start the RenbarGUI……");  			Process p = new Process ();  			p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  			//p.StartInfo.Arguments = Console.ReadLine();  			p.Start ();  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Start RenbarGUI successed!");  			Console.WriteLine ("=============================================================\r\n");  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  	}  	break;  #endregion  #region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  case "-p":  	Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  	string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  	if (!string.IsNullOrEmpty (primary_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine (primary_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  case "-sp":  	try {  		Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  		string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  		if (!string.IsNullOrEmpty (secondary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (secondary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t No shareable pool exist ……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the shareable pool info ……");  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	break;  #endregion  #region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  case "-pd":  	Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo);  	Console.WriteLine (AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  	Console.WriteLine ("=============================================================\r\n");  	break;  #endregion  #region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  case "-ps":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  		string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  		if (!string.IsNullOrEmpty (ps_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  case "-pm":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  		string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  		if (!string.IsNullOrEmpty (pm_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (pm_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region Default條件下輸出提示信息 Print Syntax Default Case  default:  	PrintSyntax ();  	break;  #endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: switch (args [0].ToLower ()) {  #region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  case "-f":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  		global::System.Threading.Thread.Sleep (500);  		// create check file object ..  		FileInfo file = new FileInfo (args [1]);  		// analysis file path and context ..  		if (!file.Exists) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			if (!file.Extension.ToLower ().Equals (".rbr")) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  				Console.WriteLine ("=============================================================\r\n");  				// analysis and send ..  				SendDocument (file);  			}  		}  	}  	break;  #endregion  #region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  case "-c":  	// create connect server object ..  	ScanPort scanServer = new ScanPort ();  	// confirm whether can connect server ..  	if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  		Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine (" \t Connected! \r\n");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  case "-g":  	// check the gui app exist in machine process ..  	if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t RenbarGUI is running……");  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t No RenbarGUI is running");  		Console.WriteLine ("=============================================================\r\n");  		try {  			Console.WriteLine ("Trying to start the RenbarGUI……");  			Process p = new Process ();  			p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  			//p.StartInfo.Arguments = Console.ReadLine();  			p.Start ();  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Start RenbarGUI successed!");  			Console.WriteLine ("=============================================================\r\n");  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  	}  	break;  #endregion  #region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  case "-p":  	Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  	string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  	if (!string.IsNullOrEmpty (primary_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine (primary_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  case "-sp":  	try {  		Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  		string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  		if (!string.IsNullOrEmpty (secondary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (secondary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t No shareable pool exist ……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the shareable pool info ……");  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	break;  #endregion  #region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  case "-pd":  	Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo);  	Console.WriteLine (AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  	Console.WriteLine ("=============================================================\r\n");  	break;  #endregion  #region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  case "-ps":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  		string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  		if (!string.IsNullOrEmpty (ps_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  case "-pm":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  		string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  		if (!string.IsNullOrEmpty (pm_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (pm_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region Default條件下輸出提示信息 Print Syntax Default Case  default:  	PrintSyntax ();  	break;  #endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: switch (args [0].ToLower ()) {  #region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  case "-f":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  		global::System.Threading.Thread.Sleep (500);  		// create check file object ..  		FileInfo file = new FileInfo (args [1]);  		// analysis file path and context ..  		if (!file.Exists) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			if (!file.Extension.ToLower ().Equals (".rbr")) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  				Console.WriteLine ("=============================================================\r\n");  				// analysis and send ..  				SendDocument (file);  			}  		}  	}  	break;  #endregion  #region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  case "-c":  	// create connect server object ..  	ScanPort scanServer = new ScanPort ();  	// confirm whether can connect server ..  	if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  		Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine (" \t Connected! \r\n");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  case "-g":  	// check the gui app exist in machine process ..  	if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t RenbarGUI is running……");  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t No RenbarGUI is running");  		Console.WriteLine ("=============================================================\r\n");  		try {  			Console.WriteLine ("Trying to start the RenbarGUI……");  			Process p = new Process ();  			p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  			//p.StartInfo.Arguments = Console.ReadLine();  			p.Start ();  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Start RenbarGUI successed!");  			Console.WriteLine ("=============================================================\r\n");  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  	}  	break;  #endregion  #region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  case "-p":  	Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  	string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  	if (!string.IsNullOrEmpty (primary_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine (primary_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  case "-sp":  	try {  		Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  		string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  		if (!string.IsNullOrEmpty (secondary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (secondary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t No shareable pool exist ……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the shareable pool info ……");  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	break;  #endregion  #region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  case "-pd":  	Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo);  	Console.WriteLine (AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  	Console.WriteLine ("=============================================================\r\n");  	break;  #endregion  #region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  case "-ps":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  		string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  		if (!string.IsNullOrEmpty (ps_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  case "-pm":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  		string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  		if (!string.IsNullOrEmpty (pm_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (pm_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region Default條件下輸出提示信息 Print Syntax Default Case  default:  	PrintSyntax ();  	break;  #endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: switch (args [0].ToLower ()) {  #region "-f"：[-f'×××.rbr]分析发送.rbr文件（显示0则Success，否则fail）     File Render Case  case "-f":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("\r\n");  		Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  		Console.WriteLine ("=============================================================\r\n");  		Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  		global::System.Threading.Thread.Sleep (500);  		// create check file object ..  		FileInfo file = new FileInfo (args [1]);  		// analysis file path and context ..  		if (!file.Exists) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			if (!file.Extension.ToLower ().Equals (".rbr")) {  				Console.WriteLine ("\t" + ReturnCode (false));  				// output error message ..  				string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  				Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  				Console.WriteLine ("=============================================================\r\n");  				return;  			}  			else {  				Console.WriteLine ("\t" + ReturnCode (true));  				Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  				Console.WriteLine ("=============================================================\r\n");  				// analysis and send ..  				SendDocument (file);  			}  		}  	}  	break;  #endregion  #region "-c"：確認是否可連接遠端服務器（显示0则Success，否则fail） Connect Remote Server Case  case "-c":  	// create connect server object ..  	ScanPort scanServer = new ScanPort ();  	// confirm whether can connect server ..  	if (!scanServer.Scan (EnvSetting.ServerIpAddress' EnvSetting.ServerPort)) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "Can't connect remote server' please check local environment settings !";  		Console.WriteLine ("\t Error: {0} \r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine (" \t Connected! \r\n");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-g"：返回本地機器是否有GUI應用程序 Get GUI Process Case  case "-g":  	// check the gui app exist in machine process ..  	if (Process.GetProcessesByName ("RenbarGUI").Length > 0) {  		Console.WriteLine ("\t" + ReturnCode (true));  		Console.WriteLine ("\t RenbarGUI is running……");  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t No RenbarGUI is running");  		Console.WriteLine ("=============================================================\r\n");  		try {  			Console.WriteLine ("Trying to start the RenbarGUI……");  			Process p = new Process ();  			p.StartInfo.FileName = Setting.Default.RenbarGUI_StartUpPath;  			//p.StartInfo.Arguments = Console.ReadLine();  			p.Start ();  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Start RenbarGUI successed!");  			Console.WriteLine ("=============================================================\r\n");  		}  		catch (Exception ex) {  			Console.WriteLine ("\t" + ReturnCode (false));  			string ExceptionMsg = ex.Message + ex.StackTrace;  			Console.WriteLine ("\t Failed to start RenbarGUI 'An error happens: {0}\r\n"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			// write to log file ..  			// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  			EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  		}  	}  	break;  #endregion  #region "-p"：獲得當前Primary_Pool清單 Get Primary Pool Info Case  case "-p":  	Console.WriteLine ("Getting the Primary pool information……\r\n\r\n");  	string primary_result = GetPoolInfo (null' PoolType.Primary_Pool);  	if (!string.IsNullOrEmpty (primary_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine (primary_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  	break;  #endregion  #region "-sp"：獲得Secondary_Pool清單 Get Secondary Pool Info Case  case "-sp":  	try {  		Console.WriteLine ("Getting the secondary pool information……\r\n\r\n");  		string secondary_result = GetPoolInfo (null' PoolType.Secondary_Pool);  		if (!string.IsNullOrEmpty (secondary_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (secondary_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t No shareable pool exist ……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	catch (Exception ex) {  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the shareable pool info ……");  		Console.WriteLine ("=============================================================\r\n");  		// write to log file ..  		string ExceptionMsg = ex.Message + ex.StackTrace;  		// EnvLog.Writer(AssemblyInfoClass.ProductInfo' LogBase.Level.Error' ExceptionMsg);  		EnvLog.Writer (AssemblyInfoClass.ProductInfo' Log.Level.Error' ExceptionMsg' false);  	}  	break;  #endregion  #region "-pd"：獲得所有群組的Detail  Get Pool Detail Info Case  case "-pd":  	Console.WriteLine ("Getting the detail pool information……\r\n\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo);  	Console.WriteLine (AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine (GetPoolInfo (null' PoolType.Detail));  	Console.WriteLine ("=============================================================\r\n");  	break;  #endregion  #region "-ps"：獲得Sharable群組信息 Get Pool Sharable Info Case  case "-ps":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  		string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  		if (!string.IsNullOrEmpty (ps_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region "-pm"：獲得Machine群組信息 Get Pool Machine Info Case  case "-pm":  	if (args.Length < 2) {  		Console.WriteLine ("Syntax Error:\r\n");  		Console.WriteLine ("=============================================================\r\n");  		PrintSyntax ();  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  		string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  		if (!string.IsNullOrEmpty (pm_result)) {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (true));  			// return message ..  			Console.WriteLine (pm_result);  			Console.WriteLine ("=============================================================\r\n");  		}  		else {  			// return code ..  			Console.WriteLine ("\t" + ReturnCode (false));  			Console.WriteLine ("\t Failed to get the information……");  			Console.WriteLine ("=============================================================\r\n");  		}  	}  	break;  #endregion  #region Default條件下輸出提示信息 Print Syntax Default Case  default:  	PrintSyntax ();  	break;  #endregion  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Syntax Error:\r\n");  	Console.WriteLine ("=============================================================\r\n");  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n");  	return;  }  else {  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  	global::System.Threading.Thread.Sleep (500);  	// create check file object ..  	FileInfo file = new FileInfo (args [1]);  	// analysis file path and context ..  	if (!file.Exists) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		if (!file.Extension.ToLower ().Equals (".rbr")) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  			Console.WriteLine ("=============================================================\r\n");  			// analysis and send ..  			SendDocument (file);  		}  	}  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Syntax Error:\r\n");  	Console.WriteLine ("=============================================================\r\n");  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n");  	return;  }  else {  	Console.WriteLine ("\r\n");  	Console.WriteLine (AssemblyInfoClass.ProductInfo + AssemblyInfoClass.VersionInfo);  	Console.WriteLine ("=============================================================\r\n");  	Console.WriteLine ("Getting render file(.rbr)' please wait ...\r\n");  	global::System.Threading.Thread.Sleep (500);  	// create check file object ..  	FileInfo file = new FileInfo (args [1]);  	// analysis file path and context ..  	if (!file.Exists) {  		Console.WriteLine ("\t" + ReturnCode (false));  		// output error message ..  		string ExceptionMsg = "\t Can't find render file(.rbr)' please check render file path !";  		Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  		Console.WriteLine ("=============================================================\r\n");  		return;  	}  	else {  		if (!file.Extension.ToLower ().Equals (".rbr")) {  			Console.WriteLine ("\t" + ReturnCode (false));  			// output error message ..  			string ExceptionMsg = "\t The file type isn't the supported render file(.rbr) ' please contact IT dept !";  			Console.WriteLine ("\t Error: {0}\r\n\t"' ExceptionMsg);  			Console.WriteLine ("=============================================================\r\n");  			return;  		}  		else {  			Console.WriteLine ("\t" + ReturnCode (true));  			Console.WriteLine ("\t Get the render file({0}) Successed ! \r\n"' args [1].ToString ());  			Console.WriteLine ("=============================================================\r\n");  			// analysis and send ..  			SendDocument (file);  		}  	}  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: global::System.Threading.Thread.Sleep (500);  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Syntax Error:\r\n");  	Console.WriteLine ("=============================================================\r\n");  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n");  	return;  }  else {  	Console.WriteLine ("Getting the sharable pool({0}) information……\r\n\r\n"' args [1].ToString ());  	string ps_result = GetPoolInfo (args [1]' PoolType.Sharable);  	if (!string.IsNullOrEmpty (ps_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine ("\t {0} Is Sharable :{0}"' args [1].ToString ()' ps_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Syntax Error:\r\n");  	Console.WriteLine ("=============================================================\r\n");  	PrintSyntax ();  	Console.WriteLine ("=============================================================\r\n");  	return;  }  else {  	Console.WriteLine ("Getting the Pool({0}) Machine  information……\r\n\r\n"' args [1].ToString ());  	string pm_result = GetPoolInfo (args [1]' PoolType.Machine);  	if (!string.IsNullOrEmpty (pm_result)) {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (true));  		// return message ..  		Console.WriteLine (pm_result);  		Console.WriteLine ("=============================================================\r\n");  	}  	else {  		// return code ..  		Console.WriteLine ("\t" + ReturnCode (false));  		Console.WriteLine ("\t Failed to get the information……");  		Console.WriteLine ("=============================================================\r\n");  	}  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,The following statement contains a magic number: foreach (DataRow row in Ds.Tables ["Pool"].Rows) {  	// get machine list ...  	IList<string> machines = GetMachineList (row ["Pool_Id"].ToString ()' Ds.Tables ["Machine"]' Ds.Tables ["Machine_Pool"]);  	// add to customize data table ...  	DataRow newRow = info.NewRow ();  	newRow [0] = row ["Name"];  	newRow [1] = row ["Sharable"];  	newRow [2] = machines;  	info.Rows.Add (newRow);  }  
Magic Number,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,The following statement contains a magic number: newRow [2] = machines;  
Missing Default,RenbarConsole,Program,C:\repos\KennyLv_.NETConnection\.NET TCP Demo\RenbarConsole\Program.cs,GetPoolInfo,The following switch statement is missing a default case: switch (ReturnType) {  case PoolType.Detail:  	// print format ...  	result = "\tPool Name\tSharable\tMachine Name\r\n";  	result += "-----------------------------------------------------------------\r\n";  	foreach (DataRow row in info.Rows) {  		result += "\r\t" + row ["pname"].ToString () + "\t\t" + row ["share"];  		foreach (string s in ((List<string>)row ["mname"])) {  			result += "\t\t" + s + "\r\n\t\t\t";  		}  		result += "\r------------------------------------------------------------\r\n";  	}  	break;  case PoolType.Primary_Pool:  	// print format ..  	DataRow[] p_rows = info.Select ();  	if (p_rows.Length > 0) {  		foreach (DataRow row in p_rows) {  			result += string.Format ("{0}'\r\n"' row ["pname"].ToString ());  		}  		result = result.Substring (0' (result.Length - 1)) + "\r\n";  	}  	break;  case PoolType.Secondary_Pool:  	// print format ...  	DataRow[] s_rows = info.Select ("share = 1");  	if (s_rows.Length > 0) {  		foreach (DataRow row in s_rows) {  			result += string.Format ("{0}'\r\n"' row ["pname"].ToString ());  		}  		result = result.Substring (0' (result.Length - 1)) + "\r\n";  	}  	break;  case PoolType.Machine:  	if (!string.IsNullOrEmpty (ParaName)) {  		// print format ...  		if (info.Rows.Contains (ParaName)) {  			int idx = info.Rows.IndexOf (info.Rows.Find (ParaName));  			foreach (string s in (List<string>)info.Rows [idx] ["mname"]) {  				result += string.Format ("{0}'\r\n"' s);  			}  			result = result.Substring (0' (result.Length - 1)) + "\r\n";  		}  		else  			Console.WriteLine ("can't find the pool of machine list !\r\n");  	}  	break;  case PoolType.Sharable:  	if (!string.IsNullOrEmpty (ParaName)) {  		if (info.Rows.Contains (ParaName)) {  			int idx = info.Rows.IndexOf (info.Rows.Find (ParaName));  			result = info.Rows [idx] ["share"].ToString () + "\r\n";  		}  	}  	break;  }  
