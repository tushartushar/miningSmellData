Implementation smell,Namespace,Class,File,Method,Description
Long Method,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The method has 122 lines of code.
Long Method,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The method has 160 lines of code.
Complex Method,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,Cyclomatic complexity of the method is 12
Complex Method,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,Cyclomatic complexity of the method is 8
Long Parameter List,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The method has 8 parameters. Parameters: largeArray' lWidth' lHeight' smallArray' sWidth' sHeight' widthOffset' heightOffset
Long Parameter List,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The method has 6 parameters. Parameters: inputFile' width' height' edgePadding' bottomPadding' collisionOption
Long Parameter List,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImage,The method has 6 parameters. Parameters: inputFile' width' height' edgePadding' bottomPadding' replaceIfExists
Long Identifier,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,,The length of the parameter ContentForegroundBrushProperty is 30.
Long Identifier,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,,The length of the parameter ContentBackgroundBrushProperty is 30.
Long Statement,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetTopLevelComments,The length of the statement  "                        var result = JsonConvert.DeserializeObject<Listing>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length)); " is 125.
Long Statement,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The length of the statement  "                using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 138.
Long Statement,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,StoreSubreddit,The length of the statement  "            var combinedSpace = GenerateCombinedKeyspace(((Subreddit)thing.Data).DisplayName' ((Subreddit)thing.Data).Name' encodedValue); " is 126.
Long Statement,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,StoreSubreddit,The length of the statement  "            using (var subredditsCursor = await _subredditsDB.SeekAsync(_subredditsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 145.
Long Statement,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GetSubreddit,The length of the statement  "                        var decodedListing = Encoding.UTF8.GetString(currentRecord' SubredditKeySpaceSize' currentRecord.Length - SubredditKeySpaceSize); " is 129.
Long Statement,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementDomain,The length of the statement  "                using (var dbCursor = await _domainStatisticsDB.SeekAsync(_domainStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 149.
Long Statement,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementSubreddit,The length of the statement  "                using (var dbCursor = await _subredditStatisticsDB.SeekAsync(_subredditStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 155.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None' " is 132.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None); " is 133.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None); " is 135.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0' " is 135.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000); " is 143.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0); " is 132.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The length of the statement  "                var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock); " is 133.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,UserHasOfflineMessages,The length of the statement  "            using (var cursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.NoLock)) " is 138.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreOrderedThings,The length of the statement  "                using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock)) " is 146.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreThing,The length of the statement  "                using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock)) " is 146.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The length of the statement  "                using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock)) " is 146.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The length of the statement  "                using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock)) " is 146.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The length of the statement  "                            IEnumerable<Thing> result = JsonConvert.DeserializeObject<Thing[]>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length)); " is 140.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreSetting,The length of the statement  "                var cursor = await _settingsDb.SeekAsync(_settingsDb.GetKeys().First()' name' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock) ; " is 126.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,ClearHistory,The length of the statement  "            _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.Supersede); " is 138.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,EnqueueAction,The length of the statement  "            await _actionsDb.InsertAsync("action"' JsonConvert.SerializeObject(new { Name = actionName' Parameters = parameters })); " is 120.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,DequeueAction,The length of the statement  "                var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock); " is 133.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,DequeueAction,The length of the statement  "                        var tpl = JsonConvert.DeserializeAnonymousType(actionCursor.GetString()' new { Name = ""' Parameters = new Dictionary<string' string>() }); " is 139.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreImage,The length of the statement  "                using (var apiCursor = await _imageDb.SeekAsync(_imageDb.GetKeys()[0]' uriBytes' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 128.
Long Statement,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreImages,The length of the statement  "                using (var apiCursor = await _imageAPIDb.SeekAsync(_imageAPIDb.GetKeys()[0]' uriBytes' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock)) " is 134.
Long Statement,Baconography.NeutralServices,VideoService,C:\repos\Synergex_Baconography\NeutralServices\VideoService.cs,GetUrls,The length of the statement  "                    .Where(elem => elem.ContainsKey("itag") && elem.ContainsKey("type") && elem.ContainsKey("sig") && elem.ContainsKey("url")) " is 122.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) }; " is 264.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) }; " is 265.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) }; " is 244.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "                    pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) }; " is 249.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "            x = pointArray[0].X; // TODO: taking this solves my horizontal nudging' but is a hack...keeping it though until a better solution " is 129.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The length of the statement  "                else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X)))) " is 197.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The length of the statement  "            var calcH = this.CalculateHorizontalCenterOffset(x' ((FrameworkElement)_hostPopup.Child).ActualWidth' element.ActualWidth); " is 123.
Long Statement,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The length of the statement  "            var calcY = this.CalculateVerticalCenterOffset(y' ((FrameworkElement)_hostPopup.Child).ActualHeight' element.ActualHeight); " is 123.
Long Statement,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnApplyTemplate,The length of the statement  "                                                     FromHorizontalOffset = (SettingsPane.Edge == SettingsEdgeLocation.Right) ? CONTENT_HORIZONTAL_OFFSET : (CONTENT_HORIZONTAL_OFFSET * -1) " is 135.
Long Statement,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnLoaded,The length of the statement  "            _hostPopup.SetValue(Canvas.LeftProperty' SettingsPane.Edge == SettingsEdgeLocation.Right ? (_windowBounds.Width - _settingsWidth) : 0); " is 135.
Long Statement,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,SaveFileFromUriAsync,The length of the statement  "            var destinationFolder = await Windows.Storage.ApplicationData.Current.LocalFolder.CreateFolderAsync(localPath' CreationCollisionOption.OpenIfExists); " is 149.
Long Statement,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,SaveFileFromUriAsync,The length of the statement  "            return await SaveFileFromUriAsync(fileUri' localFileName' localPath' replaceIfExists ? NameCollisionOption.ReplaceExisting : NameCollisionOption.FailIfExists);  " is 159.
Long Statement,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The length of the statement  "                byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset); " is 163.
Long Statement,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImage,The length of the statement  "            return await GenerateResizedImageAsync(inputFile as StorageFile' width' height' edgePadding' bottomPadding' replaceIfExists ? NameCollisionOption.ReplaceExisting : NameCollisionOption.FailIfExists); " is 198.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The length of the statement  "                    var rawImage = await _imagesService.SaveFileFromUriAsync(new Uri(subreddit.Data.HeaderImage)' subreddit.Data.DisplayName + ".jpg"' "Images"); " is 141.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "            text = text.Replace("&"' "&amp;").Replace("<"' "&lt;").Replace(">"' "&gt;").Replace("\""' "&quot;").Replace("'"' "&apos;"); " is 123.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                largeImageFile = (await _imagesService.SaveFileFromUriAsync(largeImage' largeImage.LocalPath' "liveTiles")) as StorageFile; " is 123.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile; " is 123.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                    smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile; " is 123.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "            if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide) " is 130.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile; " is 121.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile; " is 123.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile; " is 121.
Long Statement,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The length of the statement  "                var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile; " is 123.
Long Statement,BaconographyW8.PlatformServices,NotificationService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\NotificationService.cs,CreateErrorNotification,The length of the statement  "                        toastTextElements[0].AppendChild(toastXml.CreateTextNode("We're having a hard time connecting to reddit' you've been moved to offline mode")); " is 142.
Long Statement,BaconographyW8.PlatformServices,NotificationService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\NotificationService.cs,CreateErrorNotification,The length of the statement  "                        Messenger.Default.Send<ConnectionStatusMessage>(new ConnectionStatusMessage { IsOnline = false' UserInitiated = false }); " is 121.
Long Statement,BaconographyW8.PlatformServices,NotificationService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\NotificationService.cs,CreateErrorNotification,The length of the statement  "                toastTextElements[0].AppendChild(toastXml.CreateTextNode("We're having a hard time connecting to reddit' you might want to try again later or go into offline mode")); " is 166.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,SendPost,The length of the statement  "                getMeClientHandler.CookieContainer.Add(new Uri("http://www.reddit.com"' UriKind.Absolute)' new Cookie("reddit_session"' cookie)); " is 129.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,SendPost,The length of the statement  "            postClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue("Baconography_Windows_8_Client"' "1.0")); " is 139.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,SendGet,The length of the statement  "                getMeClientHandler.CookieContainer.Add(new Uri("http://www.reddit.com"' UriKind.Absolute)' new Cookie("reddit_session"' cookie)); " is 129.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,SendGet,The length of the statement  "            getClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue("Baconography_Windows_8_Client"' "1.0")); " is 138.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,SendPostForCookies,The length of the statement  "            postClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue("Baconography_Windows_8_Client"' "1.0")); " is 139.
Long Statement,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,UnAuthedGet,The length of the statement  "            getClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue("Baconography_Windows_8_Client"' "1.0")); " is 138.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,Logout,The length of the statement  "            Messenger.Default.Send<UserLoggedInMessage>(new UserLoggedInMessage { CurrentUser = _currentUser' UserTriggered = true }); " is 122.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,InitImpl,The length of the statement  "            Messenger.Default.Send<UserLoggedInMessage>(new UserLoggedInMessage { CurrentUser = _currentUser' UserTriggered = false }); " is 123.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddStoredCredential,The length of the statement  "            var existingCredential = currentCredentials.FirstOrDefault(credential => credential.Username == newCredential.Username); " is 120.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddStoredCredential,The length of the statement  "                        var userCredentialsCursor = await userInfoDb.SelectAsync(userInfoDb.GetKeys().First()' "credentials"' DBReadFlags.AutoLock); " is 124.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,RemoveStoredCredential,The length of the statement  "                var userCredentialsCursor = await userInfoDb.SelectAsync(userInfoDb.GetKeys().First()' "credentials"' DBReadFlags.AutoLock); " is 124.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,RemoveStoredCredential,The length of the statement  "                var matchingWindowsCredential = windowsCredentials.FirstOrDefault(windowsCredential => string.Compare(windowsCredential.UserName' username' StringComparison.CurrentCultureIgnoreCase) == 0); " is 189.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddOrUpdateWindowsCredential,The length of the statement  "                var matchingWindowsCredential = windowsCredentials.FirstOrDefault(credential => string.Compare(credential.UserName' existingCredential.Username' StringComparison.CurrentCultureIgnoreCase) == 0); " is 194.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddOrUpdateWindowsCredential,The length of the statement  "                        passwordVault.Add(new Windows.Security.Credentials.PasswordCredential("Baconography"' existingCredential.Username' password)); " is 126.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddOrUpdateWindowsCredential,The length of the statement  "                    passwordVault.Add(new Windows.Security.Credentials.PasswordCredential("Baconography"' existingCredential.Username' password)); " is 126.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddOrUpdateWindowsCredential,The length of the statement  "                passwordVault.Add(new Windows.Security.Credentials.PasswordCredential("Baconography"' existingCredential.Username' password)); " is 126.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,GetStoredCredentialsImpl,The length of the statement  "                var userCredentialsCursor = await userInfoDb.SelectAsync(userInfoDb.GetKeys().First()' "credentials"' DBReadFlags.NoLock); " is 122.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,LoginWithCredentials,The length of the statement  "                var loggedInUser = new User { Username = credential.Username' LoginCookie = credential.LoginCookie' NeedsCaptcha = false }; " is 123.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,LoginWithCredentials,The length of the statement  "                    var matchingWindowsCredential = windowsCredentials.FirstOrDefault(windowsCredential => string.Compare(windowsCredential.UserName' credential.Username' StringComparison.CurrentCultureIgnoreCase) == 0); " is 200.
Long Statement,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,DoLogin,The length of the statement  "            var targetCredential = storedCredentials.FirstOrDefault(credential => string.Compare(credential.Username' username' StringComparison.CurrentCultureIgnoreCase) == 0); " is 165.
Long Statement,Baconography.PlatformServices.ImageAPI,Flickr,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Flickr.cs,GetImagesFromUri,The length of the statement  "                var apiURL = string.Format("http://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=81afa34d85f53254ff12a8cb73cba64d&photo_id={0}&format=json&nojsoncallback=1"' photoID); " is 189.
Long Statement,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The length of the statement  "						return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' groups[1].Value)) }; " is 121.
Long Statement,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The length of the statement  "							return Tuple.Create(string.IsNullOrWhiteSpace(caption) ? albumTitle : caption' (string)((JObject)e.GetValue("links")).GetValue("original")); " is 140.
Long Statement,Baconography.PlatformServices.ImageAPI,Memecrunch,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Memecrunch.cs,GetImagesFromUri,The length of the statement  "                return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://memecrunch.com/meme/{0}/{1}/image.png"' groups[1].Value' groups[2].Value ?? "null")) }; " is 166.
Long Statement,Baconography.PlatformServices.ImageAPI,Picsarus,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Picsarus.cs,GetImagesFromUri,The length of the statement  "                return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://www.picsarus.com/{0}.jpg"' groups[1].Value)) }; " is 126.
Complex Conditional,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The conditional expression  "((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y))"  is complex.
Complex Conditional,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The conditional expression  "((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X)))"  is complex.
Complex Conditional,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GetImagesFromUrl,The conditional expression  "filename.EndsWith(".jpg") || filename.EndsWith(".png") || filename.EndsWith(".jpeg") || filename.EndsWith(".gif")"  is complex.
Complex Conditional,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MightHaveImagesFromUrl,The conditional expression  "filename.EndsWith(".jpg") || url.EndsWith(".png") || url.EndsWith(".jpeg") || url.EndsWith(".gif")"  is complex.
Complex Conditional,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The conditional expression  "smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide"  is complex.
Virtual Method Call from Constructor,BaconographyW8.PlatformServices,BaconProvider,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\BaconProvider.cs,BaconProvider,The constructor "BaconProvider" calls a virtual method "Initialize".
Empty Catch Block,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreCommentMetadata,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetTopLevelComments,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,StoreSubreddit,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreComments,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreMessages,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreLinks,The method has an empty catch block.
Empty Catch Block,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,SaveFileFromUriAsync,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MightHaveImagesFromUrl,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,MaybeCreateTile,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,AddStoredCredential,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,RemoveStoredCredential,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,RemoveStoredCredential,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,GetStoredCredentialsImpl,The method has an empty catch block.
Empty Catch Block,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,LoginWithCredentials,The method has an empty catch block.
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsDatabase' DBCreateFlags.None' 0' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsDatabase' DBCreateFlags.None' 0' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsDatabase' DBCreateFlags.None' 0' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetMetaDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsMetaDatabase' DBCreateFlags.None' 36' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetMetaDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsMetaDatabase' DBCreateFlags.None' 36' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetMetaDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsMetaDatabase' DBCreateFlags.None' 36' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetMetaDBInstance,The following statement contains a magic number: var db = await DB.CreateAsync(commentsMetaDatabase' DBCreateFlags.None' 36' new DBKey[]              {                  new DBKey(20' 0' DBKeyFlags.Alpha' "permalinkhash"' false' false' false' 0)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreComments,The following statement contains a magic number: try              {                  var linkThing = listing.Data.Children.First();                  if (!(linkThing.Data is Link))                      return;                      var permalink = ((Link)linkThing.Data).Permalink;                  if (permalink.EndsWith(".json?sort=hot"))                      permalink = permalink.Replace(".json?sort=hot"' "");  #if WINDOWS_PHONE                  var keyBytes = permalinkDigest.ComputeHash(Encoding.UTF8.GetBytes(permalink));  #else                  var keyBytes = permalinkDigest.HashData(Encoding.UTF8.GetBytes(permalink).AsBuffer()).ToArray();  #endif                    //we can cut down on IO by about 50% by stripping out the HTML bodies of comments since we dont have any need for them                  StripCommentData(listing.Data.Children);                    string key = ((Link)linkThing.Data).Name;                                      var compressor = new BaconographyPortable.Model.Compression.CompressionService();                  var compressedBytes = compressor.Compress(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(listing)));                  var recordBytes = new byte[compressedBytes.Length + 28];                    Array.Copy(compressedBytes' 0' recordBytes' 28' compressedBytes.Length);                  Array.Copy(keyBytes' 0' recordBytes' 0' keyBytes.Length);                    if (_terminateSource.IsCancellationRequested)                      return;                  using (var blobCursor = await _commentsDB.SeekAsync(_commentsDB.GetKeys()[0]' keyBytes' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _commentsDB.InsertAsync(recordBytes);                      }                  }                    await StoreCommentMetadata(keyBytes' ((Link)linkThing.Data).CommentCount' listing.Data.Children.Count);              }              catch (Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreComments,The following statement contains a magic number: try              {                  var linkThing = listing.Data.Children.First();                  if (!(linkThing.Data is Link))                      return;                      var permalink = ((Link)linkThing.Data).Permalink;                  if (permalink.EndsWith(".json?sort=hot"))                      permalink = permalink.Replace(".json?sort=hot"' "");  #if WINDOWS_PHONE                  var keyBytes = permalinkDigest.ComputeHash(Encoding.UTF8.GetBytes(permalink));  #else                  var keyBytes = permalinkDigest.HashData(Encoding.UTF8.GetBytes(permalink).AsBuffer()).ToArray();  #endif                    //we can cut down on IO by about 50% by stripping out the HTML bodies of comments since we dont have any need for them                  StripCommentData(listing.Data.Children);                    string key = ((Link)linkThing.Data).Name;                                      var compressor = new BaconographyPortable.Model.Compression.CompressionService();                  var compressedBytes = compressor.Compress(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(listing)));                  var recordBytes = new byte[compressedBytes.Length + 28];                    Array.Copy(compressedBytes' 0' recordBytes' 28' compressedBytes.Length);                  Array.Copy(keyBytes' 0' recordBytes' 0' keyBytes.Length);                    if (_terminateSource.IsCancellationRequested)                      return;                  using (var blobCursor = await _commentsDB.SeekAsync(_commentsDB.GetKeys()[0]' keyBytes' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _commentsDB.InsertAsync(recordBytes);                      }                  }                    await StoreCommentMetadata(keyBytes' ((Link)linkThing.Data).CommentCount' listing.Data.Children.Count);              }              catch (Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetCommentMetadata,The following statement contains a magic number: using (var blobCursor = await _metaDB.SeekAsync(_metaDB.GetKeys()[0]' keyBytes' DBReadFlags.WaitOnLock))              {                  if (blobCursor != null)                  {                      var bytes = blobCursor.Get();                      return Tuple.Create(BitConverter.ToInt32(bytes' 28)' BitConverter.ToInt32(bytes' 32));                  }                  else                  {                      return Tuple.Create(0' 0);                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetCommentMetadata,The following statement contains a magic number: using (var blobCursor = await _metaDB.SeekAsync(_metaDB.GetKeys()[0]' keyBytes' DBReadFlags.WaitOnLock))              {                  if (blobCursor != null)                  {                      var bytes = blobCursor.Get();                      return Tuple.Create(BitConverter.ToInt32(bytes' 28)' BitConverter.ToInt32(bytes' 32));                  }                  else                  {                      return Tuple.Create(0' 0);                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreCommentMetadata,The following statement contains a magic number: var recordBytes = new byte[36];
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreCommentMetadata,The following statement contains a magic number: BitConverter.GetBytes(linkComments).CopyTo(recordBytes' 28);
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,StoreCommentMetadata,The following statement contains a magic number: BitConverter.GetBytes(actualComments).CopyTo(recordBytes' 32);
Magic Number,Baconography.NeutralServices.KitaroDB,Comments,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Comments.cs,GetTopLevelComments,The following statement contains a magic number: try              {                  using (var blobCursor = await _commentsDB.SeekAsync(_commentsDB.GetKeys()[0]' keyBytes' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var compressor = new BaconographyPortable.Model.Compression.CompressionService();                          var decompressedBytes = compressor.Decompress(gottenBlob' 28);                          var result = JsonConvert.DeserializeObject<Listing>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length));                          return result;                      }                  }              }              catch              {                  badElement = true;              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,CreateDB,The following statement contains a magic number: return await DB.CreateAsync(linksDatabase' DBCreateFlags.None' 0' new DBKey[]                  {                      new DBKey(20' 0' DBKeyFlags.Alpha' "main"' false' false' false' 0)'                      new DBKey(8' 8' DBKeyFlags.Alpha' "directid"' true' false' false' 1)'                      new DBKey(4' 16' DBKeyFlags.Alpha' "urlhash"' true' false' false' 2)'                      new DBKey(8' 20' DBKeyFlags.AutoTime' "creation_timestamp"' false' false' false' 3)'                      new DBKey(8' 28' DBKeyFlags.AutoSequence' "insertion_order"' false' false' false' 4)'                                    });
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,StoreLink,The following statement contains a magic number: try              {                  var value = JsonConvert.SerializeObject(link);                  var encodedValue = Encoding.UTF8.GetBytes(value);                    var combinedSpace = new byte[encodedValue.Length + LinkKeySpaceSize];                  var keySpace = new byte[PrimaryKeySpaceSize];                    //these ids are stored in base 36 so we will never see unicode chars                  for (int i = 0; i < 8 && i < ((Link)link.Data).SubredditId.Length; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).SubredditId[i];                    for (int i = 8; i < 16 && i < (byte)((Link)link.Data).Name.Length + 8; i++)                      keySpace[i] = combinedSpace[i] = (byte)((Link)link.Data).Name[i - 8];                    var hashBytes = BitConverter.GetBytes(((Link)link.Data).Permalink.GetHashCode());                  hashBytes.CopyTo(combinedSpace' 16);                  hashBytes.CopyTo(keySpace' 16);                  encodedValue.CopyTo(combinedSpace' LinkKeySpaceSize);                    using (var commentsCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' keySpace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (commentsCursor != null)                          await commentsCursor.UpdateAsync(combinedSpace);                        else                          await _linksDB.InsertAsync(combinedSpace);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,DeserializeCursor,The following statement contains a magic number: if(cursor != null)              {                  do                  {                      var currentRecord = cursor.Get();                      var decodedListing = Encoding.UTF8.GetString(currentRecord' LinkKeySpaceSize' currentRecord.Length - LinkKeySpaceSize);                      var deserializedLink = JsonConvert.DeserializeObject<Thing>(decodedListing);                      if (deserializedLink != null && deserializedLink.Data is Link)                      {                          redditService.AddFlairInfo(((Link)deserializedLink.Data).Name' ((Link)deserializedLink.Data).Author);                      }                      targetListing.Data.Children.Add(deserializedLink);                                            if (i++ > count)                      {                          //after type encoding                          targetListing.Data.After = Encoding.UTF8.GetString(currentRecord' 0' 16);                      }                    }while(await cursor.MoveNextAsync());              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,LinksForSubreddit,The following statement contains a magic number: try              {                  var subredditId = await TranslateSubredditNameToId(subreddits' subredditName);                  if (subredditId == null)                      return new Listing { Data = new ListingData { Children = new List<Thing>() } };                    var keyspace = new byte[8];                    for (int i = 0; i < 8 && i < subredditId.Length; i++)                      keyspace[i] = (byte)subredditId[i];                    using (var linkCursor = await _linksDB.SelectAsync(_linksDB.GetKeys().First()' keyspace))                  {                      if (after != null && linkCursor != null)                      {                          var afterKeyspace = new byte[16];                            for (int i = 0; i < 16 && i < after.Length + 10; i++)                              afterKeyspace[i] = (byte)after[i + 2]; //skip ahead past the after type identifier                            await linkCursor.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                      }                        return await DeserializeCursor(linkCursor' 25);                  }              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,AllLinks,The following statement contains a magic number: try              {                  if (after != null && after.Length > 0)                  {                      var afterKeyspace = new byte[16];                        for (int i = 0; i < 16 && i < after.Length; i++)                          afterKeyspace[i] = (byte)after[i]; //skip ahead past the after type identifier                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                  }                  else                  {                      linkCursor = await _linksDB.SeekAsync(DBReadFlags.NoLock);                  }                    return await DeserializeCursor(linkCursor' 25);                                }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,AllLinks,The following statement contains a magic number: try              {                  if (after != null && after.Length > 0)                  {                      var afterKeyspace = new byte[16];                        for (int i = 0; i < 16 && i < after.Length; i++)                          afterKeyspace[i] = (byte)after[i]; //skip ahead past the after type identifier                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                  }                  else                  {                      linkCursor = await _linksDB.SeekAsync(DBReadFlags.NoLock);                  }                    return await DeserializeCursor(linkCursor' 25);                                }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,AllLinks,The following statement contains a magic number: try              {                  if (after != null && after.Length > 0)                  {                      var afterKeyspace = new byte[16];                        for (int i = 0; i < 16 && i < after.Length; i++)                          afterKeyspace[i] = (byte)after[i]; //skip ahead past the after type identifier                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys().First()' afterKeyspace' DBReadFlags.NoLock);                  }                  else                  {                      linkCursor = await _linksDB.SeekAsync(DBReadFlags.NoLock);                  }                    return await DeserializeCursor(linkCursor' 25);                                }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  return new Listing { Data = new ListingData { Children = new List<Thing>() } };              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Links,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Links.cs,GetLink,The following statement contains a magic number: try              {                  if (!string.IsNullOrWhiteSpace(url))                  {                      var urlKeyspace = BitConverter.GetBytes(url.GetHashCode());                      linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[2]' urlKeyspace' DBReadFlags.NoLock);                  }                  else if (!string.IsNullOrWhiteSpace(id))                  {                      var idKeyspace = new byte[16];                        for (int i = 0; i < 8 && i < id.Length; i++)                          idKeyspace[i] = (byte)id[i];                        linkCursor = await _linksDB.SeekAsync(_linksDB.GetKeys()[1]' idKeyspace' DBReadFlags.NoLock);                  }                    if (linkCursor != null)                  {                      var gottenBlob = linkCursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 20);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge < maxAge)                      {                            var listing = await DeserializeCursor(linkCursor' 1);                          var thing = listing.Data.Children.FirstOrDefault();                          if (thing != null && thing.Data is Link)                              return new TypedThing<Link>(thing);                          else                              return null;                      }                      else                          return null;                  }                  else                      return null;              }              catch (Exception ex)              {                  var errorCode = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorCode);                  throw;              }              finally              {                  if (linkCursor != null)                      linkCursor.Dispose();              }
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GetInstanceImpl,The following statement contains a magic number: var db = await DB.CreateAsync(subredditsDatabase' DBCreateFlags.None' ushort.MaxValue - 100' new DBKey[]              {                  new DBKey(24' 0' DBKeyFlags.Alpha' "name"' false' false' false' 0)'                  new DBKey(12' 24' DBKeyFlags.Alpha' "id"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GetInstanceImpl,The following statement contains a magic number: var db = await DB.CreateAsync(subredditsDatabase' DBCreateFlags.None' ushort.MaxValue - 100' new DBKey[]              {                  new DBKey(24' 0' DBKeyFlags.Alpha' "name"' false' false' false' 0)'                  new DBKey(12' 24' DBKeyFlags.Alpha' "id"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GetInstanceImpl,The following statement contains a magic number: var db = await DB.CreateAsync(subredditsDatabase' DBCreateFlags.None' ushort.MaxValue - 100' new DBKey[]              {                  new DBKey(24' 0' DBKeyFlags.Alpha' "name"' false' false' false' 0)'                  new DBKey(12' 24' DBKeyFlags.Alpha' "id"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GetInstanceImpl,The following statement contains a magic number: var db = await DB.CreateAsync(subredditsDatabase' DBCreateFlags.None' ushort.MaxValue - 100' new DBKey[]              {                  new DBKey(24' 0' DBKeyFlags.Alpha' "name"' false' false' false' 0)'                  new DBKey(12' 24' DBKeyFlags.Alpha' "id"' false' false' false' 1)              });
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GenerateNameKeyspace,The following statement contains a magic number: for (int i = 0; i < 24 && i < name.Length; i++)                  keyspace[i] = (byte)name[i];
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GenerateIdKeyspace,The following statement contains a magic number: for (int i = 0; i < 12 && i < id.Length; i++)                  keyspace[i] = (byte)id[i];
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GenerateCombinedKeyspace,The following statement contains a magic number: for (int i = 0; i < 24 && i < name.Length; i++)                  keyspace[i] = (byte)name[i];
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GenerateCombinedKeyspace,The following statement contains a magic number: for (int i = 0; i < 12 && i < id.Length; i++)                  keyspace[i + 24] = (byte)id[i];
Magic Number,Baconography.NeutralServices.KitaroDB,Subreddits,C:\repos\Synergex_Baconography\neutralservices\kitarodb\Subreddits.cs,GenerateCombinedKeyspace,The following statement contains a magic number: for (int i = 0; i < 12 && i < id.Length; i++)                  keyspace[i + 24] = (byte)id[i];
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var sub = await DB.CreateAsync(subredditStatisticsPath' DBCreateFlags.None' 28' new DBKey[]              {                  new DBKey(12' 0' DBKeyFlags.Alpha' "subreddit_id"' false' false' false' 0)'                  new DBKey(4' 12' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 16' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 20' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetInstanceImpl,The following statement contains a magic number: var domain = await DB.CreateAsync(domainStatisticsPath' DBCreateFlags.None' 20' new DBKey[]              {                  new DBKey(4' 0' DBKeyFlags.Unsigned' "domain_hash"' false' false' false' 0)'                  new DBKey(4' 4' DBKeyFlags.Unsigned' "links"' true' true' false' 1)'                  new DBKey(4' 8' DBKeyFlags.Unsigned' "comments"' true' true' false' 2)'                  new DBKey(8' 12' DBKeyFlags.AutoTime' "update_timestamp"' true' true' false' 3)              });
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GenerateCombinedSubredditKeyspace,The following statement contains a magic number: BitConverter.GetBytes(comments).CopyTo(keyspace' SubIdKeySpaceSize + 4);
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GenerateCombinedDomainKeyspace,The following statement contains a magic number: BitConverter.GetBytes(comments).CopyTo(keyspace' DomainHashKeySpaceSize + 4);
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementDomain,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  uint hash = (uint)domain.GetHashCode();                  var keyspace = GenerateDomainHashKeyspace(hash);                    using (var dbCursor = await _domainStatisticsDB.SeekAsync(_domainStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                          // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                              if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await _domainStatisticsDB.InsertAsync(combinedSpace);                      }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementDomain,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  uint hash = (uint)domain.GetHashCode();                  var keyspace = GenerateDomainHashKeyspace(hash);                    using (var dbCursor = await _domainStatisticsDB.SeekAsync(_domainStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                          // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                              if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await _domainStatisticsDB.InsertAsync(combinedSpace);                      }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementDomain,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  uint hash = (uint)domain.GetHashCode();                  var keyspace = GenerateDomainHashKeyspace(hash);                    using (var dbCursor = await _domainStatisticsDB.SeekAsync(_domainStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                          // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                              if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedDomainKeyspace(hash' links' comments);                          await _domainStatisticsDB.InsertAsync(combinedSpace);                      }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementSubreddit,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  var keyspace = GenerateSubIdKeyspace(id);                    using (var dbCursor = await _subredditStatisticsDB.SeekAsync(_subredditStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                            // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                            if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await _subredditStatisticsDB.InsertAsync(combinedSpace);                        }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementSubreddit,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  var keyspace = GenerateSubIdKeyspace(id);                    using (var dbCursor = await _subredditStatisticsDB.SeekAsync(_subredditStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                            // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                            if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await _subredditStatisticsDB.InsertAsync(combinedSpace);                        }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,IncrementSubreddit,The following statement contains a magic number: try              {                  uint links = 0;                  uint comments = 0;                  var keyspace = GenerateSubIdKeyspace(id);                    using (var dbCursor = await _subredditStatisticsDB.SeekAsync(_subredditStatisticsDB.GetKeys()[0]' keyspace' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (dbCursor != null)                      {                            // Decode cursor                          var record = dbCursor.Get();                          links = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                          comments = BitConverter.ToUInt32(record.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                          // Increment variable                          if (link)                              links++;                          else                              comments++;                          // Update record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await dbCursor.UpdateAsync(combinedSpace);                      }                      else                      {                          links = (uint)(link ? 1 : 0);                          comments = (uint)(link ? 0 : 1);                            if (link)                              links++;                          else                              comments++;                          // Insert a fresh' zero'd record                          var combinedSpace = GenerateCombinedSubredditKeyspace(id' links' comments);                          await _subredditStatisticsDB.InsertAsync(combinedSpace);                        }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(DBError.TranslateError((uint)ex.HResult));              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregates,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      uint links = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      uint comments = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregates,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      uint links = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      uint comments = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregates,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      uint links = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      uint comments = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregates,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      var links = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                      var comments = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregates,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      var links = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                      var comments = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregates,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(targetKey' keyspace' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var currentRecord = cursor.Get();                      var links = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize).Take(4).ToArray()' 0);                      var comments = BitConverter.ToUInt32(currentRecord.Skip(DomainHashKeySpaceSize + 4).Take(4).ToArray()' 0);                      return new Tuple<uint' uint>(links' comments);                    }                  else                      return null;              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetSubredditAggregateList,The following statement contains a magic number: using (var cursor = await _subredditStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new SubredditAggregate();                      var currentRecord = cursor.Get();                      agg.SubredditId = BitConverter.ToString(currentRecord.Take(12).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(SubIdKeySpaceSize + 4).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(20).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices.KitaroDB,UsageStatistics,C:\repos\Synergex_Baconography\neutralservices\kitarodb\UsageStatistics.cs,GetDomainAggregateList,The following statement contains a magic number: using (var cursor = await _domainStatisticsDB.SeekAsync(DBReadFlags.NoLock))              {                  while (cursor != null)                  {                      var agg = new DomainAggregate();                      var currentRecord = cursor.Get();                      agg.DomainHash = BitConverter.ToUInt32(currentRecord.Take(4).ToArray()' 0);                      agg.LinkClicks = BitConverter.ToUInt32(currentRecord.Skip(4).Take(4).ToArray()' 0);                      agg.CommentClicks = BitConverter.ToUInt32(currentRecord.Skip(8).Take(4).ToArray()' 0);                      agg.LastModified = new DateTime(BitConverter.ToInt64(currentRecord.Skip(12).Take(8).ToArray()' 0));                      if (agg.LinkClicks > threshold || agg.CommentClicks > threshold)                          retval.Add(agg);                      if (!await cursor.MoveNextAsync())                          break;                  }              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,InitializeImpl,The following statement contains a magic number: try              {                  _comments = await Comments.GetInstance();                  _links = await Links.GetInstance();                  _subreddits = await Subreddits.GetInstance();                  _statistics = await UsageStatistics.GetInstance();                    //tell the key value pair infrastructure to allow duplicates                  //we dont really have a key' all we actually wanted was an ordered queue                  //the duplicates mechanism should give us that                  _actionsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\actions_v2.ism"' DBCreateFlags.None'                      ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });                  _historyDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\history_v2.ism"' DBCreateFlags.None);                  _settingsDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\settings_v2.ism"' DBCreateFlags.None);                  _blobStoreDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\blobs_v3.ism"' DBCreateFlags.None' 0'                      new DBKey[]                       {                           new DBKey(4' 0' DBKeyFlags.Integer' "default"' false' false' false' 0)'                          new DBKey(8' 4' DBKeyFlags.AutoTime' "timestamp"' false' true' false' 1)                       });                    _imageAPIDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_api_v1.ism"' DBCreateFlags.None' 64000);                  _imageDb = await DB.CreateAsync(Windows.Storage.ApplicationData.Current.LocalFolder.Path + "\\image_v1.ism"' DBCreateFlags.None' 0);                    //get our initial action queue state                  var actionCursor = await _actionsDb.SeekAsync(_actionsDb.GetKeys().First()' "action"' DBReadFlags.AutoLock | DBReadFlags.WaitOnLock);                  _hasQueuedActions = actionCursor != null;                    _settingsCache = new Dictionary<string' string>();                  //load all of the settings up front so we dont spend so much time going back and forth                  var cursor = await _settingsDb.SeekAsync(DBReadFlags.NoLock);                  if (cursor != null)                  {                      using (cursor)                      {                          do                          {                              _settingsCache.Add(cursor.GetKeyString()' cursor.GetString());                          } while (await cursor.MoveNextAsync());                      }                  }                    var historyCursor = await _historyDb.SeekAsync(DBReadFlags.NoLock);                  if (historyCursor != null)                  {                      using (historyCursor)                      {                          do                          {                              _clickHistory.Add(historyCursor.GetString());                              if (_terminateSource.IsCancellationRequested)                                  return;                          } while (await historyCursor.MoveNextAsync());                      }                  }              }              catch (Exception e)              {                  Debug.WriteLine(DBError.TranslateError((uint)e.HResult));              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,Clear,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,CleanupAll,The following statement contains a magic number: await Cleanup(_comments._commentsDB' 20' olderThan' token);
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,CleanupAll,The following statement contains a magic number: await Cleanup(_comments._metaDB' 20' olderThan' token);
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,CleanupAll,The following statement contains a magic number: await Cleanup(_links._linksDB' 20' olderThan' token);
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,Cleanup,The following statement contains a magic number: using (var blobCursor = await db.SeekAsync(DBReadFlags.WaitOnLock))              {                  if (blobCursor == null)                      return;                  do                  {                      if (cancelToken.IsCancellationRequested)                          return;                        var gottenBlob = blobCursor.Get();                        var microseconds = BitConverter.ToInt64(gottenBlob' timeStampIndex);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge >= olderThan)                      {                          await blobCursor.DeleteAsync();                      }                    } while (await blobCursor.MoveNextAsync());                }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,Cleanup,The following statement contains a magic number: using (var blobCursor = await db.SeekAsync(DBReadFlags.WaitOnLock))              {                  if (blobCursor == null)                      return;                  do                  {                      if (cancelToken.IsCancellationRequested)                          return;                        var gottenBlob = blobCursor.Get();                        var microseconds = BitConverter.ToInt64(gottenBlob' timeStampIndex);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge >= olderThan)                      {                          await blobCursor.DeleteAsync();                      }                    } while (await blobCursor.MoveNextAsync());                }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,UserHasOfflineMessages,The following statement contains a magic number: using (var cursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var gottenBlob = cursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 4);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge <= TimeSpan.FromDays(1))                      {                          return true;                      }                  }              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,UserHasOfflineMessages,The following statement contains a magic number: using (var cursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var gottenBlob = cursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 4);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge <= TimeSpan.FromDays(1))                      {                          return true;                      }                  }              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,UserHasOfflineMessages,The following statement contains a magic number: using (var cursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.NoLock))              {                  if (cursor != null)                  {                      var gottenBlob = cursor.Get();                      var microseconds = BitConverter.ToInt64(gottenBlob' 4);                      var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                      var blobAge = DateTime.Now - updatedTime;                      if (blobAge <= TimeSpan.FromDays(1))                      {                          return true;                      }                  }              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreOrderedThings,The following statement contains a magic number: try              {                  await Initialize();                  var thingsArray = things.ToArray();                  var compressor = new BaconographyPortable.Model.Compression.CompressionService();                  var compressedBytes = compressor.Compress(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thingsArray)));                  var recordBytes = new byte[compressedBytes.Length + 12];                  Array.Copy(compressedBytes' 0' recordBytes' 12' compressedBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    if (_terminateSource.IsCancellationRequested)                      return;                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreOrderedThings,The following statement contains a magic number: try              {                  await Initialize();                  var thingsArray = things.ToArray();                  var compressor = new BaconographyPortable.Model.Compression.CompressionService();                  var compressedBytes = compressor.Compress(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thingsArray)));                  var recordBytes = new byte[compressedBytes.Length + 12];                  Array.Copy(compressedBytes' 0' recordBytes' 12' compressedBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    if (_terminateSource.IsCancellationRequested)                      return;                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreOrderedThings,The following statement contains a magic number: try              {                  await Initialize();                  var thingsArray = things.ToArray();                  var compressor = new BaconographyPortable.Model.Compression.CompressionService();                  var compressedBytes = compressor.Compress(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thingsArray)));                  var recordBytes = new byte[compressedBytes.Length + 12];                  Array.Copy(compressedBytes' 0' recordBytes' 12' compressedBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    if (_terminateSource.IsCancellationRequested)                      return;                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreThing,The following statement contains a magic number: try              {                  await Initialize();                  if (_terminateSource.IsCancellationRequested)                      return;                  var thingBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thing));                  var recordBytes = new byte[thingBytes.Length + 12];                  Array.Copy(thingBytes' 0' recordBytes' 12' thingBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreThing,The following statement contains a magic number: try              {                  await Initialize();                  if (_terminateSource.IsCancellationRequested)                      return;                  var thingBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thing));                  var recordBytes = new byte[thingBytes.Length + 12];                  Array.Copy(thingBytes' 0' recordBytes' 12' thingBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,StoreThing,The following statement contains a magic number: try              {                  await Initialize();                  if (_terminateSource.IsCancellationRequested)                      return;                  var thingBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(thing));                  var recordBytes = new byte[thingBytes.Length + 12];                  Array.Copy(thingBytes' 0' recordBytes' 12' thingBytes.Length);                  //the 8 bytes not written here will be filled with the current time stamp by kdb                  Array.Copy(BitConverter.GetBytes(key.GetHashCode())' recordBytes' 4);                    using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (_terminateSource.IsCancellationRequested)                          return;                      if (blobCursor != null)                      {                          await blobCursor.UpdateAsync(recordBytes);                      }                      else                      {                          await _blobStoreDb.InsertAsync(recordBytes);                      }                  }              }              catch(Exception ex)              {                  var errorText = DBError.TranslateError((uint)ex.HResult);                  //throw new Exception(errorText);                  Debug.WriteLine(errorText);                  Debug.WriteLine(ex.ToString());              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if(blobAge <= maxAge)                              return JsonConvert.DeserializeObject<Thing>(Encoding.UTF8.GetString(gottenBlob' 12' gottenBlob.Length));                      }                  }              }              catch              {                  badElement = true;              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if(blobAge <= maxAge)                              return JsonConvert.DeserializeObject<Thing>(Encoding.UTF8.GetString(gottenBlob' 12' gottenBlob.Length));                      }                  }              }              catch              {                  badElement = true;              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if(blobAge <= maxAge)                              return JsonConvert.DeserializeObject<Thing>(Encoding.UTF8.GetString(gottenBlob' 12' gottenBlob.Length));                      }                  }              }              catch              {                  badElement = true;              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveThing,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if(blobAge <= maxAge)                              return JsonConvert.DeserializeObject<Thing>(Encoding.UTF8.GetString(gottenBlob' 12' gottenBlob.Length));                      }                  }              }              catch              {                  badElement = true;              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if (blobAge <= maxAge)                          {                              var compressor = new BaconographyPortable.Model.Compression.CompressionService();                              var decompressedBytes = compressor.Decompress(gottenBlob' 12);                              IEnumerable<Thing> result = JsonConvert.DeserializeObject<Thing[]>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length));                              return result;                          }                      }                  }              }              catch(Exception ex)              {                  var errorString = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorString);              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if (blobAge <= maxAge)                          {                              var compressor = new BaconographyPortable.Model.Compression.CompressionService();                              var decompressedBytes = compressor.Decompress(gottenBlob' 12);                              IEnumerable<Thing> result = JsonConvert.DeserializeObject<Thing[]>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length));                              return result;                          }                      }                  }              }              catch(Exception ex)              {                  var errorString = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorString);              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if (blobAge <= maxAge)                          {                              var compressor = new BaconographyPortable.Model.Compression.CompressionService();                              var decompressedBytes = compressor.Decompress(gottenBlob' 12);                              IEnumerable<Thing> result = JsonConvert.DeserializeObject<Thing[]>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length));                              return result;                          }                      }                  }              }              catch(Exception ex)              {                  var errorString = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorString);              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveOrderedThings,The following statement contains a magic number: try              {                  using (var blobCursor = await _blobStoreDb.SeekAsync(_blobStoreDb.GetKeys()[0]' BitConverter.GetBytes(key.GetHashCode())' DBReadFlags.WaitOnLock))                  {                      if (blobCursor != null)                      {                          var gottenBlob = blobCursor.Get();                          var microseconds = BitConverter.ToInt64(gottenBlob' 4);                          var updatedTime = new DateTime(microseconds * 10).AddYears(1969);                          var blobAge = DateTime.Now - updatedTime;                          if (blobAge <= maxAge)                          {                              var compressor = new BaconographyPortable.Model.Compression.CompressionService();                              var decompressedBytes = compressor.Decompress(gottenBlob' 12);                              IEnumerable<Thing> result = JsonConvert.DeserializeObject<Thing[]>(Encoding.UTF8.GetString(decompressedBytes' 0' decompressedBytes.Length));                              return result;                          }                      }                  }              }              catch(Exception ex)              {                  var errorString = DBError.TranslateError((uint)ex.HResult);                  Debug.WriteLine(errorString);              }
Magic Number,Baconography.NeutralServices,OfflineService,C:\repos\Synergex_Baconography\neutralservices\OfflineService.cs,RetrieveLink,The following statement contains a magic number: var link = await _links.GetLink(null' id' TimeSpan.FromDays(1024));
Magic Number,Baconography.NeutralServices,VideoService,C:\repos\Synergex_Baconography\NeutralServices\VideoService.cs,scoreFileType,The following statement contains a magic number: if (type.StartsWith("video/mp4"))                  return 100;              else if (type.StartsWith("video/3gp"))                  return 50;              else                  return 1;
Magic Number,Baconography.NeutralServices,VideoService,C:\repos\Synergex_Baconography\NeutralServices\VideoService.cs,scoreFileType,The following statement contains a magic number: if (type.StartsWith("video/mp4"))                  return 100;              else if (type.StartsWith("video/3gp"))                  return 50;              else                  return 1;
Magic Number,Baconography.NeutralServices,VideoService,C:\repos\Synergex_Baconography\NeutralServices\VideoService.cs,SplitAmp,The following statement contains a magic number: foreach (var strSub in str.Replace(ampFubar' "&").Split('&'))              {                  var strSubParts = strSub.Split('=');                  if (strSubParts.Length < 2)                      results.Add(Tuple.Create(strSub' strSub));                  else                      results.Add(Tuple.Create(strSubParts[0]' strSubParts[1]));              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,OnInputPaneShowing,The following statement contains a magic number: if (focusedItem != null)              {                  // if the focused item is within height - occludedrect height - buffer(50)                  // then it doesn't need to be changed                  GeneralTransform gt = focusedItem.TransformToVisual(Window.Current.Content);                  Point focusedPoint = gt.TransformPoint(new Point(0.0' 0.0));                    if (focusedPoint.Y > (_windowBounds.Height - args.OccludedRect.Height - 50))                  {                      _ihmFocusMoved = true;                      _ihmOccludeHeight = args.OccludedRect.Height;                      _hostPopup.VerticalOffset -= (int)args.OccludedRect.Height;                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: if (placement == PlacementMode.Right)              {                  double num5 = Math.Max(0.0' target[0].X);                  double num6 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  if ((num6 < width) && (num6 < num5))                  {                      placement = PlacementMode.Left;                  }              }              else if (placement == PlacementMode.Left)              {                  double num7 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  double num8 = Math.Max(0.0' target[0].X);                  if ((num8 < width) && (num8 < num7))                  {                      placement = PlacementMode.Right;                  }              }              else if (placement == PlacementMode.Top)              {                  double num9 = Math.Max(0.0' target[0].Y);                  double num10 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num9 < height) && (num9 < num10))                  {                      placement = PlacementMode.Bottom;                  }              }              else if (placement == PlacementMode.Bottom)              {                  double num11 = Math.Max(0.0' target[0].Y);                  double num12 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num12 < height) && (num12 < num11))                  {                      placement = PlacementMode.Top;                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: if (placement == PlacementMode.Right)              {                  double num5 = Math.Max(0.0' target[0].X);                  double num6 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  if ((num6 < width) && (num6 < num5))                  {                      placement = PlacementMode.Left;                  }              }              else if (placement == PlacementMode.Left)              {                  double num7 = window.Width - Math.Min(window.Width' target[1].X + 1.0);                  double num8 = Math.Max(0.0' target[0].X);                  if ((num8 < width) && (num8 < num7))                  {                      placement = PlacementMode.Right;                  }              }              else if (placement == PlacementMode.Top)              {                  double num9 = Math.Max(0.0' target[0].Y);                  double num10 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num9 < height) && (num9 < num10))                  {                      placement = PlacementMode.Bottom;                  }              }              else if (placement == PlacementMode.Bottom)              {                  double num11 = Math.Max(0.0' target[0].Y);                  double num12 = window.Height - Math.Min(window.Height' target[2].Y + 1.0);                  if ((num12 < height) && (num12 < num11))                  {                      placement = PlacementMode.Top;                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: switch (placement)              {                  case PlacementMode.Bottom:                      pointArray = new Point[] { new Point(target[2].X' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point((target[3].X - width) + 1.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0)))' new Point(0.0' Math.Max((double)0.0' (double)(target[2].Y + 1.0))) };                      break;                    case PlacementMode.Right:                      pointArray = new Point[] { new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' target[1].Y)' new Point(Math.Max((double)0.0' (double)(target[3].X + 1.0))' (target[3].Y - height) + 1.0)' new Point(Math.Max((double)0.0' (double)(target[1].X + 1.0))' 0.0) };                      break;                    case PlacementMode.Left:                      pointArray = new Point[] { new Point(Math.Min(window.Width' target[0].X) - width' target[1].Y)' new Point(Math.Min(window.Width' target[2].X) - width' (target[3].Y - height) + 1.0)' new Point(Math.Min(window.Width' target[0].X) - width' 0.0) };                      break;                    case PlacementMode.Top:                      pointArray = new Point[] { new Point(target[0].X' Math.Min(target[0].Y' window.Height) - height)' new Point((target[1].X - width) + 1.0' Math.Min(target[0].Y' window.Height) - height)' new Point(0.0' Math.Min(target[0].Y' window.Height) - height) };                      break;                    default:                      pointArray = new Point[] { new Point(0.0' 0.0) };                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: if (index > 1)              {                  if ((placement == PlacementMode.Left) || (placement == PlacementMode.Right))                  {                      if (((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y)))                      {                          double num18 = bounds.Top + (bounds.Height / 2.0);                          if ((num18 > 0.0) && ((num18 - 0.0) > (window.Height - num18)))                          {                              y = window.Height - height;                          }                          else                          {                              y = 0.0;                          }                      }                  }                  else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X))))                  {                      double num19 = bounds.Left + (bounds.Width / 2.0);                      if ((num19 > 0.0) && ((num19 - 0.0) > (window.Width - num19)))                      {                          x = window.Width - width;                      }                      else                      {                          x = 0.0;                      }                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PlacePopup,The following statement contains a magic number: if (index > 1)              {                  if ((placement == PlacementMode.Left) || (placement == PlacementMode.Right))                  {                      if (((y != target[0].Y) && (y != target[1].Y)) && (((y + height) != target[0].Y) && ((y + height) != target[1].Y)))                      {                          double num18 = bounds.Top + (bounds.Height / 2.0);                          if ((num18 > 0.0) && ((num18 - 0.0) > (window.Height - num18)))                          {                              y = window.Height - height;                          }                          else                          {                              y = 0.0;                          }                      }                  }                  else if (((placement == PlacementMode.Top) || (placement == PlacementMode.Bottom)) && (((x != target[0].X) && (x != target[1].X)) && (((x + width) != target[0].X) && ((x + width) != target[1].X))))                  {                      double num19 = bounds.Left + (bounds.Width / 2.0);                      if ((num19 > 0.0) && ((num19 - 0.0) > (window.Width - num19)))                      {                          x = window.Width - width;                      }                      else                      {                          x = 0.0;                      }                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: Point[] pointArray = new Point[4];
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: if ((element != null) && (relativeTo != null))              {                  GeneralTransform gt = relativeTo.TransformToVisual(_rootVisual);                  pointArray[0] = gt.TransformPoint(new Point(0.0' 0.0));                  pointArray[1] = gt.TransformPoint(new Point(element.ActualWidth' 0.0));                  pointArray[2] = gt.TransformPoint(new Point(0.0' element.ActualHeight));                  pointArray[3] = gt.TransformPoint(new Point(element.ActualWidth' element.ActualHeight));                    FrameworkElement _el = _rootVisual as FrameworkElement;                  bool flag = (_el != null) ? (_el.FlowDirection == FlowDirection.RightToLeft) : false;                  if (isRTL != flag)                  {                      // TODO: Handle RTL - GetTransformedPoints                      //for (int i = 0; i < pointArray.Length; i++)                      //{                      //    pointArray[i].X = _windowBounds.Width - pointArray[i].X;                      //}                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,GetTransformedPoints,The following statement contains a magic number: if ((element != null) && (relativeTo != null))              {                  GeneralTransform gt = relativeTo.TransformToVisual(_rootVisual);                  pointArray[0] = gt.TransformPoint(new Point(0.0' 0.0));                  pointArray[1] = gt.TransformPoint(new Point(element.ActualWidth' 0.0));                  pointArray[2] = gt.TransformPoint(new Point(0.0' element.ActualHeight));                  pointArray[3] = gt.TransformPoint(new Point(element.ActualWidth' element.ActualHeight));                    FrameworkElement _el = _rootVisual as FrameworkElement;                  bool flag = (_el != null) ? (_el.FlowDirection == FlowDirection.RightToLeft) : false;                  if (isRTL != flag)                  {                      // TODO: Handle RTL - GetTransformedPoints                      //for (int i = 0; i < pointArray.Length; i++)                      //{                      //    pointArray[i].X = _windowBounds.Width - pointArray[i].X;                      //}                  }              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following statement contains a magic number: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,CalculateHorizontalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newX = this.HorizontalOffset + initialOffset - ((flyoutWidth / 2) - (elementWidth / 2));              }              else              {                  newX = this.HorizontalOffset + initialOffset;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,CalculateHorizontalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newX = this.HorizontalOffset + initialOffset - ((flyoutWidth / 2) - (elementWidth / 2));              }              else              {                  newX = this.HorizontalOffset + initialOffset;              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,CalculateVerticalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newY = this.VerticalOffset + initialOffset;              }              else              {                  newY = this.VerticalOffset + initialOffset - (flyoutHeight / 2) + (elementHeight / 2);              }
Magic Number,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,CalculateVerticalCenterOffset,The following statement contains a magic number: if (_realizedPlacement == PlacementMode.Top || _realizedPlacement == PlacementMode.Bottom)              {                  newY = this.VerticalOffset + initialOffset;              }              else              {                  newY = this.VerticalOffset + initialOffset - (flyoutHeight / 2) + (elementHeight / 2);              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnInputPaneShowing,The following statement contains a magic number: if (focusedItem != null)              {                  // if the focused item is within height - occludedrect height - buffer(50)                  // then it doesn't need to be changed                  GeneralTransform gt = focusedItem.TransformToVisual(Window.Current.Content);                  Point focusedPoint = gt.TransformPoint(new Point(0.0' 0.0));                    if (focusedPoint.Y > (_windowBounds.Height - args.OccludedRect.Height - 50))                  {                      _ihmFocusMoved = true;                      _ihmOccludeHeight = args.OccludedRect.Height;                      _hostPopup.VerticalOffset -= (int)args.OccludedRect.Height;                  }              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "black" : "white");                  }              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "black" : "white");                  }              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "black" : "white");                  }              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "black" : "white");                  }              }
Magic Number,BaconographyW8.Common,SettingsFlyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\SettingsFlyout.cs,OnHeaderBrushColorChanged,The following statement contains a magic number: if (e.OldValue != e.NewValue)              {                  SolidColorBrush newBrush = e.NewValue as SolidColorBrush;                  if (newBrush != null)                  {                      var yiq = ((newBrush.Color.R*299) + (newBrush.Color.G*587) + (newBrush.Color.B*114)) / 1000;                        Debug.WriteLine(yiq >= 128 ? "black" : "white");                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MergePixelArrays,The following statement contains a magic number: for (uint rows = heightOffset' sRows = 0; sRows < sHeight; rows++' sRows++)              {                  for (uint cols = widthOffset' sCols = 0; sCols < sWidth; cols++' sCols++)                  {                      largeArray[(lWidth * rows + cols) * 4 + 0] = smallArray[(sWidth * sRows + sCols) * 4 + 0];                      largeArray[(lWidth * rows + cols) * 4 + 1] = smallArray[(sWidth * sRows + sCols) * 4 + 1];                      largeArray[(lWidth * rows + cols) * 4 + 2] = smallArray[(sWidth * sRows + sCols) * 4 + 2];                      largeArray[(lWidth * rows + cols) * 4 + 3] = smallArray[(sWidth * sRows + sCols) * 4 + 3];                  }              }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,GenerateResizedImageAsync,The following statement contains a magic number: try              {                  string fileName = inputFile.DisplayName + width + "x" + height;                  string extension = inputFile.Name.Substring(inputFile.Name.LastIndexOf('.'));                    string folder = inputFile.Path.Substring(0' inputFile.Path.LastIndexOf('\\'));                  var outputFolder = await StorageFolder.GetFolderFromPathAsync(folder);                  var newFile = await outputFolder.CreateFileAsync(fileName + extension' CreationCollisionOption.ReplaceExisting);                    var inputStream = await inputFile.OpenAsync(Windows.Storage.FileAccessMode.Read);                  var outputStream = await newFile.OpenTransactedWriteAsync();                    var inMemStream = new InMemoryRandomAccessStream();                  var decoder = await BitmapDecoder.CreateAsync(inputStream);                  var encoder = await BitmapEncoder.CreateForTranscodingAsync(inMemStream' decoder);                    // Find aspect ratio for resize                  float nPercentW = (((float)width - (edgePadding * 2)) / (float)decoder.PixelWidth);                  float nPercentH = (((float)height - (edgePadding * 2)) / (float)decoder.PixelHeight);                  float nPercent = nPercentH < nPercentW ? nPercentH : nPercentW;                    // Scale height and width                  if (nPercent < 1)                  {                      encoder.BitmapTransform.ScaledHeight = (uint)(decoder.PixelHeight * nPercent);                      encoder.BitmapTransform.ScaledWidth = (uint)(decoder.PixelWidth * nPercent);                  }                    // Image may still exceed intended bounds' resize as appropriate                  if (encoder.BitmapTransform.ScaledWidth > width || encoder.BitmapTransform.ScaledHeight > height)                  {                      BitmapBounds bounds = new BitmapBounds();                      if (encoder.BitmapTransform.ScaledWidth > width)                      {                          bounds.Width = width;                          bounds.X = (encoder.BitmapTransform.ScaledWidth - width) / 2;                      }                      else                          bounds.Width = encoder.BitmapTransform.ScaledWidth;                      if (encoder.BitmapTransform.ScaledHeight > height)                      {                          bounds.Height = height;                          bounds.Y = (encoder.BitmapTransform.ScaledHeight - height) / 2;                      }                      else                          bounds.Height = encoder.BitmapTransform.ScaledHeight;                      encoder.BitmapTransform.Bounds = bounds;                  }                  await encoder.FlushAsync();                    var outDecoder = await BitmapDecoder.CreateAsync(inMemStream);                  var outEncoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream.Stream' outDecoder);                    var transparentBytes = GenerateTransparentBitmap(width' height);                    PixelDataProvider data = await outDecoder.GetPixelDataAsync();                  uint heightOffset = (height - outDecoder.PixelHeight) / 2 - bottomPadding;                  uint widthOffset = (width - outDecoder.PixelWidth) / 2;                  byte[] bytes = MergePixelArrays(transparentBytes' width' height' data.DetachPixelData()' outDecoder.PixelWidth' outDecoder.PixelHeight' widthOffset' heightOffset);                  outEncoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' width' height' 72.0' 72.0' bytes);                    await outEncoder.FlushAsync();                  return newFile;              }              catch (Exception)              {                }
Magic Number,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,ImageBytesFromUrl,The following statement contains a magic number: await Task.Delay(500);
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,MaybeCreateTile,The following statement contains a magic number: try              {                  //we want to queue up 5 tiles to be created but we only want to replace them at a max of once every 14 mintes                  if (_tileCreationDates.Count >= 5 && (DateTime.Now - _tileCreationDates.First()).TotalMinutes < 14)                      return;                    var linkThing = thing.Item3;                  if (linkThing == null)                      return;                    Uri image = null;                  if (thing.Item2 != null)                      image = new Uri(thing.Item2);                  else if (thing.Item1 != null)                      image = new Uri(thing.Item1);                    if (_tileCreationDates.Count >= 5)                      _tileCreationDates.Dequeue();                    _tileCreationDates.Enqueue(DateTime.Now);                    await CreateTile(linkThing.Data.Title'                      !string.IsNullOrWhiteSpace(thing.Item1) ? new Uri(thing.Item1) : null'                       !string.IsNullOrWhiteSpace(thing.Item2) ? new Uri(thing.Item2) : null);              }              catch (Exception)              {                  //do nothing its not really that important              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,MaybeCreateTile,The following statement contains a magic number: try              {                  //we want to queue up 5 tiles to be created but we only want to replace them at a max of once every 14 mintes                  if (_tileCreationDates.Count >= 5 && (DateTime.Now - _tileCreationDates.First()).TotalMinutes < 14)                      return;                    var linkThing = thing.Item3;                  if (linkThing == null)                      return;                    Uri image = null;                  if (thing.Item2 != null)                      image = new Uri(thing.Item2);                  else if (thing.Item1 != null)                      image = new Uri(thing.Item1);                    if (_tileCreationDates.Count >= 5)                      _tileCreationDates.Dequeue();                    _tileCreationDates.Enqueue(DateTime.Now);                    await CreateTile(linkThing.Data.Title'                      !string.IsNullOrWhiteSpace(thing.Item1) ? new Uri(thing.Item1) : null'                       !string.IsNullOrWhiteSpace(thing.Item2) ? new Uri(thing.Item2) : null);              }              catch (Exception)              {                  //do nothing its not really that important              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,MaybeCreateTile,The following statement contains a magic number: try              {                  //we want to queue up 5 tiles to be created but we only want to replace them at a max of once every 14 mintes                  if (_tileCreationDates.Count >= 5 && (DateTime.Now - _tileCreationDates.First()).TotalMinutes < 14)                      return;                    var linkThing = thing.Item3;                  if (linkThing == null)                      return;                    Uri image = null;                  if (thing.Item2 != null)                      image = new Uri(thing.Item2);                  else if (thing.Item1 != null)                      image = new Uri(thing.Item1);                    if (_tileCreationDates.Count >= 5)                      _tileCreationDates.Dequeue();                    _tileCreationDates.Enqueue(DateTime.Now);                    await CreateTile(linkThing.Data.Title'                      !string.IsNullOrWhiteSpace(thing.Item1) ? new Uri(thing.Item1) : null'                       !string.IsNullOrWhiteSpace(thing.Item2) ? new Uri(thing.Item2) : null);              }              catch (Exception)              {                  //do nothing its not really that important              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The following statement contains a magic number: try              {                  string id = "";                  if (subreddit != null)                      id = subreddit.Data.DisplayName;                    SecondaryTile tile = new SecondaryTile();                  tile.TileOptions = TileOptions.ShowNameOnWideLogo | TileOptions.ShowNameOnLogo;                  tile.DisplayName = "Baconography";                  tile.ShortName = "/r/" + id;                  if (subreddit != null)                  {                        // Download and create a local copy of the header image                      var rawImage = await _imagesService.SaveFileFromUriAsync(new Uri(subreddit.Data.HeaderImage)' subreddit.Data.DisplayName + ".jpg"' "Images");                      // Generate a wide tile appropriate image                      var wideImage = await _imagesService.GenerateResizedImage(rawImage' 310' 150) as StorageFile;                      // Generate a square tile appropriate image                      var squareImage = await _imagesService.GenerateResizedImage(rawImage' 150' 150) as StorageFile;                        tile.WideLogo = new Uri("ms-appdata:///local/Images/" + wideImage.Name);                      tile.Logo = new Uri("ms-appdata:///local/Images/" + squareImage.Name);                      subreddit.Data.PublicDescription = null;                      subreddit.Data.Description = null;                      subreddit.Data.Headertitle = null;                      tile.Arguments = JsonConvert.SerializeObject(subreddit);                  }                  else                  {                      Uri logo = new Uri("ms-appx:///Assets/Logo.png");                      Uri wideLogo = new Uri("ms-appx:///Assets/WideLogo.png");                      tile.Arguments = "/r/";                      tile.Logo = logo;                      tile.WideLogo = wideLogo;                  }                  tile.TileId = "r" + id;                    // Ask the user to authorize creation of the tile                  bool isPinned = await tile.RequestCreateAsync();              }              catch (Exception)              {                  // TODO: Do something with exceptions              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The following statement contains a magic number: try              {                  string id = "";                  if (subreddit != null)                      id = subreddit.Data.DisplayName;                    SecondaryTile tile = new SecondaryTile();                  tile.TileOptions = TileOptions.ShowNameOnWideLogo | TileOptions.ShowNameOnLogo;                  tile.DisplayName = "Baconography";                  tile.ShortName = "/r/" + id;                  if (subreddit != null)                  {                        // Download and create a local copy of the header image                      var rawImage = await _imagesService.SaveFileFromUriAsync(new Uri(subreddit.Data.HeaderImage)' subreddit.Data.DisplayName + ".jpg"' "Images");                      // Generate a wide tile appropriate image                      var wideImage = await _imagesService.GenerateResizedImage(rawImage' 310' 150) as StorageFile;                      // Generate a square tile appropriate image                      var squareImage = await _imagesService.GenerateResizedImage(rawImage' 150' 150) as StorageFile;                        tile.WideLogo = new Uri("ms-appdata:///local/Images/" + wideImage.Name);                      tile.Logo = new Uri("ms-appdata:///local/Images/" + squareImage.Name);                      subreddit.Data.PublicDescription = null;                      subreddit.Data.Description = null;                      subreddit.Data.Headertitle = null;                      tile.Arguments = JsonConvert.SerializeObject(subreddit);                  }                  else                  {                      Uri logo = new Uri("ms-appx:///Assets/Logo.png");                      Uri wideLogo = new Uri("ms-appx:///Assets/WideLogo.png");                      tile.Arguments = "/r/";                      tile.Logo = logo;                      tile.WideLogo = wideLogo;                  }                  tile.TileId = "r" + id;                    // Ask the user to authorize creation of the tile                  bool isPinned = await tile.RequestCreateAsync();              }              catch (Exception)              {                  // TODO: Do something with exceptions              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The following statement contains a magic number: try              {                  string id = "";                  if (subreddit != null)                      id = subreddit.Data.DisplayName;                    SecondaryTile tile = new SecondaryTile();                  tile.TileOptions = TileOptions.ShowNameOnWideLogo | TileOptions.ShowNameOnLogo;                  tile.DisplayName = "Baconography";                  tile.ShortName = "/r/" + id;                  if (subreddit != null)                  {                        // Download and create a local copy of the header image                      var rawImage = await _imagesService.SaveFileFromUriAsync(new Uri(subreddit.Data.HeaderImage)' subreddit.Data.DisplayName + ".jpg"' "Images");                      // Generate a wide tile appropriate image                      var wideImage = await _imagesService.GenerateResizedImage(rawImage' 310' 150) as StorageFile;                      // Generate a square tile appropriate image                      var squareImage = await _imagesService.GenerateResizedImage(rawImage' 150' 150) as StorageFile;                        tile.WideLogo = new Uri("ms-appdata:///local/Images/" + wideImage.Name);                      tile.Logo = new Uri("ms-appdata:///local/Images/" + squareImage.Name);                      subreddit.Data.PublicDescription = null;                      subreddit.Data.Description = null;                      subreddit.Data.Headertitle = null;                      tile.Arguments = JsonConvert.SerializeObject(subreddit);                  }                  else                  {                      Uri logo = new Uri("ms-appx:///Assets/Logo.png");                      Uri wideLogo = new Uri("ms-appx:///Assets/WideLogo.png");                      tile.Arguments = "/r/";                      tile.Logo = logo;                      tile.WideLogo = wideLogo;                  }                  tile.TileId = "r" + id;                    // Ask the user to authorize creation of the tile                  bool isPinned = await tile.RequestCreateAsync();              }              catch (Exception)              {                  // TODO: Do something with exceptions              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateSecondaryTileForSubreddit,The following statement contains a magic number: try              {                  string id = "";                  if (subreddit != null)                      id = subreddit.Data.DisplayName;                    SecondaryTile tile = new SecondaryTile();                  tile.TileOptions = TileOptions.ShowNameOnWideLogo | TileOptions.ShowNameOnLogo;                  tile.DisplayName = "Baconography";                  tile.ShortName = "/r/" + id;                  if (subreddit != null)                  {                        // Download and create a local copy of the header image                      var rawImage = await _imagesService.SaveFileFromUriAsync(new Uri(subreddit.Data.HeaderImage)' subreddit.Data.DisplayName + ".jpg"' "Images");                      // Generate a wide tile appropriate image                      var wideImage = await _imagesService.GenerateResizedImage(rawImage' 310' 150) as StorageFile;                      // Generate a square tile appropriate image                      var squareImage = await _imagesService.GenerateResizedImage(rawImage' 150' 150) as StorageFile;                        tile.WideLogo = new Uri("ms-appdata:///local/Images/" + wideImage.Name);                      tile.Logo = new Uri("ms-appdata:///local/Images/" + squareImage.Name);                      subreddit.Data.PublicDescription = null;                      subreddit.Data.Description = null;                      subreddit.Data.Headertitle = null;                      tile.Arguments = JsonConvert.SerializeObject(subreddit);                  }                  else                  {                      Uri logo = new Uri("ms-appx:///Assets/Logo.png");                      Uri wideLogo = new Uri("ms-appx:///Assets/WideLogo.png");                      tile.Arguments = "/r/";                      tile.Logo = logo;                      tile.WideLogo = wideLogo;                  }                  tile.TileId = "r" + id;                    // Ask the user to authorize creation of the tile                  bool isPinned = await tile.RequestCreateAsync();              }              catch (Exception)              {                  // TODO: Do something with exceptions              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: bool textIsLong = text.Length > 42;
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (largeImage != null)              {                  largeImageFile = (await _imagesService.SaveFileFromUriAsync(largeImage' largeImage.LocalPath' "liveTiles")) as StorageFile;                    if(largeImageFile != null)                  {                      var imageProperties = await largeImageFile.Properties.GetImagePropertiesAsync();                      var imageRatio = ((double)imageProperties.Width / (double)imageProperties.Height);                      largeImageIsTall = imageRatio < .9;                      largeImageIsWide = imageRatio > 1.34;                  }              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (largeImage != null)              {                  largeImageFile = (await _imagesService.SaveFileFromUriAsync(largeImage' largeImage.LocalPath' "liveTiles")) as StorageFile;                    if(largeImageFile != null)                  {                      var imageProperties = await largeImageFile.Properties.GetImagePropertiesAsync();                      var imageRatio = ((double)imageProperties.Width / (double)imageProperties.Height);                      largeImageIsTall = imageRatio < .9;                      largeImageIsWide = imageRatio > 1.34;                  }              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImage != null)              {                  smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile;                    if (smallImageFile != null)                  {                      smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile;                      var imageProperties = await smallImageFile.Properties.GetImagePropertiesAsync();                      var smallImageRatio = ((double)imageProperties.Width / (double)imageProperties.Height);                      smallImageIsTall = smallImageRatio < .9;                      smallImageIsWide = smallImageRatio > 1.34;                  }              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImage != null)              {                  smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile;                    if (smallImageFile != null)                  {                      smallImageFile = (await _imagesService.SaveFileFromUriAsync(smallImage' smallImage.LocalPath' "liveTiles")) as StorageFile;                      var imageProperties = await smallImageFile.Properties.GetImagePropertiesAsync();                      var smallImageRatio = ((double)imageProperties.Width / (double)imageProperties.Height);                      smallImageIsTall = smallImageRatio < .9;                      smallImageIsWide = smallImageRatio > 1.34;                  }              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,LiveTileService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\LiveTileService.cs,CreateTile,The following statement contains a magic number: if (smallImageFile != null && largeImageFile != null && !textIsLong && largeImageIsWide && !smallImageIsTall && !smallImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImage06'>                        <image id='1' src='{0}' alt='{2}'/>                        <image id='2' src='{1}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{3}' alt='{2}'/>                        <text id='1'>{2}</text>                      </binding>                     </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                      tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' sizedSquareImagePath' text' sizedSquareImagePath);              }              //large image: TileWidePeekImageAndText01              else if (largeImageFile != null && largeImageIsWide)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWidePeekImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{2}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                       </visual>                  </tile>";                    var sizedWideLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 310' 150' 0' 0' true) as StorageFile;                  var sizedSquareLargeImage = await _imagesService.GenerateResizedImage(largeImageFile' 150' 150' 0' 0' true) as StorageFile;                    if (sizedWideLargeImage == null || sizedSquareLargeImage == null)                      return;                    var sizedWideLargeImagePath = "ms-appdata:///local/liveTiles/" + sizedWideLargeImage.DisplayName;                  var sizedSquareImagePath = "ms-appdata:///local/liveTiles/" + sizedSquareLargeImage.DisplayName;                    tileXmlString = string.Format(tileFormat' sizedWideLargeImagePath' text' sizedSquareImagePath);              }                //small image only text is long: TileWideSmallImageAndText03              else if (smallImageFile != null && textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText03'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //small image only text is short: TileWideSmallImageAndText01              else if (smallImageFile != null && !textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideSmallImageAndText01'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                      <binding template='TileSquarePeekImageAndText04'>                        <image id='1' src='{0}' alt='{1}'/>                        <text id='1'>{1}</text>                      </binding>                    </visual>                  </tile>";                    var smallImageFilePath = "ms-appdata:///local/liveTiles/" + smallImageFile.DisplayName;                    tileXmlString = string.Format(tileFormat' smallImageFilePath' text);              }                //no image' text is long: TileWideText04              else if (textIsLong)              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText04'>                        <text id='1'>{0}</text>                      </binding>                        <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                     </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }                //no image text is short: TileWideText03              else              {                  var tileFormat = @"                  <tile>                    <visual>                      <binding template='TileWideText03'>                        <text id='1'>{0}</text>                      </binding>                      <binding template='TileSquareText04'>                          <text id='1'>{0}</text>                      </binding>                      </visual>                  </tile>";                    tileXmlString = string.Format(tileFormat' text);              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (offset.TotalMilliseconds < 2000)              {                  await Task.Delay(2000 - (int)offset.TotalMilliseconds);              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (offset.TotalMilliseconds < 2000)              {                  await Task.Delay(2000 - (int)offset.TotalMilliseconds);              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (_requestSetCount > 30)              {                  var overallOffset = DateTime.Now - _priorRequestSet;                    if (overallOffset.TotalSeconds < 60)                  {                      await Task.Delay((60 - (int)overallOffset.TotalSeconds) * 1000);                      _requestSetCount = 0;                      _priorRequestSet = DateTime.Now;                  }              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (_requestSetCount > 30)              {                  var overallOffset = DateTime.Now - _priorRequestSet;                    if (overallOffset.TotalSeconds < 60)                  {                      await Task.Delay((60 - (int)overallOffset.TotalSeconds) * 1000);                      _requestSetCount = 0;                      _priorRequestSet = DateTime.Now;                  }              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (_requestSetCount > 30)              {                  var overallOffset = DateTime.Now - _priorRequestSet;                    if (overallOffset.TotalSeconds < 60)                  {                      await Task.Delay((60 - (int)overallOffset.TotalSeconds) * 1000);                      _requestSetCount = 0;                      _priorRequestSet = DateTime.Now;                  }              }
Magic Number,BaconographyW8.PlatformServices,SimpleHttpService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\SimpleHttpService.cs,ThrottleRequests,The following statement contains a magic number: if (_requestSetCount > 30)              {                  var overallOffset = DateTime.Now - _priorRequestSet;                    if (overallOffset.TotalSeconds < 60)                  {                      await Task.Delay((60 - (int)overallOffset.TotalSeconds) * 1000);                      _requestSetCount = 0;                      _priorRequestSet = DateTime.Now;                  }              }
Magic Number,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,GetUserInfoDB,The following statement contains a magic number: if (_userInfoDb == null)              {                  _userInfoDb = await DB.CreateAsync(userInfoDbPath' DBCreateFlags.None' ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });              }
Magic Number,BaconographyW8.PlatformServices,UserService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\UserService.cs,GetUserInfoDB,The following statement contains a magic number: if (_userInfoDb == null)              {                  _userInfoDb = await DB.CreateAsync(userInfoDbPath' DBCreateFlags.None' ushort.MaxValue - 100'                      new DBKey[] { new DBKey(8' 0' DBKeyFlags.KeyValue' "default"' true' false' false' 0) });              }
Magic Number,Baconography.PlatformServices.ImageAPI,Flickr,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Flickr.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))              {                  var photoID = groups[1].Value;                  var apiURL = string.Format("http://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=81afa34d85f53254ff12a8cb73cba64d&photo_id={0}&format=json&nojsoncallback=1"' photoID);                    var getClient = new HttpClient();                  var jsonResult = await getClient.GetStringAsync(apiURL);                  dynamic result = JsonConvert.DeserializeObject(jsonResult);                    var biggest = 0;                  var source = "";                  foreach (var sz in result.sizes.size)                  {                      if ((int)sz.width > biggest)                      {                          biggest = (int)sz.width;                          source = sz.source;                      }                  }                  return new Tuple<string' string>[] { Tuple.Create(title' source) };              }              else                  return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Flickr,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Flickr.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))              {                  var photoID = groups[1].Value;                  var apiURL = string.Format("http://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=81afa34d85f53254ff12a8cb73cba64d&photo_id={0}&format=json&nojsoncallback=1"' photoID);                    var getClient = new HttpClient();                  var jsonResult = await getClient.GetStringAsync(apiURL);                  dynamic result = JsonConvert.DeserializeObject(jsonResult);                    var biggest = 0;                  var source = "";                  foreach (var sz in result.sizes.size)                  {                      if ((int)sz.width > biggest)                      {                          biggest = (int)sz.width;                          source = sz.source;                      }                  }                  return new Tuple<string' string>[] { Tuple.Create(title' source) };              }              else                  return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))  			{  				if (Regex.IsMatch(groups[1].Value' "[&']"))  				{  					var hashes = Regex.Split(groups[1].Value' "[&']");  					//Imgur doesn't really care about the extension and the browsers don't seem to either.  					return hashes  						.Select(hash => Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' hash)));    				}  				else  				{  					if (uri.AbsolutePath.ToLower().StartsWith("/gallery"))  					{  						return await GetImagesFromUri(title' new Uri("http://imgur.com/a/" + groups[1].Value));  					}  					else  					{  						//Imgur doesn't really care about the extension and the browsers don't seem to either.  						return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' groups[1].Value)) };  					}  				}  			}  			else if (albumGroups.Count > 2 && string.IsNullOrWhiteSpace(albumGroups[2].Value))  			{  				var apiURL = string.Format("{0}album/{1}.json"' apiPrefix' albumGroups[1].Value);  				var getClient = new HttpClient();  				var jsonResult = await getClient.GetStringAsync(apiURL);    				if (string.IsNullOrWhiteSpace(jsonResult))  					return Enumerable.Empty<Tuple<string' string>>();    				var result = JsonConvert.DeserializeObject(jsonResult) as JObject;  				if (result != null && result.HasValues)  				{  					JToken errorToken;  					if (result.TryGetValue("error"' out errorToken))  					{  						return Enumerable.Empty<Tuple<string' string>>();  					}    					var albumTitleElement = (string)((JObject)result.GetValue("album")).GetValue("title");  					var albumTitle = string.IsNullOrWhiteSpace(albumTitleElement) ? title : albumTitleElement;    					return ((IEnumerable)((JObject)result.GetValue("album")).GetValue("images"))  						.Cast<JObject>()  						.Select(e =>  						{  							var caption = (string)((JObject)e.GetValue("image")).GetValue("caption");    							if (!string.IsNullOrWhiteSpace(caption))  								caption = caption.Replace("&#039;"' "'").Replace("&#038;"' "&").Replace("&#034;"' "\"");    							return Tuple.Create(string.IsNullOrWhiteSpace(caption) ? albumTitle : caption' (string)((JObject)e.GetValue("links")).GetValue("original"));  						});  				}  				else  					return Enumerable.Empty<Tuple<string' string>>();  			}  			else  				return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))  			{  				if (Regex.IsMatch(groups[1].Value' "[&']"))  				{  					var hashes = Regex.Split(groups[1].Value' "[&']");  					//Imgur doesn't really care about the extension and the browsers don't seem to either.  					return hashes  						.Select(hash => Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' hash)));    				}  				else  				{  					if (uri.AbsolutePath.ToLower().StartsWith("/gallery"))  					{  						return await GetImagesFromUri(title' new Uri("http://imgur.com/a/" + groups[1].Value));  					}  					else  					{  						//Imgur doesn't really care about the extension and the browsers don't seem to either.  						return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' groups[1].Value)) };  					}  				}  			}  			else if (albumGroups.Count > 2 && string.IsNullOrWhiteSpace(albumGroups[2].Value))  			{  				var apiURL = string.Format("{0}album/{1}.json"' apiPrefix' albumGroups[1].Value);  				var getClient = new HttpClient();  				var jsonResult = await getClient.GetStringAsync(apiURL);    				if (string.IsNullOrWhiteSpace(jsonResult))  					return Enumerable.Empty<Tuple<string' string>>();    				var result = JsonConvert.DeserializeObject(jsonResult) as JObject;  				if (result != null && result.HasValues)  				{  					JToken errorToken;  					if (result.TryGetValue("error"' out errorToken))  					{  						return Enumerable.Empty<Tuple<string' string>>();  					}    					var albumTitleElement = (string)((JObject)result.GetValue("album")).GetValue("title");  					var albumTitle = string.IsNullOrWhiteSpace(albumTitleElement) ? title : albumTitleElement;    					return ((IEnumerable)((JObject)result.GetValue("album")).GetValue("images"))  						.Cast<JObject>()  						.Select(e =>  						{  							var caption = (string)((JObject)e.GetValue("image")).GetValue("caption");    							if (!string.IsNullOrWhiteSpace(caption))  								caption = caption.Replace("&#039;"' "'").Replace("&#038;"' "&").Replace("&#034;"' "\"");    							return Tuple.Create(string.IsNullOrWhiteSpace(caption) ? albumTitle : caption' (string)((JObject)e.GetValue("links")).GetValue("original"));  						});  				}  				else  					return Enumerable.Empty<Tuple<string' string>>();  			}  			else  				return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))  			{  				if (Regex.IsMatch(groups[1].Value' "[&']"))  				{  					var hashes = Regex.Split(groups[1].Value' "[&']");  					//Imgur doesn't really care about the extension and the browsers don't seem to either.  					return hashes  						.Select(hash => Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' hash)));    				}  				else  				{  					if (uri.AbsolutePath.ToLower().StartsWith("/gallery"))  					{  						return await GetImagesFromUri(title' new Uri("http://imgur.com/a/" + groups[1].Value));  					}  					else  					{  						//Imgur doesn't really care about the extension and the browsers don't seem to either.  						return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' groups[1].Value)) };  					}  				}  			}  			else if (albumGroups.Count > 2 && string.IsNullOrWhiteSpace(albumGroups[2].Value))  			{  				var apiURL = string.Format("{0}album/{1}.json"' apiPrefix' albumGroups[1].Value);  				var getClient = new HttpClient();  				var jsonResult = await getClient.GetStringAsync(apiURL);    				if (string.IsNullOrWhiteSpace(jsonResult))  					return Enumerable.Empty<Tuple<string' string>>();    				var result = JsonConvert.DeserializeObject(jsonResult) as JObject;  				if (result != null && result.HasValues)  				{  					JToken errorToken;  					if (result.TryGetValue("error"' out errorToken))  					{  						return Enumerable.Empty<Tuple<string' string>>();  					}    					var albumTitleElement = (string)((JObject)result.GetValue("album")).GetValue("title");  					var albumTitle = string.IsNullOrWhiteSpace(albumTitleElement) ? title : albumTitleElement;    					return ((IEnumerable)((JObject)result.GetValue("album")).GetValue("images"))  						.Cast<JObject>()  						.Select(e =>  						{  							var caption = (string)((JObject)e.GetValue("image")).GetValue("caption");    							if (!string.IsNullOrWhiteSpace(caption))  								caption = caption.Replace("&#039;"' "'").Replace("&#038;"' "&").Replace("&#034;"' "\"");    							return Tuple.Create(string.IsNullOrWhiteSpace(caption) ? albumTitle : caption' (string)((JObject)e.GetValue("links")).GetValue("original"));  						});  				}  				else  					return Enumerable.Empty<Tuple<string' string>>();  			}  			else  				return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Imgur,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Imgur.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))  			{  				if (Regex.IsMatch(groups[1].Value' "[&']"))  				{  					var hashes = Regex.Split(groups[1].Value' "[&']");  					//Imgur doesn't really care about the extension and the browsers don't seem to either.  					return hashes  						.Select(hash => Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' hash)));    				}  				else  				{  					if (uri.AbsolutePath.ToLower().StartsWith("/gallery"))  					{  						return await GetImagesFromUri(title' new Uri("http://imgur.com/a/" + groups[1].Value));  					}  					else  					{  						//Imgur doesn't really care about the extension and the browsers don't seem to either.  						return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://i.imgur.com/{0}.gif"' groups[1].Value)) };  					}  				}  			}  			else if (albumGroups.Count > 2 && string.IsNullOrWhiteSpace(albumGroups[2].Value))  			{  				var apiURL = string.Format("{0}album/{1}.json"' apiPrefix' albumGroups[1].Value);  				var getClient = new HttpClient();  				var jsonResult = await getClient.GetStringAsync(apiURL);    				if (string.IsNullOrWhiteSpace(jsonResult))  					return Enumerable.Empty<Tuple<string' string>>();    				var result = JsonConvert.DeserializeObject(jsonResult) as JObject;  				if (result != null && result.HasValues)  				{  					JToken errorToken;  					if (result.TryGetValue("error"' out errorToken))  					{  						return Enumerable.Empty<Tuple<string' string>>();  					}    					var albumTitleElement = (string)((JObject)result.GetValue("album")).GetValue("title");  					var albumTitle = string.IsNullOrWhiteSpace(albumTitleElement) ? title : albumTitleElement;    					return ((IEnumerable)((JObject)result.GetValue("album")).GetValue("images"))  						.Cast<JObject>()  						.Select(e =>  						{  							var caption = (string)((JObject)e.GetValue("image")).GetValue("caption");    							if (!string.IsNullOrWhiteSpace(caption))  								caption = caption.Replace("&#039;"' "'").Replace("&#038;"' "&").Replace("&#034;"' "\"");    							return Tuple.Create(string.IsNullOrWhiteSpace(caption) ? albumTitle : caption' (string)((JObject)e.GetValue("links")).GetValue("original"));  						});  				}  				else  					return Enumerable.Empty<Tuple<string' string>>();  			}  			else  				return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Memecrunch,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Memecrunch.cs,GetImagesFromUri,The following statement contains a magic number: if (groups != null)                  return new Tuple<string' string>[] { Tuple.Create(title' string.Format("http://memecrunch.com/meme/{0}/{1}/image.png"' groups[1].Value' groups[2].Value ?? "null")) };                else                  return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Minus,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Minus.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))              {                  var hash = groups[1].Value;                  if (hash.StartsWith("m"))                  {                      var apiURL = "http://min.us/api/GetItems/" + hash;                      var getClient = new HttpClient();                      var jsonResult = await getClient.GetStringAsync(apiURL);                      dynamic result = JsonConvert.DeserializeObject(jsonResult);                      return new Tuple<string' string>[] { Tuple.Create(title' (string)result.src) };                  }                  else                      return Enumerable.Empty<Tuple<string' string>>();              }              else                  return Enumerable.Empty<Tuple<string' string>>();
Magic Number,Baconography.PlatformServices.ImageAPI,Minus,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImageAPI\Minus.cs,GetImagesFromUri,The following statement contains a magic number: if (groups.Count > 2 && string.IsNullOrWhiteSpace(groups[2].Value))              {                  var hash = groups[1].Value;                  if (hash.StartsWith("m"))                  {                      var apiURL = "http://min.us/api/GetItems/" + hash;                      var getClient = new HttpClient();                      var jsonResult = await getClient.GetStringAsync(apiURL);                      dynamic result = JsonConvert.DeserializeObject(jsonResult);                      return new Tuple<string' string>[] { Tuple.Create(title' (string)result.src) };                  }                  else                      return Enumerable.Empty<Tuple<string' string>>();              }              else                  return Enumerable.Empty<Tuple<string' string>>();
Missing Default,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following switch statement is missing a default case: switch (placement)              {                  case PlacementMode.Bottom:                  case PlacementMode.Left:                  case PlacementMode.Right:                  case PlacementMode.Top:                      Point[] target = GetTransformedPoints(element' isRTL' element);                      Point[] menu = GetTransformedPoints((FrameworkElement)_hostPopup.Child' isRTL' element);                      if (menu[0].X > menu[1].X)                      {                          return;                      }                      Point p2 = PlacePopup(_windowBounds' target' menu' placement);                      x = p2.X;                      if (isRTL)                      {                          // TODO: Handle RTL - PerformPlacement                          //x = _windowBounds.Width - x;                          //this._hostPopup.VerticalOffset = y;                          //this._hostPopup.HorizontalOffset = x;                          //return;                      }                      y = p2.Y;                      break;                  case PlacementMode.Mouse:                      throw new NotImplementedException("Mouse PlacementMode is not implemented.");              }
Missing Default,BaconographyW8.Common,Flyout,C:\repos\Synergex_Baconography\BaconographyW8Core\Common\Flyout.cs,PerformPlacement,The following switch statement is missing a default case: switch (this.Placement)              {                  case PlacementMode.Bottom:                      popin.FromVerticalOffset = -10;                      popin.FromHorizontalOffset = 0;                      break;                  case PlacementMode.Left:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = 10;                      break;                  case PlacementMode.Right:                      popin.FromVerticalOffset = 0;                      popin.FromHorizontalOffset = -10;                      break;                  case PlacementMode.Top:                      popin.FromVerticalOffset = 10;                      popin.FromHorizontalOffset = 0;                      break;              }
Missing Default,BaconographyW8.PlatformServices,ImagesService,C:\repos\Synergex_Baconography\BaconographyW8Core\PlatformServices\ImagesService.cs,MightHaveImagesFromUrl,The following switch statement is missing a default case: switch (targetHost)                      {                          case "imgur.com":                          case "min.us":                          case "www.quickmeme.com":                          case "i.qkme.me":                          case "quickmeme.com":                          case "qkme.me":                          case "memecrunch.com":                          case "flickr.com":                              return true;                      }
