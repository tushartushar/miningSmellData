Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BaconographyW8BackgroundTask,LiveTileUpdater,C:\repos\Synergex_Baconography\BaconographyW8BackgroundTask\LiveTileUpdater.cs,Run,The length of the statement  "            var baconProvider = new BaconProvider(new Tuple<Type' Object>[] { new Tuple<Type' Object>(typeof(IDynamicViewLocator)' new DummyViewLocator()) }); " is 146.
Long Statement,BaconographyW8BackgroundTask,LiveTileUpdater,C:\repos\Synergex_Baconography\BaconographyW8BackgroundTask\LiveTileUpdater.cs,RunBodyImpl,The length of the statement  "                    SortedSet<Tuple<string' string' TypedThing<Link>>> sortedLinks = new SortedSet<Tuple<string' string' TypedThing<Link>>>(linkComparer); " is 134.
Empty Catch Block,BaconographyW8BackgroundTask,LiveTileUpdater,C:\repos\Synergex_Baconography\BaconographyW8BackgroundTask\LiveTileUpdater.cs,RunBodyImpl,The method has an empty catch block.
Empty Catch Block,BaconographyW8BackgroundTask,LiveTileUpdater,C:\repos\Synergex_Baconography\BaconographyW8BackgroundTask\LiveTileUpdater.cs,RunBodyImpl,The method has an empty catch block.
Magic Number,BaconographyW8BackgroundTask,LiveTileUpdater,C:\repos\Synergex_Baconography\BaconographyW8BackgroundTask\LiveTileUpdater.cs,RunBodyImpl,The following statement contains a magic number: try              {                  DateTime start = DateTime.Now;                  DateTime killDate = start.Subtract(new TimeSpan(1' 0' 0' 0));                  var posts = await baconProvider.GetService<IRedditService>().GetPostsBySubreddit("/"' 10);                    if (baconProvider.GetService<ISettingsService>().IsOnline())                  {                        var liveTileService = baconProvider.GetService<ILiveTileService>();                      _imagesService = baconProvider.GetService<IImagesService>();                      //baconProvider.GetService<ISettingsService>().PreferImageLinksForTiles;                      var linkComparer = new LinkComparer(true);                        SortedSet<Tuple<string' string' TypedThing<Link>>> sortedLinks = new SortedSet<Tuple<string' string' TypedThing<Link>>>(linkComparer);                        foreach (var link in posts.Data.Children.Where(thing => thing.Data is Link))                          sortedLinks.Add(await MapLink(link));                        foreach (var linkTpl in sortedLinks)                      {                          try                          {                              await liveTileService.MaybeCreateTile(linkTpl);                          }                          catch                          {                          }                      }                      var liveTilesFolder = await Windows.Storage.ApplicationData.Current.LocalFolder.GetFolderAsync("liveTiles");                      if (liveTilesFolder != null)                      {                          foreach (var file in await liveTilesFolder.GetFilesAsync())                          {                              if (file.DateCreated.LocalDateTime < killDate)                              {                                  await file.DeleteAsync();                              }                          }                      }                  }              }              catch              {              }
