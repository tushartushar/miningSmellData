Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Initialize,Cyclomatic complexity of the method is 13
Complex Method,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Register,Cyclomatic complexity of the method is 9
Complex Method,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,Cyclomatic complexity of the method is 12
Complex Method,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,GenerateTypeData,Cyclomatic complexity of the method is 11
Complex Method,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,_SerializerSwitch,Cyclomatic complexity of the method is 10
Long Parameter List,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,GenerateDynamic,The method has 9 parameters.
Long Parameter List,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,_SerializerSwitch,The method has 6 parameters.
Long Statement,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenDeserializerBody,The length of the statement  "		var guo = typeof(System.Runtime.Serialization.FormatterServices).GetMethod ("GetUninitializedObject"' BindingFlags.Public | BindingFlags.Static); " is 145.
Long Statement,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenDeserializerBody,The length of the statement  "		MethodInfo getAddMethod = objStackType.GetMethod ("Add"' BindingFlags.Public | BindingFlags.Instance' null' new Type[] { " is 120.
Long Statement,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenDeserializerBody,The length of the statement  "		var miOnDeserialization = typeof(IDeserializationCallback).GetMethod ("OnDeserialization"' BindingFlags.Instance | BindingFlags.Public' null' new[] { " is 149.
Long Statement,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenDeserializerBodyForArray,The length of the statement  "	MethodInfo getAddMethod = objStackType.GetMethod ("Add"' BindingFlags.Public | BindingFlags.Instance' null' new Type[] { " is 120.
Long Statement,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenDeserializerCall,The length of the statement  "	var method = direct ? ctx.GetReaderMethodInfo (type) : typeof(NetSerializer2.Serializer).GetMethod ("_DeserializerSwitch"); " is 123.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetPrimitives,The length of the statement  "		writer = containerType.GetMethod ("WritePrimitive"' BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding' null' new Type[] { " is 141.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetPrimitives,The length of the statement  "		reader = containerType.GetMethod ("ReadPrimitive"' BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding' null' new Type[] { " is 140.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetPrimitives,The length of the statement  "		throw new InvalidOperationException (String.Format ("Missing a {0}Primitive() for {1}"' reader == null ? "Read" : "Write"' type.FullName)); " is 139.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenWriter,The length of the statement  "	var mis = containerType.GetMethods (BindingFlags.Static | BindingFlags.Public).Where (mi => mi.IsGenericMethod && mi.Name == "WritePrimitive"); " is 143.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenReader,The length of the statement  "	var mis = containerType.GetMethods (BindingFlags.Static | BindingFlags.Public).Where (mi => mi.IsGenericMethod && mi.Name == "ReadPrimitive"); " is 142.
Long Statement,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetFieldInfos,The length of the statement  "	var fields = type.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where (fi => (fi.Attributes & FieldAttributes.NotSerialized) == 0); " is 194.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Initialize,The length of the statement  "				throw new IOException (String.Format ("The Count of fields for stored and current Type: '{0}' aren't equal. Old:'{1}' New:'{2}'"' t_type.Name' t_typeInfo.Fields.Count' i)); " is 172.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Initialize,The length of the statement  "				throw new IOException (String.Format ("Type:'{0}'. FieldName was changed in pos:{1}. Old:'{2}' New:'{3}'"' t_type.FullName' i' l_fld.FieldName' cur_f.Name)); " is 157.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Initialize,The length of the statement  "				throw new IOException (String.Format ("Type:'{0}'. Type for Fieled:'{1}' was changed. Old:'{2}' New:'{3}'"' t_type.FullName' cur_f.Name' l_fld.TypeName' Helpers.GetTypeName (cur_f.FieldType))); " is 193.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Initialize,The length of the statement  "			throw new IOException (String.Format ("The Count of fields for stored and current Type: '{0}' aren't equal. Old:'{1}' New:'{2}'"' t_type.Name' t_typeInfo.Fields.Count' i)); " is 172.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Register,The length of the statement  "		throw new InvalidOperationException ("NetSerializer2 couldn't generate ID for new objects with disabled AutoAssignObjID"); " is 122.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Register,The length of the statement  "		throw new InvalidOperationException ("NetSerializer2 couldn't generate ID for new objects with disabled AutoAssignObjID"); " is 122.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,Register,The length of the statement  "			throw new InvalidOperationException ("NetSerializer2: Type=" + regType.Name + " requires " + types.Length + " ID' but was received only " + typeID.Length); " is 155.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The length of the statement  "			if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) { " is 167.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The length of the statement  "		else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>) " is 463.
Long Statement,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,GenerateTypeData,The length of the statement  "					throw new InvalidOperationException (String.Format ("Cannot serialize {0}: ISerializable not supported"' type.FullName)); " is 121.
Long Statement,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerBody,The length of the statement  "		MethodInfo getAddMethod = objStackType.GetMethod ("Add"' BindingFlags.Public | BindingFlags.Instance' null' new Type[] { " is 120.
Long Statement,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerBodyForArray,The length of the statement  "	MethodInfo getAddMethod = objStackType.GetMethod ("Add"' BindingFlags.Public | BindingFlags.Instance' null' new Type[] { " is 120.
Long Statement,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerCall,The length of the statement  "	var method = direct ? ctx.GetWriterMethodInfo (type) : typeof(NetSerializer2.Serializer).GetMethod ("_SerializerSwitch"); " is 121.
Complex Conditional,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The conditional expression  "genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)"  is complex.
Complex Conditional,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The conditional expression  "args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  )"  is complex.
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializerStub,The following statement contains a magic number: dm.DefineParameter (2' ParameterAttributes.None' "stream");  
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializerStub,The following statement contains a magic number: dm.DefineParameter (3' ParameterAttributes.Out' "value");  
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializerStub,The following statement contains a magic number: dm.DefineParameter (4' ParameterAttributes.None' "objList");  
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (2' ParameterAttributes.None' "stream");  
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (3' ParameterAttributes.Out' "value");  
Magic Number,NetSerializer2,DeserializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\DeserializerCodegen.cs,GenerateDynamicDeserializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (4' ParameterAttributes.None' "objList");  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenWriter,The following statement contains a magic number: foreach (var mi in mis) {  	var p = mi.GetParameters ();  	if (p.Length != 4)  		continue;  	if (p [0].ParameterType != typeof(Serializer))  		continue;  	if (p [1].ParameterType != typeof(Stream))  		continue;  	var paramType = p [2].ParameterType;  	if (paramType.IsGenericType == false)  		continue;  	var genParamType = paramType.GetGenericTypeDefinition ();  	if (genType == genParamType)  		return mi;  }  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenWriter,The following statement contains a magic number: foreach (var mi in mis) {  	var p = mi.GetParameters ();  	if (p.Length != 4)  		continue;  	if (p [0].ParameterType != typeof(Serializer))  		continue;  	if (p [1].ParameterType != typeof(Stream))  		continue;  	var paramType = p [2].ParameterType;  	if (paramType.IsGenericType == false)  		continue;  	var genParamType = paramType.GetGenericTypeDefinition ();  	if (genType == genParamType)  		return mi;  }  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenWriter,The following statement contains a magic number: if (p.Length != 4)  	continue;  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenReader,The following statement contains a magic number: foreach (var mi in mis) {  	var p = mi.GetParameters ();  	if (p.Length != 4)  		continue;  	if (p [0].ParameterType != typeof(Serializer))  		continue;  	if (p [1].ParameterType != typeof(Stream))  		continue;  	var paramType = p [2].ParameterType;  	if (paramType.IsByRef == false)  		continue;  	paramType = paramType.GetElementType ();  	if (paramType.IsGenericType == false)  		continue;  	var genParamType = paramType.GetGenericTypeDefinition ();  	if (genType == genParamType)  		return mi;  }  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenReader,The following statement contains a magic number: foreach (var mi in mis) {  	var p = mi.GetParameters ();  	if (p.Length != 4)  		continue;  	if (p [0].ParameterType != typeof(Serializer))  		continue;  	if (p [1].ParameterType != typeof(Stream))  		continue;  	var paramType = p [2].ParameterType;  	if (paramType.IsByRef == false)  		continue;  	paramType = paramType.GetElementType ();  	if (paramType.IsGenericType == false)  		continue;  	var genParamType = paramType.GetGenericTypeDefinition ();  	if (genType == genParamType)  		return mi;  }  
Magic Number,NetSerializer2,Helpers,C:\repos\smalinin_netserializer2\NetSerializer2\Helpers.cs,GetGenReader,The following statement contains a magic number: if (p.Length != 4)  	continue;  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (type.IsArray) {  	CollectTypes (type.GetElementType ()' typeSet);  }  else if (type.IsGenericType) {  	var args = type.GetGenericArguments ();  	Type genType = type.GetGenericTypeDefinition ();  	if (args.Length == 2) {  		if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  			Debug.Assert (args.Length == 2);  			#if OLD_DICT  									var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  			var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  			CollectTypes (arrayType' typeSet);  			#endif  		}  	}  	else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  	)) {  		Debug.Assert (args.Length == 1);  		CollectTypes (args [0]' typeSet);  	}  	else {  		var fields = Helpers.GetFieldInfos (type);  		foreach (var field in fields)  			CollectTypes (field.FieldType' typeSet);  	}  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (type.IsArray) {  	CollectTypes (type.GetElementType ()' typeSet);  }  else if (type.IsGenericType) {  	var args = type.GetGenericArguments ();  	Type genType = type.GetGenericTypeDefinition ();  	if (args.Length == 2) {  		if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  			Debug.Assert (args.Length == 2);  			#if OLD_DICT  									var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  			var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  			CollectTypes (arrayType' typeSet);  			#endif  		}  	}  	else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  	)) {  		Debug.Assert (args.Length == 1);  		CollectTypes (args [0]' typeSet);  	}  	else {  		var fields = Helpers.GetFieldInfos (type);  		foreach (var field in fields)  			CollectTypes (field.FieldType' typeSet);  	}  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (type.IsGenericType) {  	var args = type.GetGenericArguments ();  	Type genType = type.GetGenericTypeDefinition ();  	if (args.Length == 2) {  		if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  			Debug.Assert (args.Length == 2);  			#if OLD_DICT  									var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  			var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  			CollectTypes (arrayType' typeSet);  			#endif  		}  	}  	else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  	)) {  		Debug.Assert (args.Length == 1);  		CollectTypes (args [0]' typeSet);  	}  	else {  		var fields = Helpers.GetFieldInfos (type);  		foreach (var field in fields)  			CollectTypes (field.FieldType' typeSet);  	}  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (type.IsGenericType) {  	var args = type.GetGenericArguments ();  	Type genType = type.GetGenericTypeDefinition ();  	if (args.Length == 2) {  		if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  			Debug.Assert (args.Length == 2);  			#if OLD_DICT  									var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  			var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  			CollectTypes (arrayType' typeSet);  			#endif  		}  	}  	else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  	)) {  		Debug.Assert (args.Length == 1);  		CollectTypes (args [0]' typeSet);  	}  	else {  		var fields = Helpers.GetFieldInfos (type);  		foreach (var field in fields)  			CollectTypes (field.FieldType' typeSet);  	}  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (args.Length == 2) {  	if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  		Debug.Assert (args.Length == 2);  		#if OLD_DICT  								var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  		var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  		CollectTypes (arrayType' typeSet);  		#endif  	}  }  else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  )) {  	Debug.Assert (args.Length == 1);  	CollectTypes (args [0]' typeSet);  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (args.Length == 2) {  	if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  		Debug.Assert (args.Length == 2);  		#if OLD_DICT  								var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  		var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  		CollectTypes (arrayType' typeSet);  		#endif  	}  }  else if (args.Length == 1 && (genType == typeof(List<>) || genType == typeof(ConcurrentQueue<>) || genType == typeof(ConcurrentStack<>) || genType == typeof(BlockingCollection<>) || genType == typeof(Nullable<>) || genType == typeof(HashSet<>) || genType == typeof(LinkedList<>) || genType == typeof(Queue<>) || genType == typeof(SortedSet<>) || genType == typeof(Stack<>) || genType == typeof(ConcurrentBag<>)//					  || genType == typeof(CopyOnWriteArrayList<>)  )) {  	Debug.Assert (args.Length == 1);  	CollectTypes (args [0]' typeSet);  }  else {  	var fields = Helpers.GetFieldInfos (type);  	foreach (var field in fields)  		CollectTypes (field.FieldType' typeSet);  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: if (genType == typeof(Dictionary<' >) || genType == typeof(ConcurrentDictionary<' >) || genType == typeof(SortedDictionary<' >) || genType == typeof(SortedList<' >)) {  	Debug.Assert (args.Length == 2);  	#if OLD_DICT  							var keyValueType = typeof(KeyValuePair<'>).MakeGenericType(args); 						CollectTypes(keyValueType' typeSet); #else  	var arrayType = typeof(KeyValuePair<' >).MakeGenericType (args).MakeArrayType ();  	CollectTypes (arrayType' typeSet);  	#endif  }  
Magic Number,NetSerializer2,Serializer,C:\repos\smalinin_netserializer2\NetSerializer2\Main.cs,CollectTypes,The following statement contains a magic number: Debug.Assert (args.Length == 2);  
Magic Number,NetSerializer2,ObjectList,C:\repos\smalinin_netserializer2\NetSerializer2\ObjectList.cs,Add,The following statement contains a magic number: if (elementData.Length == size) {  	//grow array if necessary  	Array.Resize (ref elementData' elementData.Length * 2);  }  
Magic Number,NetSerializer2,ObjectList,C:\repos\smalinin_netserializer2\NetSerializer2\ObjectList.cs,Add,The following statement contains a magic number: Array.Resize (ref elementData' elementData.Length * 2);  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,EncodeZigZag32,The following statement contains a magic number: return (uint)((n << 1) ^ (n >> 31));  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,EncodeZigZag64,The following statement contains a magic number: return (ulong)((n << 1) ^ (n >> 63));  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarChar,The following statement contains a magic number: for (; offset < 16; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0)  		return (char)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarChar,The following statement contains a magic number: for (; offset < 16; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0)  		return (char)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarChar,The following statement contains a magic number: offset += 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint32,The following statement contains a magic number: for (; offset < 32; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0)  		return (uint)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint32,The following statement contains a magic number: for (; offset < 32; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0)  		return (uint)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint32,The following statement contains a magic number: offset += 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarChar,The following statement contains a magic number: for (; value >= 0x80u; value >>= 7)  	stream.WriteByte ((byte)(value | 0x80u));  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarChar,The following statement contains a magic number: value >>= 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarint32,The following statement contains a magic number: for (; value >= 0x80u; value >>= 7)  	stream.WriteByte ((byte)(value | 0x80u));  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarint32,The following statement contains a magic number: value >>= 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint64,The following statement contains a magic number: for (; offset < 64; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= ((long)(b & 0x7f)) << offset;  	if ((b & 0x80) == 0)  		return (ulong)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint64,The following statement contains a magic number: for (; offset < 64; offset += 7) {  	int b = stream.ReadByte ();  	if (b == -1)  		throw new EndOfStreamException ();  	result |= ((long)(b & 0x7f)) << offset;  	if ((b & 0x80) == 0)  		return (ulong)result;  }  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadVarint64,The following statement contains a magic number: offset += 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarint64,The following statement contains a magic number: for (; value >= 0x80u; value >>= 7)  	stream.WriteByte ((byte)(value | 0x80u));  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WriteVarint64,The following statement contains a magic number: value >>= 7
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WritePrimitive,The following statement contains a magic number: WritePrimitive (serializer' stream' v [2]' null);  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,WritePrimitive,The following statement contains a magic number: WritePrimitive (serializer' stream' v [3]' null);  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadPrimitive,The following statement contains a magic number: ReadPrimitive (serializer' stream' out v [2]' null);  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadPrimitive,The following statement contains a magic number: ReadPrimitive (serializer' stream' out v [3]' null);  
Magic Number,NetSerializer2,Primitives,C:\repos\smalinin_netserializer2\NetSerializer2\Primitives.cs,ReadPrimitive,The following statement contains a magic number: value = new ConcurrentDictionary<TKey' TValue> (8' kvpArray.Length);  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializerStub,The following statement contains a magic number: dm.DefineParameter (2' ParameterAttributes.None' "stream");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializerStub,The following statement contains a magic number: dm.DefineParameter (3' ParameterAttributes.None' "value");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializerStub,The following statement contains a magic number: dm.DefineParameter (4' ParameterAttributes.None' "objList");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (2' ParameterAttributes.None' "stream");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (3' ParameterAttributes.None' "value");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenerateDynamicSerializeInvokerStub,The following statement contains a magic number: dm.DefineParameter (4' ParameterAttributes.None' "objList");  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerBody,The following statement contains a magic number: foreach (var field in fields) {  	// Note: the user defined value type is not passed as reference. could cause perf problems with big structs  	il.Emit (OpCodes.Ldarg_0);  	il.Emit (OpCodes.Ldarg_1);  	if (type.IsValueType)  		il.Emit (OpCodes.Ldarga_S' 2);  	else  		il.Emit (OpCodes.Ldarg_2);  	il.Emit (OpCodes.Ldfld' field);  	il.Emit (OpCodes.Ldarg_3);  	GenSerializerCall (ctx' il' field.FieldType);  }  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerBody,The following statement contains a magic number: if (type.IsValueType)  	il.Emit (OpCodes.Ldarga_S' 2);  else  	il.Emit (OpCodes.Ldarg_2);  
Magic Number,NetSerializer2,SerializerCodegen,C:\repos\smalinin_netserializer2\NetSerializer2\SerializerCodegen.cs,GenSerializerBody,The following statement contains a magic number: il.Emit (OpCodes.Ldarga_S' 2);  
