Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SensorTag.Controls,ScrollingGraph,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,UpdateChart,Cyclomatic complexity of the method is 10
Complex Method,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,SelectTile,Cyclomatic complexity of the method is 24
Complex Method,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnTimerTick,Cyclomatic complexity of the method is 11
Long Statement,SensorTag.Controls,EditableTextBlock,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\EditableTextBlock.xaml.cs,BeginEdit,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Controls,TiltContentControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\TiltContentControl.cs,OnManipulationDelta,The length of the statement  "		if (_tilting || Math.Abs (e.Cumulative.Translation.X) > TiltThreshold || Math.Abs (e.Cumulative.Translation.Y) > TiltThreshold) { " is 129.
Long Statement,SensorTag.Controls,TiltContentControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\TiltContentControl.cs,DepressAndTilt,The length of the statement  "	Point normalizedPoint = new Point ((float)Math.Min (Math.Max (transformedOrigin.X / _width' 0.0)' 1.0)' (float)Math.Min (Math.Max (transformedOrigin.Y / _height' 0.0)' 1.0)); " is 174.
Long Statement,SensorTag.Controls,TiltContentControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\TiltContentControl.cs,GetImplementationRoot,The length of the statement  "	return (1 == VisualTreeHelper.GetChildrenCount (dependencyObject)) ? (FrameworkElement)VisualTreeHelper.GetChild (dependencyObject' 0) : null; " is 142.
Long Statement,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnNavigatedTo,The length of the statement  "			await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ); " is 128.
Long Statement,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnAccelerometerMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnMovementMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The length of the statement  "			await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ); " is 128.
Long Statement,SensorTag.Pages,ButtonPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\ButtonPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,ButtonPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\ButtonPage.xaml.cs,Buttons_ButtonValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DeviceList,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DeviceList.xaml.cs,DisplayMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,RegisterMovement,The length of the statement  "			await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ | MovementFlags.Mag); " is 214.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnIRTemperatureMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnAccelerometerMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnLightMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnGyroscopeMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMagnetometerMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnHumidityMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnBarometerMeasurementValueChanged,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,DisplayMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnConnectionChanged,The length of the statement  "			var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The length of the statement  "			await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ); " is 121.
Long Statement,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnVisibilityChanged,The length of the statement  "			await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ); " is 121.
Long Statement,SensorTag.Pages,HumidityPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\HumidityPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,HumidityPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\HumidityPage.xaml.cs,Humidity_HumidityMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,IRTemperature_IRTemperatureMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,LightPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\LightPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,LightPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\LightPage.xaml.cs,OnLightMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,Magnetometer_MagnetometerMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnMovementMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,PressurePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\PressurePage.xaml.cs,ShowMessage,The length of the statement  "	var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Long Statement,SensorTag.Pages,PressurePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\PressurePage.xaml.cs,OnBarometerMeasurementValueChanged,The length of the statement  "		var nowait = Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' new Windows.UI.Core.DispatchedHandler (() =>  { " is 128.
Empty Catch Block,SensorTag,IsolatedStorage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Helpers\IsolatedStorage.cs,LoadFromFileAsync,The method has an empty catch block.
Empty Catch Block,SensorTag,Settings,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Helpers\Settings.cs,LoadAsync,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnTimerTick,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,UpdatePeriod,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMagnetometerMeasurementValueChanged,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnTimerTick,The method has an empty catch block.
Empty Catch Block,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnTimerTick,The method has an empty catch block.
Magic Number,SensorTag.Controls,CompassControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\CompassControl.xaml.cs,CompassControl_SizeChanged,The following statement contains a magic number: f.Segments.Add (new LineSegment () {  	Point = new Point (0' h / 2)  });  
Magic Number,SensorTag.Controls,CompassControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\CompassControl.xaml.cs,CompassControl_SizeChanged,The following statement contains a magic number: f.Segments.Add (new LineSegment () {  	Point = new Point (0' -h / 2)  });  
Magic Number,SensorTag.Controls,CompassControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\CompassControl.xaml.cs,CompassControl_SizeChanged,The following statement contains a magic number: TranslateTransform.X = TranslateTransform.Y = h / 2;  
Magic Number,SensorTag.Controls,ScrollingGraph,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,UpdateChart,The following statement contains a magic number: foreach (double v in values) {  	Path lineGraph = GetOrCreateActiveLineGraph ();  	Path shadowLineGraph = GetOrCreateActiveShadowLineGraph ();  	if (lineGraph.Data == null) {  		lineGraph.Data = new PathGeometry ();  	}  	if (shadowLineGraph.Data == null) {  		shadowLineGraph.Data = new PathGeometry ();  	}  	modified.Add (lineGraph);  	modified.Add (shadowLineGraph);  	PathGeometry g = (PathGeometry)lineGraph.Data;  	PathGeometry sg = (PathGeometry)shadowLineGraph.Data;  	PathFigure f = g.Figures.FirstOrDefault ();  	PathFigure sf = sg.Figures.FirstOrDefault ();  	Point minLabelPos = new Point (-100' 0);  	Point maxLabelPos = new Point (-100' 0);  	Point minLabelConnector = new Point (-100' 0);  	Point maxLabelConnector = new Point (-100' 0);  	double height = graphSize.Height;  	double min = this.Minimum;  	double max = this.Maximum;  	double range = (max - min);  	if (range == 0)  		range = 1;  	// add the new values to the path  	double value = v;  	double y = height - ((value - min) * height / range);  	if (f == null) {  		f = new PathFigure () {  			StartPoint = new Point (x' y)'  			IsFilled = false'  			IsClosed = false  		};  		g.Figures.Add (f);  	}  	else {  		f.Segments.Add (new LineSegment () {  			Point = new Point (x' y)  		});  	}  	// shadow  	if (sf == null) {  		sf = new PathFigure () {  			StartPoint = new Point (x + shadowXOffset' y + shadowYOffset)'  			IsFilled = false'  			IsClosed = false  		};  		sg.Figures.Add (sf);  	}  	else {  		sf.Segments.Add (new LineSegment () {  			Point = new Point (x + shadowXOffset' y + shadowYOffset)  		});  	}  	x++;  	totalX++;  	if (f.Segments.Count > MaxLineGraphLength) {  		x = 0;  		activeLineGraph = null;  		activeShadowLineGraph = null;  	}  }  
Magic Number,SensorTag.Controls,ScrollingGraph,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,UpdateChart,The following statement contains a magic number: foreach (double v in values) {  	Path lineGraph = GetOrCreateActiveLineGraph ();  	Path shadowLineGraph = GetOrCreateActiveShadowLineGraph ();  	if (lineGraph.Data == null) {  		lineGraph.Data = new PathGeometry ();  	}  	if (shadowLineGraph.Data == null) {  		shadowLineGraph.Data = new PathGeometry ();  	}  	modified.Add (lineGraph);  	modified.Add (shadowLineGraph);  	PathGeometry g = (PathGeometry)lineGraph.Data;  	PathGeometry sg = (PathGeometry)shadowLineGraph.Data;  	PathFigure f = g.Figures.FirstOrDefault ();  	PathFigure sf = sg.Figures.FirstOrDefault ();  	Point minLabelPos = new Point (-100' 0);  	Point maxLabelPos = new Point (-100' 0);  	Point minLabelConnector = new Point (-100' 0);  	Point maxLabelConnector = new Point (-100' 0);  	double height = graphSize.Height;  	double min = this.Minimum;  	double max = this.Maximum;  	double range = (max - min);  	if (range == 0)  		range = 1;  	// add the new values to the path  	double value = v;  	double y = height - ((value - min) * height / range);  	if (f == null) {  		f = new PathFigure () {  			StartPoint = new Point (x' y)'  			IsFilled = false'  			IsClosed = false  		};  		g.Figures.Add (f);  	}  	else {  		f.Segments.Add (new LineSegment () {  			Point = new Point (x' y)  		});  	}  	// shadow  	if (sf == null) {  		sf = new PathFigure () {  			StartPoint = new Point (x + shadowXOffset' y + shadowYOffset)'  			IsFilled = false'  			IsClosed = false  		};  		sg.Figures.Add (sf);  	}  	else {  		sf.Segments.Add (new LineSegment () {  			Point = new Point (x + shadowXOffset' y + shadowYOffset)  		});  	}  	x++;  	totalX++;  	if (f.Segments.Count > MaxLineGraphLength) {  		x = 0;  		activeLineGraph = null;  		activeShadowLineGraph = null;  	}  }  
Magic Number,SensorTag.Controls,ScrollingGraph,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,UpdateChart,The following statement contains a magic number: foreach (double v in values) {  	Path lineGraph = GetOrCreateActiveLineGraph ();  	Path shadowLineGraph = GetOrCreateActiveShadowLineGraph ();  	if (lineGraph.Data == null) {  		lineGraph.Data = new PathGeometry ();  	}  	if (shadowLineGraph.Data == null) {  		shadowLineGraph.Data = new PathGeometry ();  	}  	modified.Add (lineGraph);  	modified.Add (shadowLineGraph);  	PathGeometry g = (PathGeometry)lineGraph.Data;  	PathGeometry sg = (PathGeometry)shadowLineGraph.Data;  	PathFigure f = g.Figures.FirstOrDefault ();  	PathFigure sf = sg.Figures.FirstOrDefault ();  	Point minLabelPos = new Point (-100' 0);  	Point maxLabelPos = new Point (-100' 0);  	Point minLabelConnector = new Point (-100' 0);  	Point maxLabelConnector = new Point (-100' 0);  	double height = graphSize.Height;  	double min = this.Minimum;  	double max = this.Maximum;  	double range = (max - min);  	if (range == 0)  		range = 1;  	// add the new values to the path  	double value = v;  	double y = height - ((value - min) * height / range);  	if (f == null) {  		f = new PathFigure () {  			StartPoint = new Point (x' y)'  			IsFilled = false'  			IsClosed = false  		};  		g.Figures.Add (f);  	}  	else {  		f.Segments.Add (new LineSegment () {  			Point = new Point (x' y)  		});  	}  	// shadow  	if (sf == null) {  		sf = new PathFigure () {  			StartPoint = new Point (x + shadowXOffset' y + shadowYOffset)'  			IsFilled = false'  			IsClosed = false  		};  		sg.Figures.Add (sf);  	}  	else {  		sf.Segments.Add (new LineSegment () {  			Point = new Point (x + shadowXOffset' y + shadowYOffset)  		});  	}  	x++;  	totalX++;  	if (f.Segments.Count > MaxLineGraphLength) {  		x = 0;  		activeLineGraph = null;  		activeShadowLineGraph = null;  	}  }  
Magic Number,SensorTag.Controls,ScrollingGraph,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,UpdateChart,The following statement contains a magic number: foreach (double v in values) {  	Path lineGraph = GetOrCreateActiveLineGraph ();  	Path shadowLineGraph = GetOrCreateActiveShadowLineGraph ();  	if (lineGraph.Data == null) {  		lineGraph.Data = new PathGeometry ();  	}  	if (shadowLineGraph.Data == null) {  		shadowLineGraph.Data = new PathGeometry ();  	}  	modified.Add (lineGraph);  	modified.Add (shadowLineGraph);  	PathGeometry g = (PathGeometry)lineGraph.Data;  	PathGeometry sg = (PathGeometry)shadowLineGraph.Data;  	PathFigure f = g.Figures.FirstOrDefault ();  	PathFigure sf = sg.Figures.FirstOrDefault ();  	Point minLabelPos = new Point (-100' 0);  	Point maxLabelPos = new Point (-100' 0);  	Point minLabelConnector = new Point (-100' 0);  	Point maxLabelConnector = new Point (-100' 0);  	double height = graphSize.Height;  	double min = this.Minimum;  	double max = this.Maximum;  	double range = (max - min);  	if (range == 0)  		range = 1;  	// add the new values to the path  	double value = v;  	double y = height - ((value - min) * height / range);  	if (f == null) {  		f = new PathFigure () {  			StartPoint = new Point (x' y)'  			IsFilled = false'  			IsClosed = false  		};  		g.Figures.Add (f);  	}  	else {  		f.Segments.Add (new LineSegment () {  			Point = new Point (x' y)  		});  	}  	// shadow  	if (sf == null) {  		sf = new PathFigure () {  			StartPoint = new Point (x + shadowXOffset' y + shadowYOffset)'  			IsFilled = false'  			IsClosed = false  		};  		sg.Figures.Add (sf);  	}  	else {  		sf.Segments.Add (new LineSegment () {  			Point = new Point (x + shadowXOffset' y + shadowYOffset)  		});  	}  	x++;  	totalX++;  	if (f.Segments.Count > MaxLineGraphLength) {  		x = 0;  		activeLineGraph = null;  		activeShadowLineGraph = null;  	}  }  
Magic Number,SensorTag.Controls,RectExtensions,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,Center,The following statement contains a magic number: return new Point (r.Left + (r.Width / 2)' r.Top + (r.Height / 2));  
Magic Number,SensorTag.Controls,RectExtensions,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\ScrollingGraph.xaml.cs,Center,The following statement contains a magic number: return new Point (r.Left + (r.Width / 2)' r.Top + (r.Height / 2));  
Magic Number,SensorTag.Controls,TiltContentControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\TiltContentControl.cs,StartTilt,The following statement contains a magic number: if (_presenter != null && _planeProjection == null) {  	_planeProjection = new PlaneProjection ();  	_presenter.Projection = _planeProjection;  	_tiltUpStoryboard = new Storyboard ();  	_tiltUpStoryboard.Completed += new EventHandler<object> (TiltUpCompleted);  	PowerEase ease = new PowerEase ();  	ease.Power = 2;  	Duration duration = TiltUpAnimationDuration;  	DoubleAnimation tiltUpRotateXAnimation = new DoubleAnimation ();  	Storyboard.SetTarget (tiltUpRotateXAnimation' _planeProjection);  	Storyboard.SetTargetProperty (tiltUpRotateXAnimation' "RotationX");  	tiltUpRotateXAnimation.To = 0;  	tiltUpRotateXAnimation.EasingFunction = ease;  	tiltUpRotateXAnimation.Duration = duration;  	DoubleAnimation tiltUpRotateYAnimation = new DoubleAnimation ();  	Storyboard.SetTarget (tiltUpRotateYAnimation' _planeProjection);  	Storyboard.SetTargetProperty (tiltUpRotateYAnimation' "RotationY");  	tiltUpRotateYAnimation.To = 0;  	tiltUpRotateYAnimation.EasingFunction = ease;  	tiltUpRotateYAnimation.Duration = duration;  	DoubleAnimation tiltUpOffsetZAnimation = new DoubleAnimation ();  	Storyboard.SetTarget (tiltUpOffsetZAnimation' _planeProjection);  	Storyboard.SetTargetProperty (tiltUpOffsetZAnimation' "GlobalOffsetZ");  	tiltUpOffsetZAnimation.To = 0;  	tiltUpOffsetZAnimation.EasingFunction = ease;  	tiltUpOffsetZAnimation.Duration = duration;  	_tiltUpStoryboard.Children.Add (tiltUpRotateXAnimation);  	_tiltUpStoryboard.Children.Add (tiltUpRotateYAnimation);  	_tiltUpStoryboard.Children.Add (tiltUpOffsetZAnimation);  }  
Magic Number,SensorTag.Controls,TiltContentControl,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Controls\TiltContentControl.cs,StartTilt,The following statement contains a magic number: ease.Power = 2;  
Magic Number,SensorTag,ConversionExtensions,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Helpers\ConversionExtensions.cs,ToFahrenheit,The following statement contains a magic number: return 32.0 + (celcius * 9) / 5;  
Magic Number,SensorTag,ConversionExtensions,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Helpers\ConversionExtensions.cs,ToFahrenheit,The following statement contains a magic number: return 32.0 + (celcius * 9) / 5;  
Magic Number,SensorTag,ConversionExtensions,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Helpers\ConversionExtensions.cs,ToFahrenheit,The following statement contains a magic number: return 32.0 + (celcius * 9) / 5;  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: try {  	if (sensor.Version == 1) {  		await sensor.Accelerometer.StartReading ();  		sensor.Accelerometer.AccelerometerMeasurementValueChanged += OnAccelerometerMeasurementValueChanged;  		period = await sensor.Accelerometer.GetPeriod ();  	}  	else if (sensor.Version == 2) {  		await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  		period = await sensor.Movement.GetPeriod ();  	}  	SetSensitivity (period.Value);  	ShowMessage ("");  }  catch (Exception ex) {  	ShowMessage (ex.Message);  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Version == 1) {  	await sensor.Accelerometer.StartReading ();  	sensor.Accelerometer.AccelerometerMeasurementValueChanged += OnAccelerometerMeasurementValueChanged;  	period = await sensor.Accelerometer.GetPeriod ();  }  else if (sensor.Version == 2) {  	await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	period = await sensor.Movement.GetPeriod ();  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Version == 2) {  	await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	period = await sensor.Movement.GetPeriod ();  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (30);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (30);  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (visible) {  	if (sensor.Version == 1) {  		sensor.Accelerometer.AccelerometerMeasurementValueChanged += OnAccelerometerMeasurementValueChanged;  		await sensor.Accelerometer.StartReading ();  	}  	else if (sensor.Version == 2) {  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  		await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  	}  }  else {  	if (sensor.Version == 1) {  		sensor.Accelerometer.AccelerometerMeasurementValueChanged -= OnAccelerometerMeasurementValueChanged;  		await sensor.Accelerometer.StopReading ();  	}  	else if (sensor.Version == 2) {  		sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  		await sensor.Movement.StopReading ();  	}  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (visible) {  	if (sensor.Version == 1) {  		sensor.Accelerometer.AccelerometerMeasurementValueChanged += OnAccelerometerMeasurementValueChanged;  		await sensor.Accelerometer.StartReading ();  	}  	else if (sensor.Version == 2) {  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  		await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  	}  }  else {  	if (sensor.Version == 1) {  		sensor.Accelerometer.AccelerometerMeasurementValueChanged -= OnAccelerometerMeasurementValueChanged;  		await sensor.Accelerometer.StopReading ();  	}  	else if (sensor.Version == 2) {  		sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  		await sensor.Movement.StopReading ();  	}  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (sensor.Version == 1) {  	sensor.Accelerometer.AccelerometerMeasurementValueChanged += OnAccelerometerMeasurementValueChanged;  	await sensor.Accelerometer.StartReading ();  }  else if (sensor.Version == 2) {  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (sensor.Version == 2) {  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	await sensor.Movement.StartReading (MovementFlags.Accel2G | MovementFlags.AccelX | MovementFlags.AccelY | MovementFlags.AccelZ);  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (sensor.Version == 1) {  	sensor.Accelerometer.AccelerometerMeasurementValueChanged -= OnAccelerometerMeasurementValueChanged;  	await sensor.Accelerometer.StopReading ();  }  else if (sensor.Version == 2) {  	sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  	await sensor.Movement.StopReading ();  }  
Magic Number,SensorTag.Pages,AccelerometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\AccelerometerPage.xaml.cs,OnVisibilityChanged,The following statement contains a magic number: if (sensor.Version == 2) {  	sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  	await sensor.Movement.StopReading ();  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,RegisterEvents,The following statement contains a magic number: if (sensor.Version == 2) {  	await RegisterMovement (register);  	await RegisterLightIntensity (register);  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,Fahrenheit,The following statement contains a magic number: return celcius * 1.8 + 32.0;  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,Fahrenheit,The following statement contains a magic number: return celcius * 1.8 + 32.0;  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.AccelX' 3) + "'" + Math.Round (m.AccelY' 3) + "'" + Math.Round (m.AccelZ' 3);  	GetTile ("Accelerometer").SensorValue = caption;  	caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  	GetTile ("Gyroscope").SensorValue = caption;  	caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.GyroX' 3) + "'" + Math.Round (m.GyroY' 3) + "'" + Math.Round (m.GyroZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: caption = Math.Round (m.MagX' 3) + "'" + Math.Round (m.MagY' 3) + "'" + Math.Round (m.MagZ' 3);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMagnetometerMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.X' 3) + "'" + Math.Round (m.Y' 3) + "'" + Math.Round (m.Z' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMagnetometerMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.X' 3) + "'" + Math.Round (m.Y' 3) + "'" + Math.Round (m.Z' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,OnMagnetometerMeasurementValueChanged,The following statement contains a magic number: try {  	var m = e.Measurement;  	string caption = Math.Round (m.X' 3) + "'" + Math.Round (m.Y' 3) + "'" + Math.Round (m.Z' 3);  	GetTile ("Magnetometer").SensorValue = caption;  	connected = true;  }  catch {  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: try {  	if (sensor == null) {  		// no paired SensorTag' tell the user   		DisplayMessage ("This page should be navigated to with a SensorTag parameter");  		return;  	}  	if (connecting) {  		return;  	}  	connecting = true;  	if (sensor.Connected || await sensor.ConnectAsync ()) {  		connected = true;  		await RegisterEvents (true);  		if (sensor.Accelerometer != null) {  			await sensor.Accelerometer.SetPeriod (1000);  			// save battery  		}  		if (sensor.Movement != null) {  			await sensor.Movement.SetPeriod (1000);  			// save battery  		}  		SensorList.ItemsSource = tiles;  	}  }  catch (Exception ex) {  	DisplayMessage ("Connect failed' please ensure sensor is on and is not in use on another machine.");  	Debug.WriteLine (ex.Message);  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: try {  	if (sensor == null) {  		// no paired SensorTag' tell the user   		DisplayMessage ("This page should be navigated to with a SensorTag parameter");  		return;  	}  	if (connecting) {  		return;  	}  	connecting = true;  	if (sensor.Connected || await sensor.ConnectAsync ()) {  		connected = true;  		await RegisterEvents (true);  		if (sensor.Accelerometer != null) {  			await sensor.Accelerometer.SetPeriod (1000);  			// save battery  		}  		if (sensor.Movement != null) {  			await sensor.Movement.SetPeriod (1000);  			// save battery  		}  		SensorList.ItemsSource = tiles;  	}  }  catch (Exception ex) {  	DisplayMessage ("Connect failed' please ensure sensor is on and is not in use on another machine.");  	Debug.WriteLine (ex.Message);  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: if (sensor.Connected || await sensor.ConnectAsync ()) {  	connected = true;  	await RegisterEvents (true);  	if (sensor.Accelerometer != null) {  		await sensor.Accelerometer.SetPeriod (1000);  		// save battery  	}  	if (sensor.Movement != null) {  		await sensor.Movement.SetPeriod (1000);  		// save battery  	}  	SensorList.ItemsSource = tiles;  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: if (sensor.Connected || await sensor.ConnectAsync ()) {  	connected = true;  	await RegisterEvents (true);  	if (sensor.Accelerometer != null) {  		await sensor.Accelerometer.SetPeriod (1000);  		// save battery  	}  	if (sensor.Movement != null) {  		await sensor.Movement.SetPeriod (1000);  		// save battery  	}  	SensorList.ItemsSource = tiles;  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: if (sensor.Accelerometer != null) {  	await sensor.Accelerometer.SetPeriod (1000);  	// save battery  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: await sensor.Accelerometer.SetPeriod (1000);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: if (sensor.Movement != null) {  	await sensor.Movement.SetPeriod (1000);  	// save battery  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,ConnectSensors,The following statement contains a magic number: await sensor.Movement.SetPeriod (1000);  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromSeconds (10);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromSeconds (10);  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: try {  	// gives us rotational movement every second  	if (sensor.Gyroscope != null) {  		await sensor.Gyroscope.StartReading (GyroscopeAxes.XYZ);  		await sensor.Magnetometer.StartReading ();  		sensor.Gyroscope.GyroscopeMeasurementValueChanged += Gyroscope_GyroscopeMeasurementValueChanged;  		// use the magnetometer for absolute position  		sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  		sensor.Magnetometer.SetPeriod (100);  		// fastest reading  	}  	else if (sensor.Movement != null) {  		await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ);  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  		await sensor.Movement.SetPeriod (100);  		// fast reading  	}  	ShowMessage ("");  }  catch (Exception ex) {  	ShowMessage (ex.Message);  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: try {  	// gives us rotational movement every second  	if (sensor.Gyroscope != null) {  		await sensor.Gyroscope.StartReading (GyroscopeAxes.XYZ);  		await sensor.Magnetometer.StartReading ();  		sensor.Gyroscope.GyroscopeMeasurementValueChanged += Gyroscope_GyroscopeMeasurementValueChanged;  		// use the magnetometer for absolute position  		sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  		sensor.Magnetometer.SetPeriod (100);  		// fastest reading  	}  	else if (sensor.Movement != null) {  		await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ);  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  		await sensor.Movement.SetPeriod (100);  		// fast reading  	}  	ShowMessage ("");  }  catch (Exception ex) {  	ShowMessage (ex.Message);  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Gyroscope != null) {  	await sensor.Gyroscope.StartReading (GyroscopeAxes.XYZ);  	await sensor.Magnetometer.StartReading ();  	sensor.Gyroscope.GyroscopeMeasurementValueChanged += Gyroscope_GyroscopeMeasurementValueChanged;  	// use the magnetometer for absolute position  	sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  	sensor.Magnetometer.SetPeriod (100);  	// fastest reading  }  else if (sensor.Movement != null) {  	await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	await sensor.Movement.SetPeriod (100);  	// fast reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Gyroscope != null) {  	await sensor.Gyroscope.StartReading (GyroscopeAxes.XYZ);  	await sensor.Magnetometer.StartReading ();  	sensor.Gyroscope.GyroscopeMeasurementValueChanged += Gyroscope_GyroscopeMeasurementValueChanged;  	// use the magnetometer for absolute position  	sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  	sensor.Magnetometer.SetPeriod (100);  	// fastest reading  }  else if (sensor.Movement != null) {  	await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	await sensor.Movement.SetPeriod (100);  	// fast reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: sensor.Magnetometer.SetPeriod (100);  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Movement != null) {  	await sensor.Movement.StartReading (MovementFlags.Mag | MovementFlags.GyroX | MovementFlags.GyroY | MovementFlags.GyroZ);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	await sensor.Movement.SetPeriod (100);  	// fast reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: await sensor.Movement.SetPeriod (100);  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedFrom,The following statement contains a magic number: if (sensor.Gyroscope != null) {  	sensor.Gyroscope.GyroscopeMeasurementValueChanged -= Gyroscope_GyroscopeMeasurementValueChanged;  	sensor.Magnetometer.MagnetometerMeasurementValueChanged -= Magnetometer_MagnetometerMeasurementValueChanged;  	//sensor.Gyroscope.StopReading();  	sensor.Magnetometer.SetPeriod (1000);  	// slow reading  }  else if (sensor.Movement != null) {  	sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  	sensor.Movement.SetPeriod (1000);  	// slow reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedFrom,The following statement contains a magic number: if (sensor.Gyroscope != null) {  	sensor.Gyroscope.GyroscopeMeasurementValueChanged -= Gyroscope_GyroscopeMeasurementValueChanged;  	sensor.Magnetometer.MagnetometerMeasurementValueChanged -= Magnetometer_MagnetometerMeasurementValueChanged;  	//sensor.Gyroscope.StopReading();  	sensor.Magnetometer.SetPeriod (1000);  	// slow reading  }  else if (sensor.Movement != null) {  	sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  	sensor.Movement.SetPeriod (1000);  	// slow reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedFrom,The following statement contains a magic number: sensor.Magnetometer.SetPeriod (1000);  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedFrom,The following statement contains a magic number: if (sensor.Movement != null) {  	sensor.Movement.MovementMeasurementValueChanged -= OnMovementMeasurementValueChanged;  	sensor.Movement.SetPeriod (1000);  	// slow reading  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnNavigatedFrom,The following statement contains a magic number: sensor.Movement.SetPeriod (1000);  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.X) > MinimumMovement) {  	rx += measurement.X;  	speedX = 1d + Math.Min (3' Math.Abs (measurement.X / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.X) > MinimumMovement) {  	rx += measurement.X;  	speedX = 1d + Math.Min (3' Math.Abs (measurement.X / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedX = 1d + Math.Min (3' Math.Abs (measurement.X / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedX = 1d + Math.Min (3' Math.Abs (measurement.X / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.Y) > MinimumMovement) {  	ry += measurement.Y;  	speedY = 1d + Math.Min (3' Math.Abs (measurement.Y / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.Y) > MinimumMovement) {  	ry += measurement.Y;  	speedY = 1d + Math.Min (3' Math.Abs (measurement.Y / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedY = 1d + Math.Min (3' Math.Abs (measurement.Y / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedY = 1d + Math.Min (3' Math.Abs (measurement.Y / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.Z) > MinimumMovement) {  	rz += measurement.Z;  	speedZ = 1d + Math.Min (3' Math.Abs (measurement.Z / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (measurement.Z) > MinimumMovement) {  	rz += measurement.Z;  	speedZ = 1d + Math.Min (3' Math.Abs (measurement.Z / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedZ = 1d + Math.Min (3' Math.Abs (measurement.Z / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,Gyroscope_GyroscopeMeasurementValueChanged,The following statement contains a magic number: speedZ = 1d + Math.Min (3' Math.Abs (measurement.Z / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroX) > MinimumMovement) {  	rx += movement.MagX;  	speedX = 1d + Math.Min (3' Math.Abs (movement.MagX / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroX) > MinimumMovement) {  	rx += movement.MagX;  	speedX = 1d + Math.Min (3' Math.Abs (movement.MagX / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedX = 1d + Math.Min (3' Math.Abs (movement.MagX / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedX = 1d + Math.Min (3' Math.Abs (movement.MagX / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroY) > MinimumMovement) {  	ry += movement.MagY;  	speedY = 1d + Math.Min (3' Math.Abs (movement.MagY / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroY) > MinimumMovement) {  	ry += movement.MagY;  	speedY = 1d + Math.Min (3' Math.Abs (movement.MagY / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedY = 1d + Math.Min (3' Math.Abs (movement.MagY / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedY = 1d + Math.Min (3' Math.Abs (movement.MagY / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroZ) > MinimumMovement) {  	rz += movement.MagZ;  	speedZ = 1d + Math.Min (3' Math.Abs (movement.MagZ / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: if (Math.Abs (movement.GyroZ) > MinimumMovement) {  	rz += movement.MagZ;  	speedZ = 1d + Math.Min (3' Math.Abs (movement.MagZ / 10));  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedZ = 1d + Math.Min (3' Math.Abs (movement.MagZ / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,OnMovementMeasurementValueChanged,The following statement contains a magic number: speedZ = 1d + Math.Min (3' Math.Abs (movement.MagZ / 10));  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,StartTimer,The following statement contains a magic number: if (timer == null) {  	timer = new DispatcherTimer ();  	timer.Interval = TimeSpan.FromMilliseconds (30);  	timer.Tick += OnTimerTick;  	timer.Start ();  }  
Magic Number,SensorTag.Pages,GyroPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\GyroPage.xaml.cs,StartTimer,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds (30);  
Magic Number,SensorTag.Pages,HumidityPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\HumidityPage.xaml.cs,GetCaption,The following statement contains a magic number: return Math.Round (value' 2).ToString ();  
Magic Number,SensorTag.Pages,HumidityPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\HumidityPage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (30);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,HumidityPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\HumidityPage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (30);  
Magic Number,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,GetCaption,The following statement contains a magic number: return Math.Round (value' 2).ToString ();  
Magic Number,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (100);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (100);  
Magic Number,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,Fahrenheit,The following statement contains a magic number: return celcius * 1.8 + 32.0;  
Magic Number,SensorTag.Pages,TemperaturePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\IRTemperaturePage.xaml.cs,Fahrenheit,The following statement contains a magic number: return celcius * 1.8 + 32.0;  
Magic Number,SensorTag.Pages,LightPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\LightPage.xaml.cs,GetCaption,The following statement contains a magic number: return Math.Round (value' 2).ToString ();  
Magic Number,SensorTag.Pages,LightPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\LightPage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (30);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,LightPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\LightPage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (30);  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: try {  	if (sensor.Version == 1) {  		await sensor.Magnetometer.StartReading ();  		sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  	}  	else if (sensor.Version == 2) {  		await sensor.Movement.StartReading (MovementFlags.Mag);  		sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  	}  	ShowMessage ("");  }  catch (Exception ex) {  	ShowMessage (ex.Message);  }  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Version == 1) {  	await sensor.Magnetometer.StartReading ();  	sensor.Magnetometer.MagnetometerMeasurementValueChanged += Magnetometer_MagnetometerMeasurementValueChanged;  }  else if (sensor.Version == 2) {  	await sensor.Movement.StartReading (MovementFlags.Mag);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  }  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: if (sensor.Version == 2) {  	await sensor.Movement.StartReading (MovementFlags.Mag);  	sensor.Movement.MovementMeasurementValueChanged += OnMovementMeasurementValueChanged;  }  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,GetCaption,The following statement contains a magic number: return Math.Round (value' 2).ToString ();  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (100);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (100);  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnTimerTick,The following statement contains a magic number: AnimationHelper.BeginAnimation (XCompass' new DoubleAnimation () {  	Duration = new Duration (TimeSpan.FromMilliseconds (100))'  	To = xAngle'  	EnableDependentAnimation = true  }' "Angle"' null);  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnTimerTick,The following statement contains a magic number: AnimationHelper.BeginAnimation (YCompass' new DoubleAnimation () {  	Duration = new Duration (TimeSpan.FromMilliseconds (100))'  	To = yAngle'  	EnableDependentAnimation = true  }' "Angle"' null);  
Magic Number,SensorTag.Pages,MagnetometerPage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\MagnetometerPage.xaml.cs,OnTimerTick,The following statement contains a magic number: AnimationHelper.BeginAnimation (ZCompass' new DoubleAnimation () {  	Duration = new Duration (TimeSpan.FromMilliseconds (100))'  	To = zAngle'  	EnableDependentAnimation = true  }' "Angle"' null);  
Magic Number,SensorTag.Pages,PressurePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\PressurePage.xaml.cs,GetCaption,The following statement contains a magic number: return Math.Round (value' 2).ToString ();  
Magic Number,SensorTag.Pages,PressurePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\PressurePage.xaml.cs,StartTimer,The following statement contains a magic number: if (_timer == null) {  	_timer = new DispatcherTimer ();  	_timer.Interval = TimeSpan.FromMilliseconds (30);  	_timer.Tick += OnTimerTick;  	_timer.Start ();  }  
Magic Number,SensorTag.Pages,PressurePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\PressurePage.xaml.cs,StartTimer,The following statement contains a magic number: _timer.Interval = TimeSpan.FromMilliseconds (30);  
Missing Default,SensorTag.Pages,DevicePage,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SharedControls\Pages\DevicePage.xaml.cs,SelectTile,The following switch statement is missing a default case: switch (model.Caption) {  case "Barometer":  	frame.Navigate (typeof(PressurePage));  	break;  case "Accelerometer":  	frame.Navigate (typeof(AccelerometerPage));  	break;  case "Gyroscope":  	frame.Navigate (typeof(GyroPage));  	break;  case "Humidity":  	frame.Navigate (typeof(HumidityPage));  	break;  case "IR Temperature":  	frame.Navigate (typeof(TemperaturePage));  	break;  case "Magnetometer":  	frame.Navigate (typeof(MagnetometerPage));  	break;  case "Buttons":  	frame.Navigate (typeof(ButtonPage));  	break;  case "Light":  	frame.Navigate (typeof(LightPage));  	break;  }  
